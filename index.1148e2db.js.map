{"mappings":"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","sources":["src/scripts/Nails.js","src/scripts/StringArt.js","src/scripts/string_art_types/Spirals.js","src/scripts/string_art_types/Circle.js","src/scripts/string_art_types/Eye.js","src/scripts/pattern_types.js","src/scripts/string_art_types/TimesTables.js","src/scripts/string_art_types/Spiral.js","src/scripts/string_art_types/Star.js","src/scripts/string_art_types/Assymetry.js","src/scripts/editor/EditorControls.js","src/scripts/editor/EditorSizeControls.js","src/scripts/main.js","src/scripts/editor/Player.js"],"sourcesContent":["const PI2 = Math.PI * 2;\n\nexport default class Nails {\n    constructor(canvas, config) {\n        this.context = canvas.getContext(\"2d\");\n        this.setConfig(config);\n        this.nails = [];\n    }\n\n    setConfig({ nailRadius, darkMode}) {\n        this.nailRadius = nailRadius;\n        this.nailsColor = darkMode ? '#ffffff' : '#000000';\n        this.nails = [];\n    }\n\n    // Adds a nail to be rendered. nail: { point, number }\n    addNail(nail) {\n        this.nails.push(nail);\n    }\n\n    fill() {\n        this.context.globalCompositeOperation = \"source-over\";\n        this.context.beginPath();\n        this.nails.forEach(({ point: [x, y] }) => {\n            this.context.moveTo(x + this.nailRadius, y);\n            this.context.arc(x, y, this.nailRadius, 0, PI2)\n        });\n\n        this.context.fillStyle = this.nailsColor;\n        this.context.fill();\n\n        this.nails = [];\n    }\n}","import Nails from \"./Nails.js\";\n\nconst COLORS = {\n    dark: \"#171717\",\n    light: \"#ffffff\"\n};\n\nconst COMMON_CONFIG_CONTROLS = [\n    {\n        key: 'general',\n        label: 'General',\n        type: 'group',\n        children: [\n            {\n                key: 'showStrings',\n                label: 'Show strings',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showNails}) => !showNails\n            },\n            {\n                key: 'stringWidth',\n                label: 'String width',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 0.2,\n                    max: 4,\n                    step: 0.2\n                },\n                show: ({showStrings}) => showStrings\n            },\n            {\n                key: 'showNails',\n                label: 'Show nails',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showStrings}) => !showStrings\n            },\n            {\n                key: 'nailRadius',\n                label: 'Nail size',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 0.5,\n                    max: 5,\n                    step: 0.25\n                },\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'margin',\n                label: 'Margin',\n                defaultValue: 20,\n                type: \"number\",\n                attr: {\n                    min: 0,\n                    max: 500,\n                    step: 1\n                },\n                displayValue: ({margin}) => `${margin}px`\n            }\n        ]\n    },\n    {\n        key: 'theme',\n        label: 'Theme',\n        type: 'group',\n        children: [\n            {\n                key: 'darkMode',\n                label: 'Dark mode',\n                defaultValue: true,\n                type: 'checkbox'\n            },\n            {\n                key: 'customBackgroundColor',\n                label: 'Custom background color',\n                defaultValue: false,\n                type: 'checkbox',\n            },\n            {\n                key: 'backgroundColor',\n                label: 'Background color',\n                defaultValue: COLORS.dark,\n                type: 'color',\n                show: ({customBackgroundColor}) => customBackgroundColor\n            },\n        ]\n    }\n];\n\nclass StringArt {\n    constructor(canvas) {\n        if (!canvas) {\n            throw new Error(\"Canvas not specified!\");\n        }\n\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        const dpr = window.devicePixelRatio || 1;\n        const bsr = this.ctx.webkitBackingStorePixelRatio ||\n            this.ctx.mozBackingStorePixelRatio ||\n            this.ctx.msBackingStorePixelRatio ||\n            this.ctx.oBackingStorePixelRatio ||\n            this.ctx.backingStorePixelRatio || 1;\n        this.pixelRatio = dpr / bsr;\n    }\n\n    get configControls() {\n        return (this.controls ?? []).concat(COMMON_CONFIG_CONTROLS);\n    }\n\n    get defaultConfig() {\n        if (!this._defaultConfig) {\n            this._defaultConfig = flattenConfig(this.configControls);\n        }\n\n        return this._defaultConfig;\n    }\n\n    get config() {\n        return this._config ?? this.defaultConfig;\n    }\n\n    set config(value) {\n        this._config = Object.assign({}, this.defaultConfig, value);\n    }\n\n    getSize() {\n        const canvasScreenSize = [this.canvas.clientWidth, this.canvas.clientHeight];\n        return canvasScreenSize.map(v => v * this.pixelRatio);\n    }\n\n    setUpDraw() {\n        this.canvas.removeAttribute('width');\n        this.canvas.removeAttribute('height');\n        const [width, height] = this.size = this.getSize();\n        Object.assign(this, this.size);\n        this.canvas.setAttribute('width', width);\n        this.canvas.setAttribute('height', height);\n        this.center = this.size.map(value => value / 2);\n\n        if (this.nails) {\n            this.nails.setConfig(this.config);\n        } else {\n            this.nails = new Nails(this.canvas, this.config);\n        }\n\n        this.ctx.clearRect(0, 0, ...this.size);\n        this.ctx.lineWidth = this.config.stringWidth;\n    }\n\n    afterDraw() {\n        if (this.config.showNails) {\n            this.drawNails();\n            this.nails.fill();\n        }\n    }\n\n    initDraw() {\n        this.setUpDraw(this.config);\n        const { showNails, darkMode, backgroundColor, customBackgroundColor } = this.config;\n\n        this.ctx.beginPath();\n        this.ctx.globalCompositeOperation = 'destination-over';\n        this.ctx.fillStyle = customBackgroundColor ? backgroundColor : darkMode ? COLORS.dark : COLORS.light;\n        this.ctx.fillRect(0, 0, ...this.size);\n\n        this.ctx.globalCompositeOperation = 'source-over';\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill();\n        }\n    }\n\n    /**\n     * Draws the string art on canvas\n     * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n     */\n    draw({position = Infinity} = {}) {\n        this.initDraw();\n        const { showStrings } = this.config;\n\n        if (showStrings) {\n            this.stringsIterator = this.generateStrings();\n            this.position = 0;\n\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        }\n    }\n\n    goto(position) {\n        if (position === this.position) {\n            return;\n        }\n\n        if (this.stringsIterator && position > this.position) {\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        } else {\n            this.draw({ position });\n        }\n    }\n\n    drawNext() {\n        const result = this.stringsIterator.next();\n\n        if (result.done) {\n            this.afterDraw();\n        } else {\n            this.position++;\n        }\n\n        return result;\n    }\n\n    generateStrings() {\n        throw new Error(\"generateStrings method not defined!\");\n    }\n\n    getStepCount() {\n        throw new Error(`'getStepCount' method not implemented for string art type \"${this.name}\"`);\n    }\n}\n\nfunction flattenConfig(configControls) {\n    return configControls.reduce((config, {key, defaultValue, children}) =>\n        children ? {\n            ...config,\n            ...flattenConfig(children)\n        } : {\n            ...config,\n            [key]: defaultValue\n        },\n    {});\n}\n\nexport default StringArt;\n","import StringArt from \"../StringArt.js\";\n\nclass Spirals extends StringArt{\n    name = \"Spirals\";\n    id = \"spirals\";\n    link = \"https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 92,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'radiusIncrease',\n            label: 'Size',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 0.2\n            }\n        },\n        {\n            key: 'angleStep',\n            label: 'Angle step',\n            defaultValue: 0.05,\n            type: \"range\",\n            attr: {\n                min: 0.01,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'nSpirals',\n            label: 'Number of spirals',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'String color',\n            defaultValue: \"#00ddff\",\n            type: \"color\",\n        }\n    ];\n    \n    *generatePoints() {\n        const {\n            n, radiusIncrease, angleStep, nSpirals,\n        } = this.config;\n        \n        let currentRadius = 0;\n        let angle = 0;\n        const [centerx, centery] = this.center;\n\n        for (let i = 0; i < n; i++) {\n            for (let s = 0; s < nSpirals; s++) {\n                const rotation = s * 2 * Math.PI / nSpirals;\n                const point = [\n                    centerx + currentRadius * Math.sin(angle + rotation),\n                    centery + currentRadius * Math.cos(angle + rotation)\n                ];\n                yield point;\n            }\n            \n            angle += angleStep;\n            currentRadius += radiusIncrease;\n        }\n    }\n\n    *generateStrings() {\n        const points = this.generatePoints();\n        let index = 0;\n        this.ctx.beginPath();\n        this.ctx.moveTo(...this.center);\n        this.ctx.strokeStyle = this.config.color;\n\n        let lastPoint = this.center;\n\n        for (const point of points) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...lastPoint);\n            lastPoint = point;\n            this.ctx.lineTo(...point);\n            this.ctx.strokeStyle = this.config.color;\n            this.ctx.stroke();\n            yield index++;\n        }\n    }\n\n    getStepCount() {\n        const { n, nSpirals } = this.config;\n        return n * nSpirals;\n    }\n\n    drawNails() {\n        const points = this.generatePoints();\n        let index = 0;\n        for (const point of points) {\n            this.nails.addNail({point, number: `${index++}`});\n        }\n    }\n}\n\nexport default Spirals;","const PI2 = Math.PI * 2;\n\nexport default class Circle {\n    constructor(config) {\n        const { n, size, margin = 0, rotation = 0, center } = this.config = config;\n        \n        this.center = center ?? size.map(v => v / 2);\n        this.radius = Math.min(...this.center) - margin;\n\n        this.indexAngle = PI2 / n;\n        this.rotationAngle = -PI2 * rotation;\n    }\n\n    getPoint(index = 0) {\n        return [\n            this.center[0] + Math.sin(index * this.indexAngle + this.rotationAngle) * this.radius,\n            this.center[1] + Math.cos(index * this.indexAngle + this.rotationAngle) * this.radius\n        ];\n    }\n\n    drawNails(nails) {\n        for (let i=0; i < this.config.n; i++) {\n            nails.addNail({point: this.getPoint(i)});\n        }\n    }\n}","import StringArt from \"../StringArt.js\";\n\nconst MARGIN = 20;\nconst SIDES = ['left', 'bottom', 'right', 'top'];\nconst SIDES_ORDER = ['left', 'bottom', 'right', 'top'];\n\nconst SIDES_ROTATION = {\n    left: 0,\n    bottom: Math.PI / 2,\n    right: Math.PI,\n    top: Math.PI * 1.5\n};\n\nclass Eye extends StringArt{\n    name = \"Eye\"\n    id = \"eye\"\n    link = \"https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails per side',\n            defaultValue: 82,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'angle',\n            label: 'Layer angle',\n            defaultValue: 30,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 45,\n                step: 1\n            }\n        },\n        {\n            key: 'color1',\n            label: 'String #1 color',\n            defaultValue: \"#11e8bd\",\n            type: \"color\",\n        },\n        {\n            key: 'color2',\n            label: 'String #2 color',\n            defaultValue: \"#6fff52\",\n            type: \"color\",\n        },\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n\n        const { n, angle } = this.config;\n\n        this.maxSize = Math.min(...this.size) - 2 * MARGIN;\n        this.nailSpacing = this.maxSize / (n - 1);\n        this.layerAngle = angle * Math.PI / 180;\n    }\n\n    // Sides: top, right, bottom, left\n    getPoint({index, angle, layerStart, rotation}) {\n        const theta = angle + rotation;\n\n        const point = { \n            x: layerStart.x, \n            y: layerStart.y + this.nailSpacing * index\n        };\n\n        const pivot = { x: this.center[0], y: this.center[1] };\n\n        const cosAngle = Math.cos(theta);\n        const sinAngle = Math.sin(theta);\n\n        const position = [\n            (cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x),\n            (sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y),\n        ];\n        return position;\n    }\n\n    *drawSide({ side, color = '#ffffff', angle, size, layerStart }) {\n        const sideIndex = SIDES.indexOf(side);\n        const nextSide = SIDES[sideIndex === SIDES.length - 1 ? 0 : sideIndex + 1];\n        const rotation = SIDES_ROTATION[side];\n        const nextSideRotation = SIDES_ROTATION[nextSide];\n        const nLayer = Math.floor(size / this.nailSpacing);\n        \n        const sideProps = { nLayer, size, layerStart, angle };\n        \n        for(let i=0; i <= nLayer; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...this.getPoint({ side, index: i, rotation, ...sideProps}));\n            this.ctx.lineTo(...this.getPoint({side: nextSide, index: i, rotation: nextSideRotation, ...sideProps}));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            yield i;\n        }\n    }\n\n    *drawLayer(layer) {\n        const { color1, color2 } = this.config;\n        const colors = [color2, color1, color2, color1];\n        const layerAngle = this.layerAngle * layer;\n        const layerSize = this.maxSize / Math.pow(Math.cos(this.layerAngle) + Math.sin(this.layerAngle), layer);\n        const layerStart = { \n            x: this.center[0] - layerSize / 2, \n            y: this.center[1] - layerSize / 2\n        };\n\n        for (let i = 0; i < SIDES.length; i++) {\n            yield* this.drawSide({ \n                color: colors[i], \n                side: SIDES_ORDER[i],\n                angle: layerAngle,\n                size: layerSize,\n                layerStart,\n            });\n        }\n    }\n\n    *generateStrings() {\n        const {layers} =  this.config;\n        for(let layer=layers - 1; layer >= 0; layer--) {\n            yield* this.drawLayer(layer);\n        }\n    }\n\n    getStepCount() {\n        let count = 0;\n        const {layers, angle, n} = this.config;\n        const layerAngle = angle * Math.PI / 180;\n        const maxSize = Math.min(this.canvas.clientWidth, this.canvas.clientHeight) - 2 * MARGIN;\n        const nailSpacing = maxSize / (n - 1);\n\n        for(let layer = 0; layer < layers; layer++) {\n            const layerSize = maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n            count += 4 * (Math.floor(layerSize / nailSpacing) + 1)\n        }\n\n        return count;\n    }\n\n    drawNails() {\n        const {n} = this.config;\n\n        for(let i=0; i < 4; i++) {\n            const side = SIDES[i];\n            for (let nail = 0; nail < n; nail++) {\n               //this.nails.addNail({ point: this.getPoint({ side, index: nail })})\n            }\n        }\n    }\n}\n\nexport default Eye;","import Spirals from \"./string_art_types/Spirals.js\";\nimport Spiral from './string_art_types/Spiral.js';\nimport Eye from './string_art_types/Eye.js';\nimport TimesTables from './string_art_types/TimesTables.js';\nimport Star from \"./string_art_types/Star.js\";\nimport Assymetry from \"./string_art_types/Assymetry.js\";\n\nconst patternTypes = [TimesTables, Spirals, Spiral, Eye, Star, Assymetry];\n\nexport default patternTypes;\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nconst MARGIN = 20;\n\nexport default class TimesTables extends StringArt{\n    name = \"Times Tables\";\n    id = \"times_tables\";\n    link = \"https://www.youtube.com/watch?v=LWin7w9hF-E&ab_channel=Jorgedelatierra\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 180,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 240,\n                step: 1\n            }\n        },\n        {\n            key: 'base',\n            label: 'Multiplication',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 99,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 7,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'multicolor',\n                    label: 'Use multiple colors',\n                    defaultValue: true,\n                    type: \"checkbox\",\n                },\n                {\n                    key: 'multicolorRange',\n                    label: 'Multicolor range',\n                    defaultValue: 180,\n                    type: \"range\",\n                    attr: {\n                        min: 1,\n                        max: 360,\n                        step: 1\n                    },\n                    show: ({multicolor}) => multicolor,\n                },\n                {\n                    key: 'multicolorStart',\n                    label: 'Multicolor start',\n                    defaultValue: 256,\n                    type: \"range\",\n                    attr: {\n                        min: 0,\n                        max: 360,\n                        step: 1\n                    },\n                    show: ({multicolor}) => multicolor,\n                },\n                {\n                    key: 'color',\n                    label: 'String color',\n                    defaultValue: \"#ff4d00\",\n                    type: \"color\",\n                    show: ({multicolor}) => !multicolor\n                },\n            ]\n        },\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, layers} = this.config;\n            const extraNails = n % layers;\n            this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const {layers, multicolorRange} = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: this.n,\n            margin: MARGIN\n        });\n        this.multiColorStep = multicolorRange / layers;\n        this.layerShift = Math.floor(this.n / layers);\n    }\n\n    *drawTimesTable({ shift = 0, color = \"#f00\", steps, time }) {\n        const {base} = this.config;\n        const n = this.n;\n        const stepsToRender = steps ?? n;\n\n        let point = this.circle.getPoint(shift);\n\n        for(let i=1; i <= stepsToRender; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            point = this.circle.getPoint(i + shift);\n            this.ctx.lineTo(...point);\n            const toIndex = (i * base) % n;\n            this.ctx.lineTo(...this.circle.getPoint(toIndex + shift));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            \n            yield { instructions: `${i - 1} → ${i} → ${toIndex} → ${i}`, index: time * n + i };\n        }\n    }\n\n    *generateStrings() {\n        const {color, multicolor, layers} = this.config;\n\n        for(let time = 0; time < layers; time++) {\n            const timeColor = multicolor ? this.getTimeColor(time, layers) : color;\n            yield* this.drawTimesTable({ \n                time,\n                color: timeColor, \n                shift: this.layerShift * time,\n            });\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n\n    getTimeColor(time) {\n        const {multicolorStart, darkMode} = this.config;\n\n        return `hsl(${multicolorStart + time * this.multiColorStep}, 80%, ${darkMode ? 50 : 40}%)`;\n    }\n\n    getStepCount() {\n        return this.config.layers * this.n;\n    }\n}\n            ","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Spiral extends StringArt{\n    id = \"spiral\";\n    name = \"Spiral\";\n    link = \"https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 144,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 60,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 72,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 144,\n                step: 1,\n            }\n        },\n        {\n            key: 'rotation',\n            label: 'Rotation',\n            defaultValue: 0.49,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 9,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'layerSpread',\n            label: 'Layer spread',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'multicolorRange',\n                    label: 'Multicolor range',\n                    defaultValue: 216,\n                    type: \"range\",\n                    attr: {\n                        min: 1,\n                        max: 360,\n                        step: 1\n                    },\n                },\n                {\n                    key: 'multicolorStart',\n                    label: 'Multicolor start',\n                    defaultValue: 263,\n                    type: \"range\",\n                    attr: {\n                        min: 0,\n                        max: 360,\n                        step: 1\n                    },\n                },\n                {\n                    key: 'multicolorByLightness',\n                    label: 'Multicolor by lightness',\n                    defaultValue: true,\n                    type: 'checkbox'\n                }\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        const { n, rotation } = this.config;\n\n        this.circle = new Circle({\n            size: this.size,\n            n,\n            rotation,\n            margin: 20,\n        });\n        const {layers, multicolorRange, multicolorByLightness, layerSpread} = this.config;\n        this.multiColorStep = multicolorRange / layers;\n        this.multiColorLightnessStep = multicolorByLightness ? 100 / layers : 1;\n        this.layerShift = layerSpread;\n    }\n\n    *drawSpiral({ shift = 0, color = \"#f00\" } = {}) {\n        const {repetition, innerLength} = this.config;\n        \n        this.ctx.moveTo(...this.circle.getPoint(shift));\n        \n        let currentInnerLength = innerLength;\n        let repetitionCount = 0;\n        this.ctx.strokeStyle = color;\n        \n        for(let i=0; currentInnerLength; i++) {\n            this.ctx.beginPath();\n            this.ctx.lineTo(...this.circle.getPoint(i + currentInnerLength + shift));\n            this.ctx.lineTo(...this.circle.getPoint(i + 1 + shift));\n            this.ctx.stroke();\n\n            repetitionCount++;\n            if (repetitionCount === repetition) {\n                currentInnerLength--;\n                repetitionCount = 0;\n            }\n\n            yield i;\n        }\n      \n    }\n\n    *generateStrings() {\n        const { layers } = this.config;\n        for(let layer = 0; layer < layers; layer++) {\n            yield* this.drawSpiral({ \n                color: this.getLayerColor(layer), \n                shift: -this.layerShift * layer \n            });\n        }\n    }\n\n    getLayerColor(layer) {\n        const {multicolorStart, darkMode, multicolorByLightness} = this.config;\n        const lightness = multicolorByLightness ? this.multiColorLightnessStep * layer : darkMode ? 50 : 40;\n\n        return `hsl(${multicolorStart + layer * this.multiColorStep}, 80%, ${lightness}%)`;\n    }\n\n    getStepCount() {\n        const {innerLength, repetition, layers} = this.config;\n        return layers * innerLength * repetition;\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n}","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Star extends StringArt{\n    name = \"Star\";\n    id = \"star\";\n    link = \"https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj\";\n    controls = [\n        {\n            key: 'sides',\n            label: 'Sides',\n            defaultValue: 3,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'sideNails',\n            label: 'Nails per side',\n            defaultValue: 40,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'rotation',\n            label: 'Rotation',\n            defaultValue: 0,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'innerColor',\n                    label: 'Star color',\n                    defaultValue: \"#2ec0ff\",\n                    type: \"color\",\n                },\n                {\n                    key: 'outterColor',\n                    label: 'Outter color',\n                    defaultValue: \"#2a82c6\",\n                    type: \"color\",\n                },\n            ]\n        }\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, sides} = this.config;\n            const extraNails = n % sides;\n            this._n = n - extraNails;\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const { sides, rotation, sideNails, margin = 0 } = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: sideNails * sides,\n            margin,\n            rotation,\n        });\n\n        this.sideAngle = Math.PI * 2 / sides;\n        this.nailSpacing = this.circle.radius / sideNails;\n        this.starCenterStart = (sideNails % 1) * this.nailSpacing;\n\n        this.sides = new Array(sides).fill(null).map((_, side) => {\n            const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n            const circlePointsStart = side * sideNails;\n\n            return {\n                sinSideAngle: Math.sin(sideAngle),\n                cosSideAngle: Math.cos(sideAngle),\n                circlePointsStart,\n                circlePointsEnd: circlePointsStart + sideNails\n            };\n        });\n    }\n\n    getStarPoint({ side, sideIndex }) {\n        const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n        const {sinSideAngle, cosSideAngle} = this.sides[side];\n        const [centerX, centerY] = this.circle.center;\n\n        return [\n            centerX + sinSideAngle * radius,\n            centerY + cosSideAngle * radius\n        ];\n    }\n\n    *generateStarPoints({ reverseOrder  = false} = {}) {\n        const {sides, sideNails} = this.config;\n\n        for (let side = 0; side < sides; side++) {\n            const prevSide = side === 0 ? sides - 1 : side - 1;\n            for (let i=0; i < sideNails; i++) {\n                const sideIndex = reverseOrder ? sideNails - i : i;\n                yield { side, prevSide, sideIndex, point: this.getStarPoint({ side, sideIndex }) };\n            }\n        }\n    }\n\n    *drawStar() {\n        const {innerColor, sideNails} = this.config;\n\n        this.ctx.strokeStyle = innerColor;\n        let prevPoint;\n\n        for (const { prevSide, sideIndex, point} of this.generateStarPoints()) {\n            this.ctx.beginPath();\n\n            if (sideIndex && !(sideIndex % 2)) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...point);\n            } else {\n                this.ctx.moveTo(...point);\n            }\n\n            const prevSideIndex = sideNails - sideIndex;\n            this.ctx.lineTo(...this.getStarPoint({ side: prevSide, sideIndex: prevSideIndex}))\n            prevPoint = point;\n            this.ctx.stroke();\n            yield;\n        }\n    }\n\n    *drawCircle() {\n        const {outterColor} = this.config;\n\n        let prevCirclePoint;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = outterColor;\n        for (const { side, prevSide, sideIndex, point} of this.generateStarPoints({ reverseOrder: true })) {\n            this.ctx.beginPath();\n            if (!prevCirclePoint) {\n                prevCirclePoint = this.circle.getPoint(this.sides[prevSide].circlePointsStart);\n            }\n\n            this.ctx.moveTo(...prevCirclePoint);\n\n            this.ctx.lineTo(...point);\n            this.ctx.stroke();\n\n            yield;\n\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            const nextPointIndex = isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex\n                : this.sides[side].circlePointsStart + sideIndex;\n\n            const nextPoint = this.circle.getPoint(nextPointIndex);\n            this.ctx.lineTo(...nextPoint);\n\n            prevCirclePoint = this.circle.getPoint(isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex + 1\n                : this.sides[side].circlePointsStart + sideIndex - 1);\n\n            this.ctx.lineTo(...prevCirclePoint);\n\n            this.ctx.stroke();\n            isPrevSide = !isPrevSide;\n            yield;\n        }\n    }\n\n    *generateStrings() {\n        yield* this.drawCircle();\n        yield* this.drawStar();\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n\n        for (const {point} of this.generateStarPoints()) {\n            this.nails.addNail({ point });\n        }\n\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        const {sides, sideNails} = this.config;\n        const starCount = sideNails * sides;\n        return starCount * 3; // Once for each side + two more times for the side's circle\n    }\n}\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Assymetry extends StringArt{\n    name = \"Assymetry\";\n    id = \"assymetry\";\n    link = \"https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Nails',\n            defaultValue: 144,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: [\n                {\n                    key: 'layer1',\n                    label: 'Layer 1',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show1',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size1',\n                            label: 'Size',\n                            defaultValue: 0.25,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size1, n}) => Math.round(n * size1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'end1',\n                            label: 'End Position',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n,\n                            },\n                            displayValue: ({end1, n}) => Math.round(n * end1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'color1',\n                            label: 'Color',\n                            defaultValue: \"#a94fb0\",\n                            type: \"color\",\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'reverse1',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show1}) => show1\n                        },\n                    ]\n                },\n                {\n                    key: 'layer2',\n                    label: 'Layer 2',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show2',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size2',\n                            label: 'Size',\n                            defaultValue: 0.125,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size2, n}) => Math.round(n * size2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'end2',\n                            label: 'End Position',\n                            defaultValue: 0.888,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'color2',\n                            label: 'Color',\n                            defaultValue: \"#ec6ad0\",\n                            type: \"color\",\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'reverse2',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show2}) => show2\n                        },\n                    ]\n                },\n                {\n                    key: 'layer3',\n                    label: 'Layer 3',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show3',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size3',\n                            label: 'Size',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size3, n}) => Math.round(n * size3),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'end3',\n                            label: 'End Position',\n                            defaultValue: 0.888,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'color3',\n                            label: 'Color',\n                            defaultValue: \"#f08ad5\",\n                            type: \"color\",\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'reverse3',\n                            label: 'Reverse',\n                            defaultValue: true,\n                            type: 'checkbox',\n                            show: ({show3}) => show3\n                        },\n                    ]\n                }\n            ]\n        },\n        {\n            key: 'rotation',\n            label: 'Rotation',\n            defaultValue: 0,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            }\n        },\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n\n    getSetUp() {\n        const { rotation, n, margin = 0 } = this.config;\n        const circle = new Circle({\n            size: this.getSize(),\n            n,\n            margin,\n            rotation: rotation - 0.25,\n        });\n\n        let lineSpacing = circle.indexAngle * circle.radius;\n        const lineNailCount = Math.floor(circle.radius / lineSpacing) - 1;\n        lineSpacing += (circle.radius - lineSpacing * lineNailCount) / lineNailCount;\n        const firstCirclePoint = circle.getPoint(0);\n        const totalNailCount = lineNailCount + n;\n        const totalIndexCount = totalNailCount + lineNailCount;\n        const layers = new Array(3).fill(null)\n            .map((_, i) => getLayer.call(this, i + 1))\n            .filter(({enable}) => enable)\n\n        return {\n            circle,\n            lineSpacing,\n            lineNailCount,\n            firstCirclePoint,\n            layers,\n            totalNailCount,\n            totalIndexCount,\n        };\n\n        function getLayer(layerIndex) {\n            const size = Math.round(n * this.config['size' + layerIndex]) + lineNailCount\n            return {\n                size,\n                endIndex: Math.round(this.config['end' + layerIndex] * (totalNailCount + lineNailCount)) - size,\n                color: this.config['color' + layerIndex],\n                enable: this.config['show' + layerIndex],\n                isReverse: this.config['reverse' + layerIndex],\n            };\n        }\n    }\n\n    /**\n     * Returns the position of a point on the line\n     * @param {index of the point in the circle, 0 is the center} index\n     */\n    getPoint(index) {\n        if (index < this.lineNailCount || index > this.totalNailCount) {\n            const linePosition = index < this.lineNailCount ? this.lineNailCount - index : index - this.totalNailCount;\n\n            const indexLength = (linePosition) * this.lineSpacing;\n            return [\n                this.firstCirclePoint[0] - indexLength * Math.sin(this.circle.rotationAngle),\n                this.firstCirclePoint[1] - indexLength * Math.cos(this.circle.rotationAngle)\n            ];\n        } else {\n            const circleIndex = index - this.lineNailCount;\n            return this.circle.getPoint(circleIndex);\n        }\n    }\n\n    *drawCircle({endIndex, color, isReverse, size}) {\n        let prevPoint;\n        let prevPointIndex;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = color;\n        const self = this;\n        const advance = isReverse ? -1 : 1;\n\n        for(let index = 0; index <= endIndex; index++) {\n            this.ctx.beginPath();\n\n            if (prevPoint) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...this.getPoint(prevPointIndex + advance));\n            } else {\n                this.ctx.moveTo(...this.getPoint(getPointIndex(index)));\n            }\n\n            prevPointIndex = getPointIndex(isPrevSide ? index : index + size);\n            prevPoint = this.getPoint(prevPointIndex);\n            this.ctx.lineTo(...prevPoint);\n            this.ctx.stroke();\n\n            yield;\n\n            isPrevSide = !isPrevSide;\n        }\n\n        function getPointIndex(index) {\n            return isReverse ? self.totalIndexCount - index : index;\n        }\n    }\n\n    *generateStrings() {\n        for (const layer of this.layers) {\n            yield* this.drawCircle(layer);\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n\n        for (let i=0; i < this.lineNailCount; i++) {\n            this.nails.addNail({ point: this.getPoint(i) });\n        }\n    }\n\n    getStepCount() {\n        const {layers} = this.getSetUp();\n        return layers.reduce((stepCount, layer) =>\n            stepCount + layer.endIndex + 1, 0\n        );\n    }\n}\n","const elements = {\n    controls: document.querySelector(\"#controls\"),\n};\n\nconst EVENTS = new Set(['input', 'change']);\nlet inputTimeout;\n\nexport default class EditorControls {\n    constructor({pattern}) {\n        this.pattern = pattern;\n        this.eventHandlers = {\n            input: new Set(),\n            change: new Set()\n        }\n\n        this._wrappedOnInput = e => this._onInput(e);\n\n        elements.controls.addEventListener(\"input\", this._wrappedOnInput);\n        this.controlElements = {};\n        this.renderControls();\n    }\n\n    destroy() {\n        elements.controls.removeEventListener(\"input\", this._wrappedOnInput);\n        elements.controls.innerHTML = \"\";\n    }\n\n    addEventListener(event, eventHandler) {\n        if (!EVENTS.has(event)) {\n            throw new Error(`Unsupported event for EditorControls, \"${event}\"!`);\n        }\n\n        if (!(eventHandler instanceof Function)) {\n            throw new Error('Invalid event handler.');\n        }\n\n        this.eventHandlers[event].add(eventHandler);\n    }\n\n    _triggerEvent(event, eventData) {\n        for(const eventHandler of this.eventHandlers[event]) {\n            eventHandler(eventData);\n        }\n    }\n\n    _onInput(e) {\n        requestAnimationFrame(() => {\n            clearTimeout(inputTimeout);\n\n            const inputValue = getInputValue(e.target.type, e.target);\n            const controlKey = e.target.id.replace(/^config_/, '');\n\n            this.pattern.config = Object.freeze({\n                ...this.pattern.config,\n                [controlKey]: inputValue\n            });\n\n            const {config, displayValue} = this.controlElements[controlKey];\n            if (displayValue) {\n                const formattedValue = config.displayValue ? config.displayValue(this.pattern.config) : e.target.value;\n                displayValue.innerText = formattedValue;\n            }\n\n            const eventData = Object.freeze({\n                control: controlKey,\n                value: inputValue,\n                originalEvent: e,\n                pattern: this.pattern,\n            });\n\n            this._triggerEvent('input', eventData);\n\n            inputTimeout = setTimeout(() => {\n                this._triggerEvent('change', eventData);\n                this.updateControlsVisibility();\n            }, 100);\n        });\n    }\n\n    updateControlsVisibility(configControls = this.pattern.configControls) {\n        configControls.forEach(control => {\n            if (control.show) {\n                const shouldShowControl = control.show(this.pattern.config);\n                const controlEl = this.controlElements[control.key].control;\n                if (controlEl) {\n                    if (shouldShowControl) {\n                        controlEl.removeAttribute('hidden');\n                    } else {\n                        controlEl.setAttribute('hidden', 'hidden');\n                    }\n                }\n            }\n\n            if (control.isDisabled) {\n                const shouldDisableControl = control.isDisabled(this.pattern.config);\n                const inputEl = this.controlElements[control.key].input;\n                if (inputEl) {\n                    if (shouldDisableControl) {\n                        inputEl.setAttribute('disabled', 'disabled');\n                    } else {\n                        inputEl.removeAttribute('disabled');\n                    }\n                }\n            }\n\n            if (control.children) {\n                this.updateControlsVisibility(control.children);\n            }\n        });\n    }\n\n    updateInputs(config) {\n        Object.entries(config).forEach(([key, value]) => {\n            const {input, value: valueEl} = this.controlElements[key];\n            if (input) {\n                if (input.type === \"checkbox\") {\n                    input.checked = value;\n                } else {\n                    input.value = value;\n                }\n                if (valueEl) {\n                    valueEl.innerText = value;\n                }\n            }\n        });\n    }\n\n    renderControls(containerEl = elements.controls, _configControls) {\n        const configControls = _configControls ?? this.pattern.configControls;\n        containerEl.innerHTML = \"\";\n        const controlsFragment = document.createDocumentFragment();\n\n\n        configControls.forEach(control => {\n            const controlId = `config_${control.key}`;\n            const controlElements = this.controlElements[control.key] = { config: control };\n\n            let controlEl;\n\n            if (control.type === \"group\") {\n                controlEl = document.createElement(\"fieldset\");\n                const groupTitleEl = document.createElement(\"legend\");\n                groupTitleEl.innerText = control.label;\n                controlEl.appendChild(groupTitleEl);\n                controlEl.className = \"control control_group\";\n                const childrenContainer = document.createElement('div');\n                controlEl.appendChild(childrenContainer);\n                this.renderControls(childrenContainer, control.children);\n            }\n            else {\n                controlEl = document.createElement(\"div\");\n                controlEl.className = \"control\";\n\n                const label = document.createElement(\"label\");\n                label.innerHTML = control.label;\n                label.setAttribute(\"for\", controlId);\n\n                const inputEl = controlElements.input = document.createElement(\"input\");\n                inputEl.setAttribute(\"type\", control.type);\n                const inputValue = this.pattern.config[control.key] ?? control.defaultValue;\n\n                if (control.attr) {\n                    Object.entries(control.attr).forEach(([attr, value]) => {\n                        const realValue = value instanceof Function ? value(this.pattern) : value;\n                        inputEl.setAttribute(attr, realValue)\n                    });\n                }\n\n                if (control.type === \"checkbox\") {\n                    inputEl.checked = inputValue;\n                    controlEl.appendChild(inputEl);\n                    controlEl.appendChild(label);\n                } else {\n                    controlEl.appendChild(label);\n                    controlEl.appendChild(inputEl);\n                    inputEl.value = inputValue;\n                    const inputValueEl = controlElements.displayValue = document.createElement('span');\n                    inputValueEl.id = `config_${control.key}_value`;\n                    inputValueEl.innerText = control.displayValue ? control.displayValue(this.pattern.config) : inputValue;\n                    inputValueEl.className = \"control_input_value\";\n                    controlEl.appendChild(inputValueEl);\n                }\n                inputEl.id = controlId;\n            }\n\n            this.controlElements[control.key].control = controlEl;\n            controlEl.id = `control_${control.key}`;\n            controlsFragment.appendChild(controlEl);\n        });\n\n        containerEl.appendChild(controlsFragment);\n        requestAnimationFrame(() => this.updateControlsVisibility())\n    }\n\n}\n\n\nfunction getInputValue(type, inputElement) {\n    switch(type) {\n        case 'range':\n            return parseFloat(inputElement.value);\n        case 'checkbox':\n            return inputElement.checked;\n        default:\n            return inputElement.value;\n    }\n}\n","const elements = {\n    sizeSelect: document.querySelector(\"#size_select\"),\n    sizeCustom: document.querySelector(\"#size_custom\"),\n    width: document.querySelector(\"#size_custom_width\"),\n    height: document.querySelector(\"#size_custom_height\"),\n};\n\nfunction cmToPixels(cm, dpi = 300) {\n    return Math.floor(cm / 2.54 * dpi);\n}\n\nconst SCREEN_SIZE = [\n    Math.floor(window.screen.width * window.devicePixelRatio),\n    Math.floor(window.screen.height * window.devicePixelRatio),\n];\n\nconst SIZES = [\n    { id: 'fit', name: 'Fit to screen' },\n    { id: 'A4', value: [20, 28].map(v => cmToPixels(v)) },\n    { id: 'A3', value: [28, 40].map(v => cmToPixels(v)) },\n    { id: 'screen', name: `Screen size (${SCREEN_SIZE.join('x')})`, value: SCREEN_SIZE},\n    { id: 'custom', name: 'Custom...' }\n];\n\nexport default class EditorSizeControls {\n    element = document.querySelector(\"#size_controls\");\n\n    constructor({ getCurrentSize }) {\n        const sizeOptionsFragment = document.createDocumentFragment();\n        SIZES.forEach(size => {\n            const sizeListItem = document.createElement('option');\n            sizeListItem.setAttribute('value', size.id);\n            sizeListItem.innerText = size.name ?? size.id;\n            sizeOptionsFragment.appendChild(sizeListItem);\n        });\n        elements.sizeSelect.appendChild(sizeOptionsFragment)\n        elements.sizeSelect.addEventListener(\"change\", e => {\n            const selectedSizeId = e.target.value;\n            const size = SIZES.find(({id}) => id === selectedSizeId);\n\n            if (size.id === \"custom\") {\n                elements.sizeCustom.removeAttribute('hidden');\n                const [width, height] = getCurrentSize();\n                elements.width.value = width;\n                elements.height.value = height;\n            } else {\n                elements.sizeCustom.setAttribute('hidden', 'hidden');\n                this._notifyOnChange(size.value);\n            }\n        });\n\n        elements.sizeCustom.addEventListener(\"focusin\", e => {\n            e.target.select();\n        });\n\n        elements.sizeCustom.addEventListener('input', () => {\n            this._notifyOnChange([\n                elements.width.value ? parseInt(elements.width.value) : null,\n                elements.height.value ? parseInt(elements.height.value) : null\n            ]);\n        });\n    }\n\n    _notifyOnChange([width, height] = []) {\n        this.element.dispatchEvent(new CustomEvent('sizechange', { detail: { width, height }}));\n    }\n}\n","import Player from \"./editor/Player.js\";\nimport patternTypes from \"./pattern_types.js\";\nimport EditorControls from \"./editor/EditorControls.js\";\nimport EditorSizeControls from \"./editor/EditorSizeControls.js\";\n\nconst elements = {\n    canvas: document.querySelector(\"canvas\"),\n    patternSelector: document.querySelector(\"#pattern_select\"),\n    patternLink: document.querySelector(\"#pattern_link\"),\n};\n\nconst patterns = patternTypes.map(Pattern => new Pattern(elements.canvas));\n\nlet currentPattern;\nconst player = new Player(document.querySelector(\"#player\"));\nconst sizeControls = new EditorSizeControls({\n    getCurrentSize: () => [\n        elements.canvas.clientWidth,\n        elements.canvas.clientHeight\n    ]\n});\n\nlet controls;\n\nmain();\n\nfunction main() {\n    initRouting();\n    initSize();\n    initControls();\n\n    if (history.state?.pattern) {\n        updateState(history.state);\n    } else {\n        const queryParams = new URLSearchParams(document.location.search);\n        const queryPattern = queryParams.get('pattern');\n\n        if (queryPattern) {\n            const config = queryParams.get('config');\n            updateState({ pattern: queryPattern, config })\n        } else {\n            selectPattern(patterns[0]);\n        }\n    }\n\n    window.addEventListener(\"resize\", () =>\n        currentPattern.draw()\n    );\n\n    elements.canvas.addEventListener('click', () => {\n        player.toggle();\n    });\n}\n\nfunction onInputsChange() {\n    player.update(currentPattern, { goToEnd: false });\n    const configQuery = JSON.stringify(currentPattern.config);\n    history.replaceState({\n        pattern: currentPattern.id,\n        config: configQuery\n    }, currentPattern.name, `?pattern=${currentPattern.id}&config=${encodeURIComponent(configQuery)}`);\n}\n\nfunction initControls() {\n    patterns.forEach(pattern => {\n        const option = document.createElement('option');\n        option.innerText = pattern.name;\n        option.value = pattern.id;\n        elements.patternSelector.appendChild(option);\n    });\n\n    elements.patternSelector.addEventListener('change', e => {\n        const patternId = e.target.value;\n        selectPattern(findPatternById(patternId));\n        history.pushState({ pattern: patternId }, patternId, \"?pattern=\" + patternId)\n    });\n}\n\nfunction initSize() {\n    sizeControls.element.addEventListener('sizechange', ({ detail: {width, height}}) => {\n        elements.canvas.removeAttribute('width');\n        elements.canvas.removeAttribute('height');\n\n        if (width && height) {\n            elements.canvas.style.width = `${width}px`;\n            elements.canvas.style.height = `${height}px`;\n        } else {\n            elements.canvas.removeAttribute('style');\n        }\n\n        currentPattern.draw();\n    });\n}\n\nfunction initRouting() {\n    window.addEventListener('popstate', ({state}) => {\n        updateState(state);\n    });\n}\n\nfunction updateState(state) {\n    const pattern = findPatternById(state.pattern);\n    elements.patternSelector.value = pattern.id;\n    selectPattern(pattern, {\n        draw: false,\n        config: state.config ? JSON.parse(state.config) : null\n    });\n\n    currentPattern.draw();\n}\n\nfunction findPatternById(patternId) {\n    const pattern = patterns.find(({id}) => id === patternId);\n    if (!pattern) {\n        throw new Error(`Pattern with id \"${patternId} not found!`);\n    }\n    return pattern;\n}\n\nfunction selectPattern(pattern, { config, draw = true} = {}) {\n    currentPattern = pattern;\n    if (config) {\n        currentPattern.config = config;\n    }\n    if (controls) {\n        controls.destroy();\n    }\n    controls = new EditorControls({pattern, config});\n    controls.addEventListener('input', () => currentPattern.draw());\n    controls.addEventListener('change', onInputsChange);\n\n    elements.patternLink.setAttribute(\"href\", pattern.link);\n    if (draw) {\n        currentPattern.draw();\n    }\n    player.update(currentPattern);\n    document.title = `${pattern.name} - String Art Studio`;\n}\n","export default class Player {\n    constructor(parentEl) {\n        this.elements = {\n            player: parentEl,\n            step: parentEl.querySelector('#step'),\n            stepInstructions: parentEl.querySelector('#step_instructions'),\n            playerPosition: parentEl.querySelector('#player_position'),\n            playBtn: parentEl.querySelector('#play_btn'),\n            pauseBtn: parentEl.querySelector('#pause_btn')\n        };\n        this.stepCount = 0;\n        this._isPlaying = false;\n        \n        this.elements.playerPosition.addEventListener('input', ({ target }) => {\n            this.goto(+target.value)\n        });\n\n        this.elements.playBtn.addEventListener('click', () => {\n            this.play();\n        });\n\n        this.elements.pauseBtn.addEventListener('click', () => {\n            this.pause();\n        });\n    }\n\n    updateStatus(isPlaying) {\n        if (this._isPlaying !== isPlaying) {\n            this.elements.player.classList.toggle('playing');\n            this._isPlaying = isPlaying;\n        }\n    }\n\n    update(stringArt) {\n        this.stringArt = stringArt;\n        this.stepCount = stringArt.getStepCount();\n        this.elements.playerPosition.setAttribute('max', this.stepCount);\n        this.goto(this.stepCount);\n    }\n\n    updatePosition(position) {\n        this.elements.step.innerText = `${position}/${this.stepCount}`;\n        this.elements.playerPosition.value = position;\n    }\n    goto(position) {\n        this.pause();\n        this.updatePosition(position);\n        this.stringArt.goto(position);\n    }\n\n    setInstructions(instructions) {\n        this.elements.stepInstructions.innerText = instructions;\n    }\n\n    play() {\n        this.updateStatus(true);\n        cancelAnimationFrame(this.renderRafId);\n\n        if (this.stringArt.position === this.stepCount) {\n            this.stringArt.goto(0);\n        }\n\n        const self = this;\n\n        step();\n\n        function step() {\n            if (!self.stringArt.drawNext().done) {\n                self.renderRafId = requestAnimationFrame(step);\n            } else {\n                self.updateStatus(false);\n            }\n            self.updatePosition(self.stringArt.position);\n        }\n    }\n\n    pause() {\n        cancelAnimationFrame(this.renderRafId);\n        this.updateStatus(false);\n    }\n\n    toggle() {\n        if (this._isPlaying) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n}\n"],"names":["$a8180031c78213da$var$PI2","Math","PI","canvas","config","this","context","getContext","setConfig","nails","nailRadius","darkMode","nailsColor","addNail","nail","push","fill","globalCompositeOperation","beginPath","forEach","point","x","y","moveTo","arc","fillStyle","$65e05ee91a8797e3$var$COLORS","$65e05ee91a8797e3$var$COMMON_CONFIG_CONTROLS","key","label","type","children","defaultValue","isDisabled","showNails","attr","min","max","step","show","showStrings","displayValue","margin","customBackgroundColor","$65e05ee91a8797e3$var$flattenConfig","configControls","reduce","$65e05ee91a8797e3$export$2e2bcd8739ae039","Error","ctx","dpr","window","devicePixelRatio","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","controls","concat","defaultConfig","_defaultConfig","_config","value","Object","assign","getSize","clientWidth","clientHeight","map","v","setUpDraw","removeAttribute","width","height","size","setAttribute","center","$a8180031c78213da$export$2e2bcd8739ae039","clearRect","lineWidth","stringWidth","afterDraw","drawNails","initDraw","backgroundColor","fillRect","draw","position","Infinity","stringsIterator","generateStrings","drawNext","done","goto","result","next","getStepCount","name","$17fe1039ca333e84$export$2e2bcd8739ae039","id","link","n","radiusIncrease","angleStep","nSpirals","currentRadius","angle","centerx","centery","i","s","rotation","sin","cos","points","generatePoints","index","strokeStyle","color","lastPoint","lineTo","stroke","number","$188437ce07b37c18$var$PI2","radius","indexAngle","rotationAngle","getPoint","$f11ad0f2a18da5c9$var$SIDES","$f11ad0f2a18da5c9$var$SIDES_ORDER","$f11ad0f2a18da5c9$var$SIDES_ROTATION","left","bottom","right","top","$f11ad0f2a18da5c9$export$2e2bcd8739ae039","super","maxSize","nailSpacing","layerAngle","layerStart","theta","pivot","cosAngle","sinAngle","side","sideIndex","indexOf","nextSide","length","nextSideRotation","nLayer","floor","sideProps","layer","color1","color2","colors","layerSize","pow","drawSide","layers","drawLayer","count","$8b13425f1e264518$export$2e2bcd8739ae039","multicolor","_n","extraNails","multicolorRange","circle","$188437ce07b37c18$export$2e2bcd8739ae039","multiColorStep","layerShift","shift","steps","time","base","stepsToRender","toIndex","instructions","timeColor","getTimeColor","drawTimesTable","multicolorStart","multicolorByLightness","layerSpread","multiColorLightnessStep","repetition","innerLength","currentInnerLength","repetitionCount","drawSpiral","getLayerColor","lightness","sides","sideNails","sideAngle","starCenterStart","Array","_","circlePointsStart","sinSideAngle","cosSideAngle","circlePointsEnd","getStarPoint","centerX","centerY","reverseOrder","prevSide","innerColor","prevPoint","generateStarPoints","prevSideIndex","outterColor","prevCirclePoint","isPrevSide","nextPointIndex","nextPoint","drawCircle","drawStar","size1","round","show1","end1","size2","show2","end2","size3","show3","getSetUp","lineSpacing","lineNailCount","firstCirclePoint","totalNailCount","totalIndexCount","getLayer","call","filter","enable","layerIndex","endIndex","isReverse","indexLength","circleIndex","prevPointIndex","self","advance","getPointIndex","stepCount","$2fc16ffa17719734$var$elements","document","querySelector","$2fc16ffa17719734$var$EVENTS","Set","$2fc16ffa17719734$var$inputTimeout","pattern","eventHandlers","input","change","_wrappedOnInput","e","_onInput","addEventListener","controlElements","renderControls","destroy","removeEventListener","innerHTML","event","eventHandler","has","Function","add","_triggerEvent","eventData","requestAnimationFrame","clearTimeout","inputValue","inputElement","parseFloat","checked","$2fc16ffa17719734$var$getInputValue","target","controlKey","replace","freeze","formattedValue","innerText","control","originalEvent","setTimeout","updateControlsVisibility","shouldShowControl","controlEl","shouldDisableControl","inputEl","updateInputs","entries","valueEl","containerEl","_configControls","controlsFragment","createDocumentFragment","controlId","createElement","groupTitleEl","appendChild","className","childrenContainer","realValue","inputValueEl","$0597ff46967fdd49$var$elements","sizeSelect","sizeCustom","$0597ff46967fdd49$var$cmToPixels","cm","dpi","$0597ff46967fdd49$var$SCREEN_SIZE","screen","$0597ff46967fdd49$var$SIZES","join","$52852adbc3c0b381$var$elements","patternSelector","patternLink","$52852adbc3c0b381$var$patterns","Pattern","$52852adbc3c0b381$var$currentPattern","$52852adbc3c0b381$var$player","parentEl","elements","player","stepInstructions","playerPosition","playBtn","pauseBtn","_isPlaying","play","pause","updateStatus","isPlaying","classList","toggle","update","stringArt","updatePosition","setInstructions","cancelAnimationFrame","renderRafId","$52852adbc3c0b381$var$sizeControls","element","getCurrentSize","sizeOptionsFragment","sizeListItem","selectedSizeId","find","_notifyOnChange","select","parseInt","dispatchEvent","CustomEvent","detail","$52852adbc3c0b381$var$controls","$52852adbc3c0b381$var$onInputsChange","goToEnd","configQuery","JSON","stringify","history","replaceState","encodeURIComponent","$52852adbc3c0b381$var$updateState","state","$52852adbc3c0b381$var$findPatternById","$52852adbc3c0b381$var$selectPattern","parse","patternId","$2fc16ffa17719734$export$2e2bcd8739ae039","title","$52852adbc3c0b381$var$initRouting","style","$52852adbc3c0b381$var$initSize","option","pushState","$52852adbc3c0b381$var$initControls","queryParams","URLSearchParams","location","search","queryPattern","get","$52852adbc3c0b381$var$main"],"version":3,"file":"index.1148e2db.js.map"}