{"mappings":"AAAA,MAAMA,EAAiB,CACnB,CACIC,IAAK,QACLC,MAAO,eACPC,aAAc,UACdC,KAAM,QACNC,KAAI,EAAIC,aAAAA,MAAmBA,GAE/B,CACIL,IAAK,eACLC,MAAO,sBACPC,cAAc,EACdC,KAAM,YAEV,CACIH,IAAK,kBACLC,MAAO,mBACPC,aAAc,IACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,GAEVL,KAAI,EAAIC,aAAAA,KAAkBA,GAE9B,CACIL,IAAK,kBACLC,MAAO,mBACPC,aAAa,EACbC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,GAEVL,KAAI,EAAIC,aAAAA,KAAkBA,GAE9B,CACIL,IAAK,gBACLC,MAAO,uBACPC,cAAc,EACdC,KAAM,WACNC,KAAI,EAAIC,aAAAA,KAAkBA,GAE9B,CACIL,IAAK,aACLC,MAAO,aACPC,aAAc,IACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,GAEVL,KAAI,EAAIC,aAAAA,KAAkBA,GAE9B,CACIL,IAAK,YACLC,MAAO,YACPE,KAAM,QACND,aAAc,YACdE,KAAI,EAAIC,aAAAA,KAAkBA,EAC1BK,SAAU,CACN,CACIV,IAAK,wBACLC,MAAO,kBACPC,cAAc,EACdC,KAAM,WACNC,KAAI,EAAIC,aAAAA,KAAkBA,GAE9B,CACIL,IAAK,eACLC,MAAO,oBACPC,aAAa,EACbC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,GAEVL,KAAI,EAAIO,sBAAAA,EAAqBN,aAAEA,KAAkBM,GAAyBN,GAE9E,CACIL,IAAK,eACLC,MAAO,oBACPC,aAAa,IACbC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,GAEVL,KAAI,EAAIO,sBAAAA,EAAqBN,aAAEA,KAAkBM,GAAyBN,0BAO1EO,GACRC,KAAKD,OAASA,EACd,MAAOE,gBACHA,EAAeC,WACfA,EAAUJ,sBACVA,EAAqBK,aACrBA,EAAe,EAACC,aAChBA,EAAe,IAAGC,gBAClBA,EAAeC,SACfA,EAAQC,WACRA,EAAUC,cACVA,EAAahB,aACbA,GACAO,EAEAP,IACAQ,KAAKS,eAAiBR,EAAkBC,EACxCF,KAAKU,wBAA0BZ,GAAyBM,EAAeD,GAAgBD,EAAa,EAEpGF,KAAKW,OAAS,IAAIC,MAAMV,GAAYW,KAAK,MAAMC,KAAG,CAAEC,EAAGC,KACnD,MAAMC,EAAYnB,EAAwBK,EAAeH,KAAKU,wBAA0BM,EAAaV,EAAW,GAAK,GACrH,MAAM,OAAQD,EAAkBW,EAAahB,KAAKS,mBAAmBF,OAAgBU,SAGrFT,GACAR,KAAKW,OAAOO,WAUxBC,SAASH,GACL,MAAOxB,aACHA,EAAYU,WACZA,EAAUkB,MACVA,GACApB,KAAKD,OAET,OAAKP,GAIDwB,GAAcd,IACdc,EAAad,EAAa,GAGvBF,KAAKW,OAAOK,IAPRI,oBAUGC,QAACA,EAAOC,QAAEA,EAAOC,SAAEA,EAAW,KAC5C,MAAMC,WASGC,EAAYC,EAAiBxC,GAClC,OAAOwC,EACFC,QAAM,EAAGxC,IAAAA,OAAWmC,IAAYA,EAAQM,SAASzC,OAAWkC,GAAWA,EAAQO,SAASzC,MACxF2B,KAAIe,IACD,MAAMC,EAAe,IACdD,EACHxC,aAAckC,EAASM,EAAQ1C,MAAQ0C,EAAQxC,cAMnD,MAHqB,UAAjBwC,EAAQvC,OACRwC,EAAajC,SAAW4B,EAAYI,EAAQhC,WAEzCkC,OAAOC,OAAOF,MArBhBL,GAEjB,MAAO,CACHtC,IAAK,aACLC,MAAO,QACPE,KAAM,QACNO,SAAU2B,IChKtB,MAAMS,EAAgB,EAAVC,KAAKC,uBAIDC,EAAQrC,GAChBC,KAAKqC,QAAUD,EAAOE,WAAW,MACjCtC,KAAKuC,UAAUxC,GACfC,KAAKwC,QAAUJ,EAAOK,MAAQ,EAC9BzC,KAAK0C,MAAQ,GAGjBH,WAAWI,WAACA,EAAUC,WAAEA,EAAUC,oBAAEA,IAChC7C,KAAK2C,WAAaA,EAClB3C,KAAK4C,WAAaA,EAClB5C,KAAK6C,oBAAsBA,EAC3B7C,KAAK0C,MAAQ,GAIjBI,QAAQC,GACJ/C,KAAK0C,MAAMM,KAAKD,GAGpBlC,MAAMoC,YAACA,GAAc,GAAQ,IACzBjD,KAAKqC,QAAQa,yBAA2B,cACxClD,KAAKqC,QAAQc,YACbnD,KAAKqC,QAAQe,UAAYpD,KAAK4C,WAC9B5C,KAAKqC,QAAQgB,aAAe,SAC5BrD,KAAKqC,QAAQiB,KAAI,GAAMtD,KAAK6C,mCAC5B,MAAMU,EAAmBvD,KAAK2C,WA5BhB,EA8Bd3C,KAAK0C,MAAMc,SAAO,EAAIC,OAAQC,EAAGC,GAACC,OAAGA,MAGjC,GAFA5D,KAAKqC,QAAQwB,OAAOH,EAAI1D,KAAK2C,WAAYgB,GACzC3D,KAAKqC,QAAQyB,IAAIJ,EAAGC,EAAG3D,KAAK2C,WAAY,EAAGV,GACvCgB,GAAAA,MAAeW,EAAyC,CACxD,MAAMG,EAAeL,EAAI1D,KAAKwC,QAExBwB,EAAiB,CACnBD,EAAeL,EAAIH,EAAmBG,EAAIH,EAC1CI,GAGJ3D,KAAKqC,QAAQ4B,UAAYF,EAAe,QAAU,OAClD/D,KAAKqC,QAAQ6B,SAASC,OAAOP,MAAYI,OAIjDhE,KAAKqC,QAAQxB,OACbb,KAAK0C,MAAQ,IC9CrB,MAAM0B,EACI,UADJA,EAEK,UAGLC,EAAyB,CAC3B,CACIlF,IAAK,UACLC,MAAO,UACPE,KAAM,QACND,aAAc,YACdQ,SAAU,CACN,CACIV,IAAK,cACLC,MAAO,eACPC,cAAc,EACdC,KAAM,WACNgF,WAAU,EAAIC,UAAAA,MAAgBA,GAElC,CACIpF,IAAK,cACLC,MAAO,eACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,GACLC,IAAK,EACLC,KAAM,IAEVL,KAAI,EAAIiF,YAAAA,KAAiBA,KAIrC,CACIrF,IAAK,QACLC,MAAO,QACPE,KAAM,QACND,aAAc,YACdQ,SAAU,CACN,CACIV,IAAK,YACLC,MAAO,aACPC,cAAc,EACdC,KAAM,WACNgF,WAAU,EAAIE,YAAAA,MAAkBA,GAEpC,CACIrF,IAAK,SACLC,MAAO,SACPC,aAAc,GACdC,KAAM,SACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,GAEV6E,aAAY,EAAIC,OAAAA,KAAO,GAAQA,OAEnC,CACIvF,IAAK,aACLC,MAAO,YACPC,aAAc,IACdC,KAAM,QACNG,KAAM,CACFC,IAAK,GACLC,IAAK,EACLC,KAAM,KAEVL,KAAI,EAAIgF,UAAAA,KAAeA,GAE3B,CACIpF,IAAK,aACLC,MAAO,cACPC,aAAc,UACdC,KAAM,SAEV,CACIH,IAAK,kBACLC,MAAO,oBACPC,cAAc,EACdC,KAAM,WACNC,KAAI,EAAIgF,UAAAA,KAAeA,GAE3B,CACIpF,IAAK,sBACLC,MAAO,yBACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,IAEV6E,aAAY,EAAI5B,oBAAAA,KAAoB,GAAQA,MAC5CtD,KAAI,EAAIgF,UAAAA,EAASI,gBAAEA,KAAqBJ,GAAaI,KAIjE,CACIxF,IAAK,aACLC,MAAO,aACPE,KAAM,QACND,aAAc,YACdQ,SAAU,CACN,CACIV,IAAK,WACLC,MAAO,YACPC,cAAc,EACdC,KAAM,YAEV,CACIH,IAAK,wBACLC,MAAO,0BACPC,cAAc,EACdC,KAAM,YAEV,CACIH,IAAK,kBACLC,MAAO,mBACPC,aAAc+E,EACd9E,KAAM,QACNC,KAAI,EAAIqF,sBAAAA,KAA2BA,eA8I1CC,EAAcC,GACnB,OAAOA,EAAeC,QAAM,CAAEhF,GAASZ,IAAAA,EAAGE,aAAEA,EAAYQ,SAAEA,KACtDA,EAAW,IACJE,KACA8E,EAAchF,IACjB,IACGE,GACFZ,GAAME,IAEf,QAGJ2F,oBAnJgB5C,GACR,IAAKA,EACD,MAAM,IAAI6C,MAAM,yBAGpBjF,KAAKoC,OAASA,EACdpC,KAAKkF,IAAMlF,KAAKoC,OAAOE,WAAW,MAClC,MAAM6C,EAAMC,OAAOC,kBAAoB,EACjCC,EAAMtF,KAAKkF,IAAIK,8BACjBvF,KAAKkF,IAAIM,2BACTxF,KAAKkF,IAAIO,0BACTzF,KAAKkF,IAAIQ,yBACT1F,KAAKkF,IAAIS,wBAA0B,EACvC3F,KAAK4F,WAAaT,EAAMG,EAGxBR,qBACA,OAAQ9E,KAAKwB,UAAY,IAAIqE,OAAOxB,GAGpCyB,oBAKA,OAJK9F,KAAK+F,iBACN/F,KAAK+F,eAAiBlB,EAAc7E,KAAK8E,iBAGtC9E,KAAK+F,eAGZhG,aACA,OAAOC,KAAKgG,SAAWhG,KAAK8F,cAG5B/F,WAAOkG,GACPjG,KAAKgG,QAAUjE,OAAOmE,OAAO,GAAIlG,KAAK8F,cAAeG,GAGzDE,UAEI,MADyB,CAACnG,KAAKoC,OAAOgE,YAAapG,KAAKoC,OAAOiE,cACvCvF,KAAIwF,GAAKA,EAAItG,KAAK4F,aAG9CW,YACIvG,KAAKoC,OAAOoE,gBAAgB,SAC5BxG,KAAKoC,OAAOoE,gBAAgB,UAC5B,MAAO/D,EAAOgE,GAAUzG,KAAK0G,KAAO1G,KAAKmG,UACzCpE,OAAOmE,OAAOlG,KAAMA,KAAK0G,MACzB1G,KAAKoC,OAAOuE,aAAa,QAASlE,GAClCzC,KAAKoC,OAAOuE,aAAa,SAAUF,GACnCzG,KAAK4G,OAAS5G,KAAK0G,KAAK5F,KAAImF,GAASA,EAAQ,IAEzCjG,KAAK0C,MACL1C,KAAK0C,MAAMH,UAAUvC,KAAKD,QAE1BC,KAAK0C,MAAQ,IAAImE,EAAM7G,KAAKoC,OAAQpC,KAAKD,QAG7CC,KAAKkF,IAAI4B,UAAU,EAAG,KAAM9G,KAAK0G,MACjC1G,KAAKkF,IAAI6B,UAAY/G,KAAKD,OAAOiH,YAGrCC,YACI,MAAO1C,UAAAA,EAASI,gBAAEA,GAAmB3E,KAAKD,OACtCwE,IACAvE,KAAKkH,YACLlH,KAAK0C,MAAM7B,KAAK,CAAEoC,YAAa0B,KAIvCwC,WACInH,KAAKuG,UAAUvG,KAAKD,QACpB,MAAOwE,UAACA,EAASI,gBAAEA,EAAerE,SAAEA,EAAQ8G,gBAAEA,EAAexC,sBAAEA,GAA0B5E,KAAKD,OAE9FC,KAAKkF,IAAI/B,YACTnD,KAAKkF,IAAIhC,yBAA2B,mBACpClD,KAAKkF,IAAI9B,UAAYwB,EAAwBwC,EAAkB9G,EAAW8D,EAAcA,EACxFpE,KAAKkF,IAAImC,SAAS,EAAG,KAAMrH,KAAK0G,MAEhC1G,KAAKkF,IAAIhC,yBAA2B,cAChCqB,IACAvE,KAAKkH,YACLlH,KAAK0C,MAAM7B,KAAK,CAAEoC,YAAa0B,KAQvC2C,MAAMC,SAAAA,EAAWC,EAAAA,GAAY,IACzBxH,KAAKmH,WACL,MAAO3C,YAACA,GAAgBxE,KAAKD,OAE7B,GAAIyE,EAAa,KACbxE,KAAKyH,gBAAkBzH,KAAK0H,kBAC5B1H,KAAKuH,SAAW,GAETvH,KAAK2H,WAAWC,MAAQ5H,KAAKuH,SAAWA,IAC/CvH,KAAKiH,aAIbY,KAAKN,GACD,GAAIA,IAAavH,KAAKuH,SAItB,GAAIvH,KAAKyH,iBAAmBF,EAAWvH,KAAKuH,eACjCvH,KAAK2H,WAAWC,MAAQ5H,KAAKuH,SAAWA,SAE/CvH,KAAKsH,KAAK,UAAEC,IAIpBI,WACI,MAAMG,EAAS9H,KAAKyH,gBAAgBM,OASpC,OAPID,EAAOF,KACP5H,KAAKiH,YAGLjH,KAAKuH,WAGFO,EAGXJ,kBACI,MAAM,IAAIzC,MAAM,uCAGpB+C,eACI,MAAM,IAAI/C,MAAK,8DAA+DjF,KAAKiI,WCnQ3F,MAAMC,EAAgB,EAAVhG,KAAKC,uBAGDpC,GACR,MAAOoI,EAACA,EAACzB,KAAEA,EAAIhC,OAAEA,EAAS,EAAC0D,SAAEA,EAAW,EAACxB,OAAEA,EAAMyB,OAAEA,EAAMnH,QAAEA,GAAU,GAAUlB,KAAKD,OAASA,EAE7FC,KAAK4G,OAASA,GAAUF,EAAK5F,KAAIwF,GAAKA,EAAI,IAC1CtG,KAAKqI,OAASA,GAAUnG,KAAKxC,OAAOM,KAAK4G,QAAUlC,EAEnD1E,KAAKsI,WAAaJ,EAAMC,EACxBnI,KAAKuI,eAAiBL,EAAME,EAC5BpI,KAAKwI,UAAYtH,EAGrBuH,SAASC,EAAQ,GACb,MAAMC,EAAY3I,KAAKwI,UAAYxI,KAAKD,OAAOoI,EAAI,EAAIO,EAAQA,EAE/D,MAAO,CACH1I,KAAK4G,OAAO,GAAK1E,KAAK0G,IAAID,EAAY3I,KAAKsI,WAAatI,KAAKuI,eAAiBvI,KAAKqI,OACnFrI,KAAK4G,OAAO,GAAK1E,KAAK2G,IAAIF,EAAY3I,KAAKsI,WAAatI,KAAKuI,eAAiBvI,KAAKqI,QAS3FnB,UAAUxE,GAAQoG,iBAAAA,EAAmB,EAACC,UAAEA,GAAa,IACjD,IAAK,IAAIC,EAAE,EAAGA,EAAIhJ,KAAKD,OAAOoI,EAAGa,IAC7BtG,EAAMI,QAAQ,CAACW,MAAOzD,KAAKyI,SAASO,GAAIpF,OAAQmF,EAAYA,EAAUC,GAAKA,EAAIF,0BAI/D/G,OAAOC,OAAO,CAClC7C,IAAK,WACLC,MAAO,WACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,EAAI,EAAE,IACXC,KAAM,EAAI,KAEd6E,aAAY,CAAG1E,GAASZ,IAACA,KAAK,GAAQ+C,KAAK+G,MAAoB,IAAdlJ,EAAOZ,4BAGvC4C,OAAOC,OAAO,CAC/B7C,IAAK,IACLC,MAAO,kBACPC,aAAc,IACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,KCrDlB,MAAMsJ,EAAeC,EAAMC,UAAU,CACjC7H,SAAU,CACN/B,cAAc,EACd4B,MAAO,UACPnB,gBAAiB,KACjBI,gBAAiB,GACjBP,uBAAuB,EACvBK,aAAc,GACdC,aAAc,MAItB8I,EAAarJ,SAASwJ,OAAOH,EAAarJ,SAASyJ,WAAS,EAAGnK,IAAAA,KAAiB,iBAARA,IAAyB,EAAG,CAChGA,IAAK,aACLC,MAAO,eACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,GAEVL,KAAI,EAAIC,aAAAA,KAAkBA,oBAGMwF,EAChCuE,GAAK,SACLtB,KAAO,SACPuB,KAAO,oFACPhI,SAAW,CACP,IACOiI,EAAOC,YACVrK,aAAc,KAElB,CACIF,IAAK,aACLC,MAAO,aACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,IAGd,CACIT,IAAK,cACLC,MAAO,mBACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAG,EAAIK,QAASoI,EAAAA,MAAQ,EAAIA,EAC5BxI,IAAK,EACLC,KAAI,EAAIG,QAASoI,EAAAA,MAAQ,EAAIA,GAEjC1D,aAAY,EAAI0D,EAAAA,EAACwB,YAAEA,KAAiBzH,KAAK+G,MAAMd,EAAIwB,IAEvD,IACOF,EAAOG,eACVvK,aAAc,KAElB6J,GAGJ3C,YACIsD,MAAMtD,YACN,MAAO4B,EAACA,EAACC,SAAEA,EAAQ0B,OAAEA,EAAMpF,OAAEA,EAAMxE,WAAEA,GAAeF,KAAKD,OAezD,GAdAC,KAAK+J,YAAcD,GAAU,EAE7B9J,KAAKgK,OAAS,IAAIP,EAAO,CACrB/C,KAAM1G,KAAK0G,OACXyB,WACAC,SACA1D,IAGJ1E,KAAKoB,MAAQ,IAAI+H,EAAM,IAChBnJ,KAAKD,OACRG,WAAY4J,GAAU5J,IAGtBA,EAAY,CACZ,MAAM+J,EAAYjK,KAAKgI,eACjBkC,EAAgBhI,KAAKiI,MAAMF,EAAY/J,GAC7CF,KAAKoK,UAAY,IAAIC,IACrB,IAAK,IAAIrB,EAAI,EAAGA,EAAI9I,EAAY8I,IAC5BhJ,KAAKoK,UAAUE,IAAItB,EAAIkB,EAAelK,KAAKoB,MAAMD,SAAS6H,kBAKzDuB,MAACA,EAAQ,EAACnJ,MAAEA,EAAQ,WAAc,IAC3C,MAAOoJ,WAAAA,EAAUb,YAAEA,EAAWxB,EAAEA,EAACjI,WAAEA,GAAcF,KAAKD,OAEtD,IAAI0K,EAAqBvI,KAAK+G,MAAMU,EAAcxB,GAC9CuC,EAAkB,EACtB1K,KAAKkF,IAAIyF,YAAcvJ,EACvB,IAAIwJ,EAAY5K,KAAKgK,OAAOvB,SAAS8B,GACjCM,GAAc,EAElB,IAAI,IAAI7B,EAAE,EAAGyB,EAAqB,EAAGzB,IAAK,CACtC,GAAIhJ,KAAKoK,UAAW,CAChB,MAAMU,EAAY9K,KAAKoK,UAAUW,IAAI/B,GACjC8B,IACA9K,KAAKkF,IAAIyF,YAAcG,GAI/B9K,KAAKkF,IAAI/B,YACTnD,KAAKkF,IAAIrB,UAAU+G,GACnB,MAAMI,EAAiBH,EAAc7B,EAAIuB,EAAQvB,EAAIyB,EAAqBF,EAE1EvK,KAAKkF,IAAI+F,UAAUjL,KAAKgK,OAAOvB,SAASuC,IACxCN,IACIA,IAAoBF,GACpBC,IACAC,EAAkB,EAClB1B,IACAhJ,KAAKkF,IAAI+F,UAAUjL,KAAKgK,OAAOvB,SAASuC,EAAiB,IACzDJ,EAAY5K,KAAKgK,OAAOvB,SAASuC,EAAiB,IAElDJ,EAAY5K,KAAKgK,OAAOvB,SAASuC,EAAiB,GAGtDhL,KAAKkF,IAAI+F,UAAUL,GACnB5K,KAAKkF,IAAIgG,eAEHlC,EACN6B,GAAeA,4BAMZ7K,KAAKmL,WAAW,CACnB/J,MAAOpB,KAAKoB,MAAMD,SAAS,KAInC6G,eACI,MAAO2B,YAAAA,EAAWa,WAAEA,EAAUrC,EAAEA,GAAKnI,KAAKD,OAC1C,OAAOC,KAAK+J,YAAc7H,KAAK+G,MAAMU,EAAcxB,GAAKqC,EAG5DtD,YACIlH,KAAKgK,OAAO9C,UAAUlH,KAAK0C,YCjCnC0I,gBAlHsBpG,EAClBiD,KAAO,UACPsB,GAAK,UACLC,KAAO,+GACPhI,SAAW,CACP,CACIrC,IAAK,IACLC,MAAO,kBACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,IAGd,CACIT,IAAK,iBACLC,MAAO,OACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,KAGd,CACIT,IAAK,YACLC,MAAO,aACPC,aAAc,IACdC,KAAM,QACNG,KAAM,CACFC,IAAK,IACLC,IAAK,EACLC,KAAM,MAGd,CACIT,IAAK,WACLC,MAAO,oBACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,IAGd,CACIT,IAAK,QACLC,MAAO,eACPC,aAAc,UACdC,KAAM,4BAKV,MAAO6I,EACHA,EAACkD,eAAEA,EAAcC,UAAEA,EAASC,SAAEA,GAC9BvL,KAAKD,OAET,IAAIyL,EAAgB,EAChBC,EAAQ,EACZ,MAAOC,EAASC,GAAW3L,KAAK4G,OAEhC,IAAK,IAAIoC,EAAI,EAAGA,EAAIb,EAAGa,IAAK,CACxB,IAAK,IAAI4C,EAAI,EAAGA,EAAIL,EAAUK,IAAK,CAC/B,MAAMxD,EAAe,EAAJwD,EAAQ1J,KAAKC,GAAKoJ,EAC7B9H,EAAQ,CACViI,EAAUF,EAAgBtJ,KAAK0G,IAAI6C,EAAQrD,GAC3CuD,EAAUH,EAAgBtJ,KAAK2G,IAAI4C,EAAQrD,SAEzC,OAAC3E,EAAOoI,WAAU,GAAKD,KAAK5C,KAGtCyC,GAASH,EACTE,GAAiBH,sBAKrB,MAAMS,EAAS9L,KAAK+L,iBACpB,IAAIrD,EAAQ,EACZ1I,KAAKkF,IAAI/B,YACTnD,KAAKkF,IAAIrB,UAAU7D,KAAK4G,QACxB5G,KAAKkF,IAAIyF,YAAc3K,KAAKD,OAAOqB,MAEnC,IAAI4K,EAAYhM,KAAK4G,OAErB,IAAK,MAAOnD,MAAAA,KAAUqI,EAClB9L,KAAKkF,IAAI/B,YACTnD,KAAKkF,IAAIrB,UAAUmI,GACnBA,EAAYvI,EACZzD,KAAKkF,IAAI+F,UAAUxH,GACnBzD,KAAKkF,IAAIyF,YAAc3K,KAAKD,OAAOqB,MACnCpB,KAAKkF,IAAIgG,eACHxC,IAIdV,eACI,MAAOG,EAACA,EAACoD,SAAEA,GAAavL,KAAKD,OAC7B,OAAOoI,EAAIoD,EAGfrE,YACI,MAAM4E,EAAS9L,KAAK+L,iBACpB,IAAK,MAAOtI,MAAAA,EAAKoI,WAAEA,KAAeC,EAC9B9L,KAAK0C,MAAMI,QAAQ,OAACW,EAAOG,OAAQiI,MC7G/C,MACMI,EAAQ,CAAC,OAAQ,SAAU,QAAS,OACpCC,EAAc,CAAC,OAAQ,SAAU,QAAS,OAE1CC,EAAiB,CACnBC,KAAM,EACNC,OAAQnK,KAAKC,GAAK,EAClBmK,MAAOpK,KAAKC,GACZoK,IAAe,IAAVrK,KAAKC,QA8MdqK,gBA3MkBxH,EACdiD,KAAO,MACPsB,GAAK,MACLC,KAAO,+SACPhI,SAAW,CACP,CACIrC,IAAK,IACLC,MAAO,2BACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,IAGd,CACIT,IAAK,SACLC,MAAO,SACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,IAGd,CACIT,IAAK,QACLC,MAAO,cACPC,aAAc,GACdoF,aAAY,EAAIgH,MAAAA,KAAM,GAAQA,KAC9BnM,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,IAGd,CACIT,IAAK,QACLC,MAAO,QACPE,KAAM,QACNO,SAAU,CACN,CACIV,IAAK,SACLC,MAAO,kBACPC,aAAc,UACdC,KAAM,SAEV,CACIH,IAAK,SACLC,MAAO,kBACPC,aAAc,UACdC,KAAM,SAEV,CACIH,IAAK,gBACLC,MAAO,kBACPC,cAAc,EACdC,KAAM,eAMtBiH,YACIsD,MAAMtD,YAEN,MAAO4B,EAACA,EAACsD,MAAEA,GAAUzL,KAAKD,OAE1BC,KAAKyM,QAAUvK,KAAKxC,OAAOM,KAAK0G,MAAQ,GACxC1G,KAAK0M,YAAc1M,KAAKyM,SAAWtE,EAAI,GACvCnI,KAAK2M,WAAalB,EAAQvJ,KAAKC,GAAK,IAIxCsG,UAAUC,MAAAA,EAAK+C,MAAEA,EAAKmB,WAAEA,EAAUxE,SAAEA,IAChC,MAAMyE,EAAQpB,EAAQrD,EAEhB3E,EACCmJ,EAAWlJ,EADZD,EAECmJ,EAAWjJ,EAAI3D,KAAK0M,YAAchE,EAGnCoE,EAAa9M,KAAK4G,OAAO,GAAzBkG,EAAgC9M,KAAK4G,OAAO,GAE5CmG,EAAW7K,KAAK2G,IAAIgE,GACpBG,EAAW9K,KAAK0G,IAAIiE,GAM1B,MAJiB,CACZE,GAAYtJ,EAAUqJ,GAAWE,GAAYvJ,EAAUqJ,GAAWA,EAClEE,GAAYvJ,EAAUqJ,GAAWC,GAAYtJ,EAAUqJ,GAAWA,cAKhEG,KAACA,EAAI7L,MAAEA,EAAQ,UAASqK,MAAEA,EAAK/E,KAAEA,EAAIkG,WAAEA,EAAUM,iBAAEA,IAC1D,MAAMC,EAAYlB,EAAMmB,QAAQH,GAC1BI,EAAWpB,EAAMkB,IAAclB,EAAMqB,OAAS,EAAI,EAAIH,EAAY,GAClE/E,EAAW+D,EAAec,GAC1BM,EAAmBpB,EAAekB,GAElCG,EAAY,kBAAEN,OAAkBxG,aAAMkG,QAAYnB,GAExD,IAAI,IAAIzC,EAAE,EAAGA,GAAKkE,EAAkBlE,IAChChJ,KAAKkF,IAAI/B,YACTnD,KAAKkF,IAAIrB,UAAU7D,KAAKyI,SAAS,MAAEwE,EAAMvE,MAAOM,WAAGZ,KAAaoF,KAChExN,KAAKkF,IAAI+F,UAAUjL,KAAKyI,SAAS,CAACwE,KAAMI,EAAU3E,MAAOM,EAAGZ,SAAUmF,KAAqBC,KAC3FxN,KAAKkF,IAAIyF,YAAcvJ,EACvBpB,KAAKkF,IAAIgG,eACHlC,EAIdyE,eAAeC,GACX,MAAM/M,EAASX,KAAK2N,gBAAgBD,GAC9Bf,EAAa3M,KAAK2M,WAAae,EAC/BE,EAAY5N,KAAKyM,QAAUvK,KAAK2L,IAAI3L,KAAK2G,IAAI7I,KAAK2M,YAAczK,KAAK0G,IAAI5I,KAAK2M,YAAae,GAOjG,MAAO,QACH/M,aAAQgM,YAAYiB,aAPL,CACflK,EAAG1D,KAAK4G,OAAO,GAAKgH,EAAY,EAChCjK,EAAG3D,KAAK4G,OAAO,GAAKgH,EAAY,oBAEX1L,KAAKiI,MAAMyD,EAAY5N,KAAK0M,cAOzDiB,gBAAgBD,GACZ,MAAOI,OAACA,EAAMC,OAAEA,EAAMC,cAAEA,GAAkBhO,KAAKD,OAC/C,GAAIiO,EAAe,CACf,MAAMC,EAAaP,EAAa,EAAII,EAASC,EAC7C,MAAO,CAACE,EAAYA,EAAYA,EAAYA,GAG5C,MAAO,CAACF,EAAQD,EAAQC,EAAQD,cAI7BJ,GACP,MAAO/M,OACHA,EAAMgM,WAAEA,EAAUiB,UAAEA,EAAShB,WAAEA,EAAUM,iBAAEA,GAC3ClN,KAAKyN,eAAeC,GAExB,IAAK,IAAI1E,EAAI,EAAGA,EAAIiD,EAAMqB,OAAQtE,UACvBhJ,KAAKkO,SAAS,CACjB9M,MAAOT,EAAOqI,GACdiE,KAAMf,EAAYlD,GAClByC,MAAOkB,EACPjG,KAAMkH,aACNhB,mBACAM,uBAMR,MAAOpD,OAAAA,GAAW9J,KAAKD,OACvB,IAAI,IAAIoO,EAAQrE,EAAS,EAAGqE,GAAS,EAAGA,UAC7BnO,KAAKoO,UAAUD,GAI9BnG,eACI,IAAIqG,EAAQ,EACZ,MAAOvE,OAAAA,EAAM2B,MAAEA,EAAKtD,EAAEA,GAAKnI,KAAKD,OAC1B4M,EAAalB,EAAQvJ,KAAKC,GAAK,IAC/BsK,EAAUvK,KAAKxC,IAAIM,KAAKoC,OAAOgE,YAAapG,KAAKoC,OAAOiE,cAAgB,GACxEqG,EAAcD,GAAWtE,EAAI,GAEnC,IAAI,IAAIgG,EAAQ,EAAGA,EAAQrE,EAAQqE,IAAS,CACxC,MAAMP,EAAYnB,EAAUvK,KAAK2L,IAAI3L,KAAK2G,IAAI8D,GAAczK,KAAK0G,IAAI+D,GAAawB,GAClFE,GAAS,GAAKnM,KAAKiI,MAAMyD,EAAYlB,GAAe,GAGxD,OAAO2B,EAGXnH,YACI,MAAO4C,OAAAA,GAAW9J,KAAKD,OACvB,IAAI,IAAIoO,EAAQrE,EAAS,EAAGqE,GAAS,EAAGA,IAAS,CAC7C,MACIxB,WAAYlB,EAAOmC,UAAWlH,EAAIkG,WAAEA,EAAUM,iBAAEA,GAChDlN,KAAKyN,eAAeU,GAExB,IAAK,IAAIvC,EAAI,EAAGA,EAAIK,EAAMqB,OAAQ1B,IAAK,CACnC,MAAM0C,EAAYpC,EAAYN,GACxBxD,EAAW+D,EAAemC,GAEhC,IAAI,IAAItF,EAAE,EAAGA,GAAKkE,EAAkBlE,IAAK,CACrC,MAAMwE,EAAY,kBAAEN,OAAkBxG,aAAMkG,QAAYnB,GACxDzL,KAAK0C,MAAMI,QAAQ,CACfW,MAAOzD,KAAKyI,SAAS,WAAE6F,EAAW5F,MAAOM,WAAGZ,KAAaoF,IACzD5J,OAAM,GAAKuK,KAASvC,KAAK5C,eCrMjDuF,EAFqB,eCNavJ,EAC9BiD,KAAO,OACPsB,GAAK,OACLC,KAAO,gMACPhI,SAAW,CACP,CACIrC,IAAK,QACLC,MAAO,QACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,IAGd,CACIT,IAAK,YACLC,MAAO,iBACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,IAGd6J,EAAOG,eACP,CACIzK,IAAK,aACLC,MAAO,QACPE,KAAM,QACNO,SAAU,CACN,CACIV,IAAK,aACLC,MAAO,aACPC,aAAc,UACdC,KAAM,SAEV,CACIH,IAAK,cACLC,MAAO,eACPC,aAAc,UACdC,KAAM,YAMlB6I,QACA,IAAKnI,KAAKwO,GAAI,CACV,MAAOrG,EAAAA,EAACsG,MAAEA,GAASzO,KAAKD,OAClB2O,EAAavG,EAAIsG,EACvBzO,KAAKwO,GAAKrG,EAAIuG,EAGlB,OAAO1O,KAAKwO,GAGhBjI,YACIvG,KAAKwO,GAAK,KACV3E,MAAMtD,YAEN,MAAOkI,MAACA,EAAKrG,SAAEA,EAAQuG,UAAEA,EAASjK,OAAEA,EAAS,GAAM1E,KAAKD,OACxDC,KAAKgK,OAAS,IAAIP,EAAO,CACrB/C,KAAM1G,KAAK0G,KACXyB,EAAGwG,EAAYF,SACf/J,WACA0D,IAGJpI,KAAK4O,UAAsB,EAAV1M,KAAKC,GAASsM,EAC/BzO,KAAK0M,YAAc1M,KAAKgK,OAAO3B,OAASsG,EACxC3O,KAAK6O,gBAAmBF,EAAY,EAAK3O,KAAK0M,YAE9C1M,KAAKyO,MAAQ,IAAI7N,MAAM6N,GAAO5N,KAAK,MAAMC,KAAG,CAAEC,EAAGkM,KAC7C,MAAM2B,EAAY3B,EAAOjN,KAAK4O,UAAY5O,KAAKgK,OAAOzB,cAChDuG,EAAoB7B,EAAO0B,EAEjC,MAAO,CACHI,aAAc7M,KAAK0G,IAAIgG,GACvBI,aAAc9M,KAAK2G,IAAI+F,qBACvBE,EACAG,gBAAiBH,EAAoBH,MAKjDO,cAAcjC,KAACA,EAAIE,UAAEA,IACjB,MAAM9E,EAASrI,KAAK6O,gBAAkB1B,EAAYnN,KAAK0M,aAChDqC,aAAAA,EAAYC,aAAEA,GAAgBhP,KAAKyO,MAAMxB,IACzCzK,EAAS2M,GAAWnP,KAAKgK,OAAOpD,OAEvC,MAAO,CACHpE,EAAUuM,EAAe1G,EACzB8G,EAAUH,EAAe3G,wBAIZ+G,aAACA,GAAgB,GAAS,IAC3C,MAAOX,MAAAA,EAAKE,UAAEA,GAAa3O,KAAKD,OAEhC,IAAK,IAAIkN,EAAO,EAAGA,EAAOwB,EAAOxB,IAAQ,CACrC,MAAMoC,EAAoB,IAATpC,EAAawB,EAAQ,EAAIxB,EAAO,EACjD,IAAK,IAAIjE,EAAE,EAAGA,EAAI2F,EAAW3F,IAAK,CAC9B,MAAMmE,EAAYiC,EAAeT,EAAY3F,EAAIA,OAC3C,MAAEiE,WAAMoC,YAAUlC,EAAW1J,MAAOzD,KAAKkP,aAAa,MAAEjC,YAAME,mBAM5E,MAAOmC,WAAAA,EAAUX,UAAEA,GAAa3O,KAAKD,OAGrC,IAAI6K,EADJ5K,KAAKkF,IAAIyF,YAAc2E,EAGvB,IAAK,MAAOD,SAACA,EAAQlC,UAAEA,EAAS1J,MAAEA,KAAUzD,KAAKuP,qBAAsB,CACnEvP,KAAKkF,IAAI/B,aAELgK,GAAeA,EAAY,EAI3BnN,KAAKkF,IAAIrB,UAAUJ,IAHnBzD,KAAKkF,IAAIrB,UAAU+G,GACnB5K,KAAKkF,IAAI+F,UAAUxH,IAKvB,MAAM+L,EAAgBb,EAAYxB,EAClCnN,KAAKkF,IAAI+F,UAAUjL,KAAKkP,aAAa,CAAEjC,KAAMoC,EAAUlC,UAAWqC,KAClE5E,EAAYnH,EACZzD,KAAKkF,IAAIgG,8BAMb,MAAOuE,YAAAA,GAAezP,KAAKD,OAE3B,IAAI2P,EACAC,GAAa,EACjB3P,KAAKkF,IAAIyF,YAAc8E,EACvB,IAAK,MAAOxC,KAACA,EAAIoC,SAAEA,EAAQlC,UAAEA,EAAS1J,MAAEA,KAAUzD,KAAKuP,mBAAmB,CAAEH,cAAc,IAAS,CAC/FpP,KAAKkF,IAAI/B,YACJuM,IACDA,EAAkB1P,KAAKgK,OAAOvB,SAASzI,KAAKyO,MAAMY,GAAUP,oBAGhE9O,KAAKkF,IAAIrB,UAAU6L,GAEnB1P,KAAKkF,IAAI+F,UAAUxH,GACnBzD,KAAKkF,IAAIgG,eAITlL,KAAKkF,IAAI/B,YACTnD,KAAKkF,IAAIrB,UAAUJ,GACnB,MAAMuH,EAAiB2E,EACjB3P,KAAKyO,MAAMY,GAAUJ,gBAAkB9B,EACvCnN,KAAKyO,MAAMxB,GAAM6B,kBAAoB3B,EAErCyC,EAAY5P,KAAKgK,OAAOvB,SAASuC,GACvChL,KAAKkF,IAAI+F,UAAU2E,GAEnBF,EAAkB1P,KAAKgK,OAAOvB,SAASkH,EACjC3P,KAAKyO,MAAMY,GAAUJ,gBAAkB9B,EAAY,EACnDnN,KAAKyO,MAAMxB,GAAM6B,kBAAoB3B,EAAY,GAEvDnN,KAAKkF,IAAI+F,UAAUyE,GAEnB1P,KAAKkF,IAAIgG,SACTyE,GAAcA,kCAMX3P,KAAK6P,mBACL7P,KAAK8P,WAGhB5I,YACIlH,KAAKgK,OAAO9C,UAAUlH,KAAK0C,OAE3B,IAAK,MAAOe,MAAAA,EAAKwJ,KAAEA,EAAIE,UAAEA,KAAcnN,KAAKuP,qBACxCvP,KAAK0C,MAAMI,QAAQ,OAAEW,EAAOG,OAAQuJ,EAAS,GAAMF,KAAQE,IAAc,IAG7EnN,KAAKgK,OAAO9C,UAAUlH,KAAK0C,OAG/BsF,eACI,MAAOyG,MAAAA,EAAKE,UAAEA,GAAa3O,KAAKD,OAEhC,OAAmB,GADD4O,EAAYF,mBChMCzJ,EACnCiD,KAAO,YACPsB,GAAK,YACLC,KAAO,mFACPhI,SAAW,CACPiI,EAAOC,YACPD,EAAOG,eACP,CACIzK,IAAK,SACLC,MAAO,SACPE,KAAM,QACNO,SAAU,CACN,CACIV,IAAK,SACLC,MAAO,UACPE,KAAM,QACNO,SAAU,CACN,CACIV,IAAK,QACLC,MAAO,SACPC,cAAc,EACdC,KAAM,YAEV,CACIH,IAAK,QACLC,MAAO,OACPC,aAAc,IACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAI,EAAIG,QAASoI,EAAAA,MAAQ,EAAIA,GAEjC1D,aAAY,EAAIsL,MAAAA,EAAK5H,EAAEA,KAAOjG,KAAK+G,MAAMd,EAAI4H,GAC7CxQ,KAAI,EAAIyQ,MAAAA,KAAWA,GAEvB,CACI7Q,IAAK,OACLC,MAAO,eACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAI,EAAIG,QAASoI,EAAAA,MAAQ,EAAIA,GAEjC1D,aAAY,EAAIwL,KAAAA,EAAI9H,EAAEA,KAAOjG,KAAK+G,MAAMd,EAAI8H,GAC5C1Q,KAAI,EAAIyQ,MAAAA,KAAWA,GAEvB,CACI7Q,IAAK,SACLC,MAAO,QACPC,aAAc,UACdC,KAAM,QACNC,KAAI,EAAIyQ,MAAAA,KAAWA,GAEvB,CACI7Q,IAAK,WACLC,MAAO,UACPC,cAAc,EACdC,KAAM,WACNC,KAAI,EAAIyQ,MAAAA,KAAWA,KAI/B,CACI7Q,IAAK,SACLC,MAAO,UACPE,KAAM,QACNO,SAAU,CACN,CACIV,IAAK,QACLC,MAAO,SACPC,cAAc,EACdC,KAAM,YAEV,CACIH,IAAK,QACLC,MAAO,OACPC,aAAc,KACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAI,EAAIG,QAASoI,EAAAA,MAAQ,EAAIA,GAEjC1D,aAAY,EAAIyL,MAAAA,EAAK/H,EAAEA,KAAOjG,KAAK+G,MAAMd,EAAI+H,GAC7C3Q,KAAI,EAAI4Q,MAAAA,KAAWA,GAEvB,CACIhR,IAAK,OACLC,MAAO,eACPC,aAAc,KACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAI,EAAIG,QAASoI,EAAAA,MAAQ,EAAIA,GAEjC1D,aAAY,EAAI2L,KAAAA,EAAIjI,EAAEA,KAAOjG,KAAK+G,MAAMd,EAAIiI,GAC5C7Q,KAAI,EAAI4Q,MAAAA,KAAWA,GAEvB,CACIhR,IAAK,SACLC,MAAO,QACPC,aAAc,UACdC,KAAM,QACNC,KAAI,EAAI4Q,MAAAA,KAAWA,GAEvB,CACIhR,IAAK,WACLC,MAAO,UACPC,cAAc,EACdC,KAAM,WACNC,KAAI,EAAI4Q,MAAAA,KAAWA,KAI/B,CACIhR,IAAK,SACLC,MAAO,UACPE,KAAM,QACNO,SAAU,CACN,CACIV,IAAK,QACLC,MAAO,SACPC,cAAc,EACdC,KAAM,YAEV,CACIH,IAAK,QACLC,MAAO,OACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAI,EAAIG,QAASoI,EAAAA,MAAQ,EAAIA,GAEjC1D,aAAY,EAAI4L,MAAAA,EAAKlI,EAAEA,KAAOjG,KAAK+G,MAAMd,EAAIkI,GAC7C9Q,KAAI,EAAI+Q,MAAAA,KAAWA,GAEvB,CACInR,IAAK,OACLC,MAAO,eACPC,aAAc,KACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAI,EAAIG,QAASoI,EAAAA,MAAQ,EAAIA,GAEjC1D,aAAY,EAAI2L,KAAAA,EAAIjI,EAAEA,KAAOjG,KAAK+G,MAAMd,EAAIiI,GAC5C7Q,KAAI,EAAI+Q,MAAAA,KAAWA,GAEvB,CACInR,IAAK,SACLC,MAAO,QACPC,aAAc,UACdC,KAAM,QACNC,KAAI,EAAI+Q,MAAAA,KAAWA,GAEvB,CACInR,IAAK,WACLC,MAAO,UACPC,cAAc,EACdC,KAAM,WACNC,KAAI,EAAI+Q,MAAAA,KAAWA,QAQ3C/J,YACIsD,MAAMtD,YACNxE,OAAOmE,OAAOlG,KAAMA,KAAKuQ,YAG7BA,WACI,MAAOnI,SAACA,EAAQD,EAAEA,EAACzD,OAAEA,EAAS,GAAM1E,KAAKD,OACnCiK,EAAS,IAAIP,EAAO,CACtB/C,KAAM1G,KAAKmG,YACXgC,SACAzD,EACA0D,SAAUA,EAAW,MAGzB,IAAIoI,EAAcxG,EAAO1B,WAAa0B,EAAO3B,OAC7C,MAAMoI,EAAgBvO,KAAKiI,MAAMH,EAAO3B,OAASmI,GAAe,EAChEA,IAAgBxG,EAAO3B,OAASmI,EAAcC,GAAiBA,EAC/D,MAAMC,EAAmB1G,EAAOvB,SAAS,GACnCkI,EAAiBF,EAAgBtI,EACjCyI,EAAkBD,EAAiBF,EACnC3G,EAAS,IAAIlJ,MAAM,GAAGC,KAAK,MAC5BC,KAAG,CAAEC,EAAGiI,IAAM6H,EAASC,KAAK9Q,KAAMgJ,EAAI,KACtCrH,QAAM,EAAGoP,OAAAA,KAAYA,aAYjBF,EAASnD,GACd,MAAMhH,EAAOxE,KAAK+G,MAAMd,EAAInI,KAAKD,OAAO,OAAS2N,IAAe+C,EAChE,MAAO,MACH/J,EACAsK,SAAU9O,KAAK+G,MAAMjJ,KAAKD,OAAO,MAAQ2N,IAAeiD,EAAiBF,IAAkB/J,EAC3FtF,MAAOpB,KAAKD,OAAO,QAAU2N,GAC7BqD,OAAQ/Q,KAAKD,OAAO,OAAS2N,GAC7BlF,UAAWxI,KAAKD,OAAO,UAAY2N,IAjB3C,MAAO,QACH1D,cACAwG,gBACAC,mBACAC,SACA5G,iBACA6G,kBACAC,GAmBRnI,SAASC,GACL,GAAIA,EAAQ1I,KAAKyQ,eAAiB/H,EAAQ1I,KAAK2Q,eAAgB,CAC3D,MAEMM,GAFevI,EAAQ1I,KAAKyQ,cAAgBzQ,KAAKyQ,cAAgB/H,EAAQA,EAAQ1I,KAAK2Q,gBAEvD3Q,KAAKwQ,YAC1C,MAAO,CACHxQ,KAAK0Q,iBAAiB,GAAKO,EAAc/O,KAAK0G,IAAI5I,KAAKgK,OAAOzB,eAC9DvI,KAAK0Q,iBAAiB,GAAKO,EAAc/O,KAAK2G,IAAI7I,KAAKgK,OAAOzB,gBAE/D,CACH,MAAM2I,EAAcxI,EAAQ1I,KAAKyQ,cACjC,OAAOzQ,KAAKgK,OAAOvB,SAASyI,iBAIvBF,SAAAA,EAAQ5P,MAAEA,EAAKoH,UAAEA,EAAS9B,KAAEA,IACrC,IAAIkE,EACAuG,EACAxB,GAAa,EACjB3P,KAAKkF,IAAIyF,YAAcvJ,EACvB,MAAMgQ,EAAOpR,KACPqR,EAAU7I,GAAY,EAAK,EAEjC,IAAI,IAAIE,EAAQ,EAAGA,GAASsI,EAAUtI,IAClC1I,KAAKkF,IAAI/B,YAELyH,GACA5K,KAAKkF,IAAIrB,UAAU+G,GACnB5K,KAAKkF,IAAI+F,UAAUjL,KAAKyI,SAAS0I,EAAiBE,KAElDrR,KAAKkF,IAAIrB,UAAU7D,KAAKyI,SAAS6I,EAAc5I,KAGnDyI,EAAiBG,EAAc3B,EAAajH,EAAQA,EAAQhC,GAC5DkE,EAAY5K,KAAKyI,SAAS0I,GAC1BnR,KAAKkF,IAAI+F,UAAUL,GACnB5K,KAAKkF,IAAIgG,eAITyE,GAAcA,WAGT2B,EAAc5I,GACnB,OAAOF,EAAY4I,EAAKR,gBAAkBlI,EAAQA,sBAKtD,IAAK,MAAMyF,KAASnO,KAAK8J,aACd9J,KAAK6P,WAAW1B,GAI/BjH,YACIlH,KAAKgK,OAAO9C,UAAUlH,KAAK0C,MAAO,CAAEoG,iBAAkB9I,KAAKyQ,gBAE3D,IAAK,IAAIzH,EAAE,EAAGA,EAAIhJ,KAAKyQ,cAAezH,IAClChJ,KAAK0C,MAAMI,QAAQ,CAAEW,MAAOzD,KAAKyI,SAASO,GAAIpF,OAAQoF,IAI9DhB,eACI,MAAO8B,OAAAA,GAAU9J,KAAKuQ,WACtB,OAAOzG,EAAO/E,QAAM,CAAEkF,EAAWkE,IAC7BlE,EAAYkE,EAAM6C,SAAW,GAAG,mBC/RHhM,EACrCiD,KAAO,eACPsB,GAAK,eACLC,KAAO,yEACPhI,SAAW,CACP,CACIrC,IAAK,IACLC,MAAO,kBACPC,aAAc,IACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,IAGd,CACIT,IAAK,OACLC,MAAO,iBACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,IAGd,CACIT,IAAK,SACLC,MAAO,SACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,IAGd6J,EAAOG,eACPT,EAAMC,UAAU,CAAE7H,SAAU,CACxB/B,cAAc,EACdS,gBAAiB,IACjBI,gBAAiB,IACjBe,MAAO,cAIX+G,QACA,IAAKnI,KAAKwO,GAAI,CACV,MAAOrG,EAAAA,EAAC2B,OAAEA,GAAU9J,KAAKD,OACnB2O,EAAavG,EAAI2B,EACvB9J,KAAKwO,GAAKrG,EAAIuG,EAGlB,OAAO1O,KAAKwO,GAGhBjI,YACIvG,KAAKwO,GAAK,KACV3E,MAAMtD,YAEN,MAAOuD,OAAAA,EAAM1B,SAAEA,GAAYpI,KAAKD,OAChCC,KAAKgK,OAAS,IAAIP,EAAO,CACrB/C,KAAM1G,KAAK0G,KACXyB,EAAGnI,KAAKmI,EACRzD,OAnEG,YAoEH0D,IAGJpI,KAAKoB,MAAQ,IAAI+H,EAAM,IAChBnJ,KAAKD,OACRG,WAAY4J,IAGhB9J,KAAKuR,WAAarP,KAAKiI,MAAMnK,KAAKmI,EAAI2B,oBAGzBS,MAACA,EAAQ,EAACnJ,MAAEA,EAAQ,OAAMoQ,MAAEA,EAAKC,KAAEA,IAChD,MAAOC,KAAAA,GAAQ1R,KAAKD,OACdoI,EAAInI,KAAKmI,EACTwJ,EAAgBH,GAASrJ,EAE/B,IAAI1E,EAAQzD,KAAKgK,OAAOvB,SAAS8B,GAEjC,IAAI,IAAIvB,EAAE,EAAGA,GAAK2I,EAAe3I,IAAK,CAClChJ,KAAKkF,IAAI/B,YACTnD,KAAKkF,IAAIrB,UAAUJ,GACnBA,EAAQzD,KAAKgK,OAAOvB,SAASO,EAAIuB,GACjCvK,KAAKkF,IAAI+F,UAAUxH,GACnB,MAAMmO,EAAW5I,EAAI0I,EAAQvJ,EAC7BnI,KAAKkF,IAAI+F,UAAUjL,KAAKgK,OAAOvB,SAASmJ,EAAUrH,IAClDvK,KAAKkF,IAAIyF,YAAcvJ,EACvBpB,KAAKkF,IAAIgG,cAEH,CAAE2G,aAAY,GAAK7I,EAAI,OAAKA,OAAM4I,OAAe5I,IAAUN,MAAO+I,EAAOtJ,EAAIa,uBAKnF,MAAOc,OAAAA,GAAU9J,KAAKD,OAEtB,IAAI,IAAI0R,EAAO,EAAGA,EAAO3H,EAAQ2H,IAAQ,CACrC,MAAMrQ,EAAQpB,KAAKoB,MAAMD,SAASsQ,SAC3BzR,KAAK8R,eAAe,MACvBL,QACArQ,EACAmJ,MAAOvK,KAAKuR,WAAaE,KAKrCvK,YACIlH,KAAKgK,OAAO9C,UAAUlH,KAAK0C,OAG/BsF,eACI,OAAOhI,KAAKD,OAAO+J,OAAS9J,KAAKmI,IHjHO4J,EAAQ3G,gBIJ1B2G,EAC9BxI,GAAK,OACLtB,KAAO,OACPuB,KAAO,uGACPhI,SAAW,CACP,IACOiI,EAAOC,YACVrK,aAAc,KAElB,CACIF,IAAK,aACLC,MAAO,aACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,IAGd,CACIT,IAAK,cACLC,MAAO,mBACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAG,EAAIK,QAASoI,EAAAA,MAAQ,EAAIA,EAC5BxI,IAAK,EACLC,KAAI,EAAIG,QAASoI,EAAAA,MAAQ,EAAIA,GAEjC1D,aAAY,EAAI0D,EAAAA,EAACwB,YAAEA,KAAiBzH,KAAK+G,MAAMd,EAAIwB,IAEvD,IACOF,EAAOG,eACVvK,aAAc,IAElB,CACIF,IAAK,SACLC,MAAO,SACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,GACLC,KAAM,IAGd,CACIT,IAAK,cACLC,MAAO,eACPC,aAAc,KACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAI,EAAIG,QAASoI,EAAAA,MAAQ,EAAIA,GAEjC1D,aAAY,EAAIuN,YAAAA,EAAW7J,EAAEA,KAAOjG,KAAK+G,MAAM+I,EAAc7J,IAEjEgB,EAAMC,UAAU,CAAE7H,SAAU,CACxB/B,cAAc,EACdS,gBAAiB,IACjBI,gBAAiB,IACjBe,MAAO,UACPtB,uBAAuB,EACvBK,aAAc,GACdC,aAAc,OAItBmG,YACIsD,MAAMtD,YACN,MAAO4B,EAACA,EAAC6J,YAAEA,GAAgBhS,KAAKD,OAChCC,KAAKuR,WAAarP,KAAK+G,MAAMd,EAAI6J,sBAIjC,IAAI,IAAI7D,EAAQ,EAAGA,EAAQnO,KAAK+J,YAAaoE,UAClCnO,KAAKmL,WAAW,CACnB/J,MAAOpB,KAAKoB,MAAMD,SAASgN,GAC3B5D,OAAQvK,KAAKuR,WAAapD,MJ5EiC3B,gBKNtCxH,EACjCiD,KAAO,UACPsB,GAAK,UACLC,KAAO,mFACPhI,SAAW,CACP,CACIrC,IAAK,IACLC,MAAO,eACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,IAGd,CACIT,IAAK,kBACLC,MAAO,oBACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,IACLC,KAAM,IAGd,CACIT,IAAK,QACLC,MAAO,QACPC,aAAc,UACdC,KAAM,SAEV,CACIH,IAAK,SACLC,MAAO,SACPE,KAAM,QACNO,SAAU,CACN,CACIV,IAAK,SACLC,MAAO,UACPE,KAAM,QACNO,SAAU,CACN,CACIV,IAAK,QACLC,MAAO,SACPC,cAAc,EACdC,KAAM,YAEV,CACIH,IAAK,UACLC,MAAO,SACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,IACLC,IAAK,EACLC,KAAM,KAEVL,KAAI,EAAIyQ,MAAAA,KAAWA,GAEvB,CACI7Q,IAAK,KACLC,MAAO,aACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVL,KAAI,EAAIyQ,MAAAA,KAAWA,GAEvB,CACI7Q,IAAK,KACLC,MAAO,aACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVL,KAAI,EAAIyQ,MAAAA,KAAWA,GAEvB,IACOvG,EAAOG,eACVzK,IAAK,YACLI,KAAI,EAAIyQ,MAAAA,KAAWA,GAEvB,CACI7Q,IAAK,WACLC,MAAO,UACPC,cAAc,EACdC,KAAM,WACNC,KAAI,EAAIyQ,MAAAA,KAAWA,KAI/B,CACI7Q,IAAK,SACLC,MAAO,UACPE,KAAM,QACNO,SAAU,CACN,CACIV,IAAK,QACLC,MAAO,SACPC,cAAc,EACdC,KAAM,YAEV,CACIH,IAAK,UACLC,MAAO,SACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,IACLC,IAAK,EACLC,KAAM,KAEVL,KAAI,EAAI4Q,MAAAA,KAAWA,GAEvB,CACIhR,IAAK,KACLC,MAAO,aACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVL,KAAI,EAAI4Q,MAAAA,KAAWA,GAEvB,CACIhR,IAAK,KACLC,MAAO,aACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVL,KAAI,EAAI4Q,MAAAA,KAAWA,GAEvB,IACO1G,EAAOG,eACVzK,IAAK,YACLI,KAAI,EAAI4Q,MAAAA,KAAWA,GAEvB,CACIhR,IAAK,WACLC,MAAO,UACPC,cAAc,EACdC,KAAM,WACNC,KAAI,EAAI4Q,MAAAA,KAAWA,KAI/B,CACIhR,IAAK,SACLC,MAAO,UACPE,KAAM,QACNO,SAAU,CACN,CACIV,IAAK,QACLC,MAAO,SACPC,cAAc,EACdC,KAAM,YAEV,CACIH,IAAK,UACLC,MAAO,SACPC,aAAc,GACdC,KAAM,QACNG,KAAM,CACFC,IAAK,IACLC,IAAK,EACLC,KAAM,KAEVL,KAAI,EAAI+Q,MAAAA,KAAWA,GAEvB,CACInR,IAAK,KACLC,MAAO,aACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVL,KAAI,EAAI+Q,MAAAA,KAAWA,GAEvB,CACInR,IAAK,KACLC,MAAO,aACPC,aAAc,EACdC,KAAM,QACNG,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVL,KAAI,EAAI+Q,MAAAA,KAAWA,GAEvB,IACO7G,EAAOG,eACVzK,IAAK,YACLI,KAAI,EAAI+Q,MAAAA,KAAWA,GAEvB,CACInR,IAAK,WACLC,MAAO,UACPC,cAAc,EACdC,KAAM,WACNC,KAAI,EAAI+Q,MAAAA,KAAWA,QAQ3C/J,YACIsD,MAAMtD,YACNxE,OAAOmE,OAAOlG,KAAMA,KAAKuQ,YAG7BA,WACI,MAAOpI,EAACA,EAACzD,OAAEA,EAAS,EAACuN,gBAAEA,GAAoBjS,KAAKD,OAC1C2G,EAAO1G,KAAKmG,UAEZ+L,EAAYhQ,KAAKxC,OAAOgH,EAAK5F,KAAIwF,GAAKA,EAAI,EAAI5B,KAAW,EACzDoF,EAAS,IAAIlJ,MAAM,GAAGC,KAAK,MAC5BC,KAAG,CAAEC,EAAGiI,IAAM6H,EAASC,KAAK9Q,KAAMgJ,EAAI,KACtCrH,QAAM,EAAGoP,OAAAA,KAAYA,IAEpBoB,EAAqBjQ,KAAKvC,OAAOmK,EAAOhJ,KAAG,EAAGkJ,OAAAA,KAAYA,EAAOjK,OAAOoI,cAOrE0I,EAASnD,GACd,MAAM0E,EAAOA,GAAQpS,KAAKD,OAAOqS,EAAO1E,GAElC2E,EAAQ,CACVtB,OAAQqB,EAAK,QACb5J,UAAW4J,EAAK,WAChB7K,SAAU,CAAC6K,EAAK,KAAMA,EAAK,MAC3B/J,OAAQ6J,EAAYE,EAAK,UACzBhK,SAAUgK,EAAK,aAGbE,EAA2B,EAAVpQ,KAAKC,GAASkQ,EAAMhK,OACrCkK,EAAcrQ,KAAKxC,IAAIyI,EAAGjG,KAAKiI,MAAMmI,EAAiBL,IAU5D,MAAO,QARQ,IAAIxI,EAAO,CACtBpB,OAAQgK,EAAMhK,OACdzB,OAAQyL,EAAM9K,SAASzG,KAAG,CAAEwF,EAAG0C,IAAMqJ,EAAMhK,OAAS3D,GAAUgC,EAAKsC,GAA+B,GAAzBqJ,EAAMhK,OAAS3D,IAAe4B,IACvG6B,EAAGoK,EACHnK,SAAUiK,EAAMjK,SAChBlH,QAASmR,EAAM7J,eAKZ6J,GA7BX,MAAO,QACHvI,qBACAqI,GAgCR1J,SAAS0F,EAAOzF,GACZ,MAAOsB,OAAAA,GAAUmE,EACjB,IAAI+C,EAAchP,KAAK+G,MAAMP,EAAQsB,EAAOjK,OAAOoI,EAAInI,KAAKmS,oBAC5D,OAAOnI,EAAOvB,SAASyI,sBAIvB,MAAO/I,EAAAA,EAAC/G,MAAEA,GAASpB,KAAKD,OAGxB,IAAI2P,EADJ1P,KAAKkF,IAAIyF,YAAcvJ,EAGvB,IAAK,IAAI4H,EAAI,EAAGA,EAAIhJ,KAAKmS,mBAAoBnJ,IACzC,IAAI,IAAI0E,EAAa,EAAGA,EAAa1N,KAAK8J,OAAOwD,OAAQI,IAAc,CACnE,MAAMS,EAAQnO,KAAK8J,OAAO4D,GAC1B1N,KAAKkF,IAAI/B,YACTnD,KAAKkF,IAAIrB,UAAW6L,GAAmB1P,KAAKyI,SAAS0F,EAAOnF,IAEzC,IAAf0E,GAAoB1E,GACpBhJ,KAAKkF,IAAI+F,UAAUjL,KAAKyI,SAAS0F,EAAOnF,IAG5C,IAAIwJ,EAAiB9E,EAAa,EAC9B8E,IAAmBxS,KAAK8J,OAAOwD,SAC/BkF,EAAiB,GAGrB9C,EAAkB1P,KAAKyI,SAASzI,KAAK8J,OAAO0I,GAAiBxJ,GAC7DhJ,KAAKkF,IAAI+F,UAAUyE,GACnB1P,KAAKkF,IAAIgG,gBAOrBhE,YACclH,KAAKD,OACfC,KAAK8J,OAAOtG,SAAO,EAAGwG,OAAAA,GAAS0D,IAAe1D,EAAO9C,UAAUlH,KAAK0C,MAAO,CACvEqG,UAAWC,GAAC,GAAO0E,EAAa,KAAK1E,EAAI,QAIjDhB,eACI,MAAO8B,OAAAA,EAAMqI,mBAAEA,GAAsBnS,KAAKuQ,WAC1C,OAAOzG,EAAOwD,OAAS6E,EAAqB,KCnUpD,MAAMM,EAAW,CACbjR,SAAUkR,SAASC,cAAc,aACjCC,YAAaF,SAASC,cAAc,kBAGlCE,EAAS,IAAIC,IAAI,CAAC,QAAS,WAGjC,IAAIC,uBAGaC,QAAAA,IACThT,KAAKgT,QAAUA,EACfhT,KAAKiT,MAAQjT,KAAKkT,aAAe,CAAEC,OAAQ,IAE3CnT,KAAKoT,cAAgB,CACjBC,MAAO,IAAIP,IACXQ,OAAQ,IAAIR,KAGhB9S,KAAKuT,gBAAkBC,GAAKxT,KAAKyT,SAASD,GAC1CxT,KAAK0T,gBAAkBF,IACnB,GAA0B,WAAtBA,EAAEG,OAAOC,SAAwB,CACjCJ,EAAEG,OAAOE,cAAcC,UAAUC,OAAO,aACxC,MAAMC,EAAUR,EAAEG,OAAOE,cAAcI,QAAQC,MAC/ClU,KAAKiT,MAAQ,IAAKjT,KAAKiT,MAAOE,OAAQ,IAAKnT,KAAKiT,MAAME,QAASa,IAAWR,EAAEG,OAAOE,cAAcC,UAAUK,SAAS,eACpHnU,KAAKoU,aAAapU,KAAKiT,SAI/BjT,KAAKqU,uBAAyBb,IACA,WAAtBA,EAAEG,OAAOC,UAAmC,UAAVJ,EAAErU,KACpCa,KAAK0T,gBAAgBF,IAI7Bf,EAASjR,SAAS8S,iBAAiB,QAAStU,KAAKuT,iBACjDd,EAASG,YAAY0B,iBAAiB,QAAStU,KAAK0T,iBACpDjB,EAASG,YAAY0B,iBAAiB,UAAWtU,KAAKqU,wBACtDrU,KAAKuU,gBAAkB,GACvBvU,KAAKwU,iBAGTC,UACIhC,EAASjR,SAASkT,oBAAoB,QAAS1U,KAAKuT,iBACpDd,EAASG,YAAY8B,oBAAoB,QAAS1U,KAAK0T,iBACvDjB,EAASG,YAAY8B,oBAAoB,UAAW1U,KAAKqU,wBACzD5B,EAASjR,SAASmT,UAAY,GAGlCL,iBAAiBM,EAAOC,GACpB,IAAKhC,EAAOiC,IAAIF,GACZ,MAAM,IAAI3P,MAAK,0CAA2C2P,OAG9D,KAAMC,aAAwBE,UAC1B,MAAM,IAAI9P,MAAM,0BAGpBjF,KAAKoT,cAAcwB,GAAOI,IAAIH,GAGlCI,cAAcL,EAAOM,GACjB,IAAI,MAAML,KAAgB7U,KAAKoT,cAAcwB,GACzCC,EAAaK,GAIrBzB,SAASD,GACL2B,uBAAqB,KACjBC,aAAarC,GAEb,MAAMsC,WA8LK/V,EAAMgW,GACzB,OAAOhW,GACH,IAAK,QAIL,IAAK,SACD,OAAOiW,WAAWD,EAAarP,OAHnC,IAAK,WACD,OAAOqP,EAAaE,gBAIpB,OAAOF,EAAarP,OAvMDwP,CAAcjC,EAAEG,OAAOrU,KAAMkU,EAAEG,QAC5C+B,EAAalC,EAAEG,OAAOpK,GAAGoM,QAAO,WAAa,IAEnD3V,KAAKgT,QAAQjT,OAASgC,OAAOC,OAAO,IAC7BhC,KAAKgT,QAAQjT,QACf2V,GAAaL,IAGlB,MAAOtV,OAAAA,EAAM0E,aAAEA,GAAgBzE,KAAKuU,gBAAgBmB,GACpD,GAAIjR,EAAc,CACd,MAAMmR,EAAiB7V,EAAO0E,aAAe1E,EAAO0E,aAAazE,KAAKgT,QAAQjT,OAAQA,GAAUyT,EAAEG,OAAO1N,MACzGxB,EAAaoR,UAAYD,EAG7B,MAAMV,EAAYnT,OAAOC,OAAO,CAC5BH,QAAS6T,EACTzP,MAAOoP,EACPS,cAAetC,EACfR,QAAShT,KAAKgT,UAGlBhT,KAAKiV,cAAc,QAASC,GAE5BnC,EAAegD,YAAU,KACrB/V,KAAKiV,cAAc,SAAUC,GAC7BlV,KAAKgW,6BACN,QAIX9C,YACI,MAAMD,EAAQgD,aAAaC,QAjGH,kBAkGxB,GAAIjD,EACA,IACI,OAAOkD,KAAKC,MAAMnD,GACpB,MAAMO,GACJ,OAAO,KAIf,OAAO,KAGXY,aAAaiC,GACLA,EACAJ,aAAaK,QA/GO,iBA+G0BH,KAAKI,UAAUF,IAE7DJ,aAAaO,WAjHO,kBAqH5BR,yBAAyBlR,EAAiB9E,KAAKgT,QAAQlO,gBACnDA,EAAetB,SAAQ3B,IACnB,GAAIA,EAAQtC,KAAM,CACd,MAAMkX,EAAoB5U,EAAQtC,KAAKS,KAAKgT,QAAQjT,QAC9C2W,EAAY1W,KAAKuU,gBAAgB1S,EAAQ1C,KAAK0C,QAChD6U,IACID,EACAC,EAAUlQ,gBAAgB,UAE1BkQ,EAAU/P,aAAa,SAAU,WAK7C,GAAI9E,EAAQyC,WAAY,CACpB,MAAMqS,EAAuB9U,EAAQyC,WAAWtE,KAAKgT,QAAQjT,QACvD6W,EAAU5W,KAAKuU,gBAAgB1S,EAAQ1C,KAAKkU,MAC9CuD,IACID,EACAC,EAAQjQ,aAAa,WAAY,YAEjCiQ,EAAQpQ,gBAAgB,aAKhC3E,EAAQhC,UACRG,KAAKgW,yBAAyBnU,EAAQhC,aAKlDgX,aAAa9W,GACTgC,OAAO+U,QAAQ/W,GAAQyD,SAAO,EAAGrE,EAAK8G,MAClC,MAAOoN,MAAAA,EAAOpN,MAAO8Q,GAAW/W,KAAKuU,gBAAgBpV,GACjDkU,IACmB,aAAfA,EAAM/T,KACN+T,EAAMmC,QAAUvP,EAEhBoN,EAAMpN,MAAQA,EAEd8Q,IACAA,EAAQlB,UAAY5P,OAMpCuO,eAAewC,EAAcvE,EAASjR,SAAUyV,GAC5C,MAAMnS,EAAiBmS,GAAmBjX,KAAKgT,QAAQlO,eACvDkS,EAAYrC,UAAY,GACxB,MAAMuC,EAAmBxE,SAASyE,yBAGlCrS,EAAetB,SAAQ3B,IACnB,MAAMuV,EAAS,UAAavV,EAAQ1C,MAC9BoV,EAAkBvU,KAAKuU,gBAAgB1S,EAAQ1C,KAAO,CAAEY,OAAQ8B,GAEtE,IAAI6U,EAEJ,GAAqB,UAAjB7U,EAAQvC,KAAkB,CAC1BoX,EAAYhE,SAAS2E,cAAc,YACnCX,EAAU/P,aAAa,aAAc9E,EAAQ1C,KAC7C,MAAMmY,EAAe5E,SAAS2E,cAAc,UAC5CC,EAAa3Q,aAAa,WAAY,KACtC2Q,EAAazB,UAAYhU,EAAQzC,MACjCsX,EAAUa,YAAYD,GACtBZ,EAAUc,UAAY,wBACO,cAAzB3V,EAAQxC,eACRqX,EAAU5C,UAAUkB,IAAI,aACxBhV,KAAKiT,MAAME,OAAOtR,EAAQ1C,MAAO,GAErC,MAAMsY,EAAoB/E,SAAS2E,cAAc,OACjDX,EAAUa,YAAYE,GACtBzX,KAAKwU,eAAeiD,EAAmB5V,EAAQhC,cAE9C,CACD6W,EAAYhE,SAAS2E,cAAc,OACnCX,EAAUc,UAAY,UAEtB,MAAMpY,EAAQsT,SAAS2E,cAAc,SACrCjY,EAAMuV,UAAY9S,EAAQzC,MAC1BA,EAAMuH,aAAa,MAAOyQ,GAE1B,MAAMR,EAAUrC,EAAgBlB,MAAQX,SAAS2E,cAAc,SAC/DT,EAAQjQ,aAAa,OAAQ9E,EAAQvC,MACrC,MAAM+V,EAAarV,KAAKgT,QAAQjT,OAAO8B,EAAQ1C,MAAQ0C,EAAQxC,aAS/D,GAPIwC,EAAQpC,MACRsC,OAAO+U,QAAQjV,EAAQpC,MAAM+D,SAAO,EAAG/D,EAAMwG,MACzC,MAAMyR,EAAYzR,aAAiB8O,SAAW9O,EAAMjG,KAAKgT,SAAW/M,EACpE2Q,EAAQjQ,aAAalH,EAAMiY,MAId,aAAjB7V,EAAQvC,KACRsX,EAAQpB,QAAUH,EAClBqB,EAAUa,YAAYX,GACtBF,EAAUa,YAAYnY,OACnB,CACHsX,EAAUa,YAAYnY,GACtBsX,EAAUa,YAAYX,GACtBA,EAAQ3Q,MAAQoP,EAChB,MAAMsC,EAAepD,EAAgB9P,aAAeiO,SAAS2E,cAAc,QAC3EM,EAAapO,GAAE,UAAa1H,EAAQ1C,YACpCwY,EAAa9B,UAAYhU,EAAQ4C,aAAe5C,EAAQ4C,aAAazE,KAAKgT,QAAQjT,OAAQ8B,GAAWwT,EACrGsC,EAAaH,UAAY,sBACzBd,EAAUa,YAAYI,GAE1Bf,EAAQrN,GAAK6N,EAGjBpX,KAAKuU,gBAAgB1S,EAAQ1C,KAAK0C,QAAU6U,EAC5CA,EAAUnN,GAAE,WAAc1H,EAAQ1C,MAClC+X,EAAiBK,YAAYb,MAGjCM,EAAYO,YAAYL,GACxBlX,KAAK4X,oBACLzC,uBAAqB,IAAOnV,KAAKgW,6BAGrC4B,oBACmBnF,EAASG,YAAYiF,iBAAiB,gBAC9CrU,SAAQsU,IACX,MAAM9D,EAAU8D,EAAQ7D,QAAQC,MAC1B6D,EAAa/X,KAAKiT,MAAME,OAAOa,GACX,kBAAf+D,IACHA,EACAD,EAAQhE,UAAUkE,OAAO,aAEzBF,EAAQhE,UAAUkB,IAAI,kBC9P1C,MAAMiD,EAAevF,SAASC,cAAc,kBAEtCuF,EAAW,CACbC,WAAYF,EAAatF,cAAc,gBACvCyF,WAAYH,EAAatF,cAAc,gBACvClQ,MAAOwV,EAAatF,cAAc,sBAClClM,OAAQwR,EAAatF,cAAc,uBACnC0F,kBAAmBJ,EAAatF,cAAc,sCAGzC2F,EAAWC,EAAIC,EAAM,KAC1B,OAAOtW,KAAKiI,MAAMoO,EAAK,KAAOC,GAGlC,MAAMC,EAAc,CAChBvW,KAAKiI,MAAM/E,OAAOsT,OAAOjW,OACzBP,KAAKiI,MAAM/E,OAAOsT,OAAOjS,SAGvBkS,EAAQ,CACV,CAAEpP,GAAI,MAAOtB,KAAM,iBACnB,CAAEsB,GAAI,KAAMtD,MAAO,CAAC,GAAI,IAAInF,KAAIwF,GAAKgS,EAAWhS,KAAK+R,mBAAmB,GACxE,CAAE9O,GAAI,KAAMtD,MAAO,CAAC,GAAI,IAAInF,KAAIwF,GAAKgS,EAAWhS,KAAK+R,mBAAmB,GACxE,CAAE9O,GAAI,SAAUtB,KAAI,gBAAkBwQ,EAAYG,KAAK,QAAS3S,MAAOwS,GACvE,CAAElP,GAAI,SAAUtB,KAAM,cCnB1B,MAAM4Q,EAAW,CACbzW,OAAQsQ,SAASC,cAAc,UAC/BmG,gBAAiBpG,SAASC,cAAc,mBACxCoG,YAAarG,SAASC,cAAc,iBACpCqG,YAAatG,SAASC,cAAc,iBACpCsG,iBAAkBvG,SAASC,cAAc,wBAGvCuG,EAAW3K,EAAazN,KAAIqY,GAAW,IAAIA,EAAQN,EAASzW,UAElE,IAAIgX,EACJ,MAAMC,EAAS,sBCfCC,GACRtZ,KAAKuZ,SAAW,CACZC,OAAQF,EACR1Z,KAAM0Z,EAAS3G,cAAc,SAC7B8G,iBAAkBH,EAAS3G,cAAc,sBACzC+G,eAAgBJ,EAAS3G,cAAc,oBACvCgH,QAASL,EAAS3G,cAAc,aAChCiH,SAAUN,EAAS3G,cAAc,eAErC3S,KAAKiK,UAAY,EACjBjK,KAAK6Z,YAAa,EAElB7Z,KAAKuZ,SAASG,eAAepF,iBAAiB,SAAO,EAAIX,OAACA,MACtD3T,KAAK6H,MAAM8L,EAAO1N,UAGtBjG,KAAKuZ,SAASI,QAAQrF,iBAAiB,SAAO,KAC1CtU,KAAK8Z,UAGT9Z,KAAKuZ,SAASK,SAAStF,iBAAiB,SAAO,KAC3CtU,KAAK+Z,WAIbC,aAAaC,GACLja,KAAK6Z,aAAeI,IACpBja,KAAKuZ,SAASC,OAAO1F,UAAUC,OAAO,WACtC/T,KAAK6Z,WAAaI,GAI1BC,OAAOC,GAAY7S,KAACA,GAAO,GAAQ,IAC/BtH,KAAKma,UAAYA,EACjBna,KAAKiK,UAAYkQ,EAAUnS,eAC3BhI,KAAKuZ,SAASG,eAAe/S,aAAa,MAAO3G,KAAKiK,WACtDjK,KAAK6H,KAAK7H,KAAKiK,UAAW,CAAEmQ,gBAAiB9S,IAGjD+S,eAAe9S,GACXvH,KAAKuZ,SAAS3Z,KAAKiW,UAAS,GAAMtO,KAAYvH,KAAKiK,YACnDjK,KAAKuZ,SAASG,eAAezT,MAAQsB,EAGzCM,KAAKN,GAAW6S,gBAACA,GAAkB,GAAQ,IACvCpa,KAAK+Z,QACL/Z,KAAKqa,eAAe9S,GAChB6S,GACApa,KAAKma,UAAUtS,KAAKN,GAI5B+S,gBAAgBzI,GACZ7R,KAAKuZ,SAASE,iBAAiB5D,UAAYhE,EAG/CiI,OACI9Z,KAAKga,cAAa,GAClBO,qBAAqBva,KAAKwa,aAEtBxa,KAAKma,UAAU5S,WAAavH,KAAKiK,WACjCjK,KAAKma,UAAUtS,KAAK,GAGxB,MAAMuJ,EAAOpR,eAIJJ,IACAwR,EAAK+I,UAAUxS,WAAWC,KAG3BwJ,EAAK4I,cAAa,GAFlB5I,EAAKoJ,YAAcrF,sBAAsBvV,GAI7CwR,EAAKiJ,eAAejJ,EAAK+I,UAAU5S,UARvC3H,GAYJma,QACIQ,qBAAqBva,KAAKwa,aAC1Bxa,KAAKga,cAAa,GAGtBjG,SACQ/T,KAAK6Z,WACL7Z,KAAK+Z,QAEL/Z,KAAK8Z,SDxESpH,SAASC,cAAc,YAC3C8H,EAAe,UDWjBC,QAAUhI,SAASC,cAAc,+BAEpBgI,eAACA,IACV,MAAMC,EAAsBlI,SAASyE,yBACrCwB,EAAMnV,SAAQkD,IACV,MAAMmU,EAAenI,SAAS2E,cAAc,UAC5CwD,EAAalU,aAAa,QAASD,EAAK6C,IACxCsR,EAAahF,UAAYnP,EAAKuB,MAAQvB,EAAK6C,GAC3CqR,EAAoBrD,YAAYsD,MAEpC3C,EAASC,WAAWZ,YAAYqD,GAChC5a,KAAK8a,aAAenC,EAAM,GAE1BT,EAASC,WAAW7D,iBAAiB,UAAUd,IAC3C,MAAMuH,EAAiBvH,EAAEG,OAAO1N,MAC1BS,EAAOiS,EAAMqC,MAAI,EAAGzR,GAAAA,KAAQA,IAAOwR,IAGzC,GAFA/a,KAAK8a,aAAepU,EAEJ,WAAZA,EAAK6C,GAAiB,CACtB2O,EAASE,WAAW5R,gBAAgB,UACpC,MAAO/D,EAAOgE,GAAUkU,IACxBzC,EAASzV,MAAMwD,MAAQxD,EACvByV,EAASzR,OAAOR,MAAQQ,OAExByR,EAASE,WAAWzR,aAAa,SAAU,UAC3C3G,KAAKib,gBAAgBjb,KAAKkb,YAG1BxU,EAAK2R,kBACLH,EAASG,kBAAkB7R,gBAAgB,UAE3C0R,EAASG,kBAAkB1R,aAAa,SAAU,aAI1DuR,EAASG,kBAAkB/D,iBAAiB,UAAUd,IAClDxT,KAAKib,gBAAgBjb,KAAKkb,eAG9BhD,EAASE,WAAW9D,iBAAiB,WAAWd,IAC5CA,EAAEG,OAAOwH,YAGbjD,EAASE,WAAW9D,iBAAiB,SAAO,KACxCtU,KAAKib,gBAAgB,CACjB/C,EAASzV,MAAMwD,MAAQmV,SAASlD,EAASzV,MAAMwD,OAAS,KACxDiS,EAASzR,OAAOR,MAAQmV,SAASlD,EAASzR,OAAOR,OAAS,UAKtEgV,iBAAiBxY,EAAOgE,GAAU,IAC9BzG,KAAK0a,QAAQW,cAAc,IAAIC,YAAY,aAAc,CAAEC,OAAQ,OAAE9Y,SAAOgE,MAGhFyU,WACI,GAA6B,WAAzBlb,KAAK8a,aAAavR,GAClB,MAAO,CAAC6R,SAASlD,EAASzV,MAAMwD,MAAO,IAAKmV,SAASlD,EAASzR,OAAOR,MAAO,KACzE,CACH,IAAIA,EAAQjG,KAAK8a,aAAa7U,MAI9B,OAHIjG,KAAK8a,aAAazC,mBAA0D,eAArCH,EAASG,kBAAkBpS,QAClEA,EAAQrF,MAAM4a,KAAKvV,GAAO/E,WAEvB+E,KC1EyB,CACxC0U,eAAc,IAAQ,CAClB9B,EAASzW,OAAOgE,YAChByS,EAASzW,OAAOiE,gBAIxB,IAAIoV,WAmCKC,IACL,MAAMC,EAAejJ,SAAS2E,cAAc,KAC5CsE,EAAaC,SAAWxC,EAAenR,KAAO,OAC9C0T,EAAaE,KAAOhD,EAASzW,OAAO0Z,UAAU,aAC9CH,EAAahV,aAAa,SAAU,YACpCgV,EAAaI,iBAGRC,IACiB5C,EAAerZ,OACrCqZ,EAAerZ,OAAS,CACpBO,UAAU,EACViE,WAAW,EACXI,iBAAiB,EACjBH,aAAa,EACb5B,WAAY,WAEhBwW,EAAe9R,OACfoU,aAGKO,IACL5C,EAAOa,OAAOd,GACd,MAAM8C,EAAc/F,KAAKI,UAAU6C,EAAerZ,QAClDoc,QAAQC,aAAa,CACjBpJ,QAASoG,EAAe7P,GACxBxJ,OAAQmc,GACT9C,EAAenR,KAAI,YAAcmR,EAAe7P,aAAa8S,mBAAmBH,eA4C9EI,EAAYrJ,GACjB,MAAMD,EAAUuJ,EAAgBtJ,EAAMD,SACtC6F,EAASC,gBAAgB7S,MAAQ+M,EAAQzJ,GACzCiT,EAAcxJ,EAAS,CACnB1L,MAAM,EACNvH,OAAQkT,EAAMlT,OAASoW,KAAKC,MAAMnD,EAAMlT,QAAU,OAGtDqZ,EAAe9R,gBAGViV,EAAgBE,GACrB,MAAMzJ,EAAUkG,EAAS8B,MAAI,EAAGzR,GAAAA,KAAQA,IAAOkT,IAC/C,IAAKzJ,EACD,MAAM,IAAI/N,MAAK,oBAAqBwX,gBAExC,OAAOzJ,WAGFwJ,EAAcxJ,GAAUjT,OAACA,EAAMuH,KAAEA,GAAO,GAAQ,IACrD8R,EAAiBpG,EACbjT,IACAqZ,EAAerZ,OAASA,GAExB0b,GACAA,EAAShH,UAEbgH,EAAW,IAAIiB,EAAe,SAAC1J,SAASjT,IACxC0b,EAASnH,iBAAiB,SAAO,IAAQ8E,EAAe9R,SACxDmU,EAASnH,iBAAiB,SAAU2H,GAEpCpD,EAASE,YAAYpS,aAAa,OAAQqM,EAAQxJ,MAC9ClC,GACA8R,EAAe9R,OAEnB+R,EAAOa,OAAOd,EAAgB,CAAE9R,MAAM,IACtCoL,SAASiK,MAAK,GAAM3J,EAAQ/K,2BA5IhC7C,OAAOkP,iBAAiB,mBAOpB,cA4FAlP,OAAOkP,iBAAiB,YAAU,EAAIrB,MAAAA,MAClCqJ,EAAYrJ,MAjGhB2J,cA4EAnC,EAAaC,QAAQpG,iBAAiB,cAAY,EAAIiH,OAACA,iBAKzC9Y,MAAAA,EAAKgE,OAAEA,IACrBoS,EAASzW,OAAOoE,gBAAgB,SAChCqS,EAASzW,OAAOoE,gBAAgB,UAE5B/D,GAASgE,GACToS,EAASzW,OAAOya,MAAMpa,MAAK,GAAMA,MACjCoW,EAASzW,OAAOya,MAAMpW,OAAM,GAAMA,OAElCoS,EAASzW,OAAOoE,gBAAgB,SAGpC4S,EAAe9R,OAfXwV,CAAQvB,MA5EZwB,cA4DA7D,EAAS1V,SAAQwP,IACb,MAAMgK,EAAStK,SAAS2E,cAAc,UACtC2F,EAAOnH,UAAY7C,EAAQ/K,KAC3B+U,EAAO/W,MAAQ+M,EAAQzJ,GACvBsP,EAASC,gBAAgBvB,YAAYyF,MAGzCnE,EAASC,gBAAgBxE,iBAAiB,UAAUd,IAChD,MAAMiJ,EAAYjJ,EAAEG,OAAO1N,MAC3BuW,EAAcD,EAAgBE,IAC9BN,QAAQc,UAAU,CAAEjK,QAASyJ,GAAaA,EAAW,YAAcA,MArEvES,GAEIf,QAAQlJ,OAAOD,QACfsJ,EAAYH,QAAQlJ,WACjB,CACH,MAAMkK,EAAc,IAAIC,gBAAgB1K,SAAS2K,SAASC,QACpDC,EAAeJ,EAAYpS,IAAI,WAErC,GAAIwS,EAAc,CACd,MAAMxd,EAASod,EAAYpS,IAAI,UAC/BuR,EAAY,CAAEtJ,QAASuK,SAAcxd,SAErCyc,EAActD,EAAS,IAI/B9T,OAAOkP,iBAAiB,UAAQ,IAC5B8E,EAAe9R,SAGnBuR,EAASzW,OAAOkS,iBAAiB,SAAO,KACpC+E,EAAOtF,YAGX8E,EAASG,YAAY1E,iBAAiB,QAASoH,GAC/C7C,EAASI,iBAAiB3E,iBAAiB,QAAS0H","sources":["src/scripts/helpers/Color.js","src/scripts/Nails.js","src/scripts/StringArt.js","src/scripts/string_art_types/Circle.js","src/scripts/string_art_types/Spiral.js","src/scripts/string_art_types/Spirals.js","src/scripts/string_art_types/Eye.js","src/scripts/pattern_types.js","src/scripts/string_art_types/Star.js","src/scripts/string_art_types/Assymetry.js","src/scripts/string_art_types/TimesTables.js","src/scripts/string_art_types/Wave.js","src/scripts/string_art_types/Circles.js","src/scripts/editor/EditorControls.js","src/scripts/editor/EditorSizeControls.js","src/scripts/main.js","src/scripts/editor/Player.js"],"sourcesContent":["const COLOR_CONTROLS = [\n    {\n        key: 'color',\n        label: 'String color',\n        defaultValue: \"#ff4d00\",\n        type: \"color\",\n        show: ({isMultiColor}) => !isMultiColor\n    },\n    {\n        key: 'isMultiColor',\n        label: 'Use multiple colors',\n        defaultValue: false,\n        type: \"checkbox\",\n    },\n    {\n        key: 'multicolorRange',\n        label: 'Multicolor range',\n        defaultValue: 360,\n        type: \"range\",\n        attr: {\n            min: 1,\n            max: 360,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'multicolorStart',\n        label: 'Multicolor start',\n        defaultValue:0,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 360,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'reverseColors',\n        label: 'Reverse colors order',\n        defaultValue: false,\n        type: \"checkbox\",\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'saturation',\n        label: 'Saturation',\n        defaultValue: 100,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 100,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'lightness',\n        label: 'Lightness',\n        type: 'group',\n        defaultValue: 'minimized',\n        show: ({isMultiColor}) => isMultiColor,\n        children: [\n            {\n                key: 'multicolorByLightness',\n                label: 'Multi lightness',\n                defaultValue: false,\n                type: 'checkbox',\n                show: ({isMultiColor}) => isMultiColor\n            },\n            {\n                key: 'minLightness',\n                label: 'Minimum lightness',\n                defaultValue:0,\n                type: \"range\",\n                attr: {\n                    min: 0,\n                    max: 100,\n                    step: 1\n                },\n                show: ({multicolorByLightness, isMultiColor}) => multicolorByLightness && isMultiColor\n            },\n            {\n                key: 'maxLightness',\n                label: 'Maximum lightness',\n                defaultValue:100,\n                type: \"range\",\n                attr: {\n                    min: 0,\n                    max: 100,\n                    step: 1\n                },\n                show: ({multicolorByLightness, isMultiColor}) => multicolorByLightness && isMultiColor\n            },\n        ]\n    },\n];\n\nexport default class Color {\n    constructor(config) {\n        this.config = config;\n        const {\n            multicolorRange,\n            colorCount,\n            multicolorByLightness,\n            minLightness = 0,\n            maxLightness = 100,\n            multicolorStart,\n            darkMode,\n            saturation,\n            reverseColors,\n            isMultiColor,\n        } = config;\n        \n        if (isMultiColor) {\n            this.multiColorStep = multicolorRange / colorCount;\n            this.multiColorLightnessStep = multicolorByLightness ? (maxLightness - minLightness) / colorCount : 1;\n\n            this.colors = new Array(colorCount).fill(null).map((_, colorIndex) => {\n                const lightness = multicolorByLightness ? minLightness + this.multiColorLightnessStep * colorIndex : darkMode ? 50 : 40;\n                return `hsl(${multicolorStart + colorIndex * this.multiColorStep}, ${saturation}%, ${lightness}%)`;\n            });\n\n            if (reverseColors) {\n                this.colors.reverse();\n            }\n        }\n    }\n\n    /**\n     * Returns the color to be used in the provided layer index. If no multiColor is used, will use the 'color' config property. \n     * @param {number} colorIndex \n     * @returns string\n     */\n    getColor(colorIndex) {\n        const {\n            isMultiColor,\n            colorCount,\n            color,\n        } = this.config;\n    \n        if (!isMultiColor) {\n            return color;\n        }\n\n        if (colorIndex >= colorCount) {\n            colorIndex = colorCount - 1;\n        }\n\n        return this.colors[colorIndex];\n    }\n   \n    static getConfig({ include, exclude, defaults = {}}) {\n        const controls = getControls();\n\n        return {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: controls\n        };\n\n        function getControls(controlsConfig = COLOR_CONTROLS) {\n            return controlsConfig\n                .filter(({key}) => (!exclude || !exclude.includes(key)) && (!include || include.includes(key)))\n                .map(control => {\n                    const finalControl = {\n                        ...control,\n                        defaultValue: defaults[control.key] ?? control.defaultValue\n                    };\n\n                    if (control.type === \"group\") {\n                        finalControl.children = getControls(control.children);\n                    } \n                    return Object.freeze(finalControl);\n                });\n        }\n    }\n}","const PI2 = Math.PI * 2;\nconst NUMBER_MARGIN = 4;\n\nexport default class Nails {\n    constructor(canvas, config) {\n        this.context = canvas.getContext(\"2d\");\n        this.setConfig(config);\n        this.centerX = canvas.width / 2;\n        this.nails = [];\n    }\n\n    setConfig({ nailRadius, nailsColor, nailNumbersFontSize}) {\n        this.nailRadius = nailRadius;\n        this.nailsColor = nailsColor;\n        this.nailNumbersFontSize = nailNumbersFontSize;\n        this.nails = [];\n    }\n\n    // Adds a nail to be rendered. nail: { point, number }\n    addNail(nail) {\n        this.nails.push(nail);\n    }\n\n    fill({ drawNumbers = true} = {}) {\n        this.context.globalCompositeOperation = \"source-over\";\n        this.context.beginPath();\n        this.context.fillStyle = this.nailsColor;\n        this.context.textBaseline = \"middle\";\n        this.context.font = `${this.nailNumbersFontSize}px sans-serif`;\n        const nailNumberOffset = this.nailRadius + NUMBER_MARGIN;\n\n        this.nails.forEach(({ point: [x, y], number }) => {\n            this.context.moveTo(x + this.nailRadius, y);\n            this.context.arc(x, y, this.nailRadius, 0, PI2)\n            if (drawNumbers && number !== undefined && number !== null) {\n                const isRightAlign = x < this.centerX;\n\n                const numberPosition = [\n                    isRightAlign ? x - nailNumberOffset : x + nailNumberOffset,\n                    y\n                ];\n\n                this.context.textAlign = isRightAlign ? \"right\" : \"left\";\n                this.context.fillText(String(number), ...numberPosition);\n            }\n        });\n\n        this.context.fill();\n        this.nails = [];\n    }\n}","import Nails from \"./Nails.js\";\n\nconst COLORS = {\n    dark: \"#171717\",\n    light: \"#ffffff\"\n};\n\nconst COMMON_CONFIG_CONTROLS = [\n    {\n        key: 'strings',\n        label: 'Strings',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'showStrings',\n                label: 'Show strings',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showNails}) => !showNails\n            },\n            {\n                key: 'stringWidth',\n                label: 'String width',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 0.2,\n                    max: 4,\n                    step: 0.2\n                },\n                show: ({showStrings}) => showStrings\n            },\n        ]\n    },\n    {\n        key: 'nails',\n        label: 'Nails',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'showNails',\n                label: 'Show nails',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showStrings}) => !showStrings\n            },\n            {\n                key: 'margin',\n                label: 'Margin',\n                defaultValue: 20,\n                type: \"number\",\n                attr: {\n                    min: 0,\n                    max: 500,\n                    step: 1\n                },\n                displayValue: ({margin}) => `${margin}px`\n            },\n            {\n                key: 'nailRadius',\n                label: 'Nail size',\n                defaultValue: 1.5,\n                type: \"range\",\n                attr: {\n                    min: 0.5,\n                    max: 5,\n                    step: 0.25\n                },\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'nailsColor',\n                label: 'Nails color',\n                defaultValue: \"#ffffff\",\n                type: \"color\",\n            },\n            {\n                key: 'showNailNumbers',\n                label: 'Show nail numbers',\n                defaultValue: false,\n                type: \"checkbox\",\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'nailNumbersFontSize',\n                label: 'Nail numbers font size',\n                defaultValue: 10,\n                type: \"range\",\n                attr: {\n                    min: 6,\n                    max: 24,\n                    step: 0.5\n                },\n                displayValue: ({nailNumbersFontSize}) => `${nailNumbersFontSize}px`,\n                show: ({showNails, showNailNumbers}) => showNails && showNailNumbers\n            },\n        ]\n    },\n    {\n        key: 'background',\n        label: 'Background',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'darkMode',\n                label: 'Dark mode',\n                defaultValue: true,\n                type: 'checkbox'\n            },\n            {\n                key: 'customBackgroundColor',\n                label: 'Custom background color',\n                defaultValue: false,\n                type: 'checkbox',\n            },\n            {\n                key: 'backgroundColor',\n                label: 'Background color',\n                defaultValue: COLORS.dark,\n                type: 'color',\n                show: ({customBackgroundColor}) => customBackgroundColor\n            },\n        ]\n    }\n];\n\nclass StringArt {\n    constructor(canvas) {\n        if (!canvas) {\n            throw new Error(\"Canvas not specified!\");\n        }\n\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        const dpr = window.devicePixelRatio || 1;\n        const bsr = this.ctx.webkitBackingStorePixelRatio ||\n            this.ctx.mozBackingStorePixelRatio ||\n            this.ctx.msBackingStorePixelRatio ||\n            this.ctx.oBackingStorePixelRatio ||\n            this.ctx.backingStorePixelRatio || 1;\n        this.pixelRatio = dpr / bsr;\n    }\n\n    get configControls() {\n        return (this.controls ?? []).concat(COMMON_CONFIG_CONTROLS);\n    }\n\n    get defaultConfig() {\n        if (!this._defaultConfig) {\n            this._defaultConfig = flattenConfig(this.configControls);\n        }\n\n        return this._defaultConfig;\n    }\n\n    get config() {\n        return this._config ?? this.defaultConfig;\n    }\n\n    set config(value) {\n        this._config = Object.assign({}, this.defaultConfig, value);\n    }\n\n    getSize() {\n        const canvasScreenSize = [this.canvas.clientWidth, this.canvas.clientHeight];\n        return canvasScreenSize.map(v => v * this.pixelRatio);\n    }\n\n    setUpDraw() {\n        this.canvas.removeAttribute('width');\n        this.canvas.removeAttribute('height');\n        const [width, height] = this.size = this.getSize();\n        Object.assign(this, this.size);\n        this.canvas.setAttribute('width', width);\n        this.canvas.setAttribute('height', height);\n        this.center = this.size.map(value => value / 2);\n\n        if (this.nails) {\n            this.nails.setConfig(this.config);\n        } else {\n            this.nails = new Nails(this.canvas, this.config);\n        }\n\n        this.ctx.clearRect(0, 0, ...this.size);\n        this.ctx.lineWidth = this.config.stringWidth;\n    }\n\n    afterDraw() {\n        const {showNails, showNailNumbers} = this.config;\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill({ drawNumbers: showNailNumbers });\n        }\n    }\n\n    initDraw() {\n        this.setUpDraw(this.config);\n        const { showNails, showNailNumbers, darkMode, backgroundColor, customBackgroundColor } = this.config;\n\n        this.ctx.beginPath();\n        this.ctx.globalCompositeOperation = 'destination-over';\n        this.ctx.fillStyle = customBackgroundColor ? backgroundColor : darkMode ? COLORS.dark : COLORS.light;\n        this.ctx.fillRect(0, 0, ...this.size);\n\n        this.ctx.globalCompositeOperation = 'source-over';\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill({ drawNumbers: showNailNumbers });\n        }\n    }\n\n    /**\n     * Draws the string art on canvas\n     * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n     */\n    draw({position = Infinity} = {}) {\n        this.initDraw();\n        const { showStrings } = this.config;\n\n        if (showStrings) {\n            this.stringsIterator = this.generateStrings();\n            this.position = 0;\n\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        }\n    }\n\n    goto(position) {\n        if (position === this.position) {\n            return;\n        }\n\n        if (this.stringsIterator && position > this.position) {\n            while(!this.drawNext().done && this.position < position);\n        } else {\n            this.draw({ position });\n        }\n    }\n\n    drawNext() {\n        const result = this.stringsIterator.next();\n\n        if (result.done) {\n            this.afterDraw();\n        }\n        else {\n            this.position++;\n        }\n\n        return result;\n    }\n\n    generateStrings() {\n        throw new Error(\"generateStrings method not defined!\");\n    }\n\n    getStepCount() {\n        throw new Error(`'getStepCount' method not implemented for string art type \"${this.name}\"`);\n    }\n}\n\nfunction flattenConfig(configControls) {\n    return configControls.reduce((config, {key, defaultValue, children}) =>\n        children ? {\n            ...config,\n            ...flattenConfig(children)\n        } : {\n            ...config,\n            [key]: defaultValue\n        },\n    {});\n}\n\nexport default StringArt;\n","import Nails from \"../Nails.js\";\n\nconst PI2 = Math.PI * 2;\n\nexport default class Circle {\n    constructor(config) {\n        const { n, size, margin = 0, rotation = 0, center, radius, reverse = false } = this.config = config;\n        \n        this.center = center ?? size.map(v => v / 2);\n        this.radius = radius ?? Math.min(...this.center) - margin;\n\n        this.indexAngle = PI2 / n;\n        this.rotationAngle = -PI2 * rotation;\n        this.isReverse = reverse;\n    }\n\n    getPoint(index = 0) {\n        const realIndex = this.isReverse ? this.config.n - 1 - index : index;\n\n        return [\n            this.center[0] + Math.sin(realIndex * this.indexAngle + this.rotationAngle) * this.radius,\n            this.center[1] + Math.cos(realIndex * this.indexAngle + this.rotationAngle) * this.radius\n        ];\n    }\n\n    /**\n     * Given a Nails instance, uses it to draw the nails of this Circle\n     * @param {Nails} nails \n     * @param {{nailsNumberStart?: number, getNumber?: Function}} param1 \n     */\n    drawNails(nails, {nailsNumberStart = 0, getNumber} = {}) {\n        for (let i=0; i < this.config.n; i++) {\n            nails.addNail({point: this.getPoint(i), number: getNumber ? getNumber(i) : i + nailsNumberStart});\n        }\n    }\n\n    static rotationConfig = Object.freeze({\n        key: 'rotation',\n        label: 'Rotation',\n        defaultValue: 0,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 1 + 1/360,\n            step: 1 / 360,\n        },\n        displayValue: (config, { key }) => `${Math.round(config[key] * 360)}°`\n    });\n\n    static nailsConfig = Object.freeze({\n        key: 'n',\n        label: 'Number of nails',\n        defaultValue: 144,\n        type: \"range\",\n        attr: {\n            min: 3,\n            max: 300,\n            step: 1\n        }\n    });\n}","import Color from \"../helpers/Color.js\";\nimport StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nconst COLOR_CONFIG = Color.getConfig({ \n    defaults: {\n        isMultiColor: true,\n        color: \"#ffbb29\",\n        multicolorRange: \"21\",\n        multicolorStart: 32,\n        multicolorByLightness: true,\n        minLightness: 36,\n        maxLightness: 98\n    },\n});\n\nCOLOR_CONFIG.children.splice(COLOR_CONFIG.children.findIndex(({key}) => key === 'isMultiColor'), 0, {\n    key: 'colorCount',\n    label: 'Colors count',\n    defaultValue: 7,\n    type: \"range\",\n    attr: {\n        min: 1,\n        max: 20,\n        step: 1,\n    },\n    show: ({isMultiColor}) => isMultiColor\n});\n\nexport default class Spiral extends StringArt{\n    id = \"spiral\";\n    name = \"Spiral\";\n    link = \"https://www.etsy.com/il-en/listing/840974781/boho-wall-decor-artwork-spiral-round\";\n    controls = [\n        {\n            ...Circle.nailsConfig,\n            defaultValue: 200\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 5,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 60,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 0.5,\n            type: \"range\",\n            attr: {\n                min: ({config: {n}}) => 1 / n,\n                max: 1,\n                step: ({config: {n}}) => 1 / n,\n            },\n            displayValue: ({n, innerLength}) => Math.round(n * innerLength)\n        },\n        {\n            ...Circle.rotationConfig,\n            defaultValue: 0.75,\n        },\n        COLOR_CONFIG,\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        const { n, rotation, layers, margin, colorCount } = this.config;\n        this.layersCount = layers ?? 1;\n\n        this.circle = new Circle({\n            size: this.size,\n            n,\n            rotation,\n            margin,\n        });\n\n        this.color = new Color({\n            ...this.config,\n            colorCount: layers ?? colorCount\n        });\n\n        if (colorCount) {\n            const stepCount = this.getStepCount();\n            const stepsPerColor = Math.floor(stepCount / colorCount);\n            this.colorsMap = new Map();\n            for (let i = 0; i < colorCount; i++) {\n                this.colorsMap.set(i * stepsPerColor, this.color.getColor(i))\n            }\n        }\n    }\n\n    *drawSpiral({ shift = 0, color = \"#ffffff\" } = {}) {\n        const {repetition, innerLength, n, colorCount} = this.config;\n\n        let currentInnerLength = Math.round(innerLength * n);\n        let repetitionCount = 0;\n        this.ctx.strokeStyle = color;\n        let prevPoint = this.circle.getPoint(shift);\n        let isPrevPoint = false;\n\n        for(let i=0; currentInnerLength > 0; i++) {\n            if (this.colorsMap) {\n                const stepColor = this.colorsMap.get(i);\n                if (stepColor) {\n                    this.ctx.strokeStyle = stepColor;\n                }\n            }\n            \n            this.ctx.beginPath();\n            this.ctx.moveTo(...prevPoint);\n            const nextPointIndex = isPrevPoint ? i + shift : i + currentInnerLength + shift;\n\n            this.ctx.lineTo(...this.circle.getPoint(nextPointIndex));\n            repetitionCount++;\n            if (repetitionCount === repetition) {\n                currentInnerLength--;\n                repetitionCount = 0;\n                i++;\n                this.ctx.lineTo(...this.circle.getPoint(nextPointIndex + 1));\n                prevPoint = this.circle.getPoint(nextPointIndex + 2);\n            } else {\n                prevPoint = this.circle.getPoint(nextPointIndex + 1);\n            }\n\n            this.ctx.lineTo(...prevPoint);\n            this.ctx.stroke();\n\n            yield i;\n            isPrevPoint = !isPrevPoint;\n        }\n      \n    }\n\n    *generateStrings() {\n        yield* this.drawSpiral({ \n            color: this.color.getColor(0), \n        });\n    }\n\n    getStepCount() {\n        const {innerLength, repetition, n} = this.config;\n        return this.layersCount * Math.round(innerLength * n) * repetition;\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n}","import StringArt from \"../StringArt.js\";\n\nclass Spirals extends StringArt{\n    name = \"Spirals\";\n    id = \"spirals\";\n    link = \"https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 92,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'radiusIncrease',\n            label: 'Size',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 0.2\n            }\n        },\n        {\n            key: 'angleStep',\n            label: 'Angle step',\n            defaultValue: 0.05,\n            type: \"range\",\n            attr: {\n                min: 0.01,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'nSpirals',\n            label: 'Number of spirals',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'String color',\n            defaultValue: \"#00ddff\",\n            type: \"color\",\n        }\n    ];\n    \n    *generatePoints() {\n        const {\n            n, radiusIncrease, angleStep, nSpirals,\n        } = this.config;\n        \n        let currentRadius = 0;\n        let angle = 0;\n        const [centerx, centery] = this.center;\n\n        for (let i = 0; i < n; i++) {\n            for (let s = 0; s < nSpirals; s++) {\n                const rotation = s * 2 * Math.PI / nSpirals;\n                const point = [\n                    centerx + currentRadius * Math.sin(angle + rotation),\n                    centery + currentRadius * Math.cos(angle + rotation)\n                ];\n                yield {point, nailNumber: `${s}_${i}`};\n            }\n            \n            angle += angleStep;\n            currentRadius += radiusIncrease;\n        }\n    }\n\n    *generateStrings() {\n        const points = this.generatePoints();\n        let index = 0;\n        this.ctx.beginPath();\n        this.ctx.moveTo(...this.center);\n        this.ctx.strokeStyle = this.config.color;\n\n        let lastPoint = this.center;\n\n        for (const {point} of points) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...lastPoint);\n            lastPoint = point;\n            this.ctx.lineTo(...point);\n            this.ctx.strokeStyle = this.config.color;\n            this.ctx.stroke();\n            yield index++;\n        }\n    }\n\n    getStepCount() {\n        const { n, nSpirals } = this.config;\n        return n * nSpirals;\n    }\n\n    drawNails() {\n        const points = this.generatePoints();\n        for (const {point, nailNumber} of points) {\n            this.nails.addNail({point, number: nailNumber});\n        }\n    }\n}\n\nexport default Spirals;","import StringArt from \"../StringArt.js\";\n\nconst MARGIN = 20;\nconst SIDES = ['left', 'bottom', 'right', 'top'];\nconst SIDES_ORDER = ['left', 'bottom', 'right', 'top'];\n\nconst SIDES_ROTATION = {\n    left: 0,\n    bottom: Math.PI / 2,\n    right: Math.PI,\n    top: Math.PI * 1.5\n};\n\nclass Eye extends StringArt{\n    name = \"Eye\"\n    id = \"eye\"\n    link = \"https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails per side',\n            defaultValue: 82,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'angle',\n            label: 'Layer angle',\n            defaultValue: 30,\n            displayValue: ({angle}) => `${angle}°`,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 45,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'color1',\n                    label: 'String #1 color',\n                    defaultValue: \"#11e8bd\",\n                    type: \"color\",\n                },\n                {\n                    key: 'color2',\n                    label: 'String #2 color',\n                    defaultValue: \"#6fff52\",\n                    type: \"color\",\n                },\n                {\n                    key: 'colorPerLayer',\n                    label: 'Color per layer',\n                    defaultValue: false,\n                    type: 'checkbox'\n                },\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n\n        const { n, angle } = this.config;\n\n        this.maxSize = Math.min(...this.size) - 2 * MARGIN;\n        this.nailSpacing = this.maxSize / (n - 1);\n        this.layerAngle = angle * Math.PI / 180;\n    }\n\n    // Sides: top, right, bottom, left\n    getPoint({index, angle, layerStart, rotation}) {\n        const theta = angle + rotation;\n\n        const point = { \n            x: layerStart.x, \n            y: layerStart.y + this.nailSpacing * index\n        };\n\n        const pivot = { x: this.center[0], y: this.center[1] };\n\n        const cosAngle = Math.cos(theta);\n        const sinAngle = Math.sin(theta);\n\n        const position = [\n            (cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x),\n            (sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y),\n        ];\n        return position;\n    }\n\n    *drawSide({ side, color = '#ffffff', angle, size, layerStart, layerStringCount }) {\n        const sideIndex = SIDES.indexOf(side);\n        const nextSide = SIDES[sideIndex === SIDES.length - 1 ? 0 : sideIndex + 1];\n        const rotation = SIDES_ROTATION[side];\n        const nextSideRotation = SIDES_ROTATION[nextSide];\n        \n        const sideProps = { layerStringCount, size, layerStart, angle };\n        \n        for(let i=0; i <= layerStringCount; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...this.getPoint({ side, index: i, rotation, ...sideProps}));\n            this.ctx.lineTo(...this.getPoint({side: nextSide, index: i, rotation: nextSideRotation, ...sideProps}));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            yield i;\n        }\n    }\n\n    _getLayerProps(layerIndex) {\n        const colors = this._getLayerColors(layerIndex);\n        const layerAngle = this.layerAngle * layerIndex;\n        const layerSize = this.maxSize / Math.pow(Math.cos(this.layerAngle) + Math.sin(this.layerAngle), layerIndex);\n        const layerStart = { \n            x: this.center[0] - layerSize / 2, \n            y: this.center[1] - layerSize / 2\n        };\n        const layerStringCount = Math.floor(layerSize / this.nailSpacing);\n\n        return {\n            colors, layerAngle, layerSize, layerStart, layerStringCount\n        };\n    }\n\n    _getLayerColors(layerIndex) {\n        const { color1, color2, colorPerLayer } = this.config;\n        if (colorPerLayer) {\n            const layerColor = layerIndex % 2 ? color1 : color2;\n            return [layerColor, layerColor, layerColor, layerColor];\n        }\n        else {\n            return [color2, color1, color2, color1];\n        }\n    }\n\n    *drawLayer(layerIndex) {\n        const {\n            colors, layerAngle, layerSize, layerStart, layerStringCount\n        } = this._getLayerProps(layerIndex);\n\n        for (let i = 0; i < SIDES.length; i++) {\n            yield* this.drawSide({ \n                color: colors[i], \n                side: SIDES_ORDER[i],\n                angle: layerAngle,\n                size: layerSize,\n                layerStart,\n                layerStringCount\n            });\n        }\n    }\n\n    *generateStrings() {\n        const {layers} =  this.config;\n        for(let layer = layers - 1; layer >= 0; layer--) {\n            yield* this.drawLayer(layer);\n        }\n    }\n\n    getStepCount() {\n        let count = 0;\n        const {layers, angle, n} = this.config;\n        const layerAngle = angle * Math.PI / 180;\n        const maxSize = Math.min(this.canvas.clientWidth, this.canvas.clientHeight) - 2 * MARGIN;\n        const nailSpacing = maxSize / (n - 1);\n\n        for(let layer = 0; layer < layers; layer++) {\n            const layerSize = maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n            count += 4 * (Math.floor(layerSize / nailSpacing) + 1)\n        }\n\n        return count;\n    }\n\n    drawNails() {\n        const {layers} =  this.config;\n        for(let layer = layers - 1; layer >= 0; layer--) {\n            const {\n                layerAngle: angle, layerSize: size, layerStart, layerStringCount\n            } = this._getLayerProps(layer);\n\n            for (let s = 0; s < SIDES.length; s++) {\n                const sideOrder = SIDES_ORDER[s];\n                const rotation = SIDES_ROTATION[sideOrder];\n\n                for(let i=0; i <= layerStringCount; i++) {\n                    const sideProps = { layerStringCount, size, layerStart, angle };\n                    this.nails.addNail({\n                        point: this.getPoint({ sideOrder, index: i, rotation, ...sideProps}),\n                        number: `${layer}_${s}_${i}`\n                    });\n                }\n            }\n        }\n    }\n}\n\nexport default Eye;","import Spiral from \"./string_art_types/Spiral.js\";\nimport Spirals from \"./string_art_types/Spirals.js\";\nimport Wave from './string_art_types/Wave.js';\nimport Eye from './string_art_types/Eye.js';\nimport TimesTables from './string_art_types/TimesTables.js';\nimport Star from \"./string_art_types/Star.js\";\nimport Assymetry from \"./string_art_types/Assymetry.js\";\nimport Circles from './string_art_types/Circles.js';\n\nconst patternTypes = [Star, Assymetry, TimesTables, Spiral, Spirals, Wave, Eye, Circles];\n\nexport default patternTypes;\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Star extends StringArt{\n    name = \"Star\";\n    id = \"star\";\n    link = \"https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj\";\n    controls = [\n        {\n            key: 'sides',\n            label: 'Sides',\n            defaultValue: 3,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'sideNails',\n            label: 'Nails per side',\n            defaultValue: 40,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        Circle.rotationConfig,\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'innerColor',\n                    label: 'Star color',\n                    defaultValue: \"#2ec0ff\",\n                    type: \"color\",\n                },\n                {\n                    key: 'outterColor',\n                    label: 'Outter color',\n                    defaultValue: \"#2a82c6\",\n                    type: \"color\",\n                },\n            ]\n        }\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, sides} = this.config;\n            const extraNails = n % sides;\n            this._n = n - extraNails;\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const { sides, rotation, sideNails, margin = 0 } = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: sideNails * sides,\n            margin,\n            rotation,\n        });\n\n        this.sideAngle = Math.PI * 2 / sides;\n        this.nailSpacing = this.circle.radius / sideNails;\n        this.starCenterStart = (sideNails % 1) * this.nailSpacing;\n\n        this.sides = new Array(sides).fill(null).map((_, side) => {\n            const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n            const circlePointsStart = side * sideNails;\n\n            return {\n                sinSideAngle: Math.sin(sideAngle),\n                cosSideAngle: Math.cos(sideAngle),\n                circlePointsStart,\n                circlePointsEnd: circlePointsStart + sideNails\n            };\n        });\n    }\n\n    getStarPoint({ side, sideIndex }) {\n        const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n        const {sinSideAngle, cosSideAngle} = this.sides[side];\n        const [centerX, centerY] = this.circle.center;\n\n        return [\n            centerX + sinSideAngle * radius,\n            centerY + cosSideAngle * radius\n        ];\n    }\n\n    *generateStarPoints({ reverseOrder  = false} = {}) {\n        const {sides, sideNails} = this.config;\n\n        for (let side = 0; side < sides; side++) {\n            const prevSide = side === 0 ? sides - 1 : side - 1;\n            for (let i=0; i < sideNails; i++) {\n                const sideIndex = reverseOrder ? sideNails - i : i;\n                yield { side, prevSide, sideIndex, point: this.getStarPoint({ side, sideIndex }) };\n            }\n        }\n    }\n\n    *drawStar() {\n        const {innerColor, sideNails} = this.config;\n\n        this.ctx.strokeStyle = innerColor;\n        let prevPoint;\n\n        for (const { prevSide, sideIndex, point} of this.generateStarPoints()) {\n            this.ctx.beginPath();\n\n            if (sideIndex && !(sideIndex % 2)) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...point);\n            } else {\n                this.ctx.moveTo(...point);\n            }\n\n            const prevSideIndex = sideNails - sideIndex;\n            this.ctx.lineTo(...this.getStarPoint({ side: prevSide, sideIndex: prevSideIndex}))\n            prevPoint = point;\n            this.ctx.stroke();\n            yield;\n        }\n    }\n\n    *drawCircle() {\n        const {outterColor} = this.config;\n\n        let prevCirclePoint;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = outterColor;\n        for (const { side, prevSide, sideIndex, point} of this.generateStarPoints({ reverseOrder: true })) {\n            this.ctx.beginPath();\n            if (!prevCirclePoint) {\n                prevCirclePoint = this.circle.getPoint(this.sides[prevSide].circlePointsStart);\n            }\n\n            this.ctx.moveTo(...prevCirclePoint);\n\n            this.ctx.lineTo(...point);\n            this.ctx.stroke();\n\n            yield;\n\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            const nextPointIndex = isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex\n                : this.sides[side].circlePointsStart + sideIndex;\n\n            const nextPoint = this.circle.getPoint(nextPointIndex);\n            this.ctx.lineTo(...nextPoint);\n\n            prevCirclePoint = this.circle.getPoint(isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex + 1\n                : this.sides[side].circlePointsStart + sideIndex - 1);\n\n            this.ctx.lineTo(...prevCirclePoint);\n\n            this.ctx.stroke();\n            isPrevSide = !isPrevSide;\n            yield;\n        }\n    }\n\n    *generateStrings() {\n        yield* this.drawCircle();\n        yield* this.drawStar();\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n\n        for (const {point, side, sideIndex} of this.generateStarPoints()) {\n            this.nails.addNail({ point, number: sideIndex ? `${side}_${sideIndex}` : 0 });\n        }\n\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        const {sides, sideNails} = this.config;\n        const starCount = sideNails * sides;\n        return starCount * 3; // Once for each side + two more times for the side's circle\n    }\n}\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Assymetry extends StringArt{\n    name = \"Assymetry\";\n    id = \"assymetry\";\n    link = \"https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for\";\n    controls = [\n        Circle.nailsConfig,\n        Circle.rotationConfig,\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: [\n                {\n                    key: 'layer1',\n                    label: 'Layer 1',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show1',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size1',\n                            label: 'Size',\n                            defaultValue: 0.25,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size1, n}) => Math.round(n * size1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'end1',\n                            label: 'End Position',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n,\n                            },\n                            displayValue: ({end1, n}) => Math.round(n * end1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'color1',\n                            label: 'Color',\n                            defaultValue: \"#a94fb0\",\n                            type: \"color\",\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'reverse1',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show1}) => show1\n                        },\n                    ]\n                },\n                {\n                    key: 'layer2',\n                    label: 'Layer 2',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show2',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size2',\n                            label: 'Size',\n                            defaultValue: 0.125,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size2, n}) => Math.round(n * size2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'end2',\n                            label: 'End Position',\n                            defaultValue: 0.888,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'color2',\n                            label: 'Color',\n                            defaultValue: \"#ec6ad0\",\n                            type: \"color\",\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'reverse2',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show2}) => show2\n                        },\n                    ]\n                },\n                {\n                    key: 'layer3',\n                    label: 'Layer 3',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show3',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size3',\n                            label: 'Size',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size3, n}) => Math.round(n * size3),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'end3',\n                            label: 'End Position',\n                            defaultValue: 0.826,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'color3',\n                            label: 'Color',\n                            defaultValue: \"#f08ad5\",\n                            type: \"color\",\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'reverse3',\n                            label: 'Reverse',\n                            defaultValue: true,\n                            type: 'checkbox',\n                            show: ({show3}) => show3\n                        },\n                    ]\n                }\n            ]\n        },\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n\n    getSetUp() {\n        const { rotation, n, margin = 0 } = this.config;\n        const circle = new Circle({\n            size: this.getSize(),\n            n,\n            margin,\n            rotation: rotation - 0.25,\n        });\n\n        let lineSpacing = circle.indexAngle * circle.radius;\n        const lineNailCount = Math.floor(circle.radius / lineSpacing) - 1;\n        lineSpacing += (circle.radius - lineSpacing * lineNailCount) / lineNailCount;\n        const firstCirclePoint = circle.getPoint(0);\n        const totalNailCount = lineNailCount + n;\n        const totalIndexCount = totalNailCount + lineNailCount;\n        const layers = new Array(3).fill(null)\n            .map((_, i) => getLayer.call(this, i + 1))\n            .filter(({enable}) => enable)\n\n        return {\n            circle,\n            lineSpacing,\n            lineNailCount,\n            firstCirclePoint,\n            layers,\n            totalNailCount,\n            totalIndexCount,\n        };\n\n        function getLayer(layerIndex) {\n            const size = Math.round(n * this.config['size' + layerIndex]) + lineNailCount\n            return {\n                size,\n                endIndex: Math.round(this.config['end' + layerIndex] * (totalNailCount + lineNailCount)) - size,\n                color: this.config['color' + layerIndex],\n                enable: this.config['show' + layerIndex],\n                isReverse: this.config['reverse' + layerIndex],\n            };\n        }\n    }\n\n    /**\n     * Returns the position of a point on the line\n     * @param {index of the point in the circle, 0 is the center} index\n     */\n    getPoint(index) {\n        if (index < this.lineNailCount || index > this.totalNailCount) {\n            const linePosition = index < this.lineNailCount ? this.lineNailCount - index : index - this.totalNailCount;\n\n            const indexLength = (linePosition) * this.lineSpacing;\n            return [\n                this.firstCirclePoint[0] - indexLength * Math.sin(this.circle.rotationAngle),\n                this.firstCirclePoint[1] - indexLength * Math.cos(this.circle.rotationAngle)\n            ];\n        } else {\n            const circleIndex = index - this.lineNailCount;\n            return this.circle.getPoint(circleIndex);\n        }\n    }\n\n    *drawCircle({endIndex, color, isReverse, size}) {\n        let prevPoint;\n        let prevPointIndex;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = color;\n        const self = this;\n        const advance = isReverse ? -1 : 1;\n\n        for(let index = 0; index <= endIndex; index++) {\n            this.ctx.beginPath();\n\n            if (prevPoint) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...this.getPoint(prevPointIndex + advance));\n            } else {\n                this.ctx.moveTo(...this.getPoint(getPointIndex(index)));\n            }\n\n            prevPointIndex = getPointIndex(isPrevSide ? index : index + size);\n            prevPoint = this.getPoint(prevPointIndex);\n            this.ctx.lineTo(...prevPoint);\n            this.ctx.stroke();\n\n            yield;\n\n            isPrevSide = !isPrevSide;\n        }\n\n        function getPointIndex(index) {\n            return isReverse ? self.totalIndexCount - index : index;\n        }\n    }\n\n    *generateStrings() {\n        for (const layer of this.layers) {\n            yield* this.drawCircle(layer);\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails, { nailsNumberStart: this.lineNailCount });\n\n        for (let i=0; i < this.lineNailCount; i++) {\n            this.nails.addNail({ point: this.getPoint(i), number: i });\n        }\n    }\n\n    getStepCount() {\n        const {layers} = this.getSetUp();\n        return layers.reduce((stepCount, layer) =>\n            stepCount + layer.endIndex + 1, 0\n        );\n    }\n}\n","import Color from \"../helpers/Color.js\";\nimport StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nconst MARGIN = 20;\n\nexport default class TimesTables extends StringArt{\n    name = \"Times Tables\";\n    id = \"times_tables\";\n    link = \"https://www.youtube.com/watch?v=LWin7w9hF-E&ab_channel=Jorgedelatierra\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 180,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 240,\n                step: 1\n            }\n        },\n        {\n            key: 'base',\n            label: 'Multiplication',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 99,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 7,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        Circle.rotationConfig,\n        Color.getConfig({ defaults: {\n            isMultiColor: true,\n            multicolorRange: 180,\n            multicolorStart: 256,\n            color: \"#ff4d00\"\n        }}),\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, layers} = this.config;\n            const extraNails = n % layers;\n            this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const {layers, rotation} = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: this.n,\n            margin: MARGIN,\n            rotation,\n        });\n        \n        this.color = new Color({\n            ...this.config,\n            colorCount: layers,\n        });\n\n        this.layerShift = Math.floor(this.n / layers);\n    }\n\n    *drawTimesTable({ shift = 0, color = \"#f00\", steps, time }) {\n        const {base} = this.config;\n        const n = this.n;\n        const stepsToRender = steps ?? n;\n\n        let point = this.circle.getPoint(shift);\n\n        for(let i=1; i <= stepsToRender; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            point = this.circle.getPoint(i + shift);\n            this.ctx.lineTo(...point);\n            const toIndex = (i * base) % n;\n            this.ctx.lineTo(...this.circle.getPoint(toIndex + shift));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            \n            yield { instructions: `${i - 1} → ${i} → ${toIndex} → ${i}`, index: time * n + i };\n        }\n    }\n\n    *generateStrings() {\n        const {layers} = this.config;\n\n        for(let time = 0; time < layers; time++) {\n            const color = this.color.getColor(time);\n            yield* this.drawTimesTable({ \n                time,\n                color, \n                shift: this.layerShift * time,\n            });\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        return this.config.layers * this.n;\n    }\n}\n            ","import Color from \"../helpers/Color.js\";\nimport StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\nimport Spiral from \"./Spiral.js\";\n\nexport default class Wave extends Spiral{\n    id = \"wave\";\n    name = \"Wave\";\n    link = \"https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1\";\n    controls = [\n        {\n            ...Circle.nailsConfig,\n            defaultValue: 200\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 1,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 60,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 0.5,\n            type: \"range\",\n            attr: {\n                min: ({config: {n}}) => 1 / n,\n                max: 1,\n                step: ({config: {n}}) => 1 / n,\n            },\n            displayValue: ({n, innerLength}) => Math.round(n * innerLength)\n        },\n        {\n            ...Circle.rotationConfig,\n            defaultValue: 0.5,\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 11,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'layerSpread',\n            label: 'Layer spread',\n            defaultValue: 0.075,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: ({config: {n}}) => 1 / n\n            },\n            displayValue: ({layerSpread, n}) => Math.round(layerSpread * n)\n        },\n        Color.getConfig({ defaults: {\n            isMultiColor: true,\n            multicolorRange: 216,\n            multicolorStart: 263,\n            color: \"#ffffff\",\n            multicolorByLightness: true,\n            minLightness: 10,\n            maxLightness: 90\n        }}),\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        const { n, layerSpread } = this.config;\n        this.layerShift = Math.round(n * layerSpread);\n    }\n\n    *generateStrings() {\n        for(let layer = 0; layer < this.layersCount; layer++) {\n            yield* this.drawSpiral({ \n                color: this.color.getColor(layer), \n                shift: -this.layerShift * layer \n            });\n        }\n    }\n}","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Circles extends StringArt {\n    name = \"Circles\";\n    id = \"circles\";\n    link = \"https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Circle nails',\n            defaultValue: 80,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'minNailDistance',\n            label: 'Min nail distance',\n            defaultValue: 20,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'Color',\n            defaultValue: \"#ec6ad0\",\n            type: \"color\",\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: [\n                {\n                    key: 'layer1',\n                    label: 'Layer 1',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show1',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius1',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'x1',\n                            label: 'Position X',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'y1',\n                            label: 'Position Y',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation1',\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'reverse1',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show1}) => show1\n                        },\n                    ]\n                },\n                {\n                    key: 'layer2',\n                    label: 'Layer 2',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show2',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius2',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'x2',\n                            label: 'Position X',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'y2',\n                            label: 'Position Y',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation2',\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'reverse2',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show2}) => show2\n                        },\n                    ]\n                },\n                {\n                    key: 'layer3',\n                    label: 'Layer 3',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show3',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius3',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'x3',\n                            label: 'Position X',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'y3',\n                            label: 'Position Y',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation3',\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'reverse3',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show3}) => show3\n                        },\n                    ]\n                }\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n\n    getSetUp() {\n        const { n, margin = 0, minNailDistance } = this.config;\n        const size = this.getSize();\n\n        const maxRadius = Math.min(...size.map(v => v - 2 * margin)) / 2;\n        const layers = new Array(3).fill(null)\n            .map((_, i) => getLayer.call(this, i + 1))\n            .filter(({enable}) => enable)\n\n        const maxShapeNailsCount = Math.max(...layers.map(({circle}) => circle.config.n));\n\n        return {\n            layers,\n            maxShapeNailsCount,\n        };\n\n        function getLayer(layerIndex) {\n            const prop = prop => this.config[prop + layerIndex];\n            \n            const props = {\n                enable: prop('show'),\n                isReverse: prop('reverse'),\n                position: [prop('x'), prop('y')],\n                radius: maxRadius * prop('radius'),\n                rotation: prop('rotation'),\n            };\n\n            const circumsference = Math.PI * 2 * props.radius;\n            const circleNails = Math.min(n, Math.floor(circumsference / minNailDistance));\n\n            const circle = new Circle({\n                radius: props.radius,\n                center: props.position.map((v, i) => props.radius + margin + (size[i] - (props.radius + margin) * 2) * v),\n                n: circleNails,\n                rotation: props.rotation,\n                reverse: props.isReverse,\n            });\n\n            return {\n                circle,\n                ...props\n            };\n        }\n    }\n\n    getPoint(layer, index) {\n        const {circle} = layer;\n        let circleIndex = Math.round(index * circle.config.n / this.maxShapeNailsCount);\n        return circle.getPoint(circleIndex);\n    }\n\n    *generateStrings() {\n        const {n, color} = this.config;\n\n        this.ctx.strokeStyle = color;\n        let prevCirclePoint;\n\n        for (let i = 0; i < this.maxShapeNailsCount; i++) {\n            for(let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n                const layer = this.layers[layerIndex];\n                this.ctx.beginPath();\n                this.ctx.moveTo(...(prevCirclePoint ?? this.getPoint(layer, i)));\n\n                if (layerIndex === 0 && i) {\n                    this.ctx.lineTo(...this.getPoint(layer, i));\n                }\n\n                let nextLayerIndex = layerIndex + 1;\n                if (nextLayerIndex === this.layers.length) {\n                    nextLayerIndex = 0;\n                }\n\n                prevCirclePoint = this.getPoint(this.layers[nextLayerIndex], i);\n                this.ctx.lineTo(...prevCirclePoint)\n                this.ctx.stroke();\n                yield;\n            }\n        }\n        \n    }\n\n    drawNails() {\n        const n = this.config;\n        this.layers.forEach(({circle}, layerIndex) => circle.drawNails(this.nails, { \n            getNumber: i => `${layerIndex + 1}_${i + 1}` \n        }));\n    }\n\n    getStepCount() {\n        const {layers, maxShapeNailsCount} = this.getSetUp();\n        return layers.length * maxShapeNailsCount - 1;\n    }\n}\n","const elements = {\n    controls: document.querySelector(\"#controls\"),\n    sidebarForm: document.querySelector(\"#sidebar_form\"),\n};\n\nconst EVENTS = new Set(['input', 'change']);\nconst STATE_LOCAL_STORAGE_KEY = 'controls_state';\n\nlet inputTimeout;\n\nexport default class EditorControls {\n    constructor({pattern}) {\n        this.pattern = pattern;\n        this.state = this._getState() ?? { groups: {}};\n\n        this.eventHandlers = {\n            input: new Set(),\n            change: new Set()\n        }\n\n        this._wrappedOnInput = e => this._onInput(e);\n        this._toggleFieldset = e => {\n            if (e.target.nodeName === \"LEGEND\" ) {\n                e.target.parentElement.classList.toggle(\"minimized\");\n                const groupId = e.target.parentElement.dataset.group;\n                this.state = { ...this.state, groups: { ...this.state.groups, [groupId]: !e.target.parentElement.classList.contains(\"minimized\")}};\n                this._updateState(this.state);\n            }\n        };\n\n        this._toggleFieldSetOnEnter = e => {\n            if (e.target.nodeName === \"LEGEND\" && e.key === \"Enter\") {\n                this._toggleFieldset(e);\n            }\n        }\n\n        elements.controls.addEventListener(\"input\", this._wrappedOnInput);\n        elements.sidebarForm.addEventListener(\"click\", this._toggleFieldset);\n        elements.sidebarForm.addEventListener(\"keydown\", this._toggleFieldSetOnEnter);\n        this.controlElements = {};\n        this.renderControls();\n    }\n\n    destroy() {\n        elements.controls.removeEventListener(\"input\", this._wrappedOnInput);\n        elements.sidebarForm.removeEventListener(\"click\", this._toggleFieldset);\n        elements.sidebarForm.removeEventListener(\"keydown\", this._toggleFieldSetOnEnter);\n        elements.controls.innerHTML = \"\";\n    }\n\n    addEventListener(event, eventHandler) {\n        if (!EVENTS.has(event)) {\n            throw new Error(`Unsupported event for EditorControls, \"${event}\"!`);\n        }\n\n        if (!(eventHandler instanceof Function)) {\n            throw new Error('Invalid event handler.');\n        }\n\n        this.eventHandlers[event].add(eventHandler);\n    }\n\n    _triggerEvent(event, eventData) {\n        for(const eventHandler of this.eventHandlers[event]) {\n            eventHandler(eventData);\n        }\n    }\n\n    _onInput(e) {\n        requestAnimationFrame(() => {\n            clearTimeout(inputTimeout);\n\n            const inputValue = getInputValue(e.target.type, e.target);\n            const controlKey = e.target.id.replace(/^config_/, '');\n\n            this.pattern.config = Object.freeze({\n                ...this.pattern.config,\n                [controlKey]: inputValue\n            });\n\n            const {config, displayValue} = this.controlElements[controlKey];\n            if (displayValue) {\n                const formattedValue = config.displayValue ? config.displayValue(this.pattern.config, config) : e.target.value;\n                displayValue.innerText = formattedValue;\n            }\n\n            const eventData = Object.freeze({\n                control: controlKey,\n                value: inputValue,\n                originalEvent: e,\n                pattern: this.pattern,\n            });\n\n            this._triggerEvent('input', eventData);\n\n            inputTimeout = setTimeout(() => {\n                this._triggerEvent('change', eventData);\n                this.updateControlsVisibility();\n            }, 100);\n        });\n    }\n\n    _getState() {\n        const state = localStorage.getItem(STATE_LOCAL_STORAGE_KEY);\n        if (state) {\n            try {\n                return JSON.parse(state);\n            } catch(e) {\n                return null;\n            }\n        }\n\n        return null;\n    }\n\n    _updateState(newState) {\n        if (newState) {\n            localStorage.setItem(STATE_LOCAL_STORAGE_KEY, JSON.stringify(newState));\n        } else {\n            localStorage.removeItem(STATE_LOCAL_STORAGE_KEY);\n        }\n    }\n\n    updateControlsVisibility(configControls = this.pattern.configControls) {\n        configControls.forEach(control => {\n            if (control.show) {\n                const shouldShowControl = control.show(this.pattern.config);\n                const controlEl = this.controlElements[control.key].control;\n                if (controlEl) {\n                    if (shouldShowControl) {\n                        controlEl.removeAttribute('hidden');\n                    } else {\n                        controlEl.setAttribute('hidden', 'hidden');\n                    }\n                }\n            }\n\n            if (control.isDisabled) {\n                const shouldDisableControl = control.isDisabled(this.pattern.config);\n                const inputEl = this.controlElements[control.key].input;\n                if (inputEl) {\n                    if (shouldDisableControl) {\n                        inputEl.setAttribute('disabled', 'disabled');\n                    } else {\n                        inputEl.removeAttribute('disabled');\n                    }\n                }\n            }\n\n            if (control.children) {\n                this.updateControlsVisibility(control.children);\n            }\n        });\n    }\n\n    updateInputs(config) {\n        Object.entries(config).forEach(([key, value]) => {\n            const {input, value: valueEl} = this.controlElements[key];\n            if (input) {\n                if (input.type === \"checkbox\") {\n                    input.checked = value;\n                } else {\n                    input.value = value;\n                }\n                if (valueEl) {\n                    valueEl.innerText = value;\n                }\n            }\n        });\n    }\n\n    renderControls(containerEl = elements.controls, _configControls) {\n        const configControls = _configControls ?? this.pattern.configControls;\n        containerEl.innerHTML = \"\";\n        const controlsFragment = document.createDocumentFragment();\n\n\n        configControls.forEach(control => {\n            const controlId = `config_${control.key}`;\n            const controlElements = this.controlElements[control.key] = { config: control };\n\n            let controlEl;\n\n            if (control.type === \"group\") {\n                controlEl = document.createElement(\"fieldset\");\n                controlEl.setAttribute('data-group', control.key);\n                const groupTitleEl = document.createElement(\"legend\");\n                groupTitleEl.setAttribute(\"tabindex\", \"0\");\n                groupTitleEl.innerText = control.label;\n                controlEl.appendChild(groupTitleEl);\n                controlEl.className = \"control control_group\";\n                if (control.defaultValue === \"minimized\") {\n                    controlEl.classList.add('minimized');\n                    this.state.groups[control.key] = false;\n                }\n                const childrenContainer = document.createElement('div');\n                controlEl.appendChild(childrenContainer);\n                this.renderControls(childrenContainer, control.children);\n            }\n            else {\n                controlEl = document.createElement(\"div\");\n                controlEl.className = \"control\";\n\n                const label = document.createElement(\"label\");\n                label.innerHTML = control.label;\n                label.setAttribute(\"for\", controlId);\n\n                const inputEl = controlElements.input = document.createElement(\"input\");\n                inputEl.setAttribute(\"type\", control.type);\n                const inputValue = this.pattern.config[control.key] ?? control.defaultValue;\n\n                if (control.attr) {\n                    Object.entries(control.attr).forEach(([attr, value]) => {\n                        const realValue = value instanceof Function ? value(this.pattern) : value;\n                        inputEl.setAttribute(attr, realValue)\n                    });\n                }\n\n                if (control.type === \"checkbox\") {\n                    inputEl.checked = inputValue;\n                    controlEl.appendChild(inputEl);\n                    controlEl.appendChild(label);\n                } else {\n                    controlEl.appendChild(label);\n                    controlEl.appendChild(inputEl);\n                    inputEl.value = inputValue;\n                    const inputValueEl = controlElements.displayValue = document.createElement('span');\n                    inputValueEl.id = `config_${control.key}_value`;\n                    inputValueEl.innerText = control.displayValue ? control.displayValue(this.pattern.config, control) : inputValue;\n                    inputValueEl.className = \"control_input_value\";\n                    controlEl.appendChild(inputValueEl);\n                }\n                inputEl.id = controlId;\n            }\n\n            this.controlElements[control.key].control = controlEl;\n            controlEl.id = `control_${control.key}`;\n            controlsFragment.appendChild(controlEl);\n        });\n\n        containerEl.appendChild(controlsFragment);\n        this.updateGroupsState();\n        requestAnimationFrame(() => this.updateControlsVisibility())\n    }\n\n    updateGroupsState() {\n        const groups = elements.sidebarForm.querySelectorAll('[data-group]');\n        groups.forEach(groupEl => {\n            const groupId = groupEl.dataset.group;\n            const groupState = this.state.groups[groupId];\n            if (typeof groupState === 'boolean') {\n                if (groupState) {\n                    groupEl.classList.remove('minimized');\n                } else {\n                    groupEl.classList.add('minimized');\n                }\n            }\n        });\n    }\n}\n\n\nfunction getInputValue(type, inputElement) {\n    switch(type) {\n        case 'range':\n            return parseFloat(inputElement.value);\n        case 'checkbox':\n            return inputElement.checked;\n        case 'number':\n            return parseFloat(inputElement.value);\n        default:\n            return inputElement.value;\n    }\n}\n","const sizeControls = document.querySelector(\"#size_controls\");\n\nconst elements = {\n    sizeSelect: sizeControls.querySelector(\"#size_select\"),\n    sizeCustom: sizeControls.querySelector(\"#size_custom\"),\n    width: sizeControls.querySelector(\"#size_custom_width\"),\n    height: sizeControls.querySelector(\"#size_custom_height\"),\n    orientationSelect: sizeControls.querySelector(\"#size_orientation_select\"),\n};\n\nfunction cmToPixels(cm, dpi = 300) {\n    return Math.floor(cm / 2.54 * dpi);\n}\n\nconst SCREEN_SIZE = [\n    Math.floor(window.screen.width),\n    Math.floor(window.screen.height),\n];\n\nconst SIZES = [\n    { id: 'fit', name: 'Fit to screen' },\n    { id: 'A4', value: [20, 28].map(v => cmToPixels(v)), orientationSelect: true },\n    { id: 'A3', value: [28, 40].map(v => cmToPixels(v)), orientationSelect: true },\n    { id: 'screen', name: `Screen size (${SCREEN_SIZE.join('x')})`, value: SCREEN_SIZE},\n    { id: 'custom', name: 'Custom...' }\n];\n\nexport default class EditorSizeControls {\n    element = document.querySelector(\"#size_controls\");\n\n    constructor({ getCurrentSize }) {\n        const sizeOptionsFragment = document.createDocumentFragment();\n        SIZES.forEach(size => {\n            const sizeListItem = document.createElement('option');\n            sizeListItem.setAttribute('value', size.id);\n            sizeListItem.innerText = size.name ?? size.id;\n            sizeOptionsFragment.appendChild(sizeListItem);\n        });\n        elements.sizeSelect.appendChild(sizeOptionsFragment)\n        this.selectedSize = SIZES[0];\n\n        elements.sizeSelect.addEventListener(\"change\", e => {\n            const selectedSizeId = e.target.value;\n            const size = SIZES.find(({id}) => id === selectedSizeId);\n            this.selectedSize = size;\n\n            if (size.id === \"custom\") {\n                elements.sizeCustom.removeAttribute('hidden');\n                const [width, height] = getCurrentSize();\n                elements.width.value = width;\n                elements.height.value = height;\n            } else {\n                elements.sizeCustom.setAttribute('hidden', 'hidden');\n                this._notifyOnChange(this.getValue());\n            }\n\n            if (size.orientationSelect) {\n                elements.orientationSelect.removeAttribute('hidden');\n            } else {\n                elements.orientationSelect.setAttribute('hidden', 'hidden');\n            }\n        });\n\n        elements.orientationSelect.addEventListener(\"change\", e => {\n            this._notifyOnChange(this.getValue());\n        });\n\n        elements.sizeCustom.addEventListener(\"focusin\", e => {\n            e.target.select();\n        });\n\n        elements.sizeCustom.addEventListener('input', () => {\n            this._notifyOnChange([\n                elements.width.value ? parseInt(elements.width.value) : null,\n                elements.height.value ? parseInt(elements.height.value) : null\n            ]);\n        });\n    }\n\n    _notifyOnChange([width, height] = []) {\n        this.element.dispatchEvent(new CustomEvent('sizechange', { detail: { width, height }}));\n    }\n\n    getValue() {\n        if (this.selectedSize.id === \"custom\") {\n            return [parseInt(elements.width.value, 10), parseInt(elements.height.value, 10)];\n        } else {\n            let value = this.selectedSize.value;\n            if (this.selectedSize.orientationSelect && elements.orientationSelect.value === \"horizontal\") {\n                value = Array.from(value).reverse();\n            }\n            return value;\n        }\n\n    }\n}\n","import Player from \"./editor/Player.js\";\nimport patternTypes from \"./pattern_types.js\";\nimport EditorControls from \"./editor/EditorControls.js\";\nimport EditorSizeControls from \"./editor/EditorSizeControls.js\";\n\nconst elements = {\n    canvas: document.querySelector(\"canvas\"),\n    patternSelector: document.querySelector(\"#pattern_select\"),\n    patternLink: document.querySelector(\"#pattern_link\"),\n    downloadBtn: document.querySelector(\"#download_btn\"),\n    downloadNailsBtn: document.querySelector(\"#download_nails_btn\"),\n};\n\nconst patterns = patternTypes.map(Pattern => new Pattern(elements.canvas));\n\nlet currentPattern;\nconst player = new Player(document.querySelector(\"#player\"));\nconst sizeControls = new EditorSizeControls({\n    getCurrentSize: () => [\n        elements.canvas.clientWidth,\n        elements.canvas.clientHeight\n    ]\n});\n\nlet controls;\n\nwindow.addEventListener('load', main);\n\nfunction main() {\n    initRouting();\n    initSize();\n    initControls();\n\n    if (history.state?.pattern) {\n        updateState(history.state);\n    } else {\n        const queryParams = new URLSearchParams(document.location.search);\n        const queryPattern = queryParams.get('pattern');\n\n        if (queryPattern) {\n            const config = queryParams.get('config');\n            updateState({ pattern: queryPattern, config })\n        } else {\n            selectPattern(patterns[0]);\n        }\n    }\n\n    window.addEventListener(\"resize\", () =>\n        currentPattern.draw()\n    );\n\n    elements.canvas.addEventListener('click', () => {\n        player.toggle();\n    });\n\n    elements.downloadBtn.addEventListener('click', downloadCanvas);\n    elements.downloadNailsBtn.addEventListener('click', downloadNailsImage);\n}\n\nfunction downloadCanvas() {\n    const downloadLink = document.createElement('a');\n    downloadLink.download = currentPattern.name + '.png';\n    downloadLink.href = elements.canvas.toDataURL(\"image/png\");\n    downloadLink.setAttribute('target', 'download')\n    downloadLink.click();\n}\n\nfunction downloadNailsImage() {\n    const currentConfig = currentPattern.config;\n    currentPattern.config = {\n        darkMode: false,\n        showNails: true,\n        showNailNumbers: true,\n        showStrings: false,\n        nailsColor: \"#000000\",\n    };\n    currentPattern.draw();\n    downloadCanvas();\n}\n\nfunction onInputsChange() {\n    player.update(currentPattern);\n    const configQuery = JSON.stringify(currentPattern.config);\n    history.replaceState({\n        pattern: currentPattern.id,\n        config: configQuery\n    }, currentPattern.name, `?pattern=${currentPattern.id}&config=${encodeURIComponent(configQuery)}`);\n}\n\nfunction initControls() {\n    patterns.forEach(pattern => {\n        const option = document.createElement('option');\n        option.innerText = pattern.name;\n        option.value = pattern.id;\n        elements.patternSelector.appendChild(option);\n    });\n\n    elements.patternSelector.addEventListener('change', e => {\n        const patternId = e.target.value;\n        selectPattern(findPatternById(patternId));\n        history.pushState({ pattern: patternId }, patternId, \"?pattern=\" + patternId)\n    });\n}\n\nfunction initSize() {\n    sizeControls.element.addEventListener('sizechange', ({ detail }) => {\n        setSize(detail);\n    });\n}\n\nfunction setSize({width, height}) {\n    elements.canvas.removeAttribute('width');\n    elements.canvas.removeAttribute('height');\n\n    if (width && height) {\n        elements.canvas.style.width = `${width}px`;\n        elements.canvas.style.height = `${height}px`;\n    } else {\n        elements.canvas.removeAttribute('style');\n    }\n\n    currentPattern.draw();\n}\n\nfunction initRouting() {\n    window.addEventListener('popstate', ({state}) => {\n        updateState(state);\n    });\n}\n\nfunction updateState(state) {\n    const pattern = findPatternById(state.pattern);\n    elements.patternSelector.value = pattern.id;\n    selectPattern(pattern, {\n        draw: false,\n        config: state.config ? JSON.parse(state.config) : null\n    });\n\n    currentPattern.draw();\n}\n\nfunction findPatternById(patternId) {\n    const pattern = patterns.find(({id}) => id === patternId);\n    if (!pattern) {\n        throw new Error(`Pattern with id \"${patternId} not found!`);\n    }\n    return pattern;\n}\n\nfunction selectPattern(pattern, { config, draw = true} = {}) {\n    currentPattern = pattern;\n    if (config) {\n        currentPattern.config = config;\n    }\n    if (controls) {\n        controls.destroy();\n    }\n    controls = new EditorControls({pattern, config});\n    controls.addEventListener('input', () => currentPattern.draw());\n    controls.addEventListener('change', onInputsChange);\n\n    elements.patternLink.setAttribute(\"href\", pattern.link);\n    if (draw) {\n        currentPattern.draw();\n    }\n    player.update(currentPattern, { draw: false });\n    document.title = `${pattern.name} - String Art Studio`;\n}\n","export default class Player {\n    constructor(parentEl) {\n        this.elements = {\n            player: parentEl,\n            step: parentEl.querySelector('#step'),\n            stepInstructions: parentEl.querySelector('#step_instructions'),\n            playerPosition: parentEl.querySelector('#player_position'),\n            playBtn: parentEl.querySelector('#play_btn'),\n            pauseBtn: parentEl.querySelector('#pause_btn')\n        };\n        this.stepCount = 0;\n        this._isPlaying = false;\n\n        this.elements.playerPosition.addEventListener('input', ({ target }) => {\n            this.goto(+target.value)\n        });\n\n        this.elements.playBtn.addEventListener('click', () => {\n            this.play();\n        });\n\n        this.elements.pauseBtn.addEventListener('click', () => {\n            this.pause();\n        });\n    }\n\n    updateStatus(isPlaying) {\n        if (this._isPlaying !== isPlaying) {\n            this.elements.player.classList.toggle('playing');\n            this._isPlaying = isPlaying;\n        }\n    }\n\n    update(stringArt, { draw = true} = {}) {\n        this.stringArt = stringArt;\n        this.stepCount = stringArt.getStepCount();\n        this.elements.playerPosition.setAttribute('max', this.stepCount);\n        this.goto(this.stepCount, { updateStringArt: draw });\n    }\n\n    updatePosition(position) {\n        this.elements.step.innerText = `${position}/${this.stepCount}`;\n        this.elements.playerPosition.value = position;\n    }\n\n    goto(position, { updateStringArt = true} = {}) {\n        this.pause();\n        this.updatePosition(position);\n        if (updateStringArt) {\n            this.stringArt.goto(position);\n        }\n    }\n\n    setInstructions(instructions) {\n        this.elements.stepInstructions.innerText = instructions;\n    }\n\n    play() {\n        this.updateStatus(true);\n        cancelAnimationFrame(this.renderRafId);\n\n        if (this.stringArt.position === this.stepCount) {\n            this.stringArt.goto(0);\n        }\n\n        const self = this;\n\n        step();\n\n        function step() {\n            if (!self.stringArt.drawNext().done) {\n                self.renderRafId = requestAnimationFrame(step);\n            } else {\n                self.updateStatus(false);\n            }\n            self.updatePosition(self.stringArt.position);\n        }\n    }\n\n    pause() {\n        cancelAnimationFrame(this.renderRafId);\n        this.updateStatus(false);\n    }\n\n    toggle() {\n        if (this._isPlaying) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n}\n"],"names":["$e8c1397eac31f13e$var$COLOR_CONTROLS","key","label","defaultValue","type","show","isMultiColor","attr","min","max","step","children","multicolorByLightness","config","this","multicolorRange","colorCount","minLightness","maxLightness","multicolorStart","darkMode","saturation","reverseColors","multiColorStep","multiColorLightnessStep","colors","Array","fill","map","_","colorIndex","lightness","reverse","getColor","color","include","exclude","defaults","controls","getControls","controlsConfig","filter","includes","control","finalControl","Object","freeze","$a8180031c78213da$var$PI2","Math","PI","canvas","context","getContext","setConfig","centerX","width","nails","nailRadius","nailsColor","nailNumbersFontSize","addNail","nail","push","drawNumbers","globalCompositeOperation","beginPath","fillStyle","textBaseline","font","nailNumberOffset","forEach","point","x","y","number","moveTo","arc","isRightAlign","numberPosition","textAlign","fillText","String","$65e05ee91a8797e3$var$COLORS","$65e05ee91a8797e3$var$COMMON_CONFIG_CONTROLS","isDisabled","showNails","showStrings","displayValue","margin","showNailNumbers","customBackgroundColor","$65e05ee91a8797e3$var$flattenConfig","configControls","reduce","$65e05ee91a8797e3$export$2e2bcd8739ae039","Error","ctx","dpr","window","devicePixelRatio","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","concat","defaultConfig","_defaultConfig","_config","value","assign","getSize","clientWidth","clientHeight","v","setUpDraw","removeAttribute","height","size","setAttribute","center","$a8180031c78213da$export$2e2bcd8739ae039","clearRect","lineWidth","stringWidth","afterDraw","drawNails","initDraw","backgroundColor","fillRect","draw","position","Infinity","stringsIterator","generateStrings","drawNext","done","goto","result","next","getStepCount","name","$188437ce07b37c18$var$PI2","n","rotation","radius","indexAngle","rotationAngle","isReverse","getPoint","index","realIndex","sin","cos","nailsNumberStart","getNumber","i","round","$828d2af56886c091$var$COLOR_CONFIG","$e8c1397eac31f13e$export$2e2bcd8739ae039","getConfig","splice","findIndex","id","link","$188437ce07b37c18$export$2e2bcd8739ae039","nailsConfig","innerLength","rotationConfig","super","layers","layersCount","circle","stepCount","stepsPerColor","floor","colorsMap","Map","set","shift","repetition","currentInnerLength","repetitionCount","strokeStyle","prevPoint","isPrevPoint","stepColor","get","nextPointIndex","lineTo","stroke","drawSpiral","$17fe1039ca333e84$export$2e2bcd8739ae039","radiusIncrease","angleStep","nSpirals","currentRadius","angle","centerx","centery","s","nailNumber","points","generatePoints","lastPoint","$f11ad0f2a18da5c9$var$SIDES","$f11ad0f2a18da5c9$var$SIDES_ORDER","$f11ad0f2a18da5c9$var$SIDES_ROTATION","left","bottom","right","top","$f11ad0f2a18da5c9$export$2e2bcd8739ae039","maxSize","nailSpacing","layerAngle","layerStart","theta","pivot","cosAngle","sinAngle","side","layerStringCount","sideIndex","indexOf","nextSide","length","nextSideRotation","sideProps","_getLayerProps","layerIndex","_getLayerColors","layerSize","pow","color1","color2","colorPerLayer","layerColor","drawSide","layer","drawLayer","count","sideOrder","$8b13425f1e264518$export$2e2bcd8739ae039","_n","sides","extraNails","sideNails","sideAngle","starCenterStart","circlePointsStart","sinSideAngle","cosSideAngle","circlePointsEnd","getStarPoint","centerY","reverseOrder","prevSide","innerColor","generateStarPoints","prevSideIndex","outterColor","prevCirclePoint","isPrevSide","nextPoint","drawCircle","drawStar","size1","show1","end1","size2","show2","end2","size3","show3","getSetUp","lineSpacing","lineNailCount","firstCirclePoint","totalNailCount","totalIndexCount","getLayer","call","enable","endIndex","indexLength","circleIndex","prevPointIndex","self","advance","getPointIndex","layerShift","steps","time","base","stepsToRender","toIndex","instructions","drawTimesTable","$828d2af56886c091$export$2e2bcd8739ae039","layerSpread","minNailDistance","maxRadius","maxShapeNailsCount","prop","props","circumsference","circleNails","nextLayerIndex","$2fc16ffa17719734$var$elements","document","querySelector","sidebarForm","$2fc16ffa17719734$var$EVENTS","Set","$2fc16ffa17719734$var$inputTimeout","pattern","state","_getState","groups","eventHandlers","input","change","_wrappedOnInput","e","_onInput","_toggleFieldset","target","nodeName","parentElement","classList","toggle","groupId","dataset","group","contains","_updateState","_toggleFieldSetOnEnter","addEventListener","controlElements","renderControls","destroy","removeEventListener","innerHTML","event","eventHandler","has","Function","add","_triggerEvent","eventData","requestAnimationFrame","clearTimeout","inputValue","inputElement","parseFloat","checked","$2fc16ffa17719734$var$getInputValue","controlKey","replace","formattedValue","innerText","originalEvent","setTimeout","updateControlsVisibility","localStorage","getItem","JSON","parse","newState","setItem","stringify","removeItem","shouldShowControl","controlEl","shouldDisableControl","inputEl","updateInputs","entries","valueEl","containerEl","_configControls","controlsFragment","createDocumentFragment","controlId","createElement","groupTitleEl","appendChild","className","childrenContainer","realValue","inputValueEl","updateGroupsState","querySelectorAll","groupEl","groupState","remove","$0597ff46967fdd49$var$sizeControls","$0597ff46967fdd49$var$elements","sizeSelect","sizeCustom","orientationSelect","$0597ff46967fdd49$var$cmToPixels","cm","dpi","$0597ff46967fdd49$var$SCREEN_SIZE","screen","$0597ff46967fdd49$var$SIZES","join","$52852adbc3c0b381$var$elements","patternSelector","patternLink","downloadBtn","downloadNailsBtn","$52852adbc3c0b381$var$patterns","Pattern","$52852adbc3c0b381$var$currentPattern","$52852adbc3c0b381$var$player","parentEl","elements","player","stepInstructions","playerPosition","playBtn","pauseBtn","_isPlaying","play","pause","updateStatus","isPlaying","update","stringArt","updateStringArt","updatePosition","setInstructions","cancelAnimationFrame","renderRafId","$52852adbc3c0b381$var$sizeControls","element","getCurrentSize","sizeOptionsFragment","sizeListItem","selectedSize","selectedSizeId","find","_notifyOnChange","getValue","select","parseInt","dispatchEvent","CustomEvent","detail","from","$52852adbc3c0b381$var$controls","$52852adbc3c0b381$var$downloadCanvas","downloadLink","download","href","toDataURL","click","$52852adbc3c0b381$var$downloadNailsImage","$52852adbc3c0b381$var$onInputsChange","configQuery","history","replaceState","encodeURIComponent","$52852adbc3c0b381$var$updateState","$52852adbc3c0b381$var$findPatternById","$52852adbc3c0b381$var$selectPattern","patternId","$2fc16ffa17719734$export$2e2bcd8739ae039","title","$52852adbc3c0b381$var$initRouting","style","$52852adbc3c0b381$var$setSize","$52852adbc3c0b381$var$initSize","option","pushState","$52852adbc3c0b381$var$initControls","queryParams","URLSearchParams","location","search","queryPattern"],"version":3,"file":"index.9aa695c5.js.map"}