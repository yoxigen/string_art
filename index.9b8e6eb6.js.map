{"mappings":"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","sources":["src/scripts/Nails.js","src/scripts/StringArt.js","src/scripts/string_art_types/Spirals.js","src/scripts/helpers/Color.js","src/scripts/string_art_types/Circle.js","src/scripts/string_art_types/Eye.js","src/scripts/pattern_types.js","src/scripts/string_art_types/Star.js","src/scripts/string_art_types/Assymetry.js","src/scripts/string_art_types/TimesTables.js","src/scripts/string_art_types/Spiral.js","src/scripts/string_art_types/Circles.js","src/scripts/editor/EditorControls.js","src/scripts/editor/EditorSizeControls.js","src/scripts/main.js","src/scripts/editor/Player.js"],"sourcesContent":["const PI2 = Math.PI * 2;\nconst NUMBER_MARGIN = 4;\n\nexport default class Nails {\n    constructor(canvas, config) {\n        this.context = canvas.getContext(\"2d\");\n        this.setConfig(config);\n        this.centerX = canvas.width / 2;\n        this.nails = [];\n    }\n\n    setConfig({ nailRadius, nailsColor, nailNumbersFontSize}) {\n        this.nailRadius = nailRadius;\n        this.nailsColor = nailsColor;\n        this.nailNumbersFontSize = nailNumbersFontSize;\n        this.nails = [];\n    }\n\n    // Adds a nail to be rendered. nail: { point, number }\n    addNail(nail) {\n        this.nails.push(nail);\n    }\n\n    fill({ drawNumbers = true} = {}) {\n        this.context.globalCompositeOperation = \"source-over\";\n        this.context.beginPath();\n        this.context.fillStyle = this.nailsColor;\n        this.context.textBaseline = \"middle\";\n        this.context.font = `${this.nailNumbersFontSize}px sans-serif`;\n        const nailNumberOffset = this.nailRadius + NUMBER_MARGIN;\n\n        this.nails.forEach(({ point: [x, y], number }) => {\n            this.context.moveTo(x + this.nailRadius, y);\n            this.context.arc(x, y, this.nailRadius, 0, PI2)\n            if (drawNumbers && number !== undefined && number !== null) {\n                const isRightAlign = x < this.centerX;\n\n                const numberPosition = [\n                    isRightAlign ? x - nailNumberOffset : x + nailNumberOffset,\n                    y\n                ];\n\n                this.context.textAlign = isRightAlign ? \"right\" : \"left\";\n                this.context.fillText(String(number), ...numberPosition);\n            }\n        });\n\n        this.context.fill();\n        this.nails = [];\n    }\n}","import Nails from \"./Nails.js\";\n\nconst COLORS = {\n    dark: \"#171717\",\n    light: \"#ffffff\"\n};\n\nconst COMMON_CONFIG_CONTROLS = [\n    {\n        key: 'general',\n        label: 'General',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'showStrings',\n                label: 'Show strings',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showNails}) => !showNails\n            },\n            {\n                key: 'stringWidth',\n                label: 'String width',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 0.2,\n                    max: 4,\n                    step: 0.2\n                },\n                show: ({showStrings}) => showStrings\n            },\n            {\n                key: 'margin',\n                label: 'Margin',\n                defaultValue: 20,\n                type: \"number\",\n                attr: {\n                    min: 0,\n                    max: 500,\n                    step: 1\n                },\n                displayValue: ({margin}) => `${margin}px`\n            }\n        ]\n    },\n    {\n        key: 'nails',\n        label: 'Nails',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'showNails',\n                label: 'Show nails',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showStrings}) => !showStrings\n            },\n            {\n                key: 'nailRadius',\n                label: 'Nail size',\n                defaultValue: 1.5,\n                type: \"range\",\n                attr: {\n                    min: 0.5,\n                    max: 5,\n                    step: 0.25\n                },\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'nailsColor',\n                label: 'Nails color',\n                defaultValue: \"#ffffff\",\n                type: \"color\",\n            },\n            {\n                key: 'showNailNumbers',\n                label: 'Show nail numbers',\n                defaultValue: false,\n                type: \"checkbox\",\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'nailNumbersFontSize',\n                label: 'Nail numbers font size',\n                defaultValue: 10,\n                type: \"range\",\n                attr: {\n                    min: 6,\n                    max: 24,\n                    step: 0.5\n                },\n                displayValue: ({nailNumbersFontSize}) => `${nailNumbersFontSize}px`,\n                show: ({showNails, showNailNumbers}) => showNails && showNailNumbers\n            },\n        ]\n    },\n    {\n        key: 'background',\n        label: 'Background',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'darkMode',\n                label: 'Dark mode',\n                defaultValue: true,\n                type: 'checkbox'\n            },\n            {\n                key: 'customBackgroundColor',\n                label: 'Custom background color',\n                defaultValue: false,\n                type: 'checkbox',\n            },\n            {\n                key: 'backgroundColor',\n                label: 'Background color',\n                defaultValue: COLORS.dark,\n                type: 'color',\n                show: ({customBackgroundColor}) => customBackgroundColor\n            },\n        ]\n    }\n];\n\nclass StringArt {\n    constructor(canvas) {\n        if (!canvas) {\n            throw new Error(\"Canvas not specified!\");\n        }\n\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        const dpr = window.devicePixelRatio || 1;\n        const bsr = this.ctx.webkitBackingStorePixelRatio ||\n            this.ctx.mozBackingStorePixelRatio ||\n            this.ctx.msBackingStorePixelRatio ||\n            this.ctx.oBackingStorePixelRatio ||\n            this.ctx.backingStorePixelRatio || 1;\n        this.pixelRatio = dpr / bsr;\n    }\n\n    get configControls() {\n        return (this.controls ?? []).concat(COMMON_CONFIG_CONTROLS);\n    }\n\n    get defaultConfig() {\n        if (!this._defaultConfig) {\n            this._defaultConfig = flattenConfig(this.configControls);\n        }\n\n        return this._defaultConfig;\n    }\n\n    get config() {\n        return this._config ?? this.defaultConfig;\n    }\n\n    set config(value) {\n        this._config = Object.assign({}, this.defaultConfig, value);\n    }\n\n    getSize() {\n        const canvasScreenSize = [this.canvas.clientWidth, this.canvas.clientHeight];\n        return canvasScreenSize.map(v => v * this.pixelRatio);\n    }\n\n    setUpDraw() {\n        this.canvas.removeAttribute('width');\n        this.canvas.removeAttribute('height');\n        const [width, height] = this.size = this.getSize();\n        Object.assign(this, this.size);\n        this.canvas.setAttribute('width', width);\n        this.canvas.setAttribute('height', height);\n        this.center = this.size.map(value => value / 2);\n\n        if (this.nails) {\n            this.nails.setConfig(this.config);\n        } else {\n            this.nails = new Nails(this.canvas, this.config);\n        }\n\n        this.ctx.clearRect(0, 0, ...this.size);\n        this.ctx.lineWidth = this.config.stringWidth;\n    }\n\n    afterDraw() {\n        const {showNails, showNailNumbers} = this.config;\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill({ drawNumbers: showNailNumbers });\n        }\n    }\n\n    initDraw() {\n        this.setUpDraw(this.config);\n        const { showNails, showNailNumbers, darkMode, backgroundColor, customBackgroundColor } = this.config;\n\n        this.ctx.beginPath();\n        this.ctx.globalCompositeOperation = 'destination-over';\n        this.ctx.fillStyle = customBackgroundColor ? backgroundColor : darkMode ? COLORS.dark : COLORS.light;\n        this.ctx.fillRect(0, 0, ...this.size);\n\n        this.ctx.globalCompositeOperation = 'source-over';\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill({ drawNumbers: showNailNumbers });\n        }\n    }\n\n    /**\n     * Draws the string art on canvas\n     * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n     */\n    draw({position = Infinity} = {}) {\n        this.initDraw();\n        const { showStrings } = this.config;\n\n        if (showStrings) {\n            this.stringsIterator = this.generateStrings();\n            this.position = 0;\n\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        }\n    }\n\n    goto(position) {\n        if (position === this.position) {\n            return;\n        }\n\n        if (this.stringsIterator && position > this.position) {\n            while(!this.drawNext().done && this.position < position);\n        } else {\n            this.draw({ position });\n        }\n    }\n\n    drawNext() {\n        const result = this.stringsIterator.next();\n\n        if (result.done) {\n            this.afterDraw();\n        }\n        else {\n            this.position++;\n        }\n\n        return result;\n    }\n\n    generateStrings() {\n        throw new Error(\"generateStrings method not defined!\");\n    }\n\n    getStepCount() {\n        throw new Error(`'getStepCount' method not implemented for string art type \"${this.name}\"`);\n    }\n}\n\nfunction flattenConfig(configControls) {\n    return configControls.reduce((config, {key, defaultValue, children}) =>\n        children ? {\n            ...config,\n            ...flattenConfig(children)\n        } : {\n            ...config,\n            [key]: defaultValue\n        },\n    {});\n}\n\nexport default StringArt;\n","import StringArt from \"../StringArt.js\";\n\nclass Spirals extends StringArt{\n    name = \"Spirals\";\n    id = \"spirals\";\n    link = \"https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 92,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'radiusIncrease',\n            label: 'Size',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 0.2\n            }\n        },\n        {\n            key: 'angleStep',\n            label: 'Angle step',\n            defaultValue: 0.05,\n            type: \"range\",\n            attr: {\n                min: 0.01,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'nSpirals',\n            label: 'Number of spirals',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'String color',\n            defaultValue: \"#00ddff\",\n            type: \"color\",\n        }\n    ];\n    \n    *generatePoints() {\n        const {\n            n, radiusIncrease, angleStep, nSpirals,\n        } = this.config;\n        \n        let currentRadius = 0;\n        let angle = 0;\n        const [centerx, centery] = this.center;\n\n        for (let i = 0; i < n; i++) {\n            for (let s = 0; s < nSpirals; s++) {\n                const rotation = s * 2 * Math.PI / nSpirals;\n                const point = [\n                    centerx + currentRadius * Math.sin(angle + rotation),\n                    centery + currentRadius * Math.cos(angle + rotation)\n                ];\n                yield {point, nailNumber: `${s}_${i}`};\n            }\n            \n            angle += angleStep;\n            currentRadius += radiusIncrease;\n        }\n    }\n\n    *generateStrings() {\n        const points = this.generatePoints();\n        let index = 0;\n        this.ctx.beginPath();\n        this.ctx.moveTo(...this.center);\n        this.ctx.strokeStyle = this.config.color;\n\n        let lastPoint = this.center;\n\n        for (const {point} of points) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...lastPoint);\n            lastPoint = point;\n            this.ctx.lineTo(...point);\n            this.ctx.strokeStyle = this.config.color;\n            this.ctx.stroke();\n            yield index++;\n        }\n    }\n\n    getStepCount() {\n        const { n, nSpirals } = this.config;\n        return n * nSpirals;\n    }\n\n    drawNails() {\n        const points = this.generatePoints();\n        for (const {point, nailNumber} of points) {\n            this.nails.addNail({point, number: nailNumber});\n        }\n    }\n}\n\nexport default Spirals;","const COLOR_CONTROLS = [\n    {\n        key: 'isMultiColor',\n        label: 'Use multiple colors',\n        defaultValue: false,\n        type: \"checkbox\",\n    },\n    {\n        key: 'color',\n        label: 'String color',\n        defaultValue: \"#ff4d00\",\n        type: \"color\",\n        show: ({isMultiColor}) => !isMultiColor\n    },\n    {\n        key: 'multicolorRange',\n        label: 'Multicolor range',\n        defaultValue: 360,\n        type: \"range\",\n        attr: {\n            min: 1,\n            max: 360,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'multicolorStart',\n        label: 'Multicolor start',\n        defaultValue:0,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 360,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'saturation',\n        label: 'Saturation',\n        defaultValue: 100,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 100,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'multicolorByLightness',\n        label: 'Multicolor by lightness',\n        defaultValue: false,\n        type: 'checkbox',\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'minLightness',\n        label: 'Minimum lightness',\n        defaultValue:0,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 100,\n            step: 1\n        },\n        show: ({multicolorByLightness, isMultiColor}) => multicolorByLightness && isMultiColor\n    },\n    {\n        key: 'maxLightness',\n        label: 'Maximum lightness',\n        defaultValue:100,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 100,\n            step: 1\n        },\n        show: ({multicolorByLightness, isMultiColor}) => multicolorByLightness && isMultiColor\n    },\n];\n\nexport default class Color {\n    constructor(config) {\n        this.config = config;\n        const {\n            multicolorRange,\n            colorCount,\n            multicolorByLightness,\n            minLightness = 0,\n            maxLightness = 100\n        } = config;\n        \n        if (config.isMultiColor) {\n            this.multiColorStep = multicolorRange / colorCount;\n            this.multiColorLightnessStep = multicolorByLightness ? (maxLightness - minLightness) / colorCount : 1;\n        }\n    }\n\n    /**\n     * Returns the color to be used in the provided layer index. If no multiColor is used, will use the 'color' config property. \n     * @param {number} colorIndex \n     * @returns string\n     */\n    getColor(colorIndex) {\n        const {\n            isMultiColor,\n            colorCount,\n            multicolorStart,\n            multicolorByLightness,\n            minLightness = 0,\n            saturation,\n            darkMode,\n            color,\n        } = this.config;\n    \n        if (!isMultiColor) {\n            return color;\n        }\n\n        if (colorIndex >= colorCount) {\n            colorIndex = colorCount - 1;\n        }\n\n        const lightness = multicolorByLightness ? minLightness + this.multiColorLightnessStep * colorIndex : darkMode ? 50 : 40;\n\n        return `hsl(${multicolorStart + colorIndex * this.multiColorStep}, ${saturation}%, ${lightness}%)`;\n    }\n   \n    static getConfig({ include, exclude, defaults = {}}) {\n        const controls = COLOR_CONTROLS\n            .filter(({key}) => (!exclude || !exclude.includes(key)) && (!include || include.includes(key)))\n            .map(control => ({\n                ...control,\n                defaultValue: defaults[control.key] ?? control.defaultValue,\n            }));\n\n        return {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: controls\n        };\n    }\n}","import Nails from \"../Nails.js\";\n\nconst PI2 = Math.PI * 2;\n\nexport default class Circle {\n    constructor(config) {\n        const { n, size, margin = 0, rotation = 0, center, radius, reverse = false } = this.config = config;\n        \n        this.center = center ?? size.map(v => v / 2);\n        this.radius = radius ?? Math.min(...this.center) - margin;\n\n        this.indexAngle = PI2 / n;\n        this.rotationAngle = -PI2 * rotation;\n        this.isReverse = reverse;\n    }\n\n    getPoint(index = 0) {\n        const realIndex = this.isReverse ? this.config.n - 1 - index : index;\n\n        return [\n            this.center[0] + Math.sin(realIndex * this.indexAngle + this.rotationAngle) * this.radius,\n            this.center[1] + Math.cos(realIndex * this.indexAngle + this.rotationAngle) * this.radius\n        ];\n    }\n\n    /**\n     * Given a Nails instance, uses it to draw the nails of this Circle\n     * @param {Nails} nails \n     * @param {{nailsNumberStart?: number, getNumber?: Function}} param1 \n     */\n    drawNails(nails, {nailsNumberStart = 0, getNumber} = {}) {\n        for (let i=0; i < this.config.n; i++) {\n            nails.addNail({point: this.getPoint(i), number: getNumber ? getNumber(i) : i + nailsNumberStart});\n        }\n    }\n\n    static rotationConfig = {\n        key: 'rotation',\n        label: 'Rotation',\n        defaultValue: 0,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 1 + 1/360,\n            step: 1 / 360,\n        },\n        displayValue: (config, { key }) => `${Math.round(config[key] * 360)}°`\n    };\n}","import StringArt from \"../StringArt.js\";\n\nconst MARGIN = 20;\nconst SIDES = ['left', 'bottom', 'right', 'top'];\nconst SIDES_ORDER = ['left', 'bottom', 'right', 'top'];\n\nconst SIDES_ROTATION = {\n    left: 0,\n    bottom: Math.PI / 2,\n    right: Math.PI,\n    top: Math.PI * 1.5\n};\n\nclass Eye extends StringArt{\n    name = \"Eye\"\n    id = \"eye\"\n    link = \"https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails per side',\n            defaultValue: 82,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'angle',\n            label: 'Layer angle',\n            defaultValue: 30,\n            displayValue: ({angle}) => `${angle}°`,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 45,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'color1',\n                    label: 'String #1 color',\n                    defaultValue: \"#11e8bd\",\n                    type: \"color\",\n                },\n                {\n                    key: 'color2',\n                    label: 'String #2 color',\n                    defaultValue: \"#6fff52\",\n                    type: \"color\",\n                },\n                {\n                    key: 'colorPerLayer',\n                    label: 'Color per layer',\n                    defaultValue: false,\n                    type: 'checkbox'\n                },\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n\n        const { n, angle } = this.config;\n\n        this.maxSize = Math.min(...this.size) - 2 * MARGIN;\n        this.nailSpacing = this.maxSize / (n - 1);\n        this.layerAngle = angle * Math.PI / 180;\n    }\n\n    // Sides: top, right, bottom, left\n    getPoint({index, angle, layerStart, rotation}) {\n        const theta = angle + rotation;\n\n        const point = { \n            x: layerStart.x, \n            y: layerStart.y + this.nailSpacing * index\n        };\n\n        const pivot = { x: this.center[0], y: this.center[1] };\n\n        const cosAngle = Math.cos(theta);\n        const sinAngle = Math.sin(theta);\n\n        const position = [\n            (cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x),\n            (sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y),\n        ];\n        return position;\n    }\n\n    *drawSide({ side, color = '#ffffff', angle, size, layerStart, layerStringCount }) {\n        const sideIndex = SIDES.indexOf(side);\n        const nextSide = SIDES[sideIndex === SIDES.length - 1 ? 0 : sideIndex + 1];\n        const rotation = SIDES_ROTATION[side];\n        const nextSideRotation = SIDES_ROTATION[nextSide];\n        \n        const sideProps = { layerStringCount, size, layerStart, angle };\n        \n        for(let i=0; i <= layerStringCount; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...this.getPoint({ side, index: i, rotation, ...sideProps}));\n            this.ctx.lineTo(...this.getPoint({side: nextSide, index: i, rotation: nextSideRotation, ...sideProps}));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            yield i;\n        }\n    }\n\n    _getLayerProps(layerIndex) {\n        const colors = this._getLayerColors(layerIndex);\n        const layerAngle = this.layerAngle * layerIndex;\n        const layerSize = this.maxSize / Math.pow(Math.cos(this.layerAngle) + Math.sin(this.layerAngle), layerIndex);\n        const layerStart = { \n            x: this.center[0] - layerSize / 2, \n            y: this.center[1] - layerSize / 2\n        };\n        const layerStringCount = Math.floor(layerSize / this.nailSpacing);\n\n        return {\n            colors, layerAngle, layerSize, layerStart, layerStringCount\n        };\n    }\n\n    _getLayerColors(layerIndex) {\n        const { color1, color2, colorPerLayer } = this.config;\n        if (colorPerLayer) {\n            const layerColor = layerIndex % 2 ? color1 : color2;\n            return [layerColor, layerColor, layerColor, layerColor];\n        }\n        else {\n            return [color2, color1, color2, color1];\n        }\n    }\n\n    *drawLayer(layerIndex) {\n        const {\n            colors, layerAngle, layerSize, layerStart, layerStringCount\n        } = this._getLayerProps(layerIndex);\n\n        for (let i = 0; i < SIDES.length; i++) {\n            yield* this.drawSide({ \n                color: colors[i], \n                side: SIDES_ORDER[i],\n                angle: layerAngle,\n                size: layerSize,\n                layerStart,\n                layerStringCount\n            });\n        }\n    }\n\n    *generateStrings() {\n        const {layers} =  this.config;\n        for(let layer = layers - 1; layer >= 0; layer--) {\n            yield* this.drawLayer(layer);\n        }\n    }\n\n    getStepCount() {\n        let count = 0;\n        const {layers, angle, n} = this.config;\n        const layerAngle = angle * Math.PI / 180;\n        const maxSize = Math.min(this.canvas.clientWidth, this.canvas.clientHeight) - 2 * MARGIN;\n        const nailSpacing = maxSize / (n - 1);\n\n        for(let layer = 0; layer < layers; layer++) {\n            const layerSize = maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n            count += 4 * (Math.floor(layerSize / nailSpacing) + 1)\n        }\n\n        return count;\n    }\n\n    drawNails() {\n        const {layers} =  this.config;\n        for(let layer = layers - 1; layer >= 0; layer--) {\n            const {\n                layerAngle: angle, layerSize: size, layerStart, layerStringCount\n            } = this._getLayerProps(layer);\n\n            for (let s = 0; s < SIDES.length; s++) {\n                const sideOrder = SIDES_ORDER[s];\n                const rotation = SIDES_ROTATION[sideOrder];\n\n                for(let i=0; i <= layerStringCount; i++) {\n                    const sideProps = { layerStringCount, size, layerStart, angle };\n                    this.nails.addNail({\n                        point: this.getPoint({ sideOrder, index: i, rotation, ...sideProps}),\n                        number: `${layer}_${s}_${i}`\n                    });\n                }\n            }\n        }\n    }\n}\n\nexport default Eye;","import Spirals from \"./string_art_types/Spirals.js\";\nimport Spiral from './string_art_types/Spiral.js';\nimport Eye from './string_art_types/Eye.js';\nimport TimesTables from './string_art_types/TimesTables.js';\nimport Star from \"./string_art_types/Star.js\";\nimport Assymetry from \"./string_art_types/Assymetry.js\";\nimport Circles from './string_art_types/Circles.js';\n\nconst patternTypes = [Star, Assymetry, TimesTables, Spirals, Spiral, Eye, Circles];\n\nexport default patternTypes;\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Star extends StringArt{\n    name = \"Star\";\n    id = \"star\";\n    link = \"https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj\";\n    controls = [\n        {\n            key: 'sides',\n            label: 'Sides',\n            defaultValue: 3,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'sideNails',\n            label: 'Nails per side',\n            defaultValue: 40,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        Circle.rotationConfig,\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'innerColor',\n                    label: 'Star color',\n                    defaultValue: \"#2ec0ff\",\n                    type: \"color\",\n                },\n                {\n                    key: 'outterColor',\n                    label: 'Outter color',\n                    defaultValue: \"#2a82c6\",\n                    type: \"color\",\n                },\n            ]\n        }\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, sides} = this.config;\n            const extraNails = n % sides;\n            this._n = n - extraNails;\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const { sides, rotation, sideNails, margin = 0 } = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: sideNails * sides,\n            margin,\n            rotation,\n        });\n\n        this.sideAngle = Math.PI * 2 / sides;\n        this.nailSpacing = this.circle.radius / sideNails;\n        this.starCenterStart = (sideNails % 1) * this.nailSpacing;\n\n        this.sides = new Array(sides).fill(null).map((_, side) => {\n            const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n            const circlePointsStart = side * sideNails;\n\n            return {\n                sinSideAngle: Math.sin(sideAngle),\n                cosSideAngle: Math.cos(sideAngle),\n                circlePointsStart,\n                circlePointsEnd: circlePointsStart + sideNails\n            };\n        });\n    }\n\n    getStarPoint({ side, sideIndex }) {\n        const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n        const {sinSideAngle, cosSideAngle} = this.sides[side];\n        const [centerX, centerY] = this.circle.center;\n\n        return [\n            centerX + sinSideAngle * radius,\n            centerY + cosSideAngle * radius\n        ];\n    }\n\n    *generateStarPoints({ reverseOrder  = false} = {}) {\n        const {sides, sideNails} = this.config;\n\n        for (let side = 0; side < sides; side++) {\n            const prevSide = side === 0 ? sides - 1 : side - 1;\n            for (let i=0; i < sideNails; i++) {\n                const sideIndex = reverseOrder ? sideNails - i : i;\n                yield { side, prevSide, sideIndex, point: this.getStarPoint({ side, sideIndex }) };\n            }\n        }\n    }\n\n    *drawStar() {\n        const {innerColor, sideNails} = this.config;\n\n        this.ctx.strokeStyle = innerColor;\n        let prevPoint;\n\n        for (const { prevSide, sideIndex, point} of this.generateStarPoints()) {\n            this.ctx.beginPath();\n\n            if (sideIndex && !(sideIndex % 2)) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...point);\n            } else {\n                this.ctx.moveTo(...point);\n            }\n\n            const prevSideIndex = sideNails - sideIndex;\n            this.ctx.lineTo(...this.getStarPoint({ side: prevSide, sideIndex: prevSideIndex}))\n            prevPoint = point;\n            this.ctx.stroke();\n            yield;\n        }\n    }\n\n    *drawCircle() {\n        const {outterColor} = this.config;\n\n        let prevCirclePoint;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = outterColor;\n        for (const { side, prevSide, sideIndex, point} of this.generateStarPoints({ reverseOrder: true })) {\n            this.ctx.beginPath();\n            if (!prevCirclePoint) {\n                prevCirclePoint = this.circle.getPoint(this.sides[prevSide].circlePointsStart);\n            }\n\n            this.ctx.moveTo(...prevCirclePoint);\n\n            this.ctx.lineTo(...point);\n            this.ctx.stroke();\n\n            yield;\n\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            const nextPointIndex = isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex\n                : this.sides[side].circlePointsStart + sideIndex;\n\n            const nextPoint = this.circle.getPoint(nextPointIndex);\n            this.ctx.lineTo(...nextPoint);\n\n            prevCirclePoint = this.circle.getPoint(isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex + 1\n                : this.sides[side].circlePointsStart + sideIndex - 1);\n\n            this.ctx.lineTo(...prevCirclePoint);\n\n            this.ctx.stroke();\n            isPrevSide = !isPrevSide;\n            yield;\n        }\n    }\n\n    *generateStrings() {\n        yield* this.drawCircle();\n        yield* this.drawStar();\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n\n        for (const {point, side, sideIndex} of this.generateStarPoints()) {\n            this.nails.addNail({ point, number: sideIndex ? `${side}_${sideIndex}` : 0 });\n        }\n\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        const {sides, sideNails} = this.config;\n        const starCount = sideNails * sides;\n        return starCount * 3; // Once for each side + two more times for the side's circle\n    }\n}\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Assymetry extends StringArt{\n    name = \"Assymetry\";\n    id = \"assymetry\";\n    link = \"https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Circle nails',\n            defaultValue: 144,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 300,\n                step: 1\n            }\n        },\n        Circle.rotationConfig,\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: [\n                {\n                    key: 'layer1',\n                    label: 'Layer 1',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show1',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size1',\n                            label: 'Size',\n                            defaultValue: 0.25,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size1, n}) => Math.round(n * size1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'end1',\n                            label: 'End Position',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n,\n                            },\n                            displayValue: ({end1, n}) => Math.round(n * end1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'color1',\n                            label: 'Color',\n                            defaultValue: \"#a94fb0\",\n                            type: \"color\",\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'reverse1',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show1}) => show1\n                        },\n                    ]\n                },\n                {\n                    key: 'layer2',\n                    label: 'Layer 2',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show2',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size2',\n                            label: 'Size',\n                            defaultValue: 0.125,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size2, n}) => Math.round(n * size2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'end2',\n                            label: 'End Position',\n                            defaultValue: 0.888,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'color2',\n                            label: 'Color',\n                            defaultValue: \"#ec6ad0\",\n                            type: \"color\",\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'reverse2',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show2}) => show2\n                        },\n                    ]\n                },\n                {\n                    key: 'layer3',\n                    label: 'Layer 3',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show3',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size3',\n                            label: 'Size',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size3, n}) => Math.round(n * size3),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'end3',\n                            label: 'End Position',\n                            defaultValue: 0.826,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'color3',\n                            label: 'Color',\n                            defaultValue: \"#f08ad5\",\n                            type: \"color\",\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'reverse3',\n                            label: 'Reverse',\n                            defaultValue: true,\n                            type: 'checkbox',\n                            show: ({show3}) => show3\n                        },\n                    ]\n                }\n            ]\n        },\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n\n    getSetUp() {\n        const { rotation, n, margin = 0 } = this.config;\n        const circle = new Circle({\n            size: this.getSize(),\n            n,\n            margin,\n            rotation: rotation - 0.25,\n        });\n\n        let lineSpacing = circle.indexAngle * circle.radius;\n        const lineNailCount = Math.floor(circle.radius / lineSpacing) - 1;\n        lineSpacing += (circle.radius - lineSpacing * lineNailCount) / lineNailCount;\n        const firstCirclePoint = circle.getPoint(0);\n        const totalNailCount = lineNailCount + n;\n        const totalIndexCount = totalNailCount + lineNailCount;\n        const layers = new Array(3).fill(null)\n            .map((_, i) => getLayer.call(this, i + 1))\n            .filter(({enable}) => enable)\n\n        return {\n            circle,\n            lineSpacing,\n            lineNailCount,\n            firstCirclePoint,\n            layers,\n            totalNailCount,\n            totalIndexCount,\n        };\n\n        function getLayer(layerIndex) {\n            const size = Math.round(n * this.config['size' + layerIndex]) + lineNailCount\n            return {\n                size,\n                endIndex: Math.round(this.config['end' + layerIndex] * (totalNailCount + lineNailCount)) - size,\n                color: this.config['color' + layerIndex],\n                enable: this.config['show' + layerIndex],\n                isReverse: this.config['reverse' + layerIndex],\n            };\n        }\n    }\n\n    /**\n     * Returns the position of a point on the line\n     * @param {index of the point in the circle, 0 is the center} index\n     */\n    getPoint(index) {\n        if (index < this.lineNailCount || index > this.totalNailCount) {\n            const linePosition = index < this.lineNailCount ? this.lineNailCount - index : index - this.totalNailCount;\n\n            const indexLength = (linePosition) * this.lineSpacing;\n            return [\n                this.firstCirclePoint[0] - indexLength * Math.sin(this.circle.rotationAngle),\n                this.firstCirclePoint[1] - indexLength * Math.cos(this.circle.rotationAngle)\n            ];\n        } else {\n            const circleIndex = index - this.lineNailCount;\n            return this.circle.getPoint(circleIndex);\n        }\n    }\n\n    *drawCircle({endIndex, color, isReverse, size}) {\n        let prevPoint;\n        let prevPointIndex;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = color;\n        const self = this;\n        const advance = isReverse ? -1 : 1;\n\n        for(let index = 0; index <= endIndex; index++) {\n            this.ctx.beginPath();\n\n            if (prevPoint) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...this.getPoint(prevPointIndex + advance));\n            } else {\n                this.ctx.moveTo(...this.getPoint(getPointIndex(index)));\n            }\n\n            prevPointIndex = getPointIndex(isPrevSide ? index : index + size);\n            prevPoint = this.getPoint(prevPointIndex);\n            this.ctx.lineTo(...prevPoint);\n            this.ctx.stroke();\n\n            yield;\n\n            isPrevSide = !isPrevSide;\n        }\n\n        function getPointIndex(index) {\n            return isReverse ? self.totalIndexCount - index : index;\n        }\n    }\n\n    *generateStrings() {\n        for (const layer of this.layers) {\n            yield* this.drawCircle(layer);\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails, { nailsNumberStart: this.lineNailCount });\n\n        for (let i=0; i < this.lineNailCount; i++) {\n            this.nails.addNail({ point: this.getPoint(i), number: i });\n        }\n    }\n\n    getStepCount() {\n        const {layers} = this.getSetUp();\n        return layers.reduce((stepCount, layer) =>\n            stepCount + layer.endIndex + 1, 0\n        );\n    }\n}\n","import Color from \"../helpers/Color.js\";\nimport StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nconst MARGIN = 20;\n\nexport default class TimesTables extends StringArt{\n    name = \"Times Tables\";\n    id = \"times_tables\";\n    link = \"https://www.youtube.com/watch?v=LWin7w9hF-E&ab_channel=Jorgedelatierra\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 180,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 240,\n                step: 1\n            }\n        },\n        {\n            key: 'base',\n            label: 'Multiplication',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 99,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 7,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        Circle.rotationConfig,\n        Color.getConfig({ defaults: {\n            isMultiColor: true,\n            multicolorRange: 180,\n            multicolorStart: 256,\n            color: \"#ff4d00\"\n        }}),\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, layers} = this.config;\n            const extraNails = n % layers;\n            this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const {layers, rotation} = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: this.n,\n            margin: MARGIN,\n            rotation,\n        });\n        \n        this.color = new Color({\n            ...this.config,\n            colorCount: layers,\n        });\n\n        this.layerShift = Math.floor(this.n / layers);\n    }\n\n    *drawTimesTable({ shift = 0, color = \"#f00\", steps, time }) {\n        const {base} = this.config;\n        const n = this.n;\n        const stepsToRender = steps ?? n;\n\n        let point = this.circle.getPoint(shift);\n\n        for(let i=1; i <= stepsToRender; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            point = this.circle.getPoint(i + shift);\n            this.ctx.lineTo(...point);\n            const toIndex = (i * base) % n;\n            this.ctx.lineTo(...this.circle.getPoint(toIndex + shift));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            \n            yield { instructions: `${i - 1} → ${i} → ${toIndex} → ${i}`, index: time * n + i };\n        }\n    }\n\n    *generateStrings() {\n        const {layers} = this.config;\n\n        for(let time = 0; time < layers; time++) {\n            const color = this.color.getColor(time);\n            yield* this.drawTimesTable({ \n                time,\n                color, \n                shift: this.layerShift * time,\n            });\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        return this.config.layers * this.n;\n    }\n}\n            ","import Color from \"../helpers/Color.js\";\nimport StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Spiral extends StringArt{\n    id = \"spiral\";\n    name = \"Spiral\";\n    link = \"https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 200,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 1,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 60,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 0.5,\n            type: \"range\",\n            attr: {\n                min: ({config: {n}}) => 1 / n,\n                max: 1,\n                step: ({config: {n}}) => 1 / n,\n            },\n            displayValue: ({n, innerLength}) => Math.round(n * innerLength)\n        },\n        {\n            ...Circle.rotationConfig,\n            defaultValue: 0.5,\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 11,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'layerSpread',\n            label: 'Layer spread',\n            defaultValue: 0.075,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: ({config: {n}}) => 1 / n\n            },\n            displayValue: ({layerSpread, n}) => Math.round(layerSpread * n)\n        },\n        Color.getConfig({ defaults: {\n            isMultiColor: true,\n            multicolorRange: 216,\n            multicolorStart: 263,\n            color: \"#ffffff\",\n            multicolorByLightness: true,\n            minLightness: 10,\n            maxLightness: 90\n        }}),\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        const { n, rotation, layers, layerSpread } = this.config;\n\n        this.circle = new Circle({\n            size: this.size,\n            n,\n            rotation,\n            margin: 20,\n        });\n\n        this.color = new Color({\n            ...this.config,\n            colorCount: layers\n        });\n\n        this.layerShift = Math.round(n * layerSpread);\n    }\n\n    *drawSpiral({ shift = 0, color = \"#f00\" } = {}) {\n        const {repetition, innerLength, n} = this.config;\n\n        let currentInnerLength = Math.round(innerLength * n);\n        let repetitionCount = 0;\n        this.ctx.strokeStyle = color;\n        let prevPoint = this.circle.getPoint(shift);\n        let isPrevPoint = false;\n\n        for(let i=0; currentInnerLength > 0; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...prevPoint);\n            const nextPointIndex = isPrevPoint ? i + shift : i + currentInnerLength + shift;\n\n            this.ctx.lineTo(...this.circle.getPoint(nextPointIndex));\n            repetitionCount++;\n            if (repetitionCount === repetition) {\n                currentInnerLength--;\n                repetitionCount = 0;\n                i++;\n                this.ctx.lineTo(...this.circle.getPoint(nextPointIndex + 1));\n                prevPoint = this.circle.getPoint(nextPointIndex + 2);\n            } else {\n                prevPoint = this.circle.getPoint(nextPointIndex + 1);\n            }\n\n            this.ctx.lineTo(...prevPoint);\n            this.ctx.stroke();\n\n            yield i;\n            isPrevPoint = !isPrevPoint;\n        }\n      \n    }\n\n    *generateStrings() {\n        const { layers } = this.config;\n        for(let layer = 0; layer < layers; layer++) {\n            yield* this.drawSpiral({ \n                color: this.color.getColor(layer), \n                shift: -this.layerShift * layer \n            });\n        }\n    }\n\n    getStepCount() {\n        const {innerLength, repetition, layers, n} = this.config;\n        return layers * Math.round(innerLength * n) * repetition;\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n}","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Circles extends StringArt {\n    name = \"Circles\";\n    id = \"circles\";\n    link = \"https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Circle nails',\n            defaultValue: 80,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'minNailDistance',\n            label: 'Min nail distance',\n            defaultValue: 20,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'Color',\n            defaultValue: \"#ec6ad0\",\n            type: \"color\",\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: [\n                {\n                    key: 'layer1',\n                    label: 'Layer 1',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show1',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius1',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'x1',\n                            label: 'Position X',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'y1',\n                            label: 'Position Y',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation1',\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'reverse1',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show1}) => show1\n                        },\n                    ]\n                },\n                {\n                    key: 'layer2',\n                    label: 'Layer 2',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show2',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius2',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'x2',\n                            label: 'Position X',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'y2',\n                            label: 'Position Y',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation2',\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'reverse2',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show2}) => show2\n                        },\n                    ]\n                },\n                {\n                    key: 'layer3',\n                    label: 'Layer 3',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show3',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius3',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'x3',\n                            label: 'Position X',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'y3',\n                            label: 'Position Y',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation3',\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'reverse3',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show3}) => show3\n                        },\n                    ]\n                }\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n\n    getSetUp() {\n        const { n, margin = 0, minNailDistance } = this.config;\n        const size = this.getSize();\n\n        const maxRadius = Math.min(...size.map(v => v - 2 * margin)) / 2;\n        const layers = new Array(3).fill(null)\n            .map((_, i) => getLayer.call(this, i + 1))\n            .filter(({enable}) => enable)\n\n        const maxShapeNailsCount = Math.max(...layers.map(({circle}) => circle.config.n));\n\n        return {\n            layers,\n            maxShapeNailsCount,\n        };\n\n        function getLayer(layerIndex) {\n            const prop = prop => this.config[prop + layerIndex];\n            \n            const props = {\n                enable: prop('show'),\n                isReverse: prop('reverse'),\n                position: [prop('x'), prop('y')],\n                radius: maxRadius * prop('radius'),\n                rotation: prop('rotation'),\n            };\n\n            const circumsference = Math.PI * 2 * props.radius;\n            const circleNails = Math.min(n, Math.floor(circumsference / minNailDistance));\n\n            const circle = new Circle({\n                radius: props.radius,\n                center: props.position.map((v, i) => props.radius + margin + (size[i] - (props.radius + margin) * 2) * v),\n                n: circleNails,\n                rotation: props.rotation,\n                reverse: props.isReverse,\n            });\n\n            return {\n                circle,\n                ...props\n            };\n        }\n    }\n\n    getPoint(layer, index) {\n        const {circle} = layer;\n        let circleIndex = Math.round(index * circle.config.n / this.maxShapeNailsCount);\n        return circle.getPoint(circleIndex);\n    }\n\n    *generateStrings() {\n        const {n, color} = this.config;\n\n        this.ctx.strokeStyle = color;\n        let prevCirclePoint;\n\n        for (let i = 0; i < this.maxShapeNailsCount; i++) {\n            for(let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n                const layer = this.layers[layerIndex];\n                this.ctx.beginPath();\n                this.ctx.moveTo(...(prevCirclePoint ?? this.getPoint(layer, i)));\n\n                if (layerIndex === 0 && i) {\n                    this.ctx.lineTo(...this.getPoint(layer, i));\n                }\n\n                let nextLayerIndex = layerIndex + 1;\n                if (nextLayerIndex === this.layers.length) {\n                    nextLayerIndex = 0;\n                }\n\n                prevCirclePoint = this.getPoint(this.layers[nextLayerIndex], i);\n                this.ctx.lineTo(...prevCirclePoint)\n                this.ctx.stroke();\n                yield;\n            }\n        }\n        \n    }\n\n    drawNails() {\n        const n = this.config;\n        this.layers.forEach(({circle}, layerIndex) => circle.drawNails(this.nails, { \n            getNumber: i => `${layerIndex + 1}_${i + 1}` \n        }));\n    }\n\n    getStepCount() {\n        const {layers, maxShapeNailsCount} = this.getSetUp();\n        return layers.length * maxShapeNailsCount - 1;\n    }\n}\n","const elements = {\n    controls: document.querySelector(\"#controls\"),\n    sidebarForm: document.querySelector(\"#sidebar_form\"),\n};\n\nconst EVENTS = new Set(['input', 'change']);\nconst STATE_LOCAL_STORAGE_KEY = 'controls_state';\n\nlet inputTimeout;\n\nexport default class EditorControls {\n    constructor({pattern}) {\n        this.pattern = pattern;\n        this.state = this._getState() ?? { groups: {}};\n\n        this.eventHandlers = {\n            input: new Set(),\n            change: new Set()\n        }\n\n        this._wrappedOnInput = e => this._onInput(e);\n        this._toggleFieldset = e => {\n            if (e.target.nodeName === \"LEGEND\" ) {\n                e.target.parentElement.classList.toggle(\"minimized\");\n                const groupId = e.target.parentElement.dataset.group;\n                this.state = { ...this.state, groups: { ...this.state.groups, [groupId]: !e.target.parentElement.classList.contains(\"minimized\")}};\n                this._updateState(this.state);\n            }\n        };\n\n        this._toggleFieldSetOnEnter = e => {\n            if (e.target.nodeName === \"LEGEND\" && e.key === \"Enter\") {\n                this._toggleFieldset(e);\n            }\n        }\n\n        elements.controls.addEventListener(\"input\", this._wrappedOnInput);\n        elements.sidebarForm.addEventListener(\"click\", this._toggleFieldset);\n        elements.sidebarForm.addEventListener(\"keydown\", this._toggleFieldSetOnEnter);\n        this.controlElements = {};\n        this.renderControls();\n    }\n\n    destroy() {\n        elements.controls.removeEventListener(\"input\", this._wrappedOnInput);\n        elements.sidebarForm.removeEventListener(\"click\", this._toggleFieldset);\n        elements.sidebarForm.removeEventListener(\"keydown\", this._toggleFieldSetOnEnter);\n        elements.controls.innerHTML = \"\";\n    }\n\n    addEventListener(event, eventHandler) {\n        if (!EVENTS.has(event)) {\n            throw new Error(`Unsupported event for EditorControls, \"${event}\"!`);\n        }\n\n        if (!(eventHandler instanceof Function)) {\n            throw new Error('Invalid event handler.');\n        }\n\n        this.eventHandlers[event].add(eventHandler);\n    }\n\n    _triggerEvent(event, eventData) {\n        for(const eventHandler of this.eventHandlers[event]) {\n            eventHandler(eventData);\n        }\n    }\n\n    _onInput(e) {\n        requestAnimationFrame(() => {\n            clearTimeout(inputTimeout);\n\n            const inputValue = getInputValue(e.target.type, e.target);\n            const controlKey = e.target.id.replace(/^config_/, '');\n\n            this.pattern.config = Object.freeze({\n                ...this.pattern.config,\n                [controlKey]: inputValue\n            });\n\n            const {config, displayValue} = this.controlElements[controlKey];\n            if (displayValue) {\n                const formattedValue = config.displayValue ? config.displayValue(this.pattern.config, config) : e.target.value;\n                displayValue.innerText = formattedValue;\n            }\n\n            const eventData = Object.freeze({\n                control: controlKey,\n                value: inputValue,\n                originalEvent: e,\n                pattern: this.pattern,\n            });\n\n            this._triggerEvent('input', eventData);\n\n            inputTimeout = setTimeout(() => {\n                this._triggerEvent('change', eventData);\n                this.updateControlsVisibility();\n            }, 100);\n        });\n    }\n\n    _getState() {\n        const state = localStorage.getItem(STATE_LOCAL_STORAGE_KEY);\n        if (state) {\n            try {\n                return JSON.parse(state);\n            } catch(e) {\n                return null;\n            }\n        }\n\n        return null;\n    }\n\n    _updateState(newState) {\n        if (newState) {\n            localStorage.setItem(STATE_LOCAL_STORAGE_KEY, JSON.stringify(newState));\n        } else {\n            localStorage.removeItem(STATE_LOCAL_STORAGE_KEY);\n        }\n    }\n\n    updateControlsVisibility(configControls = this.pattern.configControls) {\n        configControls.forEach(control => {\n            if (control.show) {\n                const shouldShowControl = control.show(this.pattern.config);\n                const controlEl = this.controlElements[control.key].control;\n                if (controlEl) {\n                    if (shouldShowControl) {\n                        controlEl.removeAttribute('hidden');\n                    } else {\n                        controlEl.setAttribute('hidden', 'hidden');\n                    }\n                }\n            }\n\n            if (control.isDisabled) {\n                const shouldDisableControl = control.isDisabled(this.pattern.config);\n                const inputEl = this.controlElements[control.key].input;\n                if (inputEl) {\n                    if (shouldDisableControl) {\n                        inputEl.setAttribute('disabled', 'disabled');\n                    } else {\n                        inputEl.removeAttribute('disabled');\n                    }\n                }\n            }\n\n            if (control.children) {\n                this.updateControlsVisibility(control.children);\n            }\n        });\n    }\n\n    updateInputs(config) {\n        Object.entries(config).forEach(([key, value]) => {\n            const {input, value: valueEl} = this.controlElements[key];\n            if (input) {\n                if (input.type === \"checkbox\") {\n                    input.checked = value;\n                } else {\n                    input.value = value;\n                }\n                if (valueEl) {\n                    valueEl.innerText = value;\n                }\n            }\n        });\n    }\n\n    renderControls(containerEl = elements.controls, _configControls) {\n        const configControls = _configControls ?? this.pattern.configControls;\n        containerEl.innerHTML = \"\";\n        const controlsFragment = document.createDocumentFragment();\n\n\n        configControls.forEach(control => {\n            const controlId = `config_${control.key}`;\n            const controlElements = this.controlElements[control.key] = { config: control };\n\n            let controlEl;\n\n            if (control.type === \"group\") {\n                controlEl = document.createElement(\"fieldset\");\n                controlEl.setAttribute('data-group', control.key);\n                const groupTitleEl = document.createElement(\"legend\");\n                groupTitleEl.setAttribute(\"tabindex\", \"0\");\n                groupTitleEl.innerText = control.label;\n                controlEl.appendChild(groupTitleEl);\n                controlEl.className = \"control control_group\";\n                const childrenContainer = document.createElement('div');\n                controlEl.appendChild(childrenContainer);\n                this.renderControls(childrenContainer, control.children);\n            }\n            else {\n                controlEl = document.createElement(\"div\");\n                controlEl.className = \"control\";\n\n                const label = document.createElement(\"label\");\n                label.innerHTML = control.label;\n                label.setAttribute(\"for\", controlId);\n\n                const inputEl = controlElements.input = document.createElement(\"input\");\n                inputEl.setAttribute(\"type\", control.type);\n                const inputValue = this.pattern.config[control.key] ?? control.defaultValue;\n\n                if (control.attr) {\n                    Object.entries(control.attr).forEach(([attr, value]) => {\n                        const realValue = value instanceof Function ? value(this.pattern) : value;\n                        inputEl.setAttribute(attr, realValue)\n                    });\n                }\n\n                if (control.type === \"checkbox\") {\n                    inputEl.checked = inputValue;\n                    controlEl.appendChild(inputEl);\n                    controlEl.appendChild(label);\n                } else {\n                    controlEl.appendChild(label);\n                    controlEl.appendChild(inputEl);\n                    inputEl.value = inputValue;\n                    const inputValueEl = controlElements.displayValue = document.createElement('span');\n                    inputValueEl.id = `config_${control.key}_value`;\n                    inputValueEl.innerText = control.displayValue ? control.displayValue(this.pattern.config, control) : inputValue;\n                    inputValueEl.className = \"control_input_value\";\n                    controlEl.appendChild(inputValueEl);\n                }\n                inputEl.id = controlId;\n            }\n\n            this.controlElements[control.key].control = controlEl;\n            controlEl.id = `control_${control.key}`;\n            controlsFragment.appendChild(controlEl);\n        });\n\n        containerEl.appendChild(controlsFragment);\n        this.updateGroupsState();\n        requestAnimationFrame(() => this.updateControlsVisibility())\n    }\n\n    updateGroupsState() {\n        const groups = elements.sidebarForm.querySelectorAll('[data-group]');\n        groups.forEach(groupEl => {\n            const groupId = groupEl.dataset.group;\n            const groupState = this.state.groups[groupId];\n            if (typeof groupState === 'boolean') {\n                if (groupState) {\n                    groupEl.classList.remove('minimized');\n                } else {\n                    groupEl.classList.add('minimized');\n                }\n            }\n        });\n    }\n}\n\n\nfunction getInputValue(type, inputElement) {\n    switch(type) {\n        case 'range':\n            return parseFloat(inputElement.value);\n        case 'checkbox':\n            return inputElement.checked;\n        case 'number':\n            return parseFloat(inputElement.value);\n        default:\n            return inputElement.value;\n    }\n}\n","const sizeControls = document.querySelector(\"#size_controls\");\n\nconst elements = {\n    sizeSelect: sizeControls.querySelector(\"#size_select\"),\n    sizeCustom: sizeControls.querySelector(\"#size_custom\"),\n    width: sizeControls.querySelector(\"#size_custom_width\"),\n    height: sizeControls.querySelector(\"#size_custom_height\"),\n    orientationSelect: sizeControls.querySelector(\"#size_orientation_select\"),\n};\n\nfunction cmToPixels(cm, dpi = 300) {\n    return Math.floor(cm / 2.54 * dpi);\n}\n\nconst SCREEN_SIZE = [\n    Math.floor(window.screen.width),\n    Math.floor(window.screen.height),\n];\n\nconst SIZES = [\n    { id: 'fit', name: 'Fit to screen' },\n    { id: 'A4', value: [20, 28].map(v => cmToPixels(v)), orientationSelect: true },\n    { id: 'A3', value: [28, 40].map(v => cmToPixels(v)), orientationSelect: true },\n    { id: 'screen', name: `Screen size (${SCREEN_SIZE.join('x')})`, value: SCREEN_SIZE},\n    { id: 'custom', name: 'Custom...' }\n];\n\nexport default class EditorSizeControls {\n    element = document.querySelector(\"#size_controls\");\n\n    constructor({ getCurrentSize }) {\n        const sizeOptionsFragment = document.createDocumentFragment();\n        SIZES.forEach(size => {\n            const sizeListItem = document.createElement('option');\n            sizeListItem.setAttribute('value', size.id);\n            sizeListItem.innerText = size.name ?? size.id;\n            sizeOptionsFragment.appendChild(sizeListItem);\n        });\n        elements.sizeSelect.appendChild(sizeOptionsFragment)\n        this.selectedSize = SIZES[0];\n\n        elements.sizeSelect.addEventListener(\"change\", e => {\n            const selectedSizeId = e.target.value;\n            const size = SIZES.find(({id}) => id === selectedSizeId);\n            this.selectedSize = size;\n\n            if (size.id === \"custom\") {\n                elements.sizeCustom.removeAttribute('hidden');\n                const [width, height] = getCurrentSize();\n                elements.width.value = width;\n                elements.height.value = height;\n            } else {\n                elements.sizeCustom.setAttribute('hidden', 'hidden');\n                this._notifyOnChange(this.getValue());\n            }\n\n            if (size.orientationSelect) {\n                elements.orientationSelect.removeAttribute('hidden');\n            } else {\n                elements.orientationSelect.setAttribute('hidden', 'hidden');\n            }\n        });\n\n        elements.orientationSelect.addEventListener(\"change\", e => {\n            this._notifyOnChange(this.getValue());\n        });\n\n        elements.sizeCustom.addEventListener(\"focusin\", e => {\n            e.target.select();\n        });\n\n        elements.sizeCustom.addEventListener('input', () => {\n            this._notifyOnChange([\n                elements.width.value ? parseInt(elements.width.value) : null,\n                elements.height.value ? parseInt(elements.height.value) : null\n            ]);\n        });\n    }\n\n    _notifyOnChange([width, height] = []) {\n        this.element.dispatchEvent(new CustomEvent('sizechange', { detail: { width, height }}));\n    }\n\n    getValue() {\n        if (this.selectedSize.id === \"custom\") {\n            return [parseInt(elements.width.value, 10), parseInt(elements.height.value, 10)];\n        } else {\n            let value = this.selectedSize.value;\n            if (this.selectedSize.orientationSelect && elements.orientationSelect.value === \"horizontal\") {\n                value = Array.from(value).reverse();\n            }\n            return value;\n        }\n\n    }\n}\n","import Player from \"./editor/Player.js\";\nimport patternTypes from \"./pattern_types.js\";\nimport EditorControls from \"./editor/EditorControls.js\";\nimport EditorSizeControls from \"./editor/EditorSizeControls.js\";\n\nconst elements = {\n    canvas: document.querySelector(\"canvas\"),\n    patternSelector: document.querySelector(\"#pattern_select\"),\n    patternLink: document.querySelector(\"#pattern_link\"),\n    downloadBtn: document.querySelector(\"#download_btn\"),\n    downloadNailsBtn: document.querySelector(\"#download_nails_btn\"),\n};\n\nconst patterns = patternTypes.map(Pattern => new Pattern(elements.canvas));\n\nlet currentPattern;\nconst player = new Player(document.querySelector(\"#player\"));\nconst sizeControls = new EditorSizeControls({\n    getCurrentSize: () => [\n        elements.canvas.clientWidth,\n        elements.canvas.clientHeight\n    ]\n});\n\nlet controls;\n\nwindow.addEventListener('load', main);\n\nfunction main() {\n    initRouting();\n    initSize();\n    initControls();\n\n    if (history.state?.pattern) {\n        updateState(history.state);\n    } else {\n        const queryParams = new URLSearchParams(document.location.search);\n        const queryPattern = queryParams.get('pattern');\n\n        if (queryPattern) {\n            const config = queryParams.get('config');\n            updateState({ pattern: queryPattern, config })\n        } else {\n            selectPattern(patterns[0]);\n        }\n    }\n\n    window.addEventListener(\"resize\", () =>\n        currentPattern.draw()\n    );\n\n    elements.canvas.addEventListener('click', () => {\n        player.toggle();\n    });\n\n    elements.downloadBtn.addEventListener('click', downloadCanvas);\n    elements.downloadNailsBtn.addEventListener('click', downloadNailsImage);\n}\n\nfunction downloadCanvas() {\n    const downloadLink = document.createElement('a');\n    downloadLink.download = currentPattern.name + '.png';\n    downloadLink.href = elements.canvas.toDataURL(\"image/png\");\n    downloadLink.setAttribute('target', 'download')\n    downloadLink.click();\n}\n\nfunction downloadNailsImage() {\n    const currentConfig = currentPattern.config;\n    currentPattern.config = {\n        darkMode: false,\n        showNails: true,\n        showNailNumbers: true,\n        showStrings: false,\n        nailsColor: \"#000000\",\n    };\n    currentPattern.draw();\n    downloadCanvas();\n}\n\nfunction onInputsChange() {\n    player.update(currentPattern);\n    const configQuery = JSON.stringify(currentPattern.config);\n    history.replaceState({\n        pattern: currentPattern.id,\n        config: configQuery\n    }, currentPattern.name, `?pattern=${currentPattern.id}&config=${encodeURIComponent(configQuery)}`);\n}\n\nfunction initControls() {\n    patterns.forEach(pattern => {\n        const option = document.createElement('option');\n        option.innerText = pattern.name;\n        option.value = pattern.id;\n        elements.patternSelector.appendChild(option);\n    });\n\n    elements.patternSelector.addEventListener('change', e => {\n        const patternId = e.target.value;\n        selectPattern(findPatternById(patternId));\n        history.pushState({ pattern: patternId }, patternId, \"?pattern=\" + patternId)\n    });\n}\n\nfunction initSize() {\n    sizeControls.element.addEventListener('sizechange', ({ detail }) => {\n        setSize(detail);\n    });\n}\n\nfunction setSize({width, height}) {\n    elements.canvas.removeAttribute('width');\n    elements.canvas.removeAttribute('height');\n\n    if (width && height) {\n        elements.canvas.style.width = `${width}px`;\n        elements.canvas.style.height = `${height}px`;\n    } else {\n        elements.canvas.removeAttribute('style');\n    }\n\n    currentPattern.draw();\n}\n\nfunction initRouting() {\n    window.addEventListener('popstate', ({state}) => {\n        updateState(state);\n    });\n}\n\nfunction updateState(state) {\n    const pattern = findPatternById(state.pattern);\n    elements.patternSelector.value = pattern.id;\n    selectPattern(pattern, {\n        draw: false,\n        config: state.config ? JSON.parse(state.config) : null\n    });\n\n    currentPattern.draw();\n}\n\nfunction findPatternById(patternId) {\n    const pattern = patterns.find(({id}) => id === patternId);\n    if (!pattern) {\n        throw new Error(`Pattern with id \"${patternId} not found!`);\n    }\n    return pattern;\n}\n\nfunction selectPattern(pattern, { config, draw = true} = {}) {\n    currentPattern = pattern;\n    if (config) {\n        currentPattern.config = config;\n    }\n    if (controls) {\n        controls.destroy();\n    }\n    controls = new EditorControls({pattern, config});\n    controls.addEventListener('input', () => currentPattern.draw());\n    controls.addEventListener('change', onInputsChange);\n\n    elements.patternLink.setAttribute(\"href\", pattern.link);\n    if (draw) {\n        currentPattern.draw();\n    }\n    player.update(currentPattern, { draw: false });\n    document.title = `${pattern.name} - String Art Studio`;\n}\n","export default class Player {\n    constructor(parentEl) {\n        this.elements = {\n            player: parentEl,\n            step: parentEl.querySelector('#step'),\n            stepInstructions: parentEl.querySelector('#step_instructions'),\n            playerPosition: parentEl.querySelector('#player_position'),\n            playBtn: parentEl.querySelector('#play_btn'),\n            pauseBtn: parentEl.querySelector('#pause_btn')\n        };\n        this.stepCount = 0;\n        this._isPlaying = false;\n\n        this.elements.playerPosition.addEventListener('input', ({ target }) => {\n            this.goto(+target.value)\n        });\n\n        this.elements.playBtn.addEventListener('click', () => {\n            this.play();\n        });\n\n        this.elements.pauseBtn.addEventListener('click', () => {\n            this.pause();\n        });\n    }\n\n    updateStatus(isPlaying) {\n        if (this._isPlaying !== isPlaying) {\n            this.elements.player.classList.toggle('playing');\n            this._isPlaying = isPlaying;\n        }\n    }\n\n    update(stringArt, { draw = true} = {}) {\n        this.stringArt = stringArt;\n        this.stepCount = stringArt.getStepCount();\n        this.elements.playerPosition.setAttribute('max', this.stepCount);\n        this.goto(this.stepCount, { updateStringArt: draw });\n    }\n\n    updatePosition(position) {\n        this.elements.step.innerText = `${position}/${this.stepCount}`;\n        this.elements.playerPosition.value = position;\n    }\n\n    goto(position, { updateStringArt = true} = {}) {\n        this.pause();\n        this.updatePosition(position);\n        if (updateStringArt) {\n            this.stringArt.goto(position);\n        }\n    }\n\n    setInstructions(instructions) {\n        this.elements.stepInstructions.innerText = instructions;\n    }\n\n    play() {\n        this.updateStatus(true);\n        cancelAnimationFrame(this.renderRafId);\n\n        if (this.stringArt.position === this.stepCount) {\n            this.stringArt.goto(0);\n        }\n\n        const self = this;\n\n        step();\n\n        function step() {\n            if (!self.stringArt.drawNext().done) {\n                self.renderRafId = requestAnimationFrame(step);\n            } else {\n                self.updateStatus(false);\n            }\n            self.updatePosition(self.stringArt.position);\n        }\n    }\n\n    pause() {\n        cancelAnimationFrame(this.renderRafId);\n        this.updateStatus(false);\n    }\n\n    toggle() {\n        if (this._isPlaying) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n}\n"],"names":["$a8180031c78213da$var$PI2","Math","PI","canvas","config","this","context","getContext","setConfig","centerX","width","nails","nailRadius","nailsColor","nailNumbersFontSize","addNail","nail","push","fill","drawNumbers","globalCompositeOperation","beginPath","fillStyle","textBaseline","font","nailNumberOffset","forEach","point","x","y","number","moveTo","arc","isRightAlign","numberPosition","textAlign","fillText","String","$65e05ee91a8797e3$var$COLORS","$65e05ee91a8797e3$var$COMMON_CONFIG_CONTROLS","key","label","type","defaultValue","children","isDisabled","showNails","attr","min","max","step","show","showStrings","displayValue","margin","showNailNumbers","customBackgroundColor","$65e05ee91a8797e3$var$flattenConfig","configControls","reduce","$65e05ee91a8797e3$export$2e2bcd8739ae039","Error","ctx","dpr","window","devicePixelRatio","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","controls","concat","defaultConfig","_defaultConfig","_config","value","Object","assign","getSize","clientWidth","clientHeight","map","v","setUpDraw","removeAttribute","height","size","setAttribute","center","$a8180031c78213da$export$2e2bcd8739ae039","clearRect","lineWidth","stringWidth","afterDraw","drawNails","initDraw","darkMode","backgroundColor","fillRect","draw","position","Infinity","stringsIterator","generateStrings","drawNext","done","goto","result","next","getStepCount","name","$17fe1039ca333e84$export$2e2bcd8739ae039","id","link","n","radiusIncrease","angleStep","nSpirals","currentRadius","angle","centerx","centery","i","s","rotation","sin","cos","nailNumber","points","generatePoints","index","strokeStyle","color","lastPoint","lineTo","stroke","$e8c1397eac31f13e$var$COLOR_CONTROLS","isMultiColor","multicolorByLightness","multicolorRange","colorCount","minLightness","maxLightness","multiColorStep","multiColorLightnessStep","getColor","colorIndex","multicolorStart","saturation","lightness","include","exclude","defaults","filter","includes","control","$188437ce07b37c18$var$PI2","radius","reverse","indexAngle","rotationAngle","isReverse","getPoint","realIndex","nailsNumberStart","getNumber","round","$f11ad0f2a18da5c9$var$SIDES","$f11ad0f2a18da5c9$var$SIDES_ORDER","$f11ad0f2a18da5c9$var$SIDES_ROTATION","left","bottom","right","top","$f11ad0f2a18da5c9$export$2e2bcd8739ae039","super","maxSize","nailSpacing","layerAngle","layerStart","theta","pivot","cosAngle","sinAngle","side","layerStringCount","sideIndex","indexOf","nextSide","length","nextSideRotation","sideProps","_getLayerProps","layerIndex","colors","_getLayerColors","layerSize","pow","floor","color1","color2","colorPerLayer","layerColor","drawSide","layers","layer","drawLayer","count","sideOrder","$8b13425f1e264518$export$2e2bcd8739ae039","$188437ce07b37c18$export$2e2bcd8739ae039","rotationConfig","_n","sides","extraNails","sideNails","circle","sideAngle","starCenterStart","Array","_","circlePointsStart","sinSideAngle","cosSideAngle","circlePointsEnd","getStarPoint","centerY","reverseOrder","prevSide","innerColor","prevPoint","generateStarPoints","prevSideIndex","outterColor","prevCirclePoint","isPrevSide","nextPointIndex","nextPoint","drawCircle","drawStar","size1","show1","end1","size2","show2","end2","size3","show3","getSetUp","lineSpacing","lineNailCount","firstCirclePoint","totalNailCount","totalIndexCount","getLayer","call","enable","endIndex","indexLength","circleIndex","prevPointIndex","self","advance","getPointIndex","stepCount","$e8c1397eac31f13e$export$2e2bcd8739ae039","getConfig","layerShift","shift","steps","time","base","stepsToRender","toIndex","instructions","drawTimesTable","innerLength","layerSpread","repetition","currentInnerLength","repetitionCount","isPrevPoint","drawSpiral","minNailDistance","maxRadius","maxShapeNailsCount","prop","props","circumsference","circleNails","nextLayerIndex","$2fc16ffa17719734$var$elements","document","querySelector","sidebarForm","$2fc16ffa17719734$var$EVENTS","Set","$2fc16ffa17719734$var$inputTimeout","pattern","state","_getState","groups","eventHandlers","input","change","_wrappedOnInput","e","_onInput","_toggleFieldset","target","nodeName","parentElement","classList","toggle","groupId","dataset","group","contains","_updateState","_toggleFieldSetOnEnter","addEventListener","controlElements","renderControls","destroy","removeEventListener","innerHTML","event","eventHandler","has","Function","add","_triggerEvent","eventData","requestAnimationFrame","clearTimeout","inputValue","inputElement","parseFloat","checked","$2fc16ffa17719734$var$getInputValue","controlKey","replace","freeze","formattedValue","innerText","originalEvent","setTimeout","updateControlsVisibility","localStorage","getItem","JSON","parse","newState","setItem","stringify","removeItem","shouldShowControl","controlEl","shouldDisableControl","inputEl","updateInputs","entries","valueEl","containerEl","_configControls","controlsFragment","createDocumentFragment","controlId","createElement","groupTitleEl","appendChild","className","childrenContainer","realValue","inputValueEl","updateGroupsState","querySelectorAll","groupEl","groupState","remove","$0597ff46967fdd49$var$sizeControls","$0597ff46967fdd49$var$elements","sizeSelect","sizeCustom","orientationSelect","$0597ff46967fdd49$var$cmToPixels","cm","dpi","$0597ff46967fdd49$var$SCREEN_SIZE","screen","$0597ff46967fdd49$var$SIZES","join","$52852adbc3c0b381$var$elements","patternSelector","patternLink","downloadBtn","downloadNailsBtn","$52852adbc3c0b381$var$patterns","Pattern","$52852adbc3c0b381$var$currentPattern","$52852adbc3c0b381$var$player","parentEl","elements","player","stepInstructions","playerPosition","playBtn","pauseBtn","_isPlaying","play","pause","updateStatus","isPlaying","update","stringArt","updateStringArt","updatePosition","setInstructions","cancelAnimationFrame","renderRafId","$52852adbc3c0b381$var$sizeControls","element","getCurrentSize","sizeOptionsFragment","sizeListItem","selectedSize","selectedSizeId","find","_notifyOnChange","getValue","select","parseInt","dispatchEvent","CustomEvent","detail","from","$52852adbc3c0b381$var$controls","$52852adbc3c0b381$var$downloadCanvas","downloadLink","download","href","toDataURL","click","$52852adbc3c0b381$var$downloadNailsImage","$52852adbc3c0b381$var$onInputsChange","configQuery","history","replaceState","encodeURIComponent","$52852adbc3c0b381$var$updateState","$52852adbc3c0b381$var$findPatternById","$52852adbc3c0b381$var$selectPattern","patternId","$2fc16ffa17719734$export$2e2bcd8739ae039","title","$52852adbc3c0b381$var$initRouting","style","$52852adbc3c0b381$var$setSize","$52852adbc3c0b381$var$initSize","option","pushState","$52852adbc3c0b381$var$initControls","queryParams","URLSearchParams","location","search","queryPattern","get"],"version":3,"file":"index.9b8e6eb6.js.map"}