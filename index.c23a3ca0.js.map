{"mappings":"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","sources":["src/scripts/Nails.js","src/scripts/StringArt.js","src/scripts/string_art_types/Spirals.js","src/scripts/string_art_types/Circle.js","src/scripts/string_art_types/Eye.js","src/scripts/pattern_types.js","src/scripts/string_art_types/Star.js","src/scripts/string_art_types/Assymetry.js","src/scripts/string_art_types/TimesTables.js","src/scripts/string_art_types/Spiral.js","src/scripts/editor/EditorControls.js","src/scripts/editor/EditorSizeControls.js","src/scripts/main.js","src/scripts/editor/Player.js"],"sourcesContent":["const PI2 = Math.PI * 2;\n\nexport default class Nails {\n    constructor(canvas, config) {\n        this.context = canvas.getContext(\"2d\");\n        this.setConfig(config);\n        this.nails = [];\n    }\n\n    setConfig({ nailRadius, darkMode}) {\n        this.nailRadius = nailRadius;\n        this.nailsColor = darkMode ? '#ffffff' : '#000000';\n        this.nails = [];\n    }\n\n    // Adds a nail to be rendered. nail: { point, number }\n    addNail(nail) {\n        this.nails.push(nail);\n    }\n\n    fill() {\n        this.context.globalCompositeOperation = \"source-over\";\n        this.context.beginPath();\n        this.nails.forEach(({ point: [x, y] }) => {\n            this.context.moveTo(x + this.nailRadius, y);\n            this.context.arc(x, y, this.nailRadius, 0, PI2)\n        });\n\n        this.context.fillStyle = this.nailsColor;\n        this.context.fill();\n\n        this.nails = [];\n    }\n}","import Nails from \"./Nails.js\";\n\nconst COLORS = {\n    dark: \"#171717\",\n    light: \"#ffffff\"\n};\n\nconst COMMON_CONFIG_CONTROLS = [\n    {\n        key: 'general',\n        label: 'General',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'showStrings',\n                label: 'Show strings',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showNails}) => !showNails\n            },\n            {\n                key: 'stringWidth',\n                label: 'String width',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 0.2,\n                    max: 4,\n                    step: 0.2\n                },\n                show: ({showStrings}) => showStrings\n            },\n            {\n                key: 'showNails',\n                label: 'Show nails',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showStrings}) => !showStrings\n            },\n            {\n                key: 'nailRadius',\n                label: 'Nail size',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 0.5,\n                    max: 5,\n                    step: 0.25\n                },\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'margin',\n                label: 'Margin',\n                defaultValue: 20,\n                type: \"number\",\n                attr: {\n                    min: 0,\n                    max: 500,\n                    step: 1\n                },\n                displayValue: ({margin}) => `${margin}px`\n            }\n        ]\n    },\n    {\n        key: 'background',\n        label: 'Background',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'darkMode',\n                label: 'Dark mode',\n                defaultValue: true,\n                type: 'checkbox'\n            },\n            {\n                key: 'customBackgroundColor',\n                label: 'Custom background color',\n                defaultValue: false,\n                type: 'checkbox',\n            },\n            {\n                key: 'backgroundColor',\n                label: 'Background color',\n                defaultValue: COLORS.dark,\n                type: 'color',\n                show: ({customBackgroundColor}) => customBackgroundColor\n            },\n        ]\n    }\n];\n\nclass StringArt {\n    constructor(canvas) {\n        if (!canvas) {\n            throw new Error(\"Canvas not specified!\");\n        }\n\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        const dpr = window.devicePixelRatio || 1;\n        const bsr = this.ctx.webkitBackingStorePixelRatio ||\n            this.ctx.mozBackingStorePixelRatio ||\n            this.ctx.msBackingStorePixelRatio ||\n            this.ctx.oBackingStorePixelRatio ||\n            this.ctx.backingStorePixelRatio || 1;\n        this.pixelRatio = dpr / bsr;\n    }\n\n    get configControls() {\n        return (this.controls ?? []).concat(COMMON_CONFIG_CONTROLS);\n    }\n\n    get defaultConfig() {\n        if (!this._defaultConfig) {\n            this._defaultConfig = flattenConfig(this.configControls);\n        }\n\n        return this._defaultConfig;\n    }\n\n    get config() {\n        return this._config ?? this.defaultConfig;\n    }\n\n    set config(value) {\n        this._config = Object.assign({}, this.defaultConfig, value);\n    }\n\n    getSize() {\n        const canvasScreenSize = [this.canvas.clientWidth, this.canvas.clientHeight];\n        return canvasScreenSize.map(v => v * this.pixelRatio);\n    }\n\n    setUpDraw() {\n        this.canvas.removeAttribute('width');\n        this.canvas.removeAttribute('height');\n        const [width, height] = this.size = this.getSize();\n        Object.assign(this, this.size);\n        this.canvas.setAttribute('width', width);\n        this.canvas.setAttribute('height', height);\n        this.center = this.size.map(value => value / 2);\n\n        if (this.nails) {\n            this.nails.setConfig(this.config);\n        } else {\n            this.nails = new Nails(this.canvas, this.config);\n        }\n\n        this.ctx.clearRect(0, 0, ...this.size);\n        this.ctx.lineWidth = this.config.stringWidth;\n    }\n\n    afterDraw() {\n        if (this.config.showNails) {\n            this.drawNails();\n            this.nails.fill();\n        }\n    }\n\n    initDraw() {\n        this.setUpDraw(this.config);\n        const { showNails, darkMode, backgroundColor, customBackgroundColor } = this.config;\n\n        this.ctx.beginPath();\n        this.ctx.globalCompositeOperation = 'destination-over';\n        this.ctx.fillStyle = customBackgroundColor ? backgroundColor : darkMode ? COLORS.dark : COLORS.light;\n        this.ctx.fillRect(0, 0, ...this.size);\n\n        this.ctx.globalCompositeOperation = 'source-over';\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill();\n        }\n    }\n\n    /**\n     * Draws the string art on canvas\n     * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n     */\n    draw({position = Infinity} = {}) {\n        this.initDraw();\n        const { showStrings } = this.config;\n\n        if (showStrings) {\n            this.stringsIterator = this.generateStrings();\n            this.position = 0;\n\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        }\n    }\n\n    goto(position) {\n        if (position === this.position) {\n            return;\n        }\n\n        if (this.stringsIterator && position > this.position) {\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        } else {\n            this.draw({ position });\n        }\n    }\n\n    drawNext() {\n        const result = this.stringsIterator.next();\n\n        if (result.done) {\n            this.afterDraw();\n        } else {\n            this.position++;\n        }\n\n        return result;\n    }\n\n    generateStrings() {\n        throw new Error(\"generateStrings method not defined!\");\n    }\n\n    getStepCount() {\n        throw new Error(`'getStepCount' method not implemented for string art type \"${this.name}\"`);\n    }\n}\n\nfunction flattenConfig(configControls) {\n    return configControls.reduce((config, {key, defaultValue, children}) =>\n        children ? {\n            ...config,\n            ...flattenConfig(children)\n        } : {\n            ...config,\n            [key]: defaultValue\n        },\n    {});\n}\n\nexport default StringArt;\n","import StringArt from \"../StringArt.js\";\n\nclass Spirals extends StringArt{\n    name = \"Spirals\";\n    id = \"spirals\";\n    link = \"https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 92,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'radiusIncrease',\n            label: 'Size',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 0.2\n            }\n        },\n        {\n            key: 'angleStep',\n            label: 'Angle step',\n            defaultValue: 0.05,\n            type: \"range\",\n            attr: {\n                min: 0.01,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'nSpirals',\n            label: 'Number of spirals',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'String color',\n            defaultValue: \"#00ddff\",\n            type: \"color\",\n        }\n    ];\n    \n    *generatePoints() {\n        const {\n            n, radiusIncrease, angleStep, nSpirals,\n        } = this.config;\n        \n        let currentRadius = 0;\n        let angle = 0;\n        const [centerx, centery] = this.center;\n\n        for (let i = 0; i < n; i++) {\n            for (let s = 0; s < nSpirals; s++) {\n                const rotation = s * 2 * Math.PI / nSpirals;\n                const point = [\n                    centerx + currentRadius * Math.sin(angle + rotation),\n                    centery + currentRadius * Math.cos(angle + rotation)\n                ];\n                yield point;\n            }\n            \n            angle += angleStep;\n            currentRadius += radiusIncrease;\n        }\n    }\n\n    *generateStrings() {\n        const points = this.generatePoints();\n        let index = 0;\n        this.ctx.beginPath();\n        this.ctx.moveTo(...this.center);\n        this.ctx.strokeStyle = this.config.color;\n\n        let lastPoint = this.center;\n\n        for (const point of points) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...lastPoint);\n            lastPoint = point;\n            this.ctx.lineTo(...point);\n            this.ctx.strokeStyle = this.config.color;\n            this.ctx.stroke();\n            yield index++;\n        }\n    }\n\n    getStepCount() {\n        const { n, nSpirals } = this.config;\n        return n * nSpirals;\n    }\n\n    drawNails() {\n        const points = this.generatePoints();\n        let index = 0;\n        for (const point of points) {\n            this.nails.addNail({point, number: `${index++}`});\n        }\n    }\n}\n\nexport default Spirals;","const PI2 = Math.PI * 2;\n\nexport default class Circle {\n    constructor(config) {\n        const { n, size, margin = 0, rotation = 0, center } = this.config = config;\n        \n        this.center = center ?? size.map(v => v / 2);\n        this.radius = Math.min(...this.center) - margin;\n\n        this.indexAngle = PI2 / n;\n        this.rotationAngle = -PI2 * rotation;\n    }\n\n    getPoint(index = 0) {\n        return [\n            this.center[0] + Math.sin(index * this.indexAngle + this.rotationAngle) * this.radius,\n            this.center[1] + Math.cos(index * this.indexAngle + this.rotationAngle) * this.radius\n        ];\n    }\n\n    drawNails(nails) {\n        for (let i=0; i < this.config.n; i++) {\n            nails.addNail({point: this.getPoint(i)});\n        }\n    }\n}","import StringArt from \"../StringArt.js\";\n\nconst MARGIN = 20;\nconst SIDES = ['left', 'bottom', 'right', 'top'];\nconst SIDES_ORDER = ['left', 'bottom', 'right', 'top'];\n\nconst SIDES_ROTATION = {\n    left: 0,\n    bottom: Math.PI / 2,\n    right: Math.PI,\n    top: Math.PI * 1.5\n};\n\nclass Eye extends StringArt{\n    name = \"Eye\"\n    id = \"eye\"\n    link = \"https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails per side',\n            defaultValue: 82,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'angle',\n            label: 'Layer angle',\n            defaultValue: 30,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 45,\n                step: 1\n            }\n        },\n        {\n            key: 'color1',\n            label: 'String #1 color',\n            defaultValue: \"#11e8bd\",\n            type: \"color\",\n        },\n        {\n            key: 'color2',\n            label: 'String #2 color',\n            defaultValue: \"#6fff52\",\n            type: \"color\",\n        },\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n\n        const { n, angle } = this.config;\n\n        this.maxSize = Math.min(...this.size) - 2 * MARGIN;\n        this.nailSpacing = this.maxSize / (n - 1);\n        this.layerAngle = angle * Math.PI / 180;\n    }\n\n    // Sides: top, right, bottom, left\n    getPoint({index, angle, layerStart, rotation}) {\n        const theta = angle + rotation;\n\n        const point = { \n            x: layerStart.x, \n            y: layerStart.y + this.nailSpacing * index\n        };\n\n        const pivot = { x: this.center[0], y: this.center[1] };\n\n        const cosAngle = Math.cos(theta);\n        const sinAngle = Math.sin(theta);\n\n        const position = [\n            (cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x),\n            (sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y),\n        ];\n        return position;\n    }\n\n    *drawSide({ side, color = '#ffffff', angle, size, layerStart }) {\n        const sideIndex = SIDES.indexOf(side);\n        const nextSide = SIDES[sideIndex === SIDES.length - 1 ? 0 : sideIndex + 1];\n        const rotation = SIDES_ROTATION[side];\n        const nextSideRotation = SIDES_ROTATION[nextSide];\n        const nLayer = Math.floor(size / this.nailSpacing);\n        \n        const sideProps = { nLayer, size, layerStart, angle };\n        \n        for(let i=0; i <= nLayer; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...this.getPoint({ side, index: i, rotation, ...sideProps}));\n            this.ctx.lineTo(...this.getPoint({side: nextSide, index: i, rotation: nextSideRotation, ...sideProps}));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            yield i;\n        }\n    }\n\n    *drawLayer(layer) {\n        const { color1, color2 } = this.config;\n        const colors = [color2, color1, color2, color1];\n        const layerAngle = this.layerAngle * layer;\n        const layerSize = this.maxSize / Math.pow(Math.cos(this.layerAngle) + Math.sin(this.layerAngle), layer);\n        const layerStart = { \n            x: this.center[0] - layerSize / 2, \n            y: this.center[1] - layerSize / 2\n        };\n\n        for (let i = 0; i < SIDES.length; i++) {\n            yield* this.drawSide({ \n                color: colors[i], \n                side: SIDES_ORDER[i],\n                angle: layerAngle,\n                size: layerSize,\n                layerStart,\n            });\n        }\n    }\n\n    *generateStrings() {\n        const {layers} =  this.config;\n        for(let layer=layers - 1; layer >= 0; layer--) {\n            yield* this.drawLayer(layer);\n        }\n    }\n\n    getStepCount() {\n        let count = 0;\n        const {layers, angle, n} = this.config;\n        const layerAngle = angle * Math.PI / 180;\n        const maxSize = Math.min(this.canvas.clientWidth, this.canvas.clientHeight) - 2 * MARGIN;\n        const nailSpacing = maxSize / (n - 1);\n\n        for(let layer = 0; layer < layers; layer++) {\n            const layerSize = maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n            count += 4 * (Math.floor(layerSize / nailSpacing) + 1)\n        }\n\n        return count;\n    }\n\n    drawNails() {\n        const {n} = this.config;\n\n        for(let i=0; i < 4; i++) {\n            const side = SIDES[i];\n            for (let nail = 0; nail < n; nail++) {\n               //this.nails.addNail({ point: this.getPoint({ side, index: nail })})\n            }\n        }\n    }\n}\n\nexport default Eye;","import Spirals from \"./string_art_types/Spirals.js\";\nimport Spiral from './string_art_types/Spiral.js';\nimport Eye from './string_art_types/Eye.js';\nimport TimesTables from './string_art_types/TimesTables.js';\nimport Star from \"./string_art_types/Star.js\";\nimport Assymetry from \"./string_art_types/Assymetry.js\";\n\nconst patternTypes = [Star, Assymetry, TimesTables, Spirals, Spiral, Eye];\n\nexport default patternTypes;\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Star extends StringArt{\n    name = \"Star\";\n    id = \"star\";\n    link = \"https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj\";\n    controls = [\n        {\n            key: 'sides',\n            label: 'Sides',\n            defaultValue: 3,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'sideNails',\n            label: 'Nails per side',\n            defaultValue: 40,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'rotation',\n            label: 'Rotation',\n            defaultValue: 0,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            },\n            displayValue: ({rotation}) => `${Math.round(rotation * 360)}°`,\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'innerColor',\n                    label: 'Star color',\n                    defaultValue: \"#2ec0ff\",\n                    type: \"color\",\n                },\n                {\n                    key: 'outterColor',\n                    label: 'Outter color',\n                    defaultValue: \"#2a82c6\",\n                    type: \"color\",\n                },\n            ]\n        }\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, sides} = this.config;\n            const extraNails = n % sides;\n            this._n = n - extraNails;\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const { sides, rotation, sideNails, margin = 0 } = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: sideNails * sides,\n            margin,\n            rotation,\n        });\n\n        this.sideAngle = Math.PI * 2 / sides;\n        this.nailSpacing = this.circle.radius / sideNails;\n        this.starCenterStart = (sideNails % 1) * this.nailSpacing;\n\n        this.sides = new Array(sides).fill(null).map((_, side) => {\n            const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n            const circlePointsStart = side * sideNails;\n\n            return {\n                sinSideAngle: Math.sin(sideAngle),\n                cosSideAngle: Math.cos(sideAngle),\n                circlePointsStart,\n                circlePointsEnd: circlePointsStart + sideNails\n            };\n        });\n    }\n\n    getStarPoint({ side, sideIndex }) {\n        const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n        const {sinSideAngle, cosSideAngle} = this.sides[side];\n        const [centerX, centerY] = this.circle.center;\n\n        return [\n            centerX + sinSideAngle * radius,\n            centerY + cosSideAngle * radius\n        ];\n    }\n\n    *generateStarPoints({ reverseOrder  = false} = {}) {\n        const {sides, sideNails} = this.config;\n\n        for (let side = 0; side < sides; side++) {\n            const prevSide = side === 0 ? sides - 1 : side - 1;\n            for (let i=0; i < sideNails; i++) {\n                const sideIndex = reverseOrder ? sideNails - i : i;\n                yield { side, prevSide, sideIndex, point: this.getStarPoint({ side, sideIndex }) };\n            }\n        }\n    }\n\n    *drawStar() {\n        const {innerColor, sideNails} = this.config;\n\n        this.ctx.strokeStyle = innerColor;\n        let prevPoint;\n\n        for (const { prevSide, sideIndex, point} of this.generateStarPoints()) {\n            this.ctx.beginPath();\n\n            if (sideIndex && !(sideIndex % 2)) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...point);\n            } else {\n                this.ctx.moveTo(...point);\n            }\n\n            const prevSideIndex = sideNails - sideIndex;\n            this.ctx.lineTo(...this.getStarPoint({ side: prevSide, sideIndex: prevSideIndex}))\n            prevPoint = point;\n            this.ctx.stroke();\n            yield;\n        }\n    }\n\n    *drawCircle() {\n        const {outterColor} = this.config;\n\n        let prevCirclePoint;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = outterColor;\n        for (const { side, prevSide, sideIndex, point} of this.generateStarPoints({ reverseOrder: true })) {\n            this.ctx.beginPath();\n            if (!prevCirclePoint) {\n                prevCirclePoint = this.circle.getPoint(this.sides[prevSide].circlePointsStart);\n            }\n\n            this.ctx.moveTo(...prevCirclePoint);\n\n            this.ctx.lineTo(...point);\n            this.ctx.stroke();\n\n            yield;\n\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            const nextPointIndex = isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex\n                : this.sides[side].circlePointsStart + sideIndex;\n\n            const nextPoint = this.circle.getPoint(nextPointIndex);\n            this.ctx.lineTo(...nextPoint);\n\n            prevCirclePoint = this.circle.getPoint(isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex + 1\n                : this.sides[side].circlePointsStart + sideIndex - 1);\n\n            this.ctx.lineTo(...prevCirclePoint);\n\n            this.ctx.stroke();\n            isPrevSide = !isPrevSide;\n            yield;\n        }\n    }\n\n    *generateStrings() {\n        yield* this.drawCircle();\n        yield* this.drawStar();\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n\n        for (const {point} of this.generateStarPoints()) {\n            this.nails.addNail({ point });\n        }\n\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        const {sides, sideNails} = this.config;\n        const starCount = sideNails * sides;\n        return starCount * 3; // Once for each side + two more times for the side's circle\n    }\n}\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Assymetry extends StringArt{\n    name = \"Assymetry\";\n    id = \"assymetry\";\n    link = \"https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Nails',\n            defaultValue: 144,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'rotation',\n            label: 'Rotation',\n            defaultValue: 0,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            },\n            displayValue: ({rotation}) => `${Math.round(rotation * 360)}°`\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: [\n                {\n                    key: 'layer1',\n                    label: 'Layer 1',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show1',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size1',\n                            label: 'Size',\n                            defaultValue: 0.25,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size1, n}) => Math.round(n * size1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'end1',\n                            label: 'End Position',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n,\n                            },\n                            displayValue: ({end1, n}) => Math.round(n * end1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'color1',\n                            label: 'Color',\n                            defaultValue: \"#a94fb0\",\n                            type: \"color\",\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'reverse1',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show1}) => show1\n                        },\n                    ]\n                },\n                {\n                    key: 'layer2',\n                    label: 'Layer 2',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show2',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size2',\n                            label: 'Size',\n                            defaultValue: 0.125,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size2, n}) => Math.round(n * size2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'end2',\n                            label: 'End Position',\n                            defaultValue: 0.888,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'color2',\n                            label: 'Color',\n                            defaultValue: \"#ec6ad0\",\n                            type: \"color\",\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'reverse2',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show2}) => show2\n                        },\n                    ]\n                },\n                {\n                    key: 'layer3',\n                    label: 'Layer 3',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show3',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size3',\n                            label: 'Size',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size3, n}) => Math.round(n * size3),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'end3',\n                            label: 'End Position',\n                            defaultValue: 0.826,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'color3',\n                            label: 'Color',\n                            defaultValue: \"#f08ad5\",\n                            type: \"color\",\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'reverse3',\n                            label: 'Reverse',\n                            defaultValue: true,\n                            type: 'checkbox',\n                            show: ({show3}) => show3\n                        },\n                    ]\n                }\n            ]\n        },\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n\n    getSetUp() {\n        const { rotation, n, margin = 0 } = this.config;\n        const circle = new Circle({\n            size: this.getSize(),\n            n,\n            margin,\n            rotation: rotation - 0.25,\n        });\n\n        let lineSpacing = circle.indexAngle * circle.radius;\n        const lineNailCount = Math.floor(circle.radius / lineSpacing) - 1;\n        lineSpacing += (circle.radius - lineSpacing * lineNailCount) / lineNailCount;\n        const firstCirclePoint = circle.getPoint(0);\n        const totalNailCount = lineNailCount + n;\n        const totalIndexCount = totalNailCount + lineNailCount;\n        const layers = new Array(3).fill(null)\n            .map((_, i) => getLayer.call(this, i + 1))\n            .filter(({enable}) => enable)\n\n        return {\n            circle,\n            lineSpacing,\n            lineNailCount,\n            firstCirclePoint,\n            layers,\n            totalNailCount,\n            totalIndexCount,\n        };\n\n        function getLayer(layerIndex) {\n            const size = Math.round(n * this.config['size' + layerIndex]) + lineNailCount\n            return {\n                size,\n                endIndex: Math.round(this.config['end' + layerIndex] * (totalNailCount + lineNailCount)) - size,\n                color: this.config['color' + layerIndex],\n                enable: this.config['show' + layerIndex],\n                isReverse: this.config['reverse' + layerIndex],\n            };\n        }\n    }\n\n    /**\n     * Returns the position of a point on the line\n     * @param {index of the point in the circle, 0 is the center} index\n     */\n    getPoint(index) {\n        if (index < this.lineNailCount || index > this.totalNailCount) {\n            const linePosition = index < this.lineNailCount ? this.lineNailCount - index : index - this.totalNailCount;\n\n            const indexLength = (linePosition) * this.lineSpacing;\n            return [\n                this.firstCirclePoint[0] - indexLength * Math.sin(this.circle.rotationAngle),\n                this.firstCirclePoint[1] - indexLength * Math.cos(this.circle.rotationAngle)\n            ];\n        } else {\n            const circleIndex = index - this.lineNailCount;\n            return this.circle.getPoint(circleIndex);\n        }\n    }\n\n    *drawCircle({endIndex, color, isReverse, size}) {\n        let prevPoint;\n        let prevPointIndex;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = color;\n        const self = this;\n        const advance = isReverse ? -1 : 1;\n\n        for(let index = 0; index <= endIndex; index++) {\n            this.ctx.beginPath();\n\n            if (prevPoint) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...this.getPoint(prevPointIndex + advance));\n            } else {\n                this.ctx.moveTo(...this.getPoint(getPointIndex(index)));\n            }\n\n            prevPointIndex = getPointIndex(isPrevSide ? index : index + size);\n            prevPoint = this.getPoint(prevPointIndex);\n            this.ctx.lineTo(...prevPoint);\n            this.ctx.stroke();\n\n            yield;\n\n            isPrevSide = !isPrevSide;\n        }\n\n        function getPointIndex(index) {\n            return isReverse ? self.totalIndexCount - index : index;\n        }\n    }\n\n    *generateStrings() {\n        for (const layer of this.layers) {\n            yield* this.drawCircle(layer);\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n\n        for (let i=0; i < this.lineNailCount; i++) {\n            this.nails.addNail({ point: this.getPoint(i) });\n        }\n    }\n\n    getStepCount() {\n        const {layers} = this.getSetUp();\n        return layers.reduce((stepCount, layer) =>\n            stepCount + layer.endIndex + 1, 0\n        );\n    }\n}\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nconst MARGIN = 20;\n\nexport default class TimesTables extends StringArt{\n    name = \"Times Tables\";\n    id = \"times_tables\";\n    link = \"https://www.youtube.com/watch?v=LWin7w9hF-E&ab_channel=Jorgedelatierra\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 180,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 240,\n                step: 1\n            }\n        },\n        {\n            key: 'base',\n            label: 'Multiplication',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 99,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 7,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'multicolor',\n                    label: 'Use multiple colors',\n                    defaultValue: true,\n                    type: \"checkbox\",\n                },\n                {\n                    key: 'multicolorRange',\n                    label: 'Multicolor range',\n                    defaultValue: 180,\n                    type: \"range\",\n                    attr: {\n                        min: 1,\n                        max: 360,\n                        step: 1\n                    },\n                    show: ({multicolor}) => multicolor,\n                },\n                {\n                    key: 'multicolorStart',\n                    label: 'Multicolor start',\n                    defaultValue: 256,\n                    type: \"range\",\n                    attr: {\n                        min: 0,\n                        max: 360,\n                        step: 1\n                    },\n                    show: ({multicolor}) => multicolor,\n                },\n                {\n                    key: 'color',\n                    label: 'String color',\n                    defaultValue: \"#ff4d00\",\n                    type: \"color\",\n                    show: ({multicolor}) => !multicolor\n                },\n            ]\n        },\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, layers} = this.config;\n            const extraNails = n % layers;\n            this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const {layers, multicolorRange} = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: this.n,\n            margin: MARGIN\n        });\n        this.multiColorStep = multicolorRange / layers;\n        this.layerShift = Math.floor(this.n / layers);\n    }\n\n    *drawTimesTable({ shift = 0, color = \"#f00\", steps, time }) {\n        const {base} = this.config;\n        const n = this.n;\n        const stepsToRender = steps ?? n;\n\n        let point = this.circle.getPoint(shift);\n\n        for(let i=1; i <= stepsToRender; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            point = this.circle.getPoint(i + shift);\n            this.ctx.lineTo(...point);\n            const toIndex = (i * base) % n;\n            this.ctx.lineTo(...this.circle.getPoint(toIndex + shift));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            \n            yield { instructions: `${i - 1} → ${i} → ${toIndex} → ${i}`, index: time * n + i };\n        }\n    }\n\n    *generateStrings() {\n        const {color, multicolor, layers} = this.config;\n\n        for(let time = 0; time < layers; time++) {\n            const timeColor = multicolor ? this.getTimeColor(time, layers) : color;\n            yield* this.drawTimesTable({ \n                time,\n                color: timeColor, \n                shift: this.layerShift * time,\n            });\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n\n    getTimeColor(time) {\n        const {multicolorStart, darkMode} = this.config;\n\n        return `hsl(${multicolorStart + time * this.multiColorStep}, 80%, ${darkMode ? 50 : 40}%)`;\n    }\n\n    getStepCount() {\n        return this.config.layers * this.n;\n    }\n}\n            ","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Spiral extends StringArt{\n    id = \"spiral\";\n    name = \"Spiral\";\n    link = \"https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 144,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 60,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 72,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 144,\n                step: 1,\n            }\n        },\n        {\n            key: 'rotation',\n            label: 'Rotation',\n            defaultValue: 0.49,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            },\n            displayValue: ({rotation}) => `${Math.round(rotation * 360)}°`,\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 9,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'layerSpread',\n            label: 'Layer spread',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'multicolorRange',\n                    label: 'Multicolor range',\n                    defaultValue: 216,\n                    type: \"range\",\n                    attr: {\n                        min: 1,\n                        max: 360,\n                        step: 1\n                    },\n                },\n                {\n                    key: 'multicolorStart',\n                    label: 'Multicolor start',\n                    defaultValue: 263,\n                    type: \"range\",\n                    attr: {\n                        min: 0,\n                        max: 360,\n                        step: 1\n                    },\n                },\n                {\n                    key: 'multicolorByLightness',\n                    label: 'Multicolor by lightness',\n                    defaultValue: true,\n                    type: 'checkbox'\n                }\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        const { n, rotation } = this.config;\n\n        this.circle = new Circle({\n            size: this.size,\n            n,\n            rotation,\n            margin: 20,\n        });\n        const {layers, multicolorRange, multicolorByLightness, layerSpread} = this.config;\n        this.multiColorStep = multicolorRange / layers;\n        this.multiColorLightnessStep = multicolorByLightness ? 100 / layers : 1;\n        this.layerShift = layerSpread;\n    }\n\n    *drawSpiral({ shift = 0, color = \"#f00\" } = {}) {\n        const {repetition, innerLength} = this.config;\n        \n        this.ctx.moveTo(...this.circle.getPoint(shift));\n        \n        let currentInnerLength = innerLength;\n        let repetitionCount = 0;\n        this.ctx.strokeStyle = color;\n        \n        for(let i=0; currentInnerLength; i++) {\n            this.ctx.beginPath();\n            this.ctx.lineTo(...this.circle.getPoint(i + currentInnerLength + shift));\n            this.ctx.lineTo(...this.circle.getPoint(i + 1 + shift));\n            this.ctx.stroke();\n\n            repetitionCount++;\n            if (repetitionCount === repetition) {\n                currentInnerLength--;\n                repetitionCount = 0;\n            }\n\n            yield i;\n        }\n      \n    }\n\n    *generateStrings() {\n        const { layers } = this.config;\n        for(let layer = 0; layer < layers; layer++) {\n            yield* this.drawSpiral({ \n                color: this.getLayerColor(layer), \n                shift: -this.layerShift * layer \n            });\n        }\n    }\n\n    getLayerColor(layer) {\n        const {multicolorStart, darkMode, multicolorByLightness} = this.config;\n        const lightness = multicolorByLightness ? this.multiColorLightnessStep * layer : darkMode ? 50 : 40;\n\n        return `hsl(${multicolorStart + layer * this.multiColorStep}, 80%, ${lightness}%)`;\n    }\n\n    getStepCount() {\n        const {innerLength, repetition, layers} = this.config;\n        return layers * innerLength * repetition;\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n}","const elements = {\n    controls: document.querySelector(\"#controls\"),\n    sidebarForm: document.querySelector(\"#sidebar_form\"),\n};\n\nconst EVENTS = new Set(['input', 'change']);\nconst STATE_LOCAL_STORAGE_KEY = 'controls_state';\n\nlet inputTimeout;\n\nexport default class EditorControls {\n    constructor({pattern}) {\n        this.pattern = pattern;\n        this.state = this._getState() ?? { groups: {}};\n\n        this.eventHandlers = {\n            input: new Set(),\n            change: new Set()\n        }\n\n        this._wrappedOnInput = e => this._onInput(e);\n        this._toggleFieldset = e => {\n            if (e.target.nodeName === \"LEGEND\" ) {\n                e.target.parentElement.classList.toggle(\"minimized\");\n                const groupId = e.target.parentElement.dataset.group;\n                this.state = { ...this.state, groups: { ...this.state.groups, [groupId]: !e.target.parentElement.classList.contains(\"minimized\")}};\n                this._updateState(this.state);\n            }\n        };\n\n        this._toggleFieldSetOnEnter = e => {\n            if (e.target.nodeName === \"LEGEND\" && e.key === \"Enter\") {\n                this._toggleFieldset(e);\n            }\n        }\n\n        elements.controls.addEventListener(\"input\", this._wrappedOnInput);\n        elements.sidebarForm.addEventListener(\"click\", this._toggleFieldset);\n        elements.sidebarForm.addEventListener(\"keydown\", this._toggleFieldSetOnEnter);\n        this.controlElements = {};\n        this.renderControls();\n    }\n\n    destroy() {\n        elements.controls.removeEventListener(\"input\", this._wrappedOnInput);\n        elements.sidebarForm.removeEventListener(\"click\", this._toggleFieldset);\n        elements.sidebarForm.removeEventListener(\"keydown\", this._toggleFieldSetOnEnter);\n        elements.controls.innerHTML = \"\";\n    }\n\n    addEventListener(event, eventHandler) {\n        if (!EVENTS.has(event)) {\n            throw new Error(`Unsupported event for EditorControls, \"${event}\"!`);\n        }\n\n        if (!(eventHandler instanceof Function)) {\n            throw new Error('Invalid event handler.');\n        }\n\n        this.eventHandlers[event].add(eventHandler);\n    }\n\n    _triggerEvent(event, eventData) {\n        for(const eventHandler of this.eventHandlers[event]) {\n            eventHandler(eventData);\n        }\n    }\n\n    _onInput(e) {\n        requestAnimationFrame(() => {\n            clearTimeout(inputTimeout);\n\n            const inputValue = getInputValue(e.target.type, e.target);\n            const controlKey = e.target.id.replace(/^config_/, '');\n\n            this.pattern.config = Object.freeze({\n                ...this.pattern.config,\n                [controlKey]: inputValue\n            });\n\n            const {config, displayValue} = this.controlElements[controlKey];\n            if (displayValue) {\n                const formattedValue = config.displayValue ? config.displayValue(this.pattern.config) : e.target.value;\n                displayValue.innerText = formattedValue;\n            }\n\n            const eventData = Object.freeze({\n                control: controlKey,\n                value: inputValue,\n                originalEvent: e,\n                pattern: this.pattern,\n            });\n\n            this._triggerEvent('input', eventData);\n\n            inputTimeout = setTimeout(() => {\n                this._triggerEvent('change', eventData);\n                this.updateControlsVisibility();\n            }, 100);\n        });\n    }\n\n    _getState() {\n        const state = localStorage.getItem(STATE_LOCAL_STORAGE_KEY);\n        if (state) {\n            try {\n                return JSON.parse(state);\n            } catch(e) {\n                return null;\n            }\n        }\n\n        return null;\n    }\n\n    _updateState(newState) {\n        if (newState) {\n            localStorage.setItem(STATE_LOCAL_STORAGE_KEY, JSON.stringify(newState));\n        } else {\n            localStorage.removeItem(STATE_LOCAL_STORAGE_KEY);\n        }\n    }\n\n    updateControlsVisibility(configControls = this.pattern.configControls) {\n        configControls.forEach(control => {\n            if (control.show) {\n                const shouldShowControl = control.show(this.pattern.config);\n                const controlEl = this.controlElements[control.key].control;\n                if (controlEl) {\n                    if (shouldShowControl) {\n                        controlEl.removeAttribute('hidden');\n                    } else {\n                        controlEl.setAttribute('hidden', 'hidden');\n                    }\n                }\n            }\n\n            if (control.isDisabled) {\n                const shouldDisableControl = control.isDisabled(this.pattern.config);\n                const inputEl = this.controlElements[control.key].input;\n                if (inputEl) {\n                    if (shouldDisableControl) {\n                        inputEl.setAttribute('disabled', 'disabled');\n                    } else {\n                        inputEl.removeAttribute('disabled');\n                    }\n                }\n            }\n\n            if (control.children) {\n                this.updateControlsVisibility(control.children);\n            }\n        });\n    }\n\n    updateInputs(config) {\n        Object.entries(config).forEach(([key, value]) => {\n            const {input, value: valueEl} = this.controlElements[key];\n            if (input) {\n                if (input.type === \"checkbox\") {\n                    input.checked = value;\n                } else {\n                    input.value = value;\n                }\n                if (valueEl) {\n                    valueEl.innerText = value;\n                }\n            }\n        });\n    }\n\n    renderControls(containerEl = elements.controls, _configControls) {\n        const configControls = _configControls ?? this.pattern.configControls;\n        containerEl.innerHTML = \"\";\n        const controlsFragment = document.createDocumentFragment();\n\n\n        configControls.forEach(control => {\n            const controlId = `config_${control.key}`;\n            const controlElements = this.controlElements[control.key] = { config: control };\n\n            let controlEl;\n\n            if (control.type === \"group\") {\n                controlEl = document.createElement(\"fieldset\");\n                controlEl.setAttribute('data-group', control.key);\n                const groupTitleEl = document.createElement(\"legend\");\n                groupTitleEl.setAttribute(\"tabindex\", \"0\");\n                groupTitleEl.innerText = control.label;\n                controlEl.appendChild(groupTitleEl);\n                controlEl.className = \"control control_group\";\n                const groupStateOpen = this.state.groups[control.key] ?? control.defaultValue !== \"minimized\";\n                if (!groupStateOpen) {\n                    controlEl.classList.add('minimized');\n                }\n                const childrenContainer = document.createElement('div');\n                controlEl.appendChild(childrenContainer);\n                this.renderControls(childrenContainer, control.children);\n            }\n            else {\n                controlEl = document.createElement(\"div\");\n                controlEl.className = \"control\";\n\n                const label = document.createElement(\"label\");\n                label.innerHTML = control.label;\n                label.setAttribute(\"for\", controlId);\n\n                const inputEl = controlElements.input = document.createElement(\"input\");\n                inputEl.setAttribute(\"type\", control.type);\n                const inputValue = this.pattern.config[control.key] ?? control.defaultValue;\n\n                if (control.attr) {\n                    Object.entries(control.attr).forEach(([attr, value]) => {\n                        const realValue = value instanceof Function ? value(this.pattern) : value;\n                        inputEl.setAttribute(attr, realValue)\n                    });\n                }\n\n                if (control.type === \"checkbox\") {\n                    inputEl.checked = inputValue;\n                    controlEl.appendChild(inputEl);\n                    controlEl.appendChild(label);\n                } else {\n                    controlEl.appendChild(label);\n                    controlEl.appendChild(inputEl);\n                    inputEl.value = inputValue;\n                    const inputValueEl = controlElements.displayValue = document.createElement('span');\n                    inputValueEl.id = `config_${control.key}_value`;\n                    inputValueEl.innerText = control.displayValue ? control.displayValue(this.pattern.config) : inputValue;\n                    inputValueEl.className = \"control_input_value\";\n                    controlEl.appendChild(inputValueEl);\n                }\n                inputEl.id = controlId;\n            }\n\n            this.controlElements[control.key].control = controlEl;\n            controlEl.id = `control_${control.key}`;\n            controlsFragment.appendChild(controlEl);\n        });\n\n        containerEl.appendChild(controlsFragment);\n        requestAnimationFrame(() => this.updateControlsVisibility())\n    }\n\n}\n\n\nfunction getInputValue(type, inputElement) {\n    switch(type) {\n        case 'range':\n            return parseFloat(inputElement.value);\n        case 'checkbox':\n            return inputElement.checked;\n        default:\n            return inputElement.value;\n    }\n}\n","const elements = {\n    sizeSelect: document.querySelector(\"#size_select\"),\n    sizeCustom: document.querySelector(\"#size_custom\"),\n    width: document.querySelector(\"#size_custom_width\"),\n    height: document.querySelector(\"#size_custom_height\"),\n};\n\nfunction cmToPixels(cm, dpi = 300) {\n    return Math.floor(cm / 2.54 * dpi);\n}\n\nconst SCREEN_SIZE = [\n    Math.floor(window.screen.width * window.devicePixelRatio),\n    Math.floor(window.screen.height * window.devicePixelRatio),\n];\n\nconst SIZES = [\n    { id: 'fit', name: 'Fit to screen' },\n    { id: 'A4', value: [20, 28].map(v => cmToPixels(v)) },\n    { id: 'A3', value: [28, 40].map(v => cmToPixels(v)) },\n    { id: 'screen', name: `Screen size (${SCREEN_SIZE.join('x')})`, value: SCREEN_SIZE},\n    { id: 'custom', name: 'Custom...' }\n];\n\nexport default class EditorSizeControls {\n    element = document.querySelector(\"#size_controls\");\n\n    constructor({ getCurrentSize }) {\n        const sizeOptionsFragment = document.createDocumentFragment();\n        SIZES.forEach(size => {\n            const sizeListItem = document.createElement('option');\n            sizeListItem.setAttribute('value', size.id);\n            sizeListItem.innerText = size.name ?? size.id;\n            sizeOptionsFragment.appendChild(sizeListItem);\n        });\n        elements.sizeSelect.appendChild(sizeOptionsFragment)\n        elements.sizeSelect.addEventListener(\"change\", e => {\n            const selectedSizeId = e.target.value;\n            const size = SIZES.find(({id}) => id === selectedSizeId);\n\n            if (size.id === \"custom\") {\n                elements.sizeCustom.removeAttribute('hidden');\n                const [width, height] = getCurrentSize();\n                elements.width.value = width;\n                elements.height.value = height;\n            } else {\n                elements.sizeCustom.setAttribute('hidden', 'hidden');\n                this._notifyOnChange(size.value);\n            }\n        });\n\n        elements.sizeCustom.addEventListener(\"focusin\", e => {\n            e.target.select();\n        });\n\n        elements.sizeCustom.addEventListener('input', () => {\n            this._notifyOnChange([\n                elements.width.value ? parseInt(elements.width.value) : null,\n                elements.height.value ? parseInt(elements.height.value) : null\n            ]);\n        });\n    }\n\n    _notifyOnChange([width, height] = []) {\n        this.element.dispatchEvent(new CustomEvent('sizechange', { detail: { width, height }}));\n    }\n}\n","import Player from \"./editor/Player.js\";\nimport patternTypes from \"./pattern_types.js\";\nimport EditorControls from \"./editor/EditorControls.js\";\nimport EditorSizeControls from \"./editor/EditorSizeControls.js\";\n\nconst elements = {\n    canvas: document.querySelector(\"canvas\"),\n    patternSelector: document.querySelector(\"#pattern_select\"),\n    patternLink: document.querySelector(\"#pattern_link\"),\n};\n\nconst patterns = patternTypes.map(Pattern => new Pattern(elements.canvas));\n\nlet currentPattern;\nconst player = new Player(document.querySelector(\"#player\"));\nconst sizeControls = new EditorSizeControls({\n    getCurrentSize: () => [\n        elements.canvas.clientWidth,\n        elements.canvas.clientHeight\n    ]\n});\n\nlet controls;\n\nmain();\n\nfunction main() {\n    initRouting();\n    initSize();\n    initControls();\n\n    if (history.state?.pattern) {\n        updateState(history.state);\n    } else {\n        const queryParams = new URLSearchParams(document.location.search);\n        const queryPattern = queryParams.get('pattern');\n\n        if (queryPattern) {\n            const config = queryParams.get('config');\n            updateState({ pattern: queryPattern, config })\n        } else {\n            selectPattern(patterns[0]);\n        }\n    }\n\n    window.addEventListener(\"resize\", () =>\n        currentPattern.draw()\n    );\n\n    elements.canvas.addEventListener('click', () => {\n        player.toggle();\n    });\n}\n\nfunction onInputsChange() {\n    player.update(currentPattern, { goToEnd: false });\n    const configQuery = JSON.stringify(currentPattern.config);\n    history.replaceState({\n        pattern: currentPattern.id,\n        config: configQuery\n    }, currentPattern.name, `?pattern=${currentPattern.id}&config=${encodeURIComponent(configQuery)}`);\n}\n\nfunction initControls() {\n    patterns.forEach(pattern => {\n        const option = document.createElement('option');\n        option.innerText = pattern.name;\n        option.value = pattern.id;\n        elements.patternSelector.appendChild(option);\n    });\n\n    elements.patternSelector.addEventListener('change', e => {\n        const patternId = e.target.value;\n        selectPattern(findPatternById(patternId));\n        history.pushState({ pattern: patternId }, patternId, \"?pattern=\" + patternId)\n    });\n}\n\nfunction initSize() {\n    sizeControls.element.addEventListener('sizechange', ({ detail: {width, height}}) => {\n        elements.canvas.removeAttribute('width');\n        elements.canvas.removeAttribute('height');\n\n        if (width && height) {\n            elements.canvas.style.width = `${width}px`;\n            elements.canvas.style.height = `${height}px`;\n        } else {\n            elements.canvas.removeAttribute('style');\n        }\n\n        currentPattern.draw();\n    });\n}\n\nfunction initRouting() {\n    window.addEventListener('popstate', ({state}) => {\n        updateState(state);\n    });\n}\n\nfunction updateState(state) {\n    const pattern = findPatternById(state.pattern);\n    elements.patternSelector.value = pattern.id;\n    selectPattern(pattern, {\n        draw: false,\n        config: state.config ? JSON.parse(state.config) : null\n    });\n\n    currentPattern.draw();\n}\n\nfunction findPatternById(patternId) {\n    const pattern = patterns.find(({id}) => id === patternId);\n    if (!pattern) {\n        throw new Error(`Pattern with id \"${patternId} not found!`);\n    }\n    return pattern;\n}\n\nfunction selectPattern(pattern, { config, draw = true} = {}) {\n    currentPattern = pattern;\n    if (config) {\n        currentPattern.config = config;\n    }\n    if (controls) {\n        controls.destroy();\n    }\n    controls = new EditorControls({pattern, config});\n    controls.addEventListener('input', () => currentPattern.draw());\n    controls.addEventListener('change', onInputsChange);\n\n    elements.patternLink.setAttribute(\"href\", pattern.link);\n    if (draw) {\n        currentPattern.draw();\n    }\n    player.update(currentPattern);\n    document.title = `${pattern.name} - String Art Studio`;\n}\n","export default class Player {\n    constructor(parentEl) {\n        this.elements = {\n            player: parentEl,\n            step: parentEl.querySelector('#step'),\n            stepInstructions: parentEl.querySelector('#step_instructions'),\n            playerPosition: parentEl.querySelector('#player_position'),\n            playBtn: parentEl.querySelector('#play_btn'),\n            pauseBtn: parentEl.querySelector('#pause_btn')\n        };\n        this.stepCount = 0;\n        this._isPlaying = false;\n        \n        this.elements.playerPosition.addEventListener('input', ({ target }) => {\n            this.goto(+target.value)\n        });\n\n        this.elements.playBtn.addEventListener('click', () => {\n            this.play();\n        });\n\n        this.elements.pauseBtn.addEventListener('click', () => {\n            this.pause();\n        });\n    }\n\n    updateStatus(isPlaying) {\n        if (this._isPlaying !== isPlaying) {\n            this.elements.player.classList.toggle('playing');\n            this._isPlaying = isPlaying;\n        }\n    }\n\n    update(stringArt) {\n        this.stringArt = stringArt;\n        this.stepCount = stringArt.getStepCount();\n        this.elements.playerPosition.setAttribute('max', this.stepCount);\n        this.goto(this.stepCount);\n    }\n\n    updatePosition(position) {\n        this.elements.step.innerText = `${position}/${this.stepCount}`;\n        this.elements.playerPosition.value = position;\n    }\n    goto(position) {\n        this.pause();\n        this.updatePosition(position);\n        this.stringArt.goto(position);\n    }\n\n    setInstructions(instructions) {\n        this.elements.stepInstructions.innerText = instructions;\n    }\n\n    play() {\n        this.updateStatus(true);\n        cancelAnimationFrame(this.renderRafId);\n\n        if (this.stringArt.position === this.stepCount) {\n            this.stringArt.goto(0);\n        }\n\n        const self = this;\n\n        step();\n\n        function step() {\n            if (!self.stringArt.drawNext().done) {\n                self.renderRafId = requestAnimationFrame(step);\n            } else {\n                self.updateStatus(false);\n            }\n            self.updatePosition(self.stringArt.position);\n        }\n    }\n\n    pause() {\n        cancelAnimationFrame(this.renderRafId);\n        this.updateStatus(false);\n    }\n\n    toggle() {\n        if (this._isPlaying) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n}\n"],"names":["$a8180031c78213da$var$PI2","Math","PI","canvas","config","this","context","getContext","setConfig","nails","nailRadius","darkMode","nailsColor","addNail","nail","push","fill","globalCompositeOperation","beginPath","forEach","point","x","y","moveTo","arc","fillStyle","$65e05ee91a8797e3$var$COLORS","$65e05ee91a8797e3$var$COMMON_CONFIG_CONTROLS","key","label","type","defaultValue","children","isDisabled","showNails","attr","min","max","step","show","showStrings","displayValue","margin","customBackgroundColor","$65e05ee91a8797e3$var$flattenConfig","configControls","reduce","$65e05ee91a8797e3$export$2e2bcd8739ae039","Error","ctx","dpr","window","devicePixelRatio","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","controls","concat","defaultConfig","_defaultConfig","_config","value","Object","assign","getSize","clientWidth","clientHeight","map","v","setUpDraw","removeAttribute","width","height","size","setAttribute","center","$a8180031c78213da$export$2e2bcd8739ae039","clearRect","lineWidth","stringWidth","afterDraw","drawNails","initDraw","backgroundColor","fillRect","draw","position","Infinity","stringsIterator","generateStrings","drawNext","done","goto","result","next","getStepCount","name","$17fe1039ca333e84$export$2e2bcd8739ae039","id","link","n","radiusIncrease","angleStep","nSpirals","currentRadius","angle","centerx","centery","i","s","rotation","sin","cos","points","generatePoints","index","strokeStyle","color","lastPoint","lineTo","stroke","number","$188437ce07b37c18$var$PI2","radius","indexAngle","rotationAngle","getPoint","$f11ad0f2a18da5c9$var$SIDES","$f11ad0f2a18da5c9$var$SIDES_ORDER","$f11ad0f2a18da5c9$var$SIDES_ROTATION","left","bottom","right","top","$f11ad0f2a18da5c9$export$2e2bcd8739ae039","super","maxSize","nailSpacing","layerAngle","layerStart","theta","pivot","cosAngle","sinAngle","side","sideIndex","indexOf","nextSide","length","nextSideRotation","nLayer","floor","sideProps","layer","color1","color2","colors","layerSize","pow","drawSide","layers","drawLayer","count","$8b13425f1e264518$export$2e2bcd8739ae039","round","_n","sides","extraNails","sideNails","circle","$188437ce07b37c18$export$2e2bcd8739ae039","sideAngle","starCenterStart","Array","_","circlePointsStart","sinSideAngle","cosSideAngle","circlePointsEnd","getStarPoint","centerX","centerY","reverseOrder","prevSide","innerColor","prevPoint","generateStarPoints","prevSideIndex","outterColor","prevCirclePoint","isPrevSide","nextPointIndex","nextPoint","drawCircle","drawStar","size1","show1","end1","size2","show2","end2","size3","show3","getSetUp","lineSpacing","lineNailCount","firstCirclePoint","totalNailCount","totalIndexCount","getLayer","call","filter","enable","layerIndex","endIndex","isReverse","indexLength","circleIndex","prevPointIndex","self","advance","getPointIndex","stepCount","multicolor","multicolorRange","multiColorStep","layerShift","shift","steps","time","base","stepsToRender","toIndex","instructions","timeColor","getTimeColor","drawTimesTable","multicolorStart","multicolorByLightness","layerSpread","multiColorLightnessStep","repetition","innerLength","currentInnerLength","repetitionCount","drawSpiral","getLayerColor","lightness","$2fc16ffa17719734$var$elements","document","querySelector","sidebarForm","$2fc16ffa17719734$var$EVENTS","Set","$2fc16ffa17719734$var$inputTimeout","pattern","state","_getState","groups","eventHandlers","input","change","_wrappedOnInput","e","_onInput","_toggleFieldset","target","nodeName","parentElement","classList","toggle","groupId","dataset","group","contains","_updateState","_toggleFieldSetOnEnter","addEventListener","controlElements","renderControls","destroy","removeEventListener","innerHTML","event","eventHandler","has","Function","add","_triggerEvent","eventData","requestAnimationFrame","clearTimeout","inputValue","inputElement","parseFloat","checked","$2fc16ffa17719734$var$getInputValue","controlKey","replace","freeze","formattedValue","innerText","control","originalEvent","setTimeout","updateControlsVisibility","localStorage","getItem","JSON","parse","newState","setItem","stringify","removeItem","shouldShowControl","controlEl","shouldDisableControl","inputEl","updateInputs","entries","valueEl","containerEl","_configControls","controlsFragment","createDocumentFragment","controlId","createElement","groupTitleEl","appendChild","className","childrenContainer","realValue","inputValueEl","$0597ff46967fdd49$var$elements","sizeSelect","sizeCustom","$0597ff46967fdd49$var$cmToPixels","cm","dpi","$0597ff46967fdd49$var$SCREEN_SIZE","screen","$0597ff46967fdd49$var$SIZES","join","$52852adbc3c0b381$var$elements","patternSelector","patternLink","$52852adbc3c0b381$var$patterns","Pattern","$52852adbc3c0b381$var$currentPattern","$52852adbc3c0b381$var$player","parentEl","elements","player","stepInstructions","playerPosition","playBtn","pauseBtn","_isPlaying","play","pause","updateStatus","isPlaying","update","stringArt","updatePosition","setInstructions","cancelAnimationFrame","renderRafId","$52852adbc3c0b381$var$sizeControls","element","getCurrentSize","sizeOptionsFragment","sizeListItem","selectedSizeId","find","_notifyOnChange","select","parseInt","dispatchEvent","CustomEvent","detail","$52852adbc3c0b381$var$controls","$52852adbc3c0b381$var$onInputsChange","goToEnd","configQuery","history","replaceState","encodeURIComponent","$52852adbc3c0b381$var$updateState","$52852adbc3c0b381$var$findPatternById","$52852adbc3c0b381$var$selectPattern","patternId","$2fc16ffa17719734$export$2e2bcd8739ae039","title","$52852adbc3c0b381$var$initRouting","style","$52852adbc3c0b381$var$initSize","option","pushState","$52852adbc3c0b381$var$initControls","queryParams","URLSearchParams","location","search","queryPattern","get","$52852adbc3c0b381$var$main"],"version":3,"file":"index.c23a3ca0.js.map"}