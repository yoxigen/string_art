{"mappings":"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","sources":["src/scripts/helpers/Color.js","src/scripts/helpers/math_utils.js","src/scripts/Nails.js","src/scripts/StringArt.js","src/scripts/helpers/Circle.js","src/scripts/string_art_types/Spiral.js","src/scripts/string_art_types/Spirals.js","src/scripts/string_art_types/Mandala.js","src/scripts/string_art_types/Eye.js","src/scripts/string_art_types/Assymetry.js","src/scripts/helpers/Polygon.js","src/scripts/string_art_types/PolygonPattern.js","src/scripts/string_art_types/Flower.js","src/scripts/string_art_types/MaurerRose.js","src/scripts/string_art_types/FlowerOfLife.js","src/scripts/pattern_types.js","src/scripts/string_art_types/Star.js","src/scripts/string_art_types/Wave.js","src/scripts/string_art_types/Freestyle.js","src/scripts/editor/EditorControls.js","src/scripts/editor/EditorSizeControls.js","src/scripts/Serialize.js","src/scripts/share.js","src/scripts/main.js","src/scripts/editor/Player.js","src/scripts/thumbnails/Thumbnails.js","src/scripts/pwa.js"],"sourcesContent":["const COLOR_CONTROLS = [\n  {\n    key: 'isMultiColor',\n    label: 'Use multiple colors',\n    defaultValue: false,\n    type: 'checkbox',\n  },\n  {\n    key: 'colorCount',\n    label: 'Colors count',\n    defaultValue: 7,\n    type: 'range',\n    attr: {\n      min: 1,\n      max: 20,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'color',\n    label: 'String color',\n    defaultValue: '#ff4d00',\n    type: 'color',\n    show: ({ isMultiColor }) => !isMultiColor,\n  },\n  {\n    key: 'repeatColors',\n    label: 'Repeat colors',\n    defaultValue: false,\n    type: 'checkbox',\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'multicolorRange',\n    label: 'Multicolor range',\n    defaultValue: 360,\n    type: 'range',\n    attr: {\n      min: 1,\n      max: 360,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'multicolorStart',\n    label: 'Multicolor start',\n    defaultValue: 0,\n    type: 'range',\n    attr: {\n      min: 0,\n      max: 360,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'reverseColors',\n    label: 'Reverse colors order',\n    defaultValue: false,\n    type: 'checkbox',\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'saturation',\n    label: 'Saturation',\n    defaultValue: 100,\n    type: 'range',\n    attr: {\n      min: 0,\n      max: 100,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'lightness',\n    label: 'Lightness',\n    type: 'group',\n    defaultValue: 'minimized',\n    show: ({ isMultiColor }) => isMultiColor,\n    children: [\n      {\n        key: 'multicolorByLightness',\n        label: 'Multi lightness',\n        defaultValue: false,\n        type: 'checkbox',\n        show: ({ isMultiColor }) => isMultiColor,\n      },\n      {\n        key: 'minLightness',\n        label: 'Minimum lightness',\n        defaultValue: 0,\n        type: 'range',\n        attr: {\n          min: 0,\n          max: 100,\n          step: 1,\n        },\n        show: ({ multicolorByLightness, isMultiColor }) =>\n          multicolorByLightness && isMultiColor,\n      },\n      {\n        key: 'maxLightness',\n        label: 'Maximum lightness',\n        defaultValue: 100,\n        type: 'range',\n        attr: {\n          min: 0,\n          max: 100,\n          step: 1,\n        },\n        show: ({ multicolorByLightness, isMultiColor }) =>\n          multicolorByLightness && isMultiColor,\n      },\n    ],\n  },\n];\n\nexport default class Color {\n  constructor(config) {\n    this.config = config;\n    const {\n      multicolorRange,\n      colorCount,\n      multicolorByLightness,\n      minLightness = 0,\n      maxLightness = 100,\n      multicolorStart,\n      darkMode,\n      saturation,\n      reverseColors,\n      isMultiColor,\n    } = config;\n\n    if (isMultiColor) {\n      this.multiColorStep = multicolorRange / colorCount;\n      this.multiColorLightnessStep = multicolorByLightness\n        ? (maxLightness - minLightness) / (Math.max(colorCount, 2) - 1)\n        : 1;\n\n      this.colors = new Array(colorCount).fill(null).map((_, colorIndex) => {\n        const lightness = multicolorByLightness\n          ? minLightness + this.multiColorLightnessStep * colorIndex\n          : darkMode\n          ? 50\n          : 40;\n        return `hsl(${\n          multicolorStart + colorIndex * this.multiColorStep\n        }, ${saturation}%, ${lightness}%)`;\n      });\n\n      if (reverseColors) {\n        this.colors.reverse();\n      }\n    }\n  }\n\n  /**\n   * Returns the color to be used in the provided layer index. If no multiColor is used, will use the 'color' config property.\n   * @param {number} colorIndex\n   * @returns string\n   */\n  getColor(colorIndex) {\n    const { isMultiColor, colorCount, color, repeatColors } = this.config;\n\n    if (!isMultiColor) {\n      return color;\n    }\n\n    if (colorIndex >= colorCount) {\n      colorIndex = repeatColors ? colorIndex % colorCount : colorCount - 1;\n    }\n\n    return this.colors[colorIndex];\n  }\n\n  getColorMap({ stepCount, colorCount }) {\n    if (!colorCount) {\n      throw new Error(\"Can't get color map, no colorCount provided!\");\n    }\n    const stepsPerColor = Math.floor(stepCount / colorCount);\n    const colorMap = new Map();\n    for (let i = 0; i < colorCount; i++) {\n      colorMap.set(i * stepsPerColor, this.getColor(i));\n    }\n    return colorMap;\n  }\n\n  static getConfig({ include, exclude, defaults = {}, customControls }) {\n    const controls = getControls();\n\n    return {\n      key: 'colorGroup',\n      label: 'Color',\n      type: 'group',\n      children: [...(customControls ?? []), ...controls],\n    };\n\n    function getControls(controlsConfig = COLOR_CONTROLS) {\n      return controlsConfig\n        .filter(\n          ({ key }) =>\n            (!exclude || !exclude.includes(key)) &&\n            (!include || include.includes(key))\n        )\n        .map(control => {\n          const finalControl = {\n            ...control,\n            defaultValue: defaults[control.key] ?? control.defaultValue,\n          };\n\n          if (control.type === 'group') {\n            finalControl.children = getControls(control.children);\n          }\n          return Object.freeze(finalControl);\n        });\n    }\n  }\n}\n","/**\n * Returns the greatest common divisor of two integers\n * https://en.wikipedia.org/wiki/Euclidean_algorithm\n * @param {number} int1\n * @param {number} int2\n * @returns number\n */\nexport function gcd(int1, int2) {\n  if (!int2) return int1;\n\n  return gcd(int2, int1 % int2);\n}\n\nexport const PI2 = Math.PI * 2;\n","import { PI2 } from './helpers/math_utils.js';\n\nconst NUMBER_MARGIN = 4;\n\nexport default class Nails {\n  constructor(canvas, config) {\n    this.context = canvas.getContext('2d');\n    this.setConfig(config);\n    this.centerX = canvas.width / 2;\n    this.nails = [];\n    this.addedPoints = new Set();\n  }\n\n  setConfig({ nailRadius, nailsColor, nailNumbersFontSize }) {\n    this.nailRadius = nailRadius;\n    this.nailsColor = nailsColor;\n    this.nailNumbersFontSize = nailNumbersFontSize;\n    this.nails = [];\n    if (this.addedPoints) {\n      this.addedPoints.clear();\n    }\n  }\n\n  // Adds a nail to be rendered. nail: { point, number }\n  addNail(nail) {\n    const nailPoint = nail.point.map(Math.round).join('_');\n    if (!this.addedPoints.has(nailPoint)) {\n      this.nails.push(nail);\n      this.addedPoints.add(nailPoint);\n    }\n  }\n\n  fill({ drawNumbers = true } = {}) {\n    this.context.globalCompositeOperation = 'source-over';\n    this.context.beginPath();\n    this.context.fillStyle = this.nailsColor;\n    this.context.textBaseline = 'middle';\n    this.context.font = `${this.nailNumbersFontSize}px sans-serif`;\n    const nailNumberOffset = this.nailRadius + NUMBER_MARGIN;\n\n    this.nails.forEach(({ point: [x, y], number }) => {\n      this.context.moveTo(x + this.nailRadius, y);\n      this.context.arc(x, y, this.nailRadius, 0, PI2);\n      if (drawNumbers && number !== undefined && number !== null) {\n        const isRightAlign = x < this.centerX;\n\n        const numberPosition = [\n          isRightAlign ? x - nailNumberOffset : x + nailNumberOffset,\n          y,\n        ];\n\n        this.context.textAlign = isRightAlign ? 'right' : 'left';\n        this.context.fillText(String(number), ...numberPosition);\n      }\n    });\n\n    this.context.fill();\n    this.nails = [];\n    this.addedPoints.clear();\n  }\n}\n","import Nails from './Nails.js';\n\nconst COLORS = {\n  dark: '#0e0e0e',\n  light: '#ffffff',\n};\n\nconst COMMON_CONFIG_CONTROLS = [\n  {\n    key: 'strings',\n    label: 'Strings',\n    type: 'group',\n    defaultValue: 'minimized',\n    children: [\n      {\n        key: 'showStrings',\n        label: 'Show strings',\n        defaultValue: true,\n        type: 'checkbox',\n        isDisabled: ({ showNails }) => !showNails,\n      },\n      {\n        key: 'stringWidth',\n        label: 'String width',\n        defaultValue: 1,\n        type: 'range',\n        attr: { min: 0.2, max: 4, step: 0.1 },\n        show: ({ showStrings }) => showStrings,\n      },\n    ],\n  },\n  {\n    key: 'nails',\n    label: 'Nails',\n    type: 'group',\n    defaultValue: 'minimized',\n    children: [\n      {\n        key: 'showNails',\n        label: 'Show nails',\n        defaultValue: true,\n        type: 'checkbox',\n        isDisabled: ({ showStrings }) => !showStrings,\n      },\n      {\n        key: 'showNailNumbers',\n        label: 'Show nail numbers',\n        defaultValue: false,\n        type: 'checkbox',\n        show: ({ showNails }) => showNails,\n      },\n      {\n        key: 'nailNumbersFontSize',\n        label: 'Nail numbers font size',\n        defaultValue: 10,\n        type: 'range',\n        attr: { min: 6, max: 24, step: 0.5 },\n        displayValue: ({ nailNumbersFontSize }) => `${nailNumbersFontSize}px`,\n        show: ({ showNails, showNailNumbers }) => showNails && showNailNumbers,\n      },\n      {\n        key: 'margin',\n        label: 'Margin',\n        defaultValue: 20,\n        type: 'number',\n        attr: { min: 0, max: 500, step: 1 },\n        displayValue: ({ margin }) => `${margin}px`,\n      },\n      {\n        key: 'nailRadius',\n        label: 'Nail size',\n        defaultValue: 1.5,\n        type: 'range',\n        attr: { min: 0.5, max: 5, step: 0.25 },\n        show: ({ showNails }) => showNails,\n      },\n      {\n        key: 'nailsColor',\n        label: 'Nails color',\n        defaultValue: '#ffffff',\n        type: 'color',\n        show: ({ showNails }) => showNails,\n      },\n    ],\n  },\n  {\n    key: 'background',\n    label: 'Background',\n    type: 'group',\n    defaultValue: 'minimized',\n    children: [\n      {\n        key: 'darkMode',\n        label: 'Dark mode',\n        defaultValue: true,\n        type: 'checkbox',\n        isDisabled: ({ enableBackground }) => !enableBackground,\n      },\n      {\n        key: 'customBackgroundColor',\n        label: 'Custom background color',\n        defaultValue: false,\n        type: 'checkbox',\n        isDisabled: ({ enableBackground }) => !enableBackground,\n      },\n      {\n        key: 'backgroundColor',\n        label: 'Background color',\n        defaultValue: COLORS.dark,\n        type: 'color',\n        show: ({ customBackgroundColor }) => customBackgroundColor,\n        isDisabled: ({ enableBackground }) => !enableBackground,\n      },\n      {\n        key: 'enableBackground',\n        label: 'Enable background',\n        defaultValue: true,\n        type: 'checkbox',\n      },\n    ],\n  },\n];\n\nclass StringArt {\n  constructor(canvas) {\n    if (!canvas) {\n      throw new Error('Canvas not specified!');\n    }\n\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext('2d');\n    const dpr = window.devicePixelRatio || 1;\n    const bsr =\n      this.ctx.webkitBackingStorePixelRatio ||\n      this.ctx.mozBackingStorePixelRatio ||\n      this.ctx.msBackingStorePixelRatio ||\n      this.ctx.oBackingStorePixelRatio ||\n      this.ctx.backingStorePixelRatio ||\n      1;\n    this.pixelRatio = dpr / bsr;\n  }\n\n  get configControls() {\n    return (this.controls ?? []).concat(COMMON_CONFIG_CONTROLS);\n  }\n\n  get controlsIndex() {\n    if (!this._controlsIndex) {\n      this._controlsIndex = getControlsIndex(this.controls);\n    }\n\n    return this._controlsIndex;\n  }\n\n  get defaultConfig() {\n    if (!this._defaultConfig) {\n      this._defaultConfig = Object.freeze(\n        Object.assign(flattenConfig(this.configControls), this.defaultValues)\n      );\n    }\n\n    return this._defaultConfig;\n  }\n\n  get config() {\n    return this._config ?? this.defaultConfig;\n  }\n\n  set config(value) {\n    this._config = Object.assign({}, this.defaultConfig, value);\n  }\n\n  setConfigValue(controlKey, value) {\n    this._config = Object.freeze({\n      ...(this._config ?? this.defaultConfig),\n      [controlKey]: value,\n    });\n\n    if (this.onConfigChange) {\n      this.onConfigChange({\n        control: this.controlsIndex[controlKey],\n        value,\n      });\n    }\n  }\n\n  getSize() {\n    const canvasScreenSize = [\n      this.canvas.clientWidth,\n      this.canvas.clientHeight,\n    ];\n    return canvasScreenSize.map(v => v * this.pixelRatio);\n  }\n\n  setUpDraw() {\n    const previousSize = this.size;\n\n    this.canvas.removeAttribute('width');\n    this.canvas.removeAttribute('height');\n    const [width, height] = (this.size = this.getSize());\n    Object.assign(this, this.size);\n    this.canvas.setAttribute('width', width);\n    this.canvas.setAttribute('height', height);\n    this.center = this.size.map(value => value / 2);\n\n    if (\n      previousSize &&\n      (previousSize[0] !== width || previousSize[1] !== height)\n    ) {\n      if (this.onResize) {\n        this.onResize();\n      }\n    }\n\n    if (this.nails) {\n      this.nails.setConfig(this.config);\n    } else {\n      this.nails = new Nails(this.canvas, this.config);\n    }\n\n    this.ctx.clearRect(0, 0, ...this.size);\n    this.ctx.lineWidth = this.config.stringWidth;\n  }\n\n  afterDraw() {\n    const { showNails, showNailNumbers } = this.config;\n    if (showNails) {\n      this.drawNails();\n      this.nails.fill({ drawNumbers: showNailNumbers });\n    }\n  }\n\n  initDraw() {\n    this.setUpDraw(this.config);\n    const {\n      showNails,\n      showNailNumbers,\n      darkMode,\n      backgroundColor,\n      customBackgroundColor,\n      enableBackground,\n    } = this.config;\n\n    this.ctx.beginPath();\n    if (enableBackground) {\n      this.ctx.globalCompositeOperation = 'destination-over';\n      this.ctx.fillStyle = customBackgroundColor\n        ? backgroundColor\n        : darkMode\n        ? COLORS.dark\n        : COLORS.light;\n      this.ctx.fillRect(0, 0, ...this.size);\n    }\n\n    this.ctx.globalCompositeOperation = 'source-over';\n    if (showNails) {\n      this.drawNails();\n      this.nails.fill({ drawNumbers: showNailNumbers });\n    }\n  }\n\n  /**\n   * Draws the string art on canvas\n   * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n   */\n  draw({ position = Infinity } = {}) {\n    this.initDraw();\n    const { showStrings } = this.config;\n\n    if (showStrings) {\n      this.stringsIterator = this.generateStrings();\n      this.position = 0;\n\n      while (!this.drawNext().done && this.position < position);\n      this.afterDraw();\n    }\n  }\n\n  goto(position) {\n    if (position === this.position) {\n      return;\n    }\n\n    if (this.stringsIterator && position > this.position) {\n      while (!this.drawNext().done && this.position < position);\n    } else {\n      this.draw({ position });\n    }\n  }\n\n  drawNext() {\n    const result = this.stringsIterator.next();\n\n    if (result.done) {\n      this.afterDraw();\n    } else {\n      this.position++;\n    }\n\n    return result;\n  }\n\n  generateStrings() {\n    throw new Error('generateStrings method not defined!');\n  }\n\n  getStepCount() {\n    throw new Error(\n      `'getStepCount' method not implemented for string art type \"${this.name}\"`\n    );\n  }\n}\n\nfunction flattenConfig(configControls) {\n  return configControls.reduce(\n    (config, { key, defaultValue, children }) =>\n      children\n        ? {\n            ...config,\n            ...flattenConfig(children),\n          }\n        : {\n            ...config,\n            [key]: defaultValue,\n          },\n    {}\n  );\n}\n\nfunction getControlsIndex(configControls) {\n  return configControls.reduce(\n    (controlsIndex, control) =>\n      control.children\n        ? {\n            ...controlsIndex,\n            ...getControlsIndex(control.children),\n          }\n        : {\n            ...controlsIndex,\n            [control.key]: control,\n          },\n    {}\n  );\n}\n\nexport default StringArt;\n","import Nails from '../Nails.js';\nimport { PI2 } from './math_utils.js';\n\nexport default class Circle {\n  constructor(config) {\n    this.setConfig(config);\n  }\n\n  getPoint(index = 0) {\n    const realIndex = this.getNailIndex(index);\n\n    if (this.points.has(index)) {\n      return this.points.get(index);\n    }\n\n    const point = [\n      this.center[0] +\n        Math.sin(realIndex * this.indexAngle + this.rotationAngle) *\n          this.radius,\n      this.center[1] +\n        Math.cos(realIndex * this.indexAngle + this.rotationAngle) *\n          this.radius,\n    ];\n\n    this.points.set(index, point);\n    return point;\n  }\n\n  getNailIndex(index = 0) {\n    let realIndex = this.isReverse ? this.config.n - 1 - index : index;\n    if (realIndex > this.config.n - 1) {\n      realIndex = realIndex % this.config.n;\n    }\n    return realIndex;\n  }\n\n  setConfig(config) {\n    const serializedConfig = this._serializeConfig(config);\n    if (serializedConfig !== this.serializedConfig) {\n      const {\n        n,\n        size,\n        margin = 0,\n        rotation = 0,\n        center: configCenter,\n        radius,\n        reverse = false,\n      } = config;\n      const center = configCenter ?? size.map(v => v / 2);\n      const props = {\n        center,\n        radius: radius ?? Math.min(...center) - margin,\n        indexAngle: PI2 / n,\n        rotationAngle: -PI2 * rotation,\n        isReverse: reverse,\n      };\n      this.config = config;\n      this.serializedConfig = serializedConfig;\n      Object.assign(this, props);\n      if (this.points) {\n        this.points.clear();\n      } else {\n        this.points = new Map();\n      }\n    }\n  }\n\n  _serializeConfig({\n    n,\n    size,\n    margin = 0,\n    rotation = 0,\n    center,\n    radius,\n    reverse = false,\n  }) {\n    return [\n      size?.join(','),\n      center?.join(','),\n      radius,\n      margin,\n      n,\n      rotation,\n      reverse,\n    ].join('_');\n  }\n\n  /**\n   * Given a Nails instance, uses it to draw the nails of this Circle\n   * @param {Nails} nails\n   * @param {{nailsNumberStart?: number, getNumber?: Function}} param1\n   */\n  drawNails(nails, { nailsNumberStart = 0, getNumber } = {}) {\n    for (let i = 0; i < this.config.n; i++) {\n      nails.addNail({\n        point: this.getPoint(i),\n        number: getNumber ? getNumber(i) : i + nailsNumberStart,\n      });\n    }\n  }\n\n  *drawRing(ctx, { ringSize, color }) {\n    const { n } = this.config;\n    const ringDistance = Math.floor(ringSize * n);\n\n    let prevPoint;\n    let prevPointIndex = 0;\n    let isPrevSide = false;\n    ctx.strokeStyle = color;\n    for (let i = 0; i < n; i++) {\n      ctx.beginPath();\n      if (!prevPoint) {\n        prevPoint = this.getPoint(0);\n      }\n\n      ctx.moveTo(...prevPoint);\n      prevPointIndex = isPrevSide ? i : prevPointIndex + ringDistance;\n      prevPoint = this.getPoint(prevPointIndex);\n\n      ctx.lineTo(...prevPoint);\n\n      if (i < n - 1) {\n        prevPointIndex++;\n        prevPoint = this.getPoint(prevPointIndex);\n        ctx.lineTo(...prevPoint);\n      }\n\n      ctx.stroke();\n\n      yield;\n\n      isPrevSide = !isPrevSide;\n    }\n  }\n\n  static rotationConfig = Object.freeze({\n    key: 'rotation',\n    label: 'Rotation',\n    defaultValue: 0,\n    type: 'range',\n    attr: {\n      min: 0,\n      max: 1 + 1 / 360,\n      step: 1 / 360,\n    },\n    displayValue: (config, { key }) => `${Math.round(config[key] * 360)}°`,\n    isStructural: true,\n    affectsStepCount: false,\n  });\n\n  static nailsConfig = Object.freeze({\n    key: 'n',\n    label: 'Number of nails',\n    defaultValue: 144,\n    type: 'range',\n    attr: {\n      min: 3,\n      max: 300,\n      step: 1,\n    },\n    isStructural: true,\n  });\n}\n","import Color from '../helpers/Color.js';\nimport StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    colorCount: 7,\n    color: '#ffbb29',\n    multicolorRange: '21',\n    multicolorStart: 32,\n    multicolorByLightness: true,\n    minLightness: 36,\n    maxLightness: 98,\n  },\n});\n\nexport default class Spiral extends StringArt {\n  id = 'spiral';\n  name = 'Spiral';\n  link =\n    'https://www.etsy.com/il-en/listing/840974781/boho-wall-decor-artwork-spiral-round';\n  controls = [\n    {\n      ...Circle.nailsConfig,\n      defaultValue: 200,\n    },\n    {\n      key: 'repetition',\n      label: 'Repetition',\n      defaultValue: 5,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      key: 'innerLength',\n      label: 'Spiral thickness',\n      defaultValue: 0.5,\n      type: 'range',\n      attr: {\n        min: ({ config: { n } }) => 1 / n,\n        max: 1,\n        step: ({ config: { n } }) => 1 / n,\n      },\n      displayValue: ({ n, innerLength }) => Math.round(n * innerLength),\n    },\n    {\n      ...Circle.rotationConfig,\n      defaultValue: 0.75,\n    },\n    COLOR_CONFIG,\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, rotation, layers, margin, colorCount, repetition } = this.config;\n    this.layersCount = layers ?? 1;\n    this.realRepetition = repetition * 2 - 1;\n\n    const circleConfig = {\n      size: this.size,\n      n,\n      margin,\n      rotation,\n    };\n\n    if (this.circle) {\n      this.circle.setConfig(circleConfig);\n    } else {\n      this.circle = new Circle(circleConfig);\n    }\n\n    this.color = new Color({\n      ...this.config,\n      colorCount: layers ?? colorCount,\n    });\n\n    if (colorCount) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.getStepCount(),\n        colorCount,\n      });\n    }\n  }\n\n  *drawSpiral({ shift = 0, color = '#ffffff' } = {}) {\n    const { innerLength, n } = this.config;\n\n    let currentInnerLength = Math.round(innerLength * n);\n    let repetitionCount = 0;\n    this.ctx.strokeStyle = color;\n    let prevPointIndex = shift;\n    let prevPoint = this.circle.getPoint(prevPointIndex);\n    let isPrevPoint = false;\n\n    for (let i = 0; currentInnerLength > 0; i++) {\n      if (this.colorMap) {\n        const stepColor = this.colorMap.get(i);\n        if (stepColor) {\n          this.ctx.strokeStyle = stepColor;\n        }\n      }\n\n      this.ctx.beginPath();\n      this.ctx.moveTo(...prevPoint);\n      prevPointIndex = isPrevPoint\n        ? prevPointIndex - currentInnerLength + 1\n        : prevPointIndex + currentInnerLength;\n\n      if (repetitionCount === this.realRepetition) {\n        currentInnerLength--;\n        repetitionCount = 0;\n        prevPointIndex++;\n      } else {\n        repetitionCount++;\n      }\n\n      prevPoint = this.circle.getPoint(prevPointIndex);\n      this.ctx.lineTo(...prevPoint);\n\n      this.ctx.stroke();\n\n      yield i;\n      isPrevPoint = !isPrevPoint;\n    }\n  }\n\n  *generateStrings() {\n    yield* this.drawSpiral({\n      color: this.color.getColor(0),\n    });\n  }\n\n  getStepCount() {\n    const { innerLength, repetition, n, layers = 1 } = this.config;\n    return Math.round(layers * n * (innerLength * 2) * repetition);\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails);\n  }\n\n  static thumbnailConfig = {\n    n: 60,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Color from '../helpers/Color.js';\nimport { PI2 } from '../helpers/math_utils.js';\n\nclass Spirals extends StringArt {\n  name = 'Spirals';\n  id = 'spirals';\n  link =\n    'https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1';\n  controls = [\n    {\n      key: 'radiusIncrease',\n      label: 'Radius change',\n      defaultValue: 5.7,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 0.1 },\n    },\n    {\n      key: 'angleStep',\n      label: 'Angle step',\n      defaultValue: 0.45,\n      type: 'range',\n      attr: { min: 0, max: 1, step: 0.01 },\n    },\n    {\n      key: 'nSpirals',\n      label: 'Number of spirals',\n      defaultValue: 3,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      ...Circle.rotationConfig,\n      defaultValue: 330 / 360,\n    },\n    Color.getConfig({\n      defaults: {\n        isMultiColor: true,\n        colorCount: 4,\n        color: '#00d5ff',\n        multicolorRange: 1,\n        multicolorStart: 190,\n        multicolorByLightness: true,\n        minLightness: 50,\n        maxLightness: 88,\n        reverseColors: true,\n      },\n    }),\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n\n    const {\n      nSpirals,\n      rotation,\n      margin,\n      radiusIncrease,\n      angleStep,\n      colorCount,\n    } = this.config;\n\n    this.spiralRotations = new Array(nSpirals)\n      .fill(null)\n      .map((_, i) => (i * PI2) / nSpirals);\n    this.rotationAngle = -PI2 * rotation;\n    const maxRadius = Math.min(...this.size) / 2 - margin;\n    this.nailsPerSpiral = Math.floor(maxRadius / radiusIncrease);\n    this.angleIncrease = angleStep / (maxRadius / 50);\n    this.color = new Color(this.config);\n    this.colorMap = this.color.getColorMap({\n      stepCount: this.getStepCount(),\n      colorCount,\n    });\n  }\n\n  *generatePoints() {\n    const { nSpirals } = this.config;\n\n    for (let i = 0; i < this.nailsPerSpiral; i++) {\n      for (let s = 0; s < nSpirals; s++) {\n        const point = this.getPoint(s, i);\n        yield { point, nailNumber: `${s}_${i}` };\n      }\n    }\n  }\n\n  getPoint(spiralIndex, index) {\n    const [centerx, centery] = this.center;\n    const { radiusIncrease } = this.config;\n\n    const angle =\n      this.rotationAngle +\n      this.angleIncrease * index +\n      this.spiralRotations[spiralIndex];\n    const radius = index * radiusIncrease;\n\n    return [\n      centerx + radius * Math.sin(angle),\n      centery + radius * Math.cos(angle),\n    ];\n  }\n\n  *generateStrings() {\n    const points = this.generatePoints();\n    let index = 0;\n    this.ctx.beginPath();\n    this.ctx.moveTo(...this.center);\n    this.ctx.strokeStyle = this.color.getColor(0);\n\n    let lastPoint;\n\n    for (const { point } of points) {\n      if (this.colorMap) {\n        const stepColor = this.colorMap.get(index);\n        if (stepColor) {\n          this.ctx.strokeStyle = stepColor;\n        }\n      }\n\n      this.ctx.beginPath();\n      if (lastPoint) {\n        this.ctx.moveTo(...lastPoint);\n        this.ctx.lineTo(...point);\n      }\n      lastPoint = point;\n      this.ctx.stroke();\n      yield index++;\n    }\n  }\n\n  getStepCount() {\n    const { nSpirals, radiusIncrease, margin } = this.config;\n    const maxRadius = Math.min(...this.getSize()) / 2 - margin;\n    const n = Math.floor(maxRadius / radiusIncrease);\n    return n * nSpirals;\n  }\n\n  drawNails() {\n    const points = this.generatePoints();\n    for (const { point, nailNumber } of points) {\n      this.nails.addNail({ point, number: nailNumber });\n    }\n  }\n\n  static thumbnailConfig = {\n    radiusIncrease: 1.4,\n    angleStep: 0.11,\n  };\n}\n\nexport default Spirals;\n","import Color from '../helpers/Color.js';\nimport StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nexport default class Mandala extends StringArt {\n  name = 'Mandala';\n  id = 'mandala';\n  link = 'https://www.youtube.com/watch?v=qhbuKbxJsk8';\n  linkText = 'Learn';\n  controls = [\n    {\n      key: 'n',\n      label: 'Number of nails',\n      defaultValue: 180,\n      type: 'range',\n      attr: { min: 3, max: 240, step: 1 },\n    },\n    {\n      key: 'base',\n      label: 'Multiplication',\n      defaultValue: 2,\n      type: 'range',\n      attr: { min: 2, max: 99, step: 1 },\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 7,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    Circle.rotationConfig,\n    Color.getConfig({\n      defaults: {\n        isMultiColor: true,\n        multicolorRange: 180,\n        multicolorStart: 256,\n        color: '#ff4d00',\n      },\n      exclude: ['colorCount'],\n    }),\n  ];\n\n  get n() {\n    if (!this._n) {\n      const { n, layers } = this.config;\n      const extraNails = n % layers;\n      this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n    }\n\n    return this._n;\n  }\n\n  setUpDraw() {\n    this._n = null;\n    super.setUpDraw();\n\n    const { layers, rotation, margin, layerFill, base, reverse } = this.config;\n    const circleConfig = {\n      size: this.size,\n      n: this.n,\n      margin,\n      rotation,\n      reverse,\n    };\n    this.stringsPerLayer = layerFill ? Math.floor(this.n * layerFill) : this.n;\n\n    if (this.circle) {\n      this.circle.setConfig(circleConfig);\n    } else {\n      this.circle = new Circle(circleConfig);\n    }\n\n    this.color = new Color({\n      ...this.config,\n      colorCount: layers,\n    });\n\n    this.layerShift = Math.floor(this.n / layers);\n    this.base = base;\n  }\n\n  *drawTimesTable({ shift = 0, color = '#f00', time }) {\n    const n = this.n;\n\n    let point = this.circle.getPoint(shift);\n\n    for (let i = 1; i <= this.stringsPerLayer; i++) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(...point);\n      point = this.circle.getPoint(i + shift);\n      this.ctx.lineTo(...point);\n      const toIndex = (i * this.base) % n;\n      this.ctx.lineTo(...this.circle.getPoint(toIndex + shift));\n      this.ctx.strokeStyle = color;\n      this.ctx.stroke();\n\n      yield {\n        instructions: `${i - 1} → ${i} → ${toIndex} → ${i}`,\n        index: time * n + i,\n      };\n    }\n  }\n\n  *generateStrings() {\n    const { layers } = this.config;\n\n    for (let time = 0; time < layers; time++) {\n      const color = this.color.getColor(time);\n      yield* this.drawTimesTable({\n        time,\n        color,\n        shift: this.layerShift * time,\n      });\n    }\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails);\n  }\n\n  getStepCount() {\n    const { layers, layerFill } = this.config;\n    const stringsPerLayer = layerFill ? Math.floor(this.n * layerFill) : this.n;\n    return (layers ?? 1) * stringsPerLayer;\n  }\n\n  static thumbnailConfig = {\n    n: 70,\n  };\n}\n","import StringArt from '../StringArt.js';\n\nconst SIDES = ['left', 'bottom', 'right', 'top'];\nconst SIDES_ORDER = ['left', 'bottom', 'right', 'top'];\n\nconst SIDES_ROTATION = {\n  left: 0,\n  bottom: Math.PI / 2,\n  right: Math.PI,\n  top: Math.PI * 1.5,\n};\n\nclass Eye extends StringArt {\n  name = 'Eye';\n  id = 'eye';\n  link =\n    'https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv';\n  controls = [\n    {\n      key: 'n',\n      label: 'Number of nails per side',\n      defaultValue: 82,\n      type: 'range',\n      attr: { min: 2, max: 200, step: 1 },\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 13,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      key: 'angle',\n      label: 'Layer angle',\n      defaultValue: 30,\n      displayValue: ({ angle }) => `${angle}°`,\n      type: 'range',\n      attr: { min: 0, max: 45, step: 1 },\n    },\n    {\n      key: 'color',\n      label: 'Color',\n      type: 'group',\n      children: [\n        {\n          key: 'color1',\n          label: 'String #1 color',\n          defaultValue: '#11e8bd',\n          type: 'color',\n        },\n        {\n          key: 'color2',\n          label: 'String #2 color',\n          defaultValue: '#6fff52',\n          type: 'color',\n        },\n        {\n          key: 'colorPerLayer',\n          label: 'Color per layer',\n          defaultValue: false,\n          type: 'checkbox',\n        },\n      ],\n    },\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n\n    const { n, angle, layers, margin } = this.config;\n\n    this.maxSize = Math.min(...this.size) - 2 * margin;\n    this.nailSpacing = this.maxSize / (n - 1);\n    this.layerAngle = (angle * Math.PI) / 180;\n\n    this.layers = new Array(layers)\n      .fill(null)\n      .map((_, layerIndex) => this._getLayerProps(layerIndex));\n  }\n\n  // Sides: top, right, bottom, left\n  getPoint({ index, angle, layerStart, rotation }) {\n    const theta = angle + rotation;\n\n    const point = {\n      x: layerStart.x,\n      y: layerStart.y + this.nailSpacing * index,\n    };\n\n    const pivot = { x: this.center[0], y: this.center[1] };\n\n    const cosAngle = Math.cos(theta);\n    const sinAngle = Math.sin(theta);\n\n    const position = [\n      cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x,\n      sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y,\n    ];\n    return position;\n  }\n\n  *drawSide({\n    side,\n    color = '#ffffff',\n    angle,\n    size,\n    layerStart,\n    layerStringCount,\n  }) {\n    const sideIndex = SIDES.indexOf(side);\n    const nextSide = SIDES[sideIndex === SIDES.length - 1 ? 0 : sideIndex + 1];\n    const rotation = SIDES_ROTATION[side];\n    const nextSideRotation = SIDES_ROTATION[nextSide];\n\n    const sideProps = { layerStringCount, size, layerStart, angle };\n\n    for (let i = 0; i <= layerStringCount; i++) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(\n        ...this.getPoint({ side, index: i, rotation, ...sideProps })\n      );\n      this.ctx.lineTo(\n        ...this.getPoint({\n          side: nextSide,\n          index: i,\n          rotation: nextSideRotation,\n          ...sideProps,\n        })\n      );\n      this.ctx.strokeStyle = color;\n      this.ctx.stroke();\n      yield i;\n    }\n  }\n\n  _getLayerProps(layerIndex) {\n    const colors = this._getLayerColors(layerIndex);\n    const layerAngle = this.layerAngle * layerIndex;\n    const layerSize =\n      this.maxSize /\n      Math.pow(\n        Math.cos(this.layerAngle) + Math.sin(this.layerAngle),\n        layerIndex\n      );\n    const layerStart = {\n      x: this.center[0] - layerSize / 2,\n      y: this.center[1] - layerSize / 2,\n    };\n    const layerStringCount = Math.floor(layerSize / this.nailSpacing);\n\n    return {\n      colors,\n      layerAngle,\n      layerSize,\n      layerStart,\n      layerStringCount,\n    };\n  }\n\n  _getLayerColors(layerIndex) {\n    const { color1, color2, colorPerLayer } = this.config;\n    if (colorPerLayer) {\n      const layerColor = layerIndex % 2 ? color1 : color2;\n      return [layerColor, layerColor, layerColor, layerColor];\n    } else {\n      return [color2, color1, color2, color1];\n    }\n  }\n\n  *drawLayer(layerIndex) {\n    const { colors, layerAngle, layerSize, layerStart, layerStringCount } =\n      this.layers[layerIndex];\n\n    for (let i = 0; i < SIDES.length; i++) {\n      yield* this.drawSide({\n        color: colors[i],\n        side: SIDES_ORDER[i],\n        angle: layerAngle,\n        size: layerSize,\n        layerStart,\n        layerStringCount,\n      });\n    }\n  }\n\n  *generateStrings() {\n    const { layers } = this.config;\n    for (let layer = layers - 1; layer >= 0; layer--) {\n      yield* this.drawLayer(layer);\n    }\n  }\n\n  getStepCount() {\n    let count = 0;\n    const { layers, angle, n, margin } = this.config;\n    const layerAngle = (angle * Math.PI) / 180;\n    const maxSize =\n      Math.min(this.canvas.clientWidth, this.canvas.clientHeight) - 2 * margin;\n    const nailSpacing = maxSize / (n - 1);\n\n    for (let layer = 0; layer < layers; layer++) {\n      const layerSize =\n        maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n      count += 4 * (Math.floor(layerSize / nailSpacing) + 1);\n    }\n\n    return count;\n  }\n\n  drawNails() {\n    const { layers } = this.config;\n    for (let layer = layers - 1; layer >= 0; layer--) {\n      const {\n        layerAngle: angle,\n        layerSize: size,\n        layerStart,\n        layerStringCount,\n      } = this.layers[layer];\n\n      for (let s = 0; s < SIDES.length; s++) {\n        const sideOrder = SIDES_ORDER[s];\n        const rotation = SIDES_ROTATION[sideOrder];\n\n        for (let i = 0; i <= layerStringCount; i++) {\n          const sideProps = { layerStringCount, size, layerStart, angle };\n          this.nails.addNail({\n            point: this.getPoint({\n              sideOrder,\n              index: i,\n              rotation,\n              ...sideProps,\n            }),\n            number: `${layer}_${s}_${i}`,\n          });\n        }\n      }\n    }\n  }\n\n  static thumbnailConfig = {\n    n: 25,\n    layers: 7,\n  };\n}\n\nexport default Eye;\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nconst LAYER_DEFAULTS = [\n  { size: 0.25, end: 1, color: '#a94fb0' },\n  { size: 0.125, end: 0.888, color: '#ec6ad0' },\n  { size: 0, end: 0.826, color: '#f08ad5', reverse: true },\n];\n\nexport default class Assymetry extends StringArt {\n  name = 'Assymetry';\n  id = 'assymetry';\n  link =\n    'https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for';\n  controls = [\n    Circle.nailsConfig,\n    Circle.rotationConfig,\n    {\n      key: 'layers',\n      label: 'Layers',\n      type: 'group',\n      children: LAYER_DEFAULTS.map(({ size, end, color, reverse}, i) => {\n        const layer = i + 1;\n        return  {\n          key: `layer${layer}`,\n          label: `Layer ${layer}`,\n          type: 'group',\n          children: [\n            {\n              key: `show${layer}`,\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: `size${layer}`,\n              label: 'Size',\n              defaultValue: size,\n              type: 'range',\n              attr: {\n                min: 0,\n                max: 0.5,\n                step: ({ config: { n } }) => 1 / n,\n              },\n              displayValue: (config, { key }) => Math.round(config.n * config[key]),\n              show: (config) => config[`show${layer}`],\n            },\n            {\n              key: `end${layer}`,\n              label: 'End Position',\n              defaultValue: end,\n              type: 'range',\n              attr: {\n                min: 0,\n                max: 1,\n                step: ({ config: { n } }) => 1 / n,\n              },\n              displayValue: (config, {key}) => Math.round(config.n * config[key]),\n              show: (config) => config[`show${layer}`],\n            },\n            {\n              key: `color${layer}`,\n              label: 'Color',\n              defaultValue: color,\n              type: 'color',\n              show: (config) => config[`show${layer}`],\n            },\n            {\n              key: `reverse${layer}`,\n              label: 'Reverse',\n              defaultValue: reverse === true,\n              type: 'checkbox',\n              show: (config) => config[`show${layer}`],\n            },\n          ]\n        };\n      }),\n    },\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    Object.assign(this, this.getSetUp());\n  }\n\n  getSetUp() {\n    const { rotation, n, margin = 0 } = this.config;\n    const size = this.getSize();\n\n    const circleConfig = {\n      size,\n      n,\n      margin,\n      rotation: rotation - 0.25,\n    };\n\n    let circle;\n    if (this.circle) {\n      circle = this.circle;\n      this.circle.setConfig(circleConfig);\n    } else {\n      circle = new Circle(circleConfig);\n    }\n\n    let lineSpacing = circle.indexAngle * circle.radius;\n    const lineNailCount = Math.floor(circle.radius / lineSpacing) - 1;\n    lineSpacing +=\n      (circle.radius - lineSpacing * lineNailCount) / lineNailCount;\n    const firstCirclePoint = circle.getPoint(0);\n    const totalNailCount = lineNailCount + n;\n    const totalIndexCount = totalNailCount + lineNailCount;\n    const layers = new Array(3)\n      .fill(null)\n      .map((_, i) => getLayer.call(this, i + 1))\n      .filter(({ enable }) => enable);\n\n    return {\n      circle,\n      lineSpacing,\n      lineNailCount,\n      firstCirclePoint,\n      layers,\n      totalNailCount,\n      totalIndexCount,\n    };\n\n    function getLayer(layerIndex) {\n      const size =\n        Math.round(n * this.config['size' + layerIndex]) + lineNailCount;\n      return {\n        size,\n        endIndex:\n          Math.round(\n            this.config['end' + layerIndex] * (totalNailCount + lineNailCount)\n          ) - size,\n        color: this.config['color' + layerIndex],\n        enable: this.config['show' + layerIndex],\n        isReverse: this.config['reverse' + layerIndex],\n      };\n    }\n  }\n\n  /**\n   * Returns the position of a point on the line\n   * @param {index of the point in the circle, 0 is the center} index\n   */\n  getPoint(index) {\n    if (index < this.lineNailCount || index > this.totalNailCount) {\n      const linePosition =\n        index < this.lineNailCount\n          ? this.lineNailCount - index\n          : index - this.totalNailCount;\n\n      const indexLength = linePosition * this.lineSpacing;\n      return [\n        this.firstCirclePoint[0] -\n          indexLength * Math.sin(this.circle.rotationAngle),\n        this.firstCirclePoint[1] -\n          indexLength * Math.cos(this.circle.rotationAngle),\n      ];\n    } else {\n      const circleIndex = index - this.lineNailCount;\n      return this.circle.getPoint(circleIndex);\n    }\n  }\n\n  *drawCircle({ endIndex, color, isReverse, size }) {\n    let prevPoint;\n    let prevPointIndex;\n    let isPrevSide = false;\n    this.ctx.strokeStyle = color;\n    const self = this;\n    const advance = isReverse ? -1 : 1;\n\n    for (let index = 0; index <= endIndex; index++) {\n      this.ctx.beginPath();\n\n      if (prevPoint) {\n        this.ctx.moveTo(...prevPoint);\n        this.ctx.lineTo(...this.getPoint(prevPointIndex + advance));\n      } else {\n        this.ctx.moveTo(...this.getPoint(getPointIndex(index)));\n      }\n\n      prevPointIndex = getPointIndex(isPrevSide ? index : index + size);\n      prevPoint = this.getPoint(prevPointIndex);\n      this.ctx.lineTo(...prevPoint);\n      this.ctx.stroke();\n\n      yield;\n\n      isPrevSide = !isPrevSide;\n    }\n\n    function getPointIndex(index) {\n      return isReverse ? self.totalIndexCount - index : index;\n    }\n  }\n\n  *generateStrings() {\n    for (const layer of this.layers) {\n      yield* this.drawCircle(layer);\n    }\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails, { nailsNumberStart: this.lineNailCount });\n\n    for (let i = 0; i < this.lineNailCount; i++) {\n      this.nails.addNail({ point: this.getPoint(i), number: i });\n    }\n  }\n\n  getStepCount() {\n    const { layers } = this.getSetUp();\n    return layers.reduce(\n      (stepCount, layer) => stepCount + layer.endIndex + 1,\n      0\n    );\n  }\n\n  static thumbnailConfig = {\n    n: 50,\n  };\n}\n","import { PI2 } from './math_utils.js';\n\nexport default class Polygon {\n  constructor(config) {\n    this.setConfig(config);\n  }\n\n  setConfig(config) {\n    const serializedConfig = this._serializeConfig(config);\n    if (serializedConfig !== this.serializedConfig) {\n      const { rotation = 0, sides: sideCount } = (this.config = config);\n\n      const sideAngle = PI2 / sideCount;\n\n      const sides = new Array(sideCount).fill(null).map((_, i) => {\n        const angle = sideAngle * i + PI2 * rotation;\n        const radiusAngle = -sideAngle * (i - 0.5) - PI2 * rotation;\n\n        return {\n          cos: Math.cos(angle),\n          sin: Math.sin(angle),\n          center: {\n            cos: Math.cos(radiusAngle),\n            sin: Math.sin(radiusAngle),\n          },\n        };\n      });\n\n      Object.assign(this, {\n        sides,\n        sideCount,\n        sideAngle,\n      });\n\n      if (this.points) {\n        this.points.clear();\n      } else {\n        this.points = new Map();\n      }\n\n      Object.assign(this, this._getProps());\n\n      if (config.fitSize) {\n        Object.assign(this, this._getProps(this.getSizeAndCenter()));\n        this.points.clear();\n      }\n    }\n  }\n\n  getSizeAndCenter() {\n    const { size: configSize, margin } = this.config;\n\n    const boundingRect = this.getBoundingRect();\n    const scale = Math.min(\n      (configSize[0] - 2 * margin) / boundingRect.width,\n      (configSize[1] - 2 * margin) / boundingRect.height\n    );\n\n    const size = configSize.map(v => v * scale);\n    const center = [\n      this.center[0] -\n        (scale * (boundingRect.left - configSize[0] + boundingRect.right)) / 2,\n      this.center[1] -\n        (scale * (boundingRect.top - configSize[1] + boundingRect.bottom)) / 2,\n    ];\n\n    this.points.clear();\n    return { size, center };\n  }\n\n  _getProps(overrideConfig) {\n    const {\n      nailsSpacing,\n      size,\n      margin = 0,\n      center: configCenter,\n    } = Object.assign({}, this.config, overrideConfig);\n\n    const center = configCenter ?? this.config.size.map(v => v / 2);\n\n    const radius = Math.min(...size) / 2 - margin;\n    const sideSize = 2 * radius * Math.sin(this.sideAngle / 2);\n    const start = [\n      radius * Math.sin(this.sideAngle / 2),\n      radius * Math.cos(this.sideAngle / 2),\n    ];\n    const nailsDistance = sideSize * nailsSpacing;\n    const radiusNailsCount = Math.floor(radius / nailsDistance);\n    const radiusNailsDistance = radius / radiusNailsCount;\n\n    return {\n      nailsSpacing,\n      nailsPerSide: 1 / nailsSpacing,\n      center,\n      radius,\n      sideSize,\n      start,\n      nailsDistance,\n      radiusNailsCount,\n      radiusNailsDistance,\n    };\n  }\n\n  _serializeConfig({ size, margin = 0, rotation = 0, center, sides }) {\n    return [size?.join(','), center?.join(','), sides, margin, rotation].join(\n      '_'\n    );\n  }\n\n  getSidePoint({ side, index }) {\n    const pointsMapIndex = [side, index].join('_');\n\n    if (this.points.has(pointsMapIndex)) {\n      return this.points.get(pointsMapIndex);\n    }\n\n    const startX = this.start[0] - index * this.nailsDistance;\n    const { cos, sin } = this.sides[side];\n\n    const point = [\n      cos * startX - sin * this.start[1] + this.center[0],\n      sin * startX + cos * this.start[1] + this.center[1],\n    ];\n\n    this.points.set(pointsMapIndex, point);\n    return point;\n  }\n\n  getCenterPoint({ side, index }) {\n    const radius = index * this.radiusNailsDistance;\n    const { sin, cos } = this.sides[side].center;\n\n    return [this.center[0] + sin * radius, this.center[1] + cos * radius];\n  }\n\n  getBoundingRect() {\n    const points = this.sides.map((_, side) =>\n      this.getSidePoint({ side, index: 0 })\n    );\n    const firstPoint = points[0];\n\n    const boundingRect = points.slice(1).reduce(\n      (boundingRect, [x, y]) => ({\n        left: Math.min(boundingRect.left, x),\n        right: Math.max(boundingRect.right, x),\n        top: Math.min(boundingRect.top, y),\n        bottom: Math.max(boundingRect.bottom, y),\n      }),\n      {\n        left: firstPoint[0],\n        right: firstPoint[0],\n        top: firstPoint[1],\n        bottom: firstPoint[1],\n      }\n    );\n\n    boundingRect.height = boundingRect.bottom - boundingRect.top;\n    boundingRect.width = boundingRect.right - boundingRect.left;\n    Object.freeze(boundingRect);\n    return boundingRect;\n  }\n\n  drawNails(nails, { drawCenter = false, drawSides = true } = {}) {\n    for (let side = 0; side < this.sideCount; side++) {\n      const sideIndexStart = side * this.nailsPerSide;\n\n      if (drawSides) {\n        for (let index = 0; index < this.nailsPerSide; index++) {\n          nails.addNail({\n            point: this.getSidePoint({ side, index }),\n            number: sideIndexStart + index,\n          });\n        }\n      }\n\n      if (drawCenter) {\n        for (let index = 0; index < this.radiusNailsCount; index++) {\n          nails.addNail({\n            point: this.getCenterPoint({ side, index }),\n            number: `${side}_${index}`,\n          });\n        }\n      }\n    }\n  }\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Polygon from '../helpers/Polygon.js';\nimport Color from '../helpers/Color.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#ff0000',\n    multicolorRange: 1,\n    multicolorStart: 0,\n    multicolorByLightness: true,\n    minLightness: 20,\n    maxLightness: 50,\n  },\n  exclude: ['colorCount'],\n});\n\nexport default class PolygonPattern extends StringArt {\n  name = 'Polygon';\n  id = 'polygon';\n  controls = [\n    {\n      key: 'sides',\n      label: 'Sides',\n      defaultValue: 5,\n      type: 'range',\n      attr: {\n        min: 3,\n        max: 10,\n        step: 1,\n      },\n    },\n    {\n      key: 'n',\n      label: 'Nails per side',\n      defaultValue: 60,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 100,\n        step: 1,\n      },\n    },\n    {\n      key: 'bezier',\n      label: 'Bezier',\n      defaultValue: 2,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 4,\n        step: 1,\n      },\n      show: ({ sides }) => sides > 4,\n    },\n    Circle.rotationConfig,\n    COLOR_CONFIG,\n  ];\n\n  defaultValues = {\n    nailsColor: '#5c5c5c',\n    nailRadius: 1,\n  };\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, rotation, sides, margin, isMultiColor } = this.config;\n    const size = this.getSize();\n\n    const polygonConfig = {\n      sides,\n      rotation,\n      margin,\n      size,\n      nailsSpacing: 1 / n,\n      fitSize: true,\n    };\n\n    if (this.polygon) {\n      this.polygon.setConfig(polygonConfig);\n    } else {\n      this.polygon = new Polygon(polygonConfig);\n    }\n\n    this.color = new Color({\n      ...this.config,\n      isMultiColor,\n      colorCount: sides,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.getStepCount(),\n        colorCount: sides,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  *generateStrings() {\n    const { sides, bezier } = this.config;\n    const limitedBezier = Math.min(bezier, Math.ceil(sides / 2) - 1);\n\n    let step = 0;\n    let color = this.color.getColor(0);\n\n    for (let side = 0; side < sides; side++) {\n      const nextSide = (side + limitedBezier) % sides;\n\n      for (let index = 0; index < this.polygon.nailsPerSide; index++) {\n        if (this.colorMap) {\n          color = this.colorMap.get(step);\n        }\n\n        this.ctx.strokeStyle = color;\n        this.ctx.beginPath();\n        this.ctx.moveTo(...this.polygon.getSidePoint({ side, index }));\n        this.ctx.lineTo(\n          ...this.polygon.getSidePoint({ side: nextSide, index })\n        );\n\n        this.ctx.stroke();\n\n        yield;\n        step++;\n      }\n    }\n  }\n\n  getStepCount() {\n    const { sides, n } = this.config;\n    return sides * n;\n  }\n\n  drawNails() {\n    this.polygon.drawNails(this.nails);\n  }\n\n  static thumbnailConfig = {\n    n: 20,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Polygon from '../helpers/Polygon.js';\nimport Color from '../helpers/Color.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#29f1ff',\n    multicolorRange: 264,\n    multicolorStart: 53,\n    multicolorByLightness: false,\n    minLightness: 30,\n    maxLightness: 70,\n  },\n  exclude: ['colorCount'],\n});\n\nexport default class Flower extends StringArt {\n  name = 'Flower';\n  id = 'flower';\n  link = 'https://www.sqrt.ch/Buch/fadenmodell4_100.svg';\n  controls = [\n    {\n      key: 'sides',\n      label: 'Sides',\n      defaultValue: 4,\n      type: 'range',\n      attr: {\n        min: 3,\n        max: 10,\n        step: 1,\n      },\n    },\n    {\n      key: 'n',\n      label: 'Nails per side',\n      defaultValue: 60,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 100,\n        step: 1,\n      },\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 2,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 10,\n        step: 1,\n      },\n    },\n    Circle.rotationConfig,\n    COLOR_CONFIG,\n  ];\n\n  defaultValues = {\n    nailsColor: '#29f1ff',\n    nailRadius: 1,\n    stringWidth: 0.5,\n  };\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, rotation, sides, layers, margin, isMultiColor } = this.config;\n    const size = this.getSize();\n\n    const layerAngleShift = 1 / (sides * layers);\n\n    this.polygons = new Array(layers).fill(null).map((_, i) => {\n      const polygonConfig = {\n        sides,\n        rotation: rotation + i * layerAngleShift,\n        margin,\n        size,\n        nailsSpacing: 1 / n,\n      };\n\n      return new Polygon(polygonConfig);\n    });\n\n    this.color = new Color({\n      ...this.config,\n      isMultiColor,\n      colorCount: layers,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.getStepCount(),\n        colorCount: layers,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  *generateStrings() {\n    const { sides, layers } = this.config;\n\n    let step = 0;\n    let color = this.color.getColor(0);\n\n    for (let layer = 0; layer < layers; layer++) {\n      const polygon = this.polygons[layer];\n\n      for (let side = 0; side < sides; side++) {\n        const leftSide = side === sides - 1 ? 0 : side + 1;\n\n        for (let index = 0; index <= polygon.nailsPerSide; index++) {\n          if (this.colorMap) {\n            color = this.colorMap.get(step);\n          }\n\n          const centerIndexes = this.getCenterIndexes({\n            polygon,\n            sideIndex: index,\n          });\n\n          this.ctx.strokeStyle = color;\n          this.ctx.beginPath();\n          this.ctx.moveTo(...polygon.getSidePoint({ side, index }));\n          this.ctx.lineTo(\n            ...polygon.getCenterPoint({\n              side: side,\n              index: centerIndexes[0],\n            })\n          );\n          this.ctx.moveTo(...polygon.getSidePoint({ side, index }));\n          this.ctx.lineTo(\n            ...polygon.getCenterPoint({\n              side: leftSide,\n              index: centerIndexes[1],\n            })\n          );\n\n          this.ctx.stroke();\n\n          yield;\n          step++;\n        }\n      }\n    }\n  }\n\n  getCenterIndexes({ polygon, sideIndex }) {\n    const extraNailCount = polygon.nailsPerSide - polygon.radiusNailsCount;\n\n    return [\n      sideIndex < extraNailCount\n        ? -extraNailCount + sideIndex\n        : sideIndex - extraNailCount,\n      polygon.radiusNailsCount - sideIndex,\n    ];\n  }\n\n  getStepCount() {\n    const { sides, n, layers } = this.config;\n    return sides * (n + 1) * layers;\n  }\n\n  drawNails() {\n    this.polygons.forEach(polygon =>\n      polygon.drawNails(this.nails, { drawCenter: true })\n    );\n  }\n\n  static thumbnailConfig = {\n    n: 20,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Color from '../helpers/Color.js';\nimport { gcd, PI2 } from '../helpers/math_utils.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#ffffff',\n    multicolorRange: 133,\n    multicolorStart: 239,\n    multicolorByLightness: false,\n    minLightness: 30,\n    maxLightness: 70,\n    colorCount: 4,\n  },\n});\n\nexport default class MaurerRose extends StringArt {\n  name = 'Maurer Rose';\n  id = 'maurer_rose';\n  link = 'https://blog.glitch.land/en/posts/maurer-rose/';\n  linkText = 'Learn';\n  controls = [\n    {\n      key: 'n',\n      label: 'N',\n      defaultValue: 4,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 12,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'maxSteps',\n      label: 'Max steps',\n      defaultValue: 512,\n      type: 'range',\n      attr: {\n        min: 3,\n        max: 720,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'angle',\n      label: 'Angle',\n      defaultValue: 341,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 720,\n        step: 1,\n      },\n      displayValue: ({ angle }) => `${angle}°`,\n      isStructural: true,\n    },\n    Circle.rotationConfig,\n    COLOR_CONFIG,\n  ];\n\n  resetStructure() {\n    if (this.points) {\n      this.points.clear();\n    }\n    this.calc = null;\n  }\n\n  onConfigChange({ control }) {\n    if (control?.isStructural) {\n      this.resetStructure();\n      if (control.affectsStepCount !== false) {\n        this.stepCount = null;\n      }\n    }\n  }\n\n  onResize() {\n    this.resetStructure();\n  }\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { isMultiColor, colorCount } = this.config;\n\n    if (!this.calc) {\n      this.calc = this.getCalc();\n    }\n\n    if (!this.points) {\n      this.points = new Map();\n    }\n\n    if (!this.stepCount) {\n      this.stepCount = this.getStepCount();\n    }\n\n    this.color = new Color({\n      ...this.config,\n      isMultiColor,\n      colorCount,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.stepCount,\n        colorCount,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  getCalc() {\n    const { n, angle, rotation, maxSteps } = this.config;\n    const size = this.getSize();\n\n    return {\n      n,\n      angleRadians: (PI2 * angle) / maxSteps,\n      radius: Math.min(...size) / 2,\n      currentSize: size,\n      rotationAngle: -Math.PI * 2 * rotation,\n    };\n  }\n\n  getPoint(index) {\n    if (this.points.has(index)) {\n      return this.points.get(index);\n    }\n\n    const k = index * this.calc.angleRadians;\n    const r = this.calc.radius * Math.sin(this.calc.n * k);\n\n    const point = [\n      this.center[0] - r * Math.cos(k - this.calc.rotationAngle),\n      this.center[1] - r * Math.sin(k - this.calc.rotationAngle),\n    ];\n    this.points.set(index, point);\n    return point;\n  }\n\n  *generatePoints() {\n    const count = this.stepCount;\n\n    for (let i = 0; i < count + 1; i++) {\n      yield { point: this.getPoint(i), index: i };\n    }\n  }\n\n  *generateStrings() {\n    const points = this.generatePoints();\n\n    let prevPoint;\n\n    this.ctx.strokeStyle = this.color.getColor(0);\n\n    for (const { point, index } of points) {\n      if (!prevPoint) {\n        prevPoint = point;\n        continue;\n      }\n\n      if (this.colorMap) {\n        const stepColor = this.colorMap.get(index);\n        if (stepColor) {\n          this.ctx.strokeStyle = stepColor;\n        }\n      }\n\n      this.ctx.beginPath();\n      this.ctx.moveTo(...prevPoint);\n      prevPoint = point;\n      this.ctx.lineTo(...point);\n      this.ctx.stroke();\n\n      yield;\n    }\n  }\n\n  getStepCount() {\n    if (this.stepCount) {\n      return this.stepCount;\n    }\n\n    const { maxSteps, angle, n } = this.config;\n    const angleGcd = gcd(maxSteps, angle);\n\n    let steps = maxSteps / angleGcd;\n    if (!(steps % 2) && n % 2) {\n      steps /= 2;\n    }\n    return Math.round(steps);\n  }\n\n  drawNails() {\n    const points = this.generatePoints();\n    for (const { point, index } of points) {\n      this.nails.addNail({ point, number: index });\n    }\n  }\n\n  static thumbnailConfig = {\n    maxSteps: 160,\n    angle: 213,\n  };\n}\n","import { PI2 } from '../helpers/math_utils.js';\nimport StringArt from '../StringArt.js';\nimport Color from '../helpers/Color.js';\nimport Polygon from '../helpers/Polygon.js';\nimport Circle from '../helpers/Circle.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#29f1ff',\n    multicolorRange: 22,\n    multicolorStart: 50,\n    multicolorByLightness: true,\n    minLightness: 40,\n    maxLightness: 95,\n    colorCount: 3,\n    repeatColors: true,\n    saturation: 100,\n    reverseColors: true,\n  },\n  customControls: [\n    {\n      key: 'colorPerLevel',\n      label: 'Color per level',\n      defaultValue: true,\n      type: 'checkbox',\n    },\n  ],\n});\n\nconst ANGLE = -PI2 / 6; // The angle of a equilateral triangle;\nconst SIDE_ANGLES = new Array(6)\n  .fill(null)\n  .map((_, i) => Math.PI / 2 + ANGLE * i);\n\nexport default class FlowerOfLife extends StringArt {\n  name = 'Flower of Life';\n  id = 'flower_of_life';\n  link =\n    'https://www.reddit.com/r/psychedelicartwork/comments/mk97gi/rainbow_flower_of_life_uv_reactive_string_art/';\n  controls = [\n    {\n      key: 'levels',\n      label: 'Levels',\n      defaultValue: 3,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 10,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'density',\n      label: 'Density',\n      defaultValue: 10,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 50,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'globalRotation',\n      label: 'Rotation',\n      defaultValue: 0,\n      type: 'range',\n      attr: {\n        min: 0,\n        max: 30,\n        step: 1,\n      },\n      displayValue: (config, { key }) => `${config[key]}°`,\n      isStructural: true,\n      affectsStepCount: false,\n    },\n    {\n      key: 'fillGroup',\n      label: 'Fill',\n      type: 'group',\n      children: [\n        {\n          key: 'fill',\n          label: 'Show fill',\n          defaultValue: true,\n          type: 'checkbox',\n          isStructural: true,\n        },\n        {\n          key: 'fillColor',\n          label: 'Fill color',\n          defaultValue: '#292e29',\n          type: 'color',\n          show: ({ fill }) => fill,\n        },\n      ],\n    },\n    {\n      key: 'ringGroup',\n      label: 'Ring',\n      type: 'group',\n      children: [\n        {\n          key: 'renderRing',\n          label: 'Show outer ring',\n          type: 'checkbox',\n          defaultValue: true,\n          isStructural: true,\n        },\n        {\n          key: 'ringNailCount',\n          label: 'Ring nail count',\n          defaultValue: 144,\n          type: 'range',\n          attr: {\n            min: 3,\n            max: 360,\n            step: 1,\n          },\n          show: ({ renderRing }) => renderRing,\n          isStructural: true,\n        },\n        {\n          key: 'ringSize',\n          label: 'Outer ring size',\n          defaultValue: 0.23,\n          type: 'range',\n          attr: {\n            min: 0,\n            max: 0.5,\n            step: 0.01,\n          },\n          show: ({ renderRing }) => renderRing,\n          displayValue: ({ ringSize }) => `${Math.round(100 * ringSize)}%`,\n          isStructural: true,\n        },\n        {\n          key: 'ringPadding',\n          label: 'Ring padding',\n          defaultValue: 0.06,\n          type: 'range',\n          attr: {\n            min: 0,\n            max: 0.5,\n            step: 0.01,\n          },\n          show: ({ renderRing }) => renderRing,\n          isStructural: true,\n          displayValue: ({ ringPadding }) =>\n            `${Math.round(100 * ringPadding)}%`,\n        },\n        {\n          key: 'ringColor',\n          label: 'Ring color',\n          defaultValue: '#ceaf12',\n          type: 'color',\n          show: ({ renderRing }) => renderRing,\n        },\n      ],\n    },\n    {\n      key: 'renderTriangles',\n      label: 'Show triangles',\n      defaultValue: true,\n      type: 'checkbox',\n      isStructural: true,\n    },\n    {\n      key: 'renderCaps',\n      label: 'Show caps',\n      defaultValue: true,\n      type: 'checkbox',\n      show: ({ renderTriangles }) => renderTriangles,\n      isStructural: true,\n    },\n\n    COLOR_CONFIG,\n  ];\n\n  defaultValues = {\n    nailsColor: '#474747',\n  };\n\n  getCalc() {\n    const {\n      levels,\n      density,\n      margin,\n      globalRotation,\n      renderCaps,\n      fill,\n      renderTriangles,\n      renderRing,\n      ringNailCount,\n      ringSize,\n      ringPadding,\n    } = this.config;\n    const globalRotationRadians =\n      (globalRotation * Math.PI) / 180 + Math.PI / 6;\n\n    const radius = renderRing\n      ? Math.min(...(this.size ?? this.getSize()).map(v => v / 2 - margin))\n      : null;\n    const ringDistance = renderRing\n      ? Math.floor((ringSize * ringNailCount) / 2)\n      : 0; // The number of nails to count for strings in the outer ring\n    const ringWidth = renderRing\n      ? radius * (1 - Math.cos((PI2 * (ringDistance / ringNailCount)) / 2))\n      : 0;\n\n    const polygon = new Polygon({\n      sides: 6,\n      size: this.getSize(),\n      margin: margin + ringWidth + ringPadding * radius,\n      rotation: globalRotationRadians,\n      fitSize: false,\n    });\n\n    const edgeSize = polygon.sideSize / levels;\n    const nailsLength = edgeSize / (2 * Math.cos(Math.PI / 6));\n\n    const countPerLevelSide = new Array(levels + (renderCaps ? 1 : 0))\n      .fill(null)\n      .map((_, level) => level * 2 + 1);\n\n    return {\n      edgeSize,\n      triangleHeight: (edgeSize * Math.sqrt(3)) / 2,\n      nailsLength,\n      triangleCenterDistance: edgeSize / 2,\n      nailDistance: nailsLength / density,\n      triangleCount: 6 * levels ** 2,\n      countPerLevelSide,\n      globalRotationRadians,\n      fill,\n      renderTriangles,\n      renderCaps,\n      ringNailCount,\n      radius,\n    };\n  }\n\n  resetStructure() {\n    this.points = null;\n    this.calc = null;\n  }\n\n  onConfigChange({ control }) {\n    if (control?.isStructural) {\n      this.resetStructure();\n      if (control.affectsStepCount !== false) {\n        this.stepCount = null;\n      }\n    }\n  }\n\n  onResize() {\n    this.resetStructure();\n  }\n\n  setUpDraw() {\n    super.setUpDraw();\n\n    const {\n      isMultiColor,\n      levels,\n      colorPerLevel,\n      colorCount,\n      renderRing,\n      ringSize,\n      ...config\n    } = this.config;\n\n    if (!this.calc) {\n      this.calc = this.getCalc();\n    }\n\n    if (renderRing && ringSize) {\n      const circleConfig = {\n        size: this.size,\n        n: this.calc.ringNailCount,\n        margin: config.margin,\n        rotation: config.globalRotation,\n      };\n\n      if (this.circle) {\n        this.circle.setConfig(circleConfig);\n      } else {\n        this.circle = new Circle(circleConfig);\n      }\n    } else {\n      this.circle = null;\n    }\n\n    if (!this.points) {\n      this.points = this.getPoints();\n    }\n\n    if (!this.stepCount) {\n      this.stepCount = this.getStepCount(this.calc);\n    }\n\n    const realColorCount = isMultiColor\n      ? colorPerLevel\n        ? levels\n        : Math.min(colorCount, levels)\n      : 1;\n\n    this.color = new Color({\n      ...config,\n      isMultiColor,\n      colorCount: realColorCount,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: realColorCount,\n        colorCount: realColorCount,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  getTrianglePoints({ center, rotation, isCapLevel, triangleIndexInSide }) {\n    let missingSide;\n    if (isCapLevel) {\n      const triangleIndex = (triangleIndexInSide + 2) % 3;\n      missingSide = this._getNextIndexInTriangle(triangleIndex);\n    }\n\n    // For each side of the triangle, the first point is the center of the triangle:\n    const trianglePoints = new Array(3)\n      .fill(null)\n      .map((_, i) => (i === missingSide ? [] : [center]));\n\n    for (let side = 0; side < 3; side++) {\n      if (isCapLevel && side === missingSide) {\n        continue;\n      }\n      const sideAngle = rotation + side * (PI2 / 3);\n      const triangleSidePoints = trianglePoints[side];\n\n      const cosSideAngle = Math.cos(sideAngle);\n      const sinSideAngle = Math.sin(sideAngle);\n\n      for (let n = 1; n <= this.config.density; n++) {\n        const nNailDistance = n * this.calc.nailDistance;\n\n        triangleSidePoints.push([\n          center[0] + nNailDistance * cosSideAngle,\n          center[1] + nNailDistance * sinSideAngle,\n        ]);\n      }\n    }\n\n    return trianglePoints;\n  }\n\n  getPoints() {\n    if (this.points) {\n      return this.points;\n    }\n\n    const { levels, renderCaps } = this.config;\n\n    const largeDistance = this.calc.nailsLength;\n    const smallDistance = this.calc.triangleHeight - largeDistance;\n    const levelsPoints = [];\n\n    const levelsCount = renderCaps ? levels + 1 : levels;\n\n    for (let level = 0; level < levelsCount; level++) {\n      const isCapLevel = renderCaps && level === levels;\n\n      const levelTrianglesPoints = [];\n      levelsPoints.push(levelTrianglesPoints);\n\n      const levelSideTriangleCount = this.calc.countPerLevelSide[level];\n\n      // Caching distances to avoid repeated calculations for each side:\n      const levelPositions = new Array(levelSideTriangleCount)\n        .fill(null)\n        .map((_, n) => {\n          const isFlipped = n % 2 === 0;\n          const trianglePosition = [\n            this.calc.triangleCenterDistance * (n - level),\n            level * this.calc.triangleHeight +\n              (isFlipped ? largeDistance : smallDistance),\n          ];\n\n          return {\n            rotation: Math.atan(trianglePosition[0] / trianglePosition[1]),\n            distanceFromCenter: Math.sqrt(\n              trianglePosition[0] ** 2 + trianglePosition[1] ** 2\n            ),\n          };\n        });\n\n      for (let side = 0; side < 6; side++) {\n        const sideRotation = SIDE_ANGLES[side];\n\n        for (let n = 0; n < levelSideTriangleCount; n++) {\n          if (isCapLevel && n % 2 === 0) {\n            // Cap triangles are only odd indexes\n            levelTrianglesPoints.push(null);\n            continue;\n          }\n\n          const { distanceFromCenter, rotation } = levelPositions[n];\n\n          const triangleCenterAngle =\n            sideRotation - rotation - this.calc.globalRotationRadians;\n\n          const rotatedTrianglePosition = [\n            this.center[0] + distanceFromCenter * Math.cos(triangleCenterAngle),\n            this.center[1] - distanceFromCenter * Math.sin(triangleCenterAngle),\n          ];\n\n          const trianglePoints = this.getTrianglePoints({\n            center: rotatedTrianglePosition,\n            rotation:\n              sideRotation +\n              (side * PI2) / 3 -\n              n * ANGLE +\n              this.calc.globalRotationRadians,\n            isCapLevel,\n            triangleIndexInSide: n,\n          });\n\n          levelTrianglesPoints.push(trianglePoints);\n        }\n      }\n    }\n\n    return levelsPoints;\n  }\n\n  *generateTriangleStrings({ points, level, indexInSide }) {\n    this.ctx.strokeStyle = this.color.getColor(level);\n    const { density, levels } = this.config;\n    const isCapLevel = level === levels;\n\n    const initialSide = isCapLevel\n      ? this._getNextIndexInTriangle(indexInSide % 3)\n      : 0;\n    const lastSide = isCapLevel ? initialSide : 2;\n    const lastIndex = isCapLevel ? density : density - 1;\n\n    for (let side = initialSide; side <= lastSide; side++) {\n      const nextSide = this._getNextIndexInTriangle(side);\n      let prevPoint = points[side][0];\n\n      for (let n = 0; n <= lastIndex; n++) {\n        const isNextSide = n % 2 === 0;\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(...prevPoint);\n\n        const nextSidePoint = isNextSide ? this.config.density - n : n;\n        const targetSide = isNextSide ? nextSide : side;\n\n        prevPoint = points[targetSide][nextSidePoint];\n        this.ctx.lineTo(...prevPoint);\n        this.ctx.stroke();\n\n        if (n < density) {\n          prevPoint =\n            points[targetSide][\n              isNextSide ? nextSidePoint - 1 : nextSidePoint + 1\n            ];\n          this.ctx.lineTo(...prevPoint);\n          this.ctx.stroke();\n        }\n        yield;\n      }\n    }\n  }\n\n  *generateStringsBetweenTriangles({\n    triangle1,\n    triangle2,\n    level,\n    triangleIndex,\n    triangleIndexInSide,\n    isNextLevel,\n    nextLevelTriangleIndex,\n  }) {\n    const { density, fillColor } = this.config;\n    const levelSideCount = this.calc.countPerLevelSide[level];\n    const angleShift = (triangleIndex % levelSideCount) % 3;\n\n    this.ctx.strokeStyle = fillColor;\n\n    const isLastTriangleInSide = triangleIndexInSide === levelSideCount - 1;\n\n    const firstSide = angleShift;\n\n    const sideIndex = isNextLevel\n      ? [\n          this._getNextIndexInTriangle(angleShift),\n          this._getNextIndexInTriangle(angleShift, -1),\n        ]\n      : [\n          firstSide,\n          this._getNextIndexInTriangle(\n            firstSide,\n            triangleIndexInSide % 2 ? 1 : -1\n          ),\n        ];\n\n    for (let s = 0; s < 2; s++) {\n      const order = generateOrderInSide.call(this, s);\n\n      for (const { pointIndex, triangle1Points, triangle2Points } of order) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(...triangle1Points[pointIndex]);\n        this.ctx.lineTo(...triangle2Points[pointIndex]);\n        this.ctx.stroke();\n        yield;\n      }\n    }\n\n    function* generateOrderInSide(side) {\n      const t1Side = sideIndex[side];\n      const t2Side = getNextTriangleSide.call(this);\n\n      const triangle1Points = triangle1[t1Side];\n      const triangle2Points = triangle2[t2Side];\n\n      const last = side ? density : density - 1;\n\n      if (side === 0) {\n        for (let n = 0; n <= last; n++) {\n          yield { pointIndex: density - n, triangle1Points, triangle2Points };\n        }\n      } else {\n        for (let n = last; n >= 1; n--) {\n          yield { pointIndex: density - n, triangle1Points, triangle2Points };\n        }\n      }\n\n      function getNextTriangleSide() {\n        if (isNextLevel) {\n          return this._getNextIndexInTriangle(t1Side);\n        } else {\n          if (side === 0 && isLastTriangleInSide) {\n            return 1;\n          } else {\n            if (side === 1 && isLastTriangleInSide) {\n              return 0;\n            } else {\n              return this._getNextIndexInTriangle(t1Side, 1);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  _getNextIndexInTriangle(index, direction = 1) {\n    const result = index + direction;\n    if (result < 0) {\n      return 2;\n    }\n    if (result > 2) {\n      return 0;\n    }\n    return result;\n  }\n\n  *generateStrings() {\n    const {\n      fill,\n      renderTriangles,\n      renderCaps,\n      levels,\n      renderRing,\n      ringSize,\n      ringColor,\n    } = this.config;\n\n    const triangleLevels = this.getPoints();\n\n    let levelIndex = -1;\n\n    for (const level of triangleLevels) {\n      levelIndex++;\n      const isCapLevel = levelIndex === levels;\n\n      let triangleIndex = -1;\n      const lastIndexInLevel = level.length - 1;\n\n      for (const triangle of level) {\n        triangleIndex++;\n        const levelSideCount = this.calc.countPerLevelSide[levelIndex];\n        const triangleIndexInSide = triangleIndex % levelSideCount;\n\n        if (fill && !isCapLevel) {\n          if (triangleIndex === 0) {\n            yield* this.generateStringsBetweenTriangles({\n              triangle1: level[lastIndexInLevel],\n              triangle2: triangle,\n              level: levelIndex,\n              triangleIndex: lastIndexInLevel,\n              triangleIndexInSide: lastIndexInLevel % levelSideCount,\n            });\n          }\n          if (triangleIndex !== lastIndexInLevel) {\n            yield* this.generateStringsBetweenTriangles({\n              triangle1: triangle,\n              triangle2: level[triangleIndex + 1],\n              level: levelIndex,\n              triangleIndex,\n              triangleIndexInSide,\n            });\n          }\n\n          if (\n            triangleIndexInSide % 2 === 0 &&\n            (renderCaps || levelIndex < levels - 1)\n          ) {\n            const side = Math.floor(triangleIndex / levelSideCount);\n            const nextLevelSideCount =\n              this.calc.countPerLevelSide[levelIndex + 1];\n            const nextLevelTriangleIndex =\n              side * nextLevelSideCount + triangleIndexInSide + 1;\n\n            yield* this.generateStringsBetweenTriangles({\n              triangle1: triangle,\n              triangle2: triangleLevels[levelIndex + 1][nextLevelTriangleIndex],\n              level: levelIndex,\n              triangleIndex,\n              triangleIndexInSide,\n              isNextLevel: true,\n              nextLevelTriangleIndex,\n            });\n          }\n        }\n\n        const indexInSide =\n          triangleIndex % this.calc.countPerLevelSide[levelIndex];\n\n        if (renderTriangles && (!isCapLevel || indexInSide % 2)) {\n          yield* this.generateTriangleStrings({\n            points: triangle,\n            level: levelIndex,\n            indexInSide,\n          });\n        }\n      }\n    }\n\n    if (renderRing && ringSize) {\n      yield* this.circle.drawRing(this.ctx, {\n        ringSize: ringSize / 2,\n        color: ringColor,\n      });\n    }\n  }\n\n  getStepCount(calc) {\n    if (this.stepCount) {\n      return this.stepCount;\n    }\n\n    if (!calc) {\n      calc = this.getCalc();\n    }\n\n    const { levels, density, fill, renderTriangles, renderCaps } = this.config;\n    const { triangleCount, ringNailCount = 0 } = calc;\n\n    const fillStepsPerTriangle = fill ? density * 2 : 0;\n    const triangleSteps = renderTriangles ? density * 3 : 0;\n\n    const stepsPerTriangle = triangleSteps + fillStepsPerTriangle;\n\n    const levelsWithFillBetween = levels + (renderCaps ? 1 : 0);\n    const fillStepsBetweenLevels =\n      (fillStepsPerTriangle *\n        (levelsWithFillBetween - 1) *\n        6 *\n        levelsWithFillBetween) /\n      2;\n    const stepsPerCap = density + 1;\n    const capSteps =\n      renderTriangles && renderCaps ? 6 * levels * stepsPerCap : 0;\n\n    return (\n      triangleCount * stepsPerTriangle +\n      capSteps +\n      fillStepsBetweenLevels +\n      ringNailCount\n    );\n  }\n\n  drawNails() {\n    const triangleLevels = this.getPoints();\n    let index = 0;\n    for (const level of triangleLevels) {\n      for (const triangle of level) {\n        if (triangle != null) {\n          // A cap level has nulls between caps\n          for (const triangleSide of triangle) {\n            for (const point of triangleSide) {\n              this.nails.addNail({ point, number: index++ });\n            }\n          }\n        }\n      }\n    }\n\n    if (this.circle) {\n      this.circle.drawNails(this.nails);\n    }\n  }\n\n  static thumbnailConfig = {\n    levels: 3,\n    density: 3,\n    fill: false,\n    renderRing: true,\n  };\n}\n","import Spiral from './string_art_types/Spiral.js';\nimport Spirals from './string_art_types/Spirals.js';\nimport Wave from './string_art_types/Wave.js';\nimport Eye from './string_art_types/Eye.js';\nimport Mandala from './string_art_types/Mandala.js';\nimport Star from './string_art_types/Star.js';\nimport Assymetry from './string_art_types/Assymetry.js';\nimport Freestyle from './string_art_types/Freestyle.js';\nimport PolygonPattern from './string_art_types/PolygonPattern.js';\nimport Flower from './string_art_types/Flower.js';\nimport MaurerRose from './string_art_types/MaurerRose.js';\nimport FlowerOfLife from './string_art_types/FlowerOfLife.js';\n\nconst patternTypes = [\n  Star,\n  Assymetry,\n  Mandala,\n  Spiral,\n  Spirals,\n  Wave,\n  Eye,\n  Freestyle,\n  PolygonPattern,\n  Flower,\n  MaurerRose,\n  FlowerOfLife,\n];\n\nexport default patternTypes;\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nexport default class Star extends StringArt {\n  name = 'Star';\n  id = 'star';\n  link =\n    'https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj';\n  controls = [\n    {\n      key: 'sides',\n      label: 'Sides',\n      defaultValue: 3,\n      type: 'range',\n      attr: { min: 3, max: 20, step: 1 },\n    },\n    {\n      key: 'sideNails',\n      label: 'Nails per side',\n      defaultValue: 40,\n      type: 'range',\n      attr: { min: 1, max: 200, step: 1 },\n    },\n    {\n      key: 'ringSize',\n      label: 'Outer ring size',\n      defaultValue: 0.1,\n      type: 'range',\n      attr: {\n        min: 0,\n        max: 0.5,\n        step: ({ config: { sideNails, sides } }) => 1 / (sideNails * sides),\n      },\n      displayValue: ({ sideNails, sides, ringSize }) =>\n        Math.floor(ringSize * sideNails * sides),\n    },\n    Circle.rotationConfig,\n    {\n      key: 'colorGroup',\n      label: 'Color',\n      type: 'group',\n      children: [\n        {\n          key: 'innerColor',\n          label: 'Star color',\n          defaultValue: '#2ec0ff',\n          type: 'color',\n        },\n        {\n          key: 'outterColor',\n          label: 'Outter color',\n          defaultValue: '#2a82c6',\n          type: 'color',\n        },\n        {\n          key: 'ringColor',\n          label: 'Ring color',\n          defaultValue: '#2ec0ff',\n          type: 'color',\n        },\n      ],\n    },\n  ];\n\n  get n() {\n    if (!this._n) {\n      const { n, sides } = this.config;\n      const extraNails = n % sides;\n      this._n = n - extraNails;\n    }\n\n    return this._n;\n  }\n\n  setUpDraw() {\n    this._n = null;\n    super.setUpDraw();\n\n    const { sides, rotation, sideNails, margin = 0 } = this.config;\n    const circleConfig = {\n      size: this.size,\n      n: sideNails * sides,\n      margin,\n      rotation,\n    };\n\n    if (this.circle) {\n      this.circle.setConfig(circleConfig);\n    } else {\n      this.circle = new Circle(circleConfig);\n    }\n\n    this.sideAngle = (Math.PI * 2) / sides;\n    this.nailSpacing = this.circle.radius / sideNails;\n    this.starCenterStart = (sideNails % 1) * this.nailSpacing;\n\n    this.sides = new Array(sides).fill(null).map((_, side) => {\n      const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n      const circlePointsStart = side * sideNails;\n\n      return {\n        sinSideAngle: Math.sin(sideAngle),\n        cosSideAngle: Math.cos(sideAngle),\n        circlePointsStart,\n        circlePointsEnd: circlePointsStart + sideNails,\n      };\n    });\n  }\n\n  getStarPoint({ side, sideIndex }) {\n    const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n    const { sinSideAngle, cosSideAngle } = this.sides[side];\n    const [centerX, centerY] = this.circle.center;\n\n    return [centerX + sinSideAngle * radius, centerY + cosSideAngle * radius];\n  }\n\n  getArcPoint({ side, sideIndex }) {\n    return this.circle.getPoint(side * this.config.sideNails + sideIndex);\n  }\n\n  *generateStarPoints({ reverseOrder = false } = {}) {\n    const { sides, sideNails } = this.config;\n\n    for (let side = 0; side < sides; side++) {\n      const prevSide = side === 0 ? sides - 1 : side - 1;\n      for (let i = 0; i < sideNails; i++) {\n        const sideIndex = reverseOrder ? sideNails - i : i;\n        yield {\n          side,\n          prevSide,\n          sideIndex,\n          point: this.getStarPoint({ side, sideIndex }),\n        };\n      }\n    }\n  }\n\n  *drawStar() {\n    const { innerColor, sideNails, sides } = this.config;\n\n    this.ctx.strokeStyle = innerColor;\n    let alternate = false;\n    const linesPerRound = sides % 2 ? sides * 2 : sides;\n    const rounds = sides % 2 ? Math.floor(sideNails / 2) : sideNails;\n\n    let prevPointIndex = 0;\n    let prevPoint = this.getStarPoint({ side: 0, sideIndex: prevPointIndex });\n\n    for (let round = 0; round <= rounds; round++) {\n      let side = 0;\n\n      const linesPerThisRound = linesPerRound - (round === rounds ? sides : 0);\n\n      for (let i = 0; i < linesPerThisRound; i++) {\n        this.ctx.beginPath();\n\n        this.ctx.moveTo(...prevPoint);\n        side = side !== sides - 1 ? side + 1 : 0;\n        alternate = !alternate;\n        prevPointIndex = alternate ? sideNails - round : round;\n        prevPoint = this.getStarPoint({ side, sideIndex: prevPointIndex });\n        this.ctx.lineTo(...prevPoint);\n        this.ctx.stroke();\n        yield;\n      }\n\n      prevPointIndex = alternate ? prevPointIndex - 1 : prevPointIndex + 1;\n      prevPoint = this.getStarPoint({ side: 0, sideIndex: prevPointIndex });\n      this.ctx.lineTo(...prevPoint);\n    }\n  }\n\n  *drawCircle() {\n    const { outterColor, sides, sideNails } = this.config;\n    this.ctx.strokeStyle = outterColor;\n\n    let prevPoint = this.getStarPoint({ side: 0, sideIndex: 0 });\n    let alternate = false;\n    let isStar = false;\n\n    const rounds = sides % 2 ? Math.ceil(sideNails / 2) : sideNails;\n    let side = 0;\n    const linesPerRound = sides % 2 ? sides * 4 : sides * 2;\n\n    for (let round = 0; round <= rounds; round++) {\n      const linesPerThisRound =\n        linesPerRound - (round === rounds ? sides * 2 : 0);\n\n      for (let i = 0; i < linesPerThisRound; i++) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(...prevPoint);\n        const pointPosition = {\n          side,\n          sideIndex: alternate ? sideNails - round : round,\n        };\n        prevPoint = isStar\n          ? this.getStarPoint(pointPosition)\n          : this.getArcPoint(pointPosition);\n        this.ctx.lineTo(...prevPoint);\n        this.ctx.stroke();\n        yield;\n        isStar = !isStar;\n\n        if (isStar) {\n          side = side !== sides - 1 ? side + 1 : 0;\n          alternate = !alternate;\n        }\n      }\n      prevPoint = this.getStarPoint({ side: 0, sideIndex: round + 1 });\n    }\n  }\n\n  *generateStrings() {\n    yield* this.drawCircle();\n\n    const {ringSize, ringColor} = this.config;\n\n   if (ringSize !== 0) {\n      yield* this.circle.drawRing(this.ctx, { ringSize, color: ringColor });\n   }\n    yield* this.drawStar();\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails);\n\n    for (const { point, side, sideIndex } of this.generateStarPoints()) {\n      this.nails.addNail({\n        point,\n        number: sideIndex ? `${side}_${sideIndex}` : 0,\n      });\n    }\n\n    this.circle.drawNails(this.nails);\n  }\n\n  getStepCount() {\n    const { sides, sideNails, ringSize } = this.config;\n    const ringCount = ringSize ? sideNails * sides : 0;\n    const starAndCircleCount = 3 * sides * (sideNails + (sides % 2 ? 1 : 0));\n\n    return starAndCircleCount + ringCount;\n  }\n\n  static thumbnailConfig = {\n    sideNails: 18,\n  };\n}\n","import Color from '../helpers/Color.js';\nimport Circle from '../helpers/Circle.js';\nimport Mandala from './Mandala.js';\n\nexport default class Wave extends Mandala {\n  id = 'wave';\n  name = 'Wave';\n  link =\n    'https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1';\n  controls = [\n    {\n      ...Circle.nailsConfig,\n      defaultValue: 200,\n    },\n    {\n      key: 'layerFill',\n      label: 'Layer fill',\n      defaultValue: 0.5,\n      type: 'range',\n      attr: {\n        min: ({ config: { n } }) => 1 / n,\n        max: 1,\n        step: ({ config: { n } }) => 1 / n,\n      },\n      displayValue: ({ layerFill }) => Math.floor(100 * layerFill) + '%',\n    },\n    {\n      ...Circle.rotationConfig,\n      defaultValue: 176 / 360,\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 11,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      key: 'layerSpread',\n      label: 'Layer spread',\n      defaultValue: 15 / 200,\n      type: 'range',\n      attr: {\n        min: 0,\n        max: 1,\n        step: ({ config: { n } }) => 1 / n,\n      },\n      displayValue: ({ layerSpread, n }) => Math.round(layerSpread * n),\n    },\n    {\n      key: 'reverse',\n      label: 'Reverse',\n      defaultValue: true,\n      type: 'checkbox',\n    },\n    Color.getConfig({\n      defaults: {\n        isMultiColor: true,\n        multicolorRange: 216,\n        multicolorStart: 263,\n        color: '#ffffff',\n        multicolorByLightness: true,\n        minLightness: 10,\n        maxLightness: 90,\n      },\n      exclude: ['colorCount'],\n    }),\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, layerSpread } = this.config;\n    this.layerShift = Math.round(n * layerSpread);\n    this.base = 2;\n  }\n\n  *generateStrings() {\n    const {layers, reverse} = this.config;\n\n    for (let layer = 0; layer < layers; layer++) {\n      yield* this.drawTimesTable({\n        color: this.color.getColor(layer),\n        shift: this.layerShift * (reverse ? 1 : -1) * layer,\n        time: layer,\n      });\n    }\n  }\n\n  static thumbnailConfig = {\n    n: 70,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nexport default class Freestyle extends StringArt {\n  name = 'Freestyle';\n  id = 'freestyle';\n  link =\n    'https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for';\n  controls = [\n    {\n      key: 'n',\n      label: 'Circle nails',\n      defaultValue: 80,\n      type: 'range',\n      attr: { min: 1, max: 300, step: 1 },\n    },\n    {\n      key: 'minNailDistance',\n      label: 'Min nail distance',\n      defaultValue: 20,\n      type: 'range',\n      attr: { min: 1, max: 300, step: 1 },\n    },\n    {\n      key: 'color',\n      label: 'Color',\n      defaultValue: '#ec6ad0',\n      type: 'color',\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      type: 'group',\n      children: [\n        {\n          key: 'layer1',\n          label: 'Layer 1',\n          type: 'group',\n          children: [\n            {\n              key: 'show1',\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: 'radius1',\n              label: 'Radius',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0.01, max: 1, step: 0.01 },\n              show: ({ show1 }) => show1,\n            },\n            {\n              key: 'x1',\n              label: 'Position X',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show1 }) => show1,\n            },\n            {\n              key: 'y1',\n              label: 'Position Y',\n              defaultValue: 0,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show1 }) => show1,\n            },\n            {\n              ...Circle.rotationConfig,\n              key: 'rotation1',\n              show: ({ show1 }) => show1,\n            },\n            {\n              key: 'reverse1',\n              label: 'Reverse',\n              defaultValue: false,\n              type: 'checkbox',\n              show: ({ show1 }) => show1,\n            },\n          ],\n        },\n        {\n          key: 'layer2',\n          label: 'Layer 2',\n          type: 'group',\n          children: [\n            {\n              key: 'show2',\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: 'radius2',\n              label: 'Radius',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0.01, max: 1, step: 0.01 },\n              show: ({ show2 }) => show2,\n            },\n            {\n              key: 'x2',\n              label: 'Position X',\n              defaultValue: 0,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show2 }) => show2,\n            },\n            {\n              key: 'y2',\n              label: 'Position Y',\n              defaultValue: 1,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show2 }) => show2,\n            },\n            {\n              ...Circle.rotationConfig,\n              key: 'rotation2',\n              show: ({ show2 }) => show2,\n            },\n            {\n              key: 'reverse2',\n              label: 'Reverse',\n              defaultValue: false,\n              type: 'checkbox',\n              show: ({ show2 }) => show2,\n            },\n          ],\n        },\n        {\n          key: 'layer3',\n          label: 'Layer 3',\n          type: 'group',\n          children: [\n            {\n              key: 'show3',\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: 'radius3',\n              label: 'Radius',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0.01, max: 1, step: 0.01 },\n              show: ({ show3 }) => show3,\n            },\n            {\n              key: 'x3',\n              label: 'Position X',\n              defaultValue: 1,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show3 }) => show3,\n            },\n            {\n              key: 'y3',\n              label: 'Position Y',\n              defaultValue: 1,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show3 }) => show3,\n            },\n            {\n              ...Circle.rotationConfig,\n              key: 'rotation3',\n              show: ({ show3 }) => show3,\n            },\n            {\n              key: 'reverse3',\n              label: 'Reverse',\n              defaultValue: false,\n              type: 'checkbox',\n              show: ({ show3 }) => show3,\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    Object.assign(this, this.getSetUp());\n  }\n\n  getSetUp() {\n    const { n, margin = 0, minNailDistance } = this.config;\n    const size = this.getSize();\n\n    const maxRadius = Math.min(...size.map(v => v - 2 * margin)) / 2;\n    const layers = new Array(3)\n      .fill(null)\n      .map((_, i) => getLayer.call(this, i + 1))\n      .filter(({ enable }) => enable);\n\n    const maxShapeNailsCount = Math.max(\n      ...layers.map(({ circle }) => circle.config.n)\n    );\n\n    return {\n      layers,\n      maxShapeNailsCount,\n    };\n\n    function getLayer(layerIndex) {\n      const prop = prop => this.config[prop + layerIndex];\n\n      const props = {\n        enable: prop('show'),\n        isReverse: prop('reverse'),\n        position: [prop('x'), prop('y')],\n        radius: maxRadius * prop('radius'),\n        rotation: prop('rotation'),\n      };\n\n      const circumsference = Math.PI * 2 * props.radius;\n      const circleNails = Math.min(\n        n,\n        Math.floor(circumsference / minNailDistance)\n      );\n\n      const circle = new Circle({\n        radius: props.radius,\n        center: props.position.map(\n          (v, i) =>\n            props.radius + margin + (size[i] - (props.radius + margin) * 2) * v\n        ),\n        n: circleNails,\n        rotation: props.rotation,\n        reverse: props.isReverse,\n      });\n\n      return {\n        circle,\n        ...props,\n      };\n    }\n  }\n\n  getPoint(layer, index) {\n    const { circle } = layer;\n    let circleIndex = Math.round(\n      (index * circle.config.n) / this.maxShapeNailsCount\n    );\n    return circle.getPoint(circleIndex);\n  }\n\n  *generateStrings() {\n    const { n, color } = this.config;\n\n    this.ctx.strokeStyle = color;\n    let prevCirclePoint;\n\n    for (let i = 0; i < this.maxShapeNailsCount; i++) {\n      for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n        const layer = this.layers[layerIndex];\n        this.ctx.beginPath();\n        this.ctx.moveTo(...(prevCirclePoint ?? this.getPoint(layer, i)));\n\n        if (layerIndex === 0 && i) {\n          this.ctx.lineTo(...this.getPoint(layer, i));\n        }\n\n        let nextLayerIndex = layerIndex + 1;\n        if (nextLayerIndex === this.layers.length) {\n          nextLayerIndex = 0;\n        }\n\n        prevCirclePoint = this.getPoint(this.layers[nextLayerIndex], i);\n        this.ctx.lineTo(...prevCirclePoint);\n        this.ctx.stroke();\n        yield;\n      }\n    }\n  }\n\n  drawNails() {\n    const n = this.config;\n    this.layers.forEach(({ circle }, layerIndex) =>\n      circle.drawNails(this.nails, {\n        getNumber: i => `${layerIndex + 1}_${i + 1}`,\n      })\n    );\n  }\n\n  getStepCount() {\n    const { layers, maxShapeNailsCount } = this.getSetUp();\n    return layers.length * maxShapeNailsCount - 1;\n  }\n\n  static thumbnailConfig = {\n    minNailDistance: 3,\n  };\n}\n","const elements = {\n  controls: document.querySelector('#controls'),\n  controlsPanel: document.querySelector('#controls_panel'),\n  sidebarForm: document.querySelector('#sidebar_form'),\n};\n\nconst EVENTS = new Set(['input', 'change']);\nconst STATE_LOCAL_STORAGE_KEY = 'controls_state';\nconst RANGE_SCROLL_LOCK_TIMEOUT = 120;\n\nlet inputTimeout;\n\nexport default class EditorControls {\n  constructor({ pattern }) {\n    this.pattern = pattern;\n    this.state = this._getState() ?? { groups: {} };\n\n    this.eventHandlers = {\n      input: new Set(),\n      change: new Set(),\n    };\n\n    this._toggleFieldset = e => {\n      if (e.target.nodeName === 'LEGEND') {\n        e.target.parentElement.classList.toggle('minimized');\n        const groupId = e.target.parentElement.dataset.group;\n        this.state = {\n          ...this.state,\n          groups: {\n            ...this.state.groups,\n            [groupId]: !e.target.parentElement.classList.contains('minimized'),\n          },\n        };\n        this._updateState(this.state);\n      }\n    };\n\n    this._toggleFieldSetOnEnter = e => {\n      if (e.target.nodeName === 'LEGEND' && e.key === 'Enter') {\n        this._toggleFieldset(e);\n      }\n    };\n\n    this._wrappedOnInput = e => this._onInput(e);\n    elements.controls.addEventListener('input', this._wrappedOnInput);\n    this._wrappedOnTouchStart = e => this._onTouchStart(e);\n    elements.controls.addEventListener('touchstart', this._wrappedOnTouchStart);\n    elements.sidebarForm.addEventListener('click', this._toggleFieldset);\n    elements.sidebarForm.addEventListener(\n      'keydown',\n      this._toggleFieldSetOnEnter\n    );\n    this.controlElements = {};\n    this.renderControls();\n  }\n\n  destroy() {\n    elements.controls.removeEventListener('input', this._wrappedOnInput);\n    elements.sidebarForm.removeEventListener('click', this._toggleFieldset);\n    elements.sidebarForm.removeEventListener(\n      'keydown',\n      this._toggleFieldSetOnEnter\n    );\n    elements.controls.removeEventListener(\n      'touchstart',\n      this._wrappedOnTouchStart\n    );\n    elements.controls.innerHTML = '';\n  }\n\n  addEventListener(event, eventHandler) {\n    if (!EVENTS.has(event)) {\n      throw new Error(`Unsupported event for EditorControls, \"${event}\"!`);\n    }\n\n    if (!(eventHandler instanceof Function)) {\n      throw new Error('Invalid event handler.');\n    }\n\n    this.eventHandlers[event].add(eventHandler);\n  }\n\n  _triggerEvent(event, eventData) {\n    for (const eventHandler of this.eventHandlers[event]) {\n      eventHandler(eventData);\n    }\n  }\n\n  /**\n   * Needed for range inputs, to avoid changing the value when the user drags to\n   * scroll and accidentally touches a range input when intending to scroll.\n   * @param {Event} e\n   */\n  _onTouchStart(e) {\n    if (e.target.getAttribute('type') === 'range') {\n      this._postponeRangeInput = true;\n      this.currentInputRange = e.target;\n      this.currentInputRangeValue = e.target.value;\n      this._rangeLockTimeout = setTimeout(() => {\n        this._postponeRangeInput = false;\n      }, RANGE_SCROLL_LOCK_TIMEOUT);\n      this._wrappedOnTouchEnd = e => this._onTouchEnd(e);\n      document.body.addEventListener('touchend', this._wrappedOnTouchEnd);\n      this._wrappedOnRangeScroll = e => this._onRangeScroll(e);\n      elements.controlsPanel.addEventListener(\n        'scroll',\n        this._wrappedOnRangeScroll\n      );\n    }\n  }\n\n  _onTouchEnd() {\n    document.body.removeEventListener('touchend', this._wrappedOnTouchEnd);\n    elements.controlsPanel.removeEventListener(\n      'scroll',\n      this._wrappedOnRangeScroll\n    );\n\n    if (this._lockRange) {\n      this._lockRange = false;\n      if (this.currentInputRange) {\n        this.currentInputRange.value = this.currentInputRangeValue;\n      }\n    }\n\n    this.currentInputRange = this.currentInputRangeValue = null;\n  }\n\n  _onRangeScroll() {\n    this._lockRange = true;\n  }\n\n  _onInput(e) {\n    clearTimeout(inputTimeout);\n    clearTimeout(this._postponeRangeInputTimeout);\n\n    if (this._postponeRangeInput && e.target.getAttribute('type') === 'range') {\n      e.preventDefault();\n      this._postponeRangeInputTimeout = setTimeout(() => {\n        this._onInput(e);\n      }, RANGE_SCROLL_LOCK_TIMEOUT);\n      return false;\n    }\n    if (this._lockRange) {\n      e.preventDefault();\n      return false;\n    }\n\n    this.updateInput({\n      inputElement: e.target,\n      originalEvent: e,\n      deferChange: true,\n    });\n  }\n\n  updateInput({ inputElement, originalEvent, deferChange = true }) {\n    const inputValue = getInputValue(inputElement.type, inputElement);\n    const controlKey = inputElement.id.replace(/^config_/, '');\n\n    this.pattern.setConfigValue(controlKey, inputValue);\n\n    const { config, displayValue } = this.controlElements[controlKey];\n    if (displayValue) {\n      const formattedValue = config.displayValue\n        ? config.displayValue(this.pattern.config, config)\n        : inputElement.value;\n      displayValue.innerText = formattedValue;\n    }\n\n    const eventData = Object.freeze({\n      control: controlKey,\n      value: inputValue,\n      originalEvent,\n      pattern: this.pattern,\n    });\n\n    this._triggerEvent('input', eventData);\n\n    const triggerChange = () => {\n      this._triggerEvent('change', eventData);\n      this.updateControlsVisibility();\n    };\n\n    if (deferChange) {\n      inputTimeout = setTimeout(triggerChange, 100);\n    } else {\n      triggerChange();\n    }\n  }\n\n  _getState() {\n    const state = localStorage.getItem(STATE_LOCAL_STORAGE_KEY);\n    if (state) {\n      try {\n        return JSON.parse(state);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n  _updateState(newState) {\n    if (newState) {\n      localStorage.setItem(STATE_LOCAL_STORAGE_KEY, JSON.stringify(newState));\n    } else {\n      localStorage.removeItem(STATE_LOCAL_STORAGE_KEY);\n    }\n  }\n\n  updateControlsVisibility(configControls = this.pattern.configControls) {\n    configControls.forEach(control => {\n      if (control.show) {\n        const shouldShowControl = control.show(this.pattern.config, control);\n        const controlEl = this.controlElements[control.key].control;\n        if (controlEl) {\n          if (shouldShowControl) {\n            controlEl.removeAttribute('hidden');\n          } else {\n            controlEl.setAttribute('hidden', 'hidden');\n          }\n        }\n      }\n\n      if (control.isDisabled) {\n        const shouldDisableControl = control.isDisabled(this.pattern.config);\n        const inputEl = this.controlElements[control.key].input;\n        if (inputEl) {\n          if (shouldDisableControl) {\n            inputEl.setAttribute('disabled', 'disabled');\n          } else {\n            inputEl.removeAttribute('disabled');\n          }\n        }\n      }\n\n      if (control.children) {\n        this.updateControlsVisibility(control.children);\n      }\n    });\n  }\n\n  updateInputs(config) {\n    Object.entries(config).forEach(([key, value]) => {\n      const { input, value: valueEl } = this.controlElements[key];\n      if (input) {\n        if (input.type === 'checkbox') {\n          input.checked = value;\n        } else {\n          input.value = value;\n        }\n        if (valueEl) {\n          valueEl.innerText = value;\n        }\n      }\n    });\n  }\n\n  renderControls(containerEl = elements.controls, _configControls) {\n    const configControls = _configControls ?? this.pattern.configControls;\n    containerEl.innerHTML = '';\n    const controlsFragment = document.createDocumentFragment();\n\n    configControls.forEach(control => {\n      const controlId = `config_${control.key}`;\n      const controlElements = (this.controlElements[control.key] = {\n        config: control,\n      });\n\n      let controlEl;\n\n      if (control.type === 'group') {\n        controlEl = document.createElement('fieldset');\n        controlEl.setAttribute('data-group', control.key);\n        const groupTitleEl = document.createElement('legend');\n        groupTitleEl.setAttribute('tabindex', '0');\n        groupTitleEl.innerText = control.label;\n        controlEl.appendChild(groupTitleEl);\n        controlEl.className = 'control control_group';\n        if (control.defaultValue === 'minimized') {\n          controlEl.classList.add('minimized');\n          this.state.groups[control.key] = false;\n        }\n        const childrenContainer = document.createElement('div');\n        controlEl.appendChild(childrenContainer);\n        this.renderControls(childrenContainer, control.children);\n      } else {\n        controlEl = document.createElement('div');\n        controlEl.className = 'control';\n\n        const label = document.createElement('label');\n        label.innerHTML = control.label;\n        label.setAttribute('for', controlId);\n\n        const inputEl = (controlElements.input =\n          document.createElement('input'));\n        inputEl.setAttribute('type', control.type);\n        const inputValue =\n          this.pattern.config[control.key] ?? control.defaultValue;\n\n        if (control.attr) {\n          Object.entries(control.attr).forEach(([attr, value]) => {\n            const realValue =\n              value instanceof Function ? value(this.pattern) : value;\n            inputEl.setAttribute(attr, realValue);\n          });\n        }\n\n        if (control.type === 'checkbox') {\n          inputEl.checked = inputValue;\n          controlEl.appendChild(inputEl);\n          controlEl.appendChild(label);\n        } else {\n          controlEl.appendChild(label);\n          controlEl.appendChild(inputEl);\n          inputEl.value = inputValue;\n          const inputValueEl = (controlElements.displayValue =\n            document.createElement('span'));\n          inputValueEl.id = `config_${control.key}_value`;\n          inputValueEl.innerText = control.displayValue\n            ? control.displayValue(this.pattern.config, control)\n            : inputValue;\n          inputValueEl.className = 'control_input_value';\n          controlEl.appendChild(inputValueEl);\n        }\n        inputEl.id = controlId;\n      }\n\n      this.controlElements[control.key].control = controlEl;\n      controlEl.id = `control_${control.key}`;\n      controlsFragment.appendChild(controlEl);\n    });\n\n    containerEl.appendChild(controlsFragment);\n    this.updateGroupsState();\n    requestAnimationFrame(() => this.updateControlsVisibility());\n  }\n\n  updateGroupsState() {\n    const groups = elements.sidebarForm.querySelectorAll('[data-group]');\n    groups.forEach(groupEl => {\n      const groupId = groupEl.dataset.group;\n      const groupState = this.state.groups[groupId];\n      if (typeof groupState === 'boolean') {\n        if (groupState) {\n          groupEl.classList.remove('minimized');\n        } else {\n          groupEl.classList.add('minimized');\n        }\n      }\n    });\n  }\n}\n\nfunction getInputValue(type, inputElement) {\n  switch (type) {\n    case 'range':\n      return parseFloat(inputElement.value);\n    case 'checkbox':\n      return inputElement.checked;\n    case 'number':\n      return parseFloat(inputElement.value);\n    default:\n      return inputElement.value;\n  }\n}\n","const sizeControls = document.querySelector('#size_controls');\n\nconst elements = {\n  sizeSelect: sizeControls.querySelector('#size_select'),\n  sizeCustom: sizeControls.querySelector('#size_custom'),\n  width: sizeControls.querySelector('#size_custom_width'),\n  height: sizeControls.querySelector('#size_custom_height'),\n  orientationSelect: sizeControls.querySelector('#size_orientation_select'),\n};\n\nfunction cmToPixels(cm, dpi = 300) {\n  return Math.floor((cm / 2.54) * dpi);\n}\n\nconst SCREEN_SIZE = [\n  Math.floor(window.screen.width),\n  Math.floor(window.screen.height),\n];\n\nconst SIZES = [\n  { id: 'fit', name: 'Fit to screen' },\n  {\n    id: 'A4',\n    value: [20, 28].map(v => cmToPixels(v)),\n    orientationSelect: true,\n  },\n  {\n    id: 'A3',\n    value: [28, 40].map(v => cmToPixels(v)),\n    orientationSelect: true,\n  },\n  {\n    id: 'screen',\n    name: `Screen size (${SCREEN_SIZE.join('x')})`,\n    value: SCREEN_SIZE,\n  },\n  { id: 'custom', name: 'Custom...' },\n];\n\nexport default class EditorSizeControls {\n  element = document.querySelector('#size_controls');\n\n  constructor({ getCurrentSize }) {\n    const sizeOptionsFragment = document.createDocumentFragment();\n    SIZES.forEach(size => {\n      const sizeListItem = document.createElement('option');\n      sizeListItem.setAttribute('value', size.id);\n      sizeListItem.innerText = size.name ?? size.id;\n      sizeOptionsFragment.appendChild(sizeListItem);\n    });\n    elements.sizeSelect.appendChild(sizeOptionsFragment);\n    this.selectedSize = SIZES[0];\n\n    elements.sizeSelect.addEventListener('change', e => {\n      const selectedSizeId = e.target.value;\n      const size = SIZES.find(({ id }) => id === selectedSizeId);\n      this.selectedSize = size;\n\n      if (size.id === 'custom') {\n        elements.sizeCustom.removeAttribute('hidden');\n        const [width, height] = getCurrentSize();\n        elements.width.value = width;\n        elements.height.value = height;\n      } else {\n        elements.sizeCustom.setAttribute('hidden', 'hidden');\n        this._notifyOnChange(this.getValue());\n      }\n\n      if (size.orientationSelect) {\n        elements.orientationSelect.removeAttribute('hidden');\n      } else {\n        elements.orientationSelect.setAttribute('hidden', 'hidden');\n      }\n    });\n\n    elements.orientationSelect.addEventListener('change', e => {\n      this._notifyOnChange(this.getValue());\n    });\n\n    elements.sizeCustom.addEventListener('focusin', e => {\n      e.target.select();\n    });\n\n    elements.sizeCustom.addEventListener('input', () => {\n      this._notifyOnChange([\n        elements.width.value ? parseInt(elements.width.value) : null,\n        elements.height.value ? parseInt(elements.height.value) : null,\n      ]);\n    });\n  }\n\n  _notifyOnChange([width, height] = []) {\n    this.element.dispatchEvent(\n      new CustomEvent('sizechange', { detail: { width, height } })\n    );\n  }\n\n  getValue() {\n    if (this.selectedSize.id === 'custom') {\n      return [\n        parseInt(elements.width.value, 10),\n        parseInt(elements.height.value, 10),\n      ];\n    } else {\n      let value = this.selectedSize.value;\n      if (\n        this.selectedSize.orientationSelect &&\n        elements.orientationSelect.value === 'horizontal'\n      ) {\n        value = Array.from(value).reverse();\n      }\n      return value;\n    }\n  }\n}\n","const MAX_FLOAT_DECIMALS = 6;\n\nexport function serializeConfig(pattern) {\n  const { defaultConfig, config } = pattern;\n\n  const nonDefaultConfigValues = Object.entries(config).map(([key, value]) => {\n    if (value === defaultConfig[key]) {\n      return null;\n    }\n\n    if (typeof value === 'boolean') {\n      return `!${value ? 1 : 0}`;\n    }\n\n    if (typeof value === 'number') {\n      return parseFloat(value.toFixed(MAX_FLOAT_DECIMALS));\n    }\n\n    return value;\n  });\n\n  while (nonDefaultConfigValues[nonDefaultConfigValues.length - 1] === null) {\n    nonDefaultConfigValues.pop();\n  }\n\n  if (!nonDefaultConfigValues.length) {\n    return '';\n  }\n\n  const serializedConfigValues = nonDefaultConfigValues\n    .join('_')\n    .replace(/\\_{2,}/g, match => '~' + match.length + '_');\n  return serializedConfigValues;\n}\n\nconst numberRegExp = /^\\-?\\d+(\\.\\d+)?$/;\nconst booleanRegExp = /^(?:!)([01])$/;\n\nexport function deserializeConfig(pattern, serializedCofig) {\n  const serializedConfigValues = serializedCofig\n    .replace(/(?:~)(\\d+)(?:_)/g, (_, commaCount) =>\n      new Array(+commaCount).fill('_').join('')\n    )\n    .split('_')\n    .map(v => {\n      if (v === '') {\n        return null;\n      }\n\n      if (numberRegExp.test(v)) {\n        return parseFloat(v);\n      }\n\n      const booleanMatch = v.match(booleanRegExp);\n      if (booleanMatch) {\n        return booleanMatch[1] === '1';\n      }\n\n      return v;\n    });\n\n  const configKeys = Object.keys(pattern.defaultConfig);\n\n  return serializedConfigValues.reduce((config, serializedValue, i) => {\n    if (serializedValue !== null) {\n      const key = configKeys[i];\n      return { ...config, [key]: serializedValue };\n    }\n\n    return config;\n  }, {});\n}\n","export async function share(input) {\n  try {\n    navigator.share(await getShareData(input));\n  } catch (error) {\n    alert('Error: ' + error.message);\n  }\n}\n\nexport async function isShareSupported(input) {\n  if (!navigator.share) {\n    return false;\n  }\n\n  const shareData = await getShareData(input);\n  return navigator.canShare(shareData);\n}\n\nasync function getShareData({ canvas, pattern }) {\n  const dataUrl = canvas.toDataURL();\n  const blob = await (await fetch(dataUrl)).blob();\n  const files = [\n    new File([blob], pattern.name + '.jpg', {\n      type: blob.type,\n      lastModified: new Date().getTime(),\n    }),\n  ];\n  return {\n    url: window.location.href,\n    files,\n    title: document.title,\n    text: 'String Art Studio - ' + pattern.name,\n  };\n}\n","import Player from './editor/Player.js';\nimport patternTypes from './pattern_types.js';\nimport EditorControls from './editor/EditorControls.js';\nimport EditorSizeControls from './editor/EditorSizeControls.js';\nimport { Thumbnails } from './thumbnails/Thumbnails.js';\nimport { deserializeConfig, serializeConfig } from './Serialize.js';\nimport { isShareSupported, share } from './share.js';\nimport { initServiceWorker } from './pwa.js';\n\nwindow.addEventListener('error', function (event) {\n  alert('Error: ' + event.message);\n});\n\nconst elements = {\n  canvas: document.querySelector('canvas'),\n  patternLink: document.querySelector('#pattern_link'),\n  downloadBtn: document.querySelector('#download_btn'),\n  downloadNailsBtn: document.querySelector('#download_nails_btn'),\n  resetBtn: document.querySelector('#reset_btn'),\n  shareBtn: document.querySelector('#share_btn'),\n  playerBtn: document.querySelector('#player_btn'),\n  buttons: document.querySelector('#buttons'),\n  instructionsLink: document.querySelector(\n    '#pattern_select_dropdown_instructions'\n  ),\n};\n\nconst patterns = patternTypes.map(Pattern => new Pattern(elements.canvas));\n\nlet currentPattern;\nconst player = new Player(document.querySelector('#player'));\nconst sizeControls = new EditorSizeControls({\n  getCurrentSize: () => [\n    elements.canvas.clientWidth,\n    elements.canvas.clientHeight,\n  ],\n});\n\nconst thumbnails = new Thumbnails();\n\nlet controls;\n\nwindow.addEventListener('load', main);\n\nasync function main() {\n  initRouting();\n\n  await initServiceWorker();\n\n  document.body.querySelectorAll('.pattern_only').forEach(hide);\n  unHide(document.querySelector('main'));\n  if (history.state?.pattern) {\n    updateState(history.state);\n  } else {\n    const queryParams = new URLSearchParams(document.location.search);\n    const queryPattern = queryParams.get('pattern');\n\n    if (queryPattern) {\n      const config = queryParams.get('config');\n      updateState({ pattern: queryPattern, config });\n    } else {\n      thumbnails.toggle();\n    }\n  }\n\n  elements.downloadBtn.addEventListener('click', downloadCanvas);\n  elements.downloadNailsBtn.addEventListener('click', downloadNailsImage);\n  elements.resetBtn.addEventListener('click', reset);\n  elements.shareBtn.addEventListener(\n    'click',\n    async () =>\n      await share({\n        canvas: elements.canvas,\n        pattern: currentPattern,\n      })\n  );\n  elements.playerBtn.addEventListener('click', () => {\n    document.querySelectorAll('#buttons [data-toggle-for]').forEach(btn => {\n      if (btn.classList.contains('active')) {\n        btn.click();\n      }\n    });\n  });\n\n  elements.instructionsLink.addEventListener('click', e => {\n    e.preventDefault();\n    history.pushState({ pattern: null }, 'String Art Studio', './');\n    unselectPattern();\n  });\n\n  thumbnails.addOnChangeListener(({ detail }) => {\n    const pattern = findPatternById(detail.pattern);\n    setCurrentPattern(pattern);\n  });\n\n  document.body.addEventListener('click', e => {\n    const toggleBtn = e.target.closest('[data-toggle-for]');\n    if (toggleBtn) {\n      const dialogId = toggleBtn.dataset.toggleFor;\n\n      toggleBtn.classList.toggle('active');\n      const toggledElement = document.querySelector('#' + dialogId);\n      toggledElement.classList.toggle('open');\n      document.body.classList.toggle('dialog_' + dialogId);\n      currentPattern &&\n        currentPattern.draw({ position: currentPattern.position });\n    }\n  });\n}\n\nasync function initPattern() {\n  if (!currentPattern) {\n    throw new Error(\"Can't init pattern - no current pattern available!\");\n  }\n\n  initSize();\n\n  window.addEventListener(\n    'resize',\n    () => currentPattern && currentPattern.draw()\n  );\n\n  elements.downloadBtn.addEventListener('click', downloadCanvas);\n  elements.downloadNailsBtn.addEventListener('click', downloadNailsImage);\n  elements.resetBtn.addEventListener('click', reset);\n  const showShare = await isShareSupported({\n    canvas: elements.canvas,\n    pattern: currentPattern,\n  });\n  if (showShare) {\n    unHide(elements.shareBtn);\n  }\n}\n\nfunction downloadCanvas() {\n  const downloadLink = document.createElement('a');\n  downloadLink.download = currentPattern.name + '.png';\n  downloadLink.href = elements.canvas.toDataURL('image/png');\n  downloadLink.setAttribute('target', 'download');\n  downloadLink.click();\n}\n\nfunction downloadNailsImage() {\n  const currentConfig = currentPattern.config;\n  currentPattern.config = {\n    darkMode: false,\n    showNails: true,\n    showNailNumbers: true,\n    showStrings: false,\n    nailsColor: '#000000',\n  };\n  currentPattern.draw();\n  downloadCanvas();\n\n  // Reset to the config before the download:\n  currentPattern.config = currentConfig;\n  currentPattern.draw();\n}\n\nfunction reset() {\n  if (confirm('Are you sure you wish to reset options to defaults?')) {\n    setCurrentPattern(currentPattern, { config: {} });\n  }\n}\n\nfunction onInputsChange({ withConfig = true } = {}) {\n  player.update(currentPattern);\n  const configQuery = withConfig ? serializeConfig(currentPattern) : null;\n  history.replaceState(\n    {\n      pattern: currentPattern.id,\n      config: configQuery,\n    },\n    currentPattern.name,\n    `?pattern=${currentPattern.id}${\n      withConfig && configQuery\n        ? `&config=${encodeURIComponent(configQuery)}`\n        : ''\n    }`\n  );\n}\n\nfunction setCurrentPattern(pattern, setPatternOptions) {\n  selectPattern(pattern, setPatternOptions);\n  history.pushState(\n    { pattern: pattern.id },\n    pattern.name,\n    '?pattern=' + pattern.id\n  );\n}\n\nfunction initSize() {\n  sizeControls.element.addEventListener('sizechange', ({ detail }) => {\n    setSize(detail);\n  });\n}\n\nfunction setSize({ width, height }) {\n  elements.canvas.removeAttribute('width');\n  elements.canvas.removeAttribute('height');\n\n  if (width && height) {\n    elements.canvas.style.width = `${width}px`;\n    elements.canvas.style.height = `${height}px`;\n    if (!elements.canvas.parentElement.classList.contains('overflow')) {\n      elements.canvas.parentElement.classList.add('overflow');\n    }\n  } else {\n    elements.canvas.parentElement.classList.remove('overflow');\n    elements.canvas.removeAttribute('style');\n  }\n\n  currentPattern.draw();\n}\n\nfunction initRouting() {\n  window.addEventListener('popstate', ({ state }) => {\n    updateState(state);\n  });\n}\n\nfunction updateState(state) {\n  if (state?.pattern) {\n    const pattern = findPatternById(state.pattern);\n    selectPattern(pattern, {\n      draw: false,\n      config: state.config ? deserializeConfig(pattern, state.config) : {},\n    });\n\n    thumbnails.close();\n    currentPattern.draw();\n  } else {\n    unselectPattern();\n    thumbnails.open();\n  }\n}\n\nfunction findPatternById(patternId) {\n  const pattern = patterns.find(({ id }) => id === patternId);\n  if (!pattern) {\n    throw new Error(`Pattern with id \"${patternId}\" not found!`);\n  }\n  return pattern;\n}\n\nfunction selectPattern(pattern, { config, draw = true } = {}) {\n  const isFirstTime = !currentPattern;\n\n  currentPattern = pattern;\n  if (config) {\n    currentPattern.config = config;\n  }\n  if (controls) {\n    controls.destroy();\n  }\n  controls = new EditorControls({ pattern, config });\n  controls.addEventListener('input', () => currentPattern.draw());\n  controls.addEventListener('change', onInputsChange);\n\n  if (pattern.link) {\n    elements.patternLink.setAttribute('href', pattern.link);\n    elements.patternLink.innerText = pattern.linkText ?? 'Example';\n    unHide(elements.patternLink);\n  } else {\n    hide(elements.patternLink);\n  }\n\n  if (draw) {\n    requestAnimationFrame(() => {\n      currentPattern.draw();\n    });\n  }\n\n  player.update(currentPattern, { draw: false });\n  thumbnails.setCurrentPattern(pattern);\n  document.title = `${pattern.name} - String Art Studio`;\n  document.body.setAttribute('data-pattern', pattern.id);\n\n  if (isFirstTime) {\n    initPattern();\n    document.body.querySelectorAll('.pattern_only').forEach(unHide);\n  }\n}\n\nfunction unHide(element) {\n  element.removeAttribute('hidden');\n}\n\nfunction hide(element) {\n  element.setAttribute('hidden', 'hidden');\n}\n\nfunction unselectPattern() {\n  currentPattern = null;\n  const context = elements.canvas.getContext('2d');\n\n  context.clearRect(0, 0, elements.canvas.width, elements.canvas.height);\n  hide(elements.patternLink);\n  thumbnails.setCurrentPattern(null);\n  controls && controls.destroy();\n  document.body.querySelectorAll('.pattern_only').forEach(hide);\n  document.body.removeAttribute('data-pattern');\n}\n","export default class Player {\n  constructor(parentEl) {\n    this.elements = {\n      player: parentEl,\n      step: parentEl.querySelector('#step'),\n      //stepInstructions: parentEl.querySelector('#step_instructions'),\n      playerPosition: parentEl.querySelector('#player_position'),\n      playBtn: parentEl.querySelector('#play_btn'),\n      pauseBtn: parentEl.querySelector('#pause_btn'),\n      text: parentEl.querySelector('#player_text'),\n    };\n    this.stepCount = 0;\n    this._isPlaying = false;\n\n    this.elements.playerPosition.addEventListener('input', ({ target }) => {\n      this.goto(+target.value);\n    });\n\n    this.elements.playBtn.addEventListener('click', () => {\n      this.play();\n    });\n\n    this.elements.pauseBtn.addEventListener('click', () => {\n      this.pause();\n    });\n  }\n\n  updateStatus(isPlaying) {\n    if (this._isPlaying !== isPlaying) {\n      this.elements.player.classList.toggle('playing');\n      this._isPlaying = isPlaying;\n    }\n  }\n\n  update(stringArt, { draw = true } = {}) {\n    this.stringArt = stringArt;\n    this.stepCount = stringArt.getStepCount();\n    this.elements.playerPosition.setAttribute('max', this.stepCount);\n    this.elements.step.innerText = `${this.stepCount}/${this.stepCount}`;\n    this.elements.text.style.removeProperty('width');\n    this.elements.text.style.width =\n      (this.elements.text.clientWidth || 70) + 'px';\n    this.goto(this.stepCount, { updateStringArt: draw });\n  }\n\n  updatePosition(position) {\n    this.elements.step.innerText = `${position}/${this.stepCount}`;\n    this.elements.playerPosition.value = position;\n  }\n\n  goto(position, { updateStringArt = true } = {}) {\n    this.pause();\n    this.updatePosition(position);\n    if (updateStringArt) {\n      this.stringArt.goto(position);\n    }\n  }\n\n  setInstructions(instructions) {\n    // this.elements.stepInstructions.innerText = instructions;\n  }\n\n  play() {\n    this.updateStatus(true);\n    cancelAnimationFrame(this.renderRafId);\n\n    if (this.stringArt.position === this.stepCount) {\n      this.stringArt.goto(0);\n    }\n\n    const self = this;\n\n    step();\n\n    function step() {\n      if (!self.stringArt.drawNext().done) {\n        self.renderRafId = requestAnimationFrame(step);\n      } else {\n        self.updateStatus(false);\n      }\n      self.updatePosition(self.stringArt.position);\n    }\n  }\n\n  pause() {\n    cancelAnimationFrame(this.renderRafId);\n    this.updateStatus(false);\n  }\n\n  toggle() {\n    if (this._isPlaying) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n}\n","import patternTypes from '../pattern_types.js';\n\nconst THUMBNAIL_WIDTH = 100;\nconst MINIMIZED_CLASS = 'minimized';\n\nexport class Thumbnails {\n  elements = {\n    root: document.querySelector('#pattern_select_panel'),\n    thumbnails: document.querySelector('#pattern_select_thumbnails'),\n    toggleBtn: document.querySelector('#pattern_select_btn'),\n    dropdown: document.querySelector('#pattern_select_dropdown'),\n  };\n\n  constructor() {\n    this.elements.toggleBtn.addEventListener('click', () => this.toggle());\n  }\n\n  toggle() {\n    if (this.elements.root.classList.contains(MINIMIZED_CLASS)) {\n      this.open();\n    } else if (this.pattern) {\n      this.close();\n    }\n  }\n\n  open() {\n    if (this.elements.root.classList.contains(MINIMIZED_CLASS)) {\n      this.elements.root.classList.remove(MINIMIZED_CLASS);\n      if (!this.thumbnailsRendered) {\n        this.createThumbnails();\n        this.thumbnailsRendered = true;\n      }\n\n      this._onClickOutside = e => {\n        if (!e.target.closest('#pattern_select_panel')) {\n          this.toggle();\n        }\n      };\n\n      document.body.addEventListener('mousedown', this._onClickOutside);\n    }\n  }\n\n  close() {\n    if (!this.elements.root.classList.contains(MINIMIZED_CLASS)) {\n      this.elements.root.classList.add(MINIMIZED_CLASS);\n      document.body.removeEventListener('mousedown', this._onClickOutside);\n      this._onClickOutside = null;\n    }\n  }\n\n  setCurrentPattern(pattern) {\n    this.pattern = pattern;\n    this.elements.toggleBtn.innerText = pattern?.name ?? 'Choose a pattern';\n  }\n\n  createThumbnails() {\n    const thumbnailsFragment = document.createDocumentFragment();\n    const patterns = [];\n\n    patternTypes.forEach(PatternType => {\n      const canvas = document.createElement('canvas');\n      canvas.style.width = canvas.style.height = `${THUMBNAIL_WIDTH}px`;\n\n      const pattern = new PatternType(canvas);\n      pattern.config = Object.assign(\n        {\n          margin: 1,\n          enableBackground: false,\n          nailRadius: 0.5,\n        },\n        PatternType.thumbnailConfig\n      );\n\n      patterns.push(pattern);\n\n      const li = document.createElement('li');\n      thumbnailsFragment.appendChild(li);\n      const patternLink = document.createElement('a');\n      patternLink.href = `?pattern=${pattern.id}`;\n      patternLink.setAttribute('data-pattern', pattern.id);\n      patternLink.title = pattern.name;\n      patternLink.appendChild(canvas);\n      li.appendChild(patternLink);\n    });\n\n    this.elements.thumbnails.appendChild(thumbnailsFragment);\n    patterns.forEach(pattern => pattern.draw());\n\n    this.elements.thumbnails.addEventListener('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      const link = e.target.closest('[data-pattern]');\n\n      if (!link) {\n        return false;\n      }\n\n      this.elements.root.dispatchEvent(\n        new CustomEvent('change', {\n          detail: { pattern: link.dataset.pattern },\n        })\n      );\n      this.toggle();\n    });\n  }\n\n  addOnChangeListener(listener) {\n    this.elements.root.addEventListener('change', listener);\n  }\n\n  removeOnChangeListener(listener) {\n    this.elements.root.removeEventListener('change', listener);\n  }\n}\n","const swFilename = 'service-worker.js';\n\nexport async function initServiceWorker() {\n  if (!navigator.serviceWorker || document.location.hostname === '127.0.0.1') {\n    return;\n  }\n\n  try {\n    const registration = await navigator.serviceWorker.register(swFilename);\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log(\n              'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n            );\n          } else {\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  } catch (error) {\n    console.error('Error during service worker registration:', error);\n  }\n}\n"],"names":["$e8c1397eac31f13e$var$COLOR_CONTROLS","key","label","defaultValue","type","attr","min","max","step","show","isMultiColor","children","multicolorByLightness","config","this","multicolorRange","colorCount","minLightness","maxLightness","multicolorStart","darkMode","saturation","reverseColors","multiColorStep","multiColorLightnessStep","Math","colors","Array","fill","map","_","colorIndex","lightness","reverse","getColor","color","repeatColors","getColorMap","stepCount","Error","stepsPerColor","floor","colorMap","Map","i","set","include","exclude","defaults","customControls","controls","getControls","controlsConfig","filter","includes","control","finalControl","Object","freeze","$97e1d102fa450510$export$f81847884871263e","int1","int2","$97e1d102fa450510$export$f4644083ce95e7e3","PI","canvas","context","getContext","setConfig","centerX","width","nails","addedPoints","Set","nailRadius","nailsColor","nailNumbersFontSize","clear","addNail","nail","nailPoint","point","round","join","has","push","add","drawNumbers","globalCompositeOperation","beginPath","fillStyle","textBaseline","font","nailNumberOffset","forEach","x","y","number","moveTo","arc","isRightAlign","numberPosition","textAlign","fillText","String","$65e05ee91a8797e3$var$COLORS","$65e05ee91a8797e3$var$COMMON_CONFIG_CONTROLS","isDisabled","showNails","showStrings","displayValue","showNailNumbers","margin","enableBackground","customBackgroundColor","$65e05ee91a8797e3$var$flattenConfig","configControls","reduce","$65e05ee91a8797e3$var$getControlsIndex","controlsIndex","$65e05ee91a8797e3$export$2e2bcd8739ae039","ctx","dpr","window","devicePixelRatio","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","concat","_controlsIndex","defaultConfig","_defaultConfig","assign","defaultValues","_config","value","setConfigValue","controlKey","onConfigChange","getSize","clientWidth","clientHeight","v","setUpDraw","previousSize","size","removeAttribute","height","setAttribute","center","onResize","$a8180031c78213da$export$2e2bcd8739ae039","clearRect","lineWidth","stringWidth","afterDraw","drawNails","initDraw","backgroundColor","fillRect","draw","position","Infinity","stringsIterator","generateStrings","drawNext","done","goto","result","next","getStepCount","name","getPoint","index","realIndex","getNailIndex","points","get","sin","indexAngle","rotationAngle","radius","cos","isReverse","n","serializedConfig","_serializeConfig","rotation","configCenter","props","nailsNumberStart","getNumber","ringSize","ringDistance","prevPoint","prevPointIndex","isPrevSide","strokeStyle","lineTo","stroke","isStructural","affectsStepCount","$828d2af56886c091$var$COLOR_CONFIG","$e8c1397eac31f13e$export$2e2bcd8739ae039","getConfig","$17fe1039ca333e84$export$2e2bcd8739ae039","id","link","$ff21866e88ed26dc$export$2e2bcd8739ae039","rotationConfig","super","nSpirals","radiusIncrease","angleStep","spiralRotations","maxRadius","nailsPerSpiral","angleIncrease","s","nailNumber","spiralIndex","centerx","centery","angle","generatePoints","lastPoint","stepColor","linkText","_n","layers","extraNails","layerFill","base","circleConfig","stringsPerLayer","circle","layerShift","shift","time","toIndex","instructions","drawTimesTable","$f11ad0f2a18da5c9$var$SIDES","$f11ad0f2a18da5c9$var$SIDES_ORDER","$f11ad0f2a18da5c9$var$SIDES_ROTATION","left","bottom","right","top","$f11ad0f2a18da5c9$export$2e2bcd8739ae039","maxSize","nailSpacing","layerAngle","layerIndex","_getLayerProps","layerStart","theta","pivot","cosAngle","sinAngle","side","layerStringCount","sideIndex","indexOf","nextSide","length","nextSideRotation","sideProps","_getLayerColors","layerSize","pow","color1","color2","colorPerLayer","layerColor","drawSide","layer","drawLayer","count","sideOrder","$da53f1772640b858$var$LAYER_DEFAULTS","end","sides","sideCount","sideAngle","radiusAngle","_getProps","fitSize","getSizeAndCenter","configSize","boundingRect","getBoundingRect","scale","overrideConfig","nailsSpacing","sideSize","start","nailsDistance","radiusNailsCount","nailsPerSide","getSidePoint","pointsMapIndex","startX","getCenterPoint","radiusNailsDistance","firstPoint","boundingRect1","slice","drawCenter","drawSides","sideIndexStart","index1","$d89aefe1e0b94ba8$var$COLOR_CONFIG","$a3a02ffca86b5e03$var$COLOR_CONFIG","$4231afd05203ede9$var$COLOR_CONFIG","$f7e3e90b370cc9b7$var$COLOR_CONFIG","$f7e3e90b370cc9b7$var$ANGLE","$f7e3e90b370cc9b7$var$SIDE_ANGLES","$8b13425f1e264518$export$2e2bcd8739ae039","sideNails","starCenterStart","circlePointsStart","sinSideAngle","cosSideAngle","circlePointsEnd","getStarPoint","centerY","getArcPoint","reverseOrder","prevSide","innerColor","alternate","linesPerRound","rounds","linesPerThisRound","outterColor","isStar","ceil","pointPosition","drawCircle","ringColor","drawRing","drawStar","generateStarPoints","nailsConfig","getSetUp","lineSpacing","lineNailCount","firstCirclePoint","totalNailCount","totalIndexCount","getLayer","call","enable","endIndex","indexLength","circleIndex","self","advance","getPointIndex","$4252a999d90491dd$export$2e2bcd8739ae039","innerLength","repetition","layersCount","realRepetition","currentInnerLength","repetitionCount","isPrevPoint","drawSpiral","layerSpread","show1","show2","show3","minNailDistance","maxShapeNailsCount","prop","circumsference","circleNails","prevCirclePoint","nextLayerIndex","polygonConfig","polygon","$6489b1167eb82c4c$export$2e2bcd8739ae039","bezier","limitedBezier","layerAngleShift","polygons","leftSide","centerIndexes","getCenterIndexes","extraNailCount","resetStructure","calc","getCalc","maxSteps","angleRadians","currentSize","k","r","steps","renderRing","ringPadding","renderTriangles","levels","density","globalRotation","renderCaps","ringNailCount","globalRotationRadians","ringWidth","edgeSize","nailsLength","countPerLevelSide","level","triangleHeight","sqrt","triangleCenterDistance","nailDistance","triangleCount","colorPerLevel","getPoints","realColorCount","getTrianglePoints","isCapLevel","triangleIndexInSide","missingSide","triangleIndex","_getNextIndexInTriangle","trianglePoints","triangleSidePoints","nNailDistance","largeDistance","smallDistance","levelsPoints","levelsCount","levelTrianglesPoints","levelSideTriangleCount","levelPositions","isFlipped","trianglePosition","atan","distanceFromCenter","sideRotation","triangleCenterAngle","rotatedTrianglePosition","indexInSide","initialSide","lastSide","lastIndex","isNextSide","nextSidePoint","targetSide","triangle1","triangle2","isNextLevel","nextLevelTriangleIndex","fillColor","levelSideCount","angleShift","isLastTriangleInSide","firstSide","order","generateOrderInSide","pointIndex","triangle1Points","triangle2Points","t1Side","t2Side","last","n1","direction","triangleLevels","levelIndex","lastIndexInLevel","triangle","generateStringsBetweenTriangles","generateTriangleStrings","fillStepsPerTriangle","levelsWithFillBetween","triangleSide","$2fc16ffa17719734$var$elements","document","querySelector","controlsPanel","sidebarForm","$2fc16ffa17719734$var$EVENTS","$2fc16ffa17719734$var$inputTimeout","pattern","state","_getState","groups","eventHandlers","input","change","_toggleFieldset","e","target","nodeName","parentElement","classList","toggle","groupId","dataset","group","contains","_updateState","_toggleFieldSetOnEnter","_wrappedOnInput","_onInput","addEventListener","_wrappedOnTouchStart","_onTouchStart","controlElements","renderControls","destroy","removeEventListener","innerHTML","event","eventHandler","Function","_triggerEvent","eventData","e1","getAttribute","_postponeRangeInput","currentInputRange","currentInputRangeValue","_rangeLockTimeout","setTimeout","_wrappedOnTouchEnd","_onTouchEnd","body","_wrappedOnRangeScroll","_onRangeScroll","_lockRange","clearTimeout","_postponeRangeInputTimeout","preventDefault","updateInput","inputElement","originalEvent","deferChange","inputValue","parseFloat","checked","$2fc16ffa17719734$var$getInputValue","replace","formattedValue","innerText","triggerChange","updateControlsVisibility","localStorage","getItem","JSON","parse","newState","setItem","stringify","removeItem","shouldShowControl","controlEl","shouldDisableControl","inputEl","updateInputs","entries","valueEl","containerEl","_configControls","controlsFragment","createDocumentFragment","controlId","createElement","groupTitleEl","appendChild","className","childrenContainer","realValue","inputValueEl","updateGroupsState","requestAnimationFrame","querySelectorAll","groupEl","groupState","remove","$0597ff46967fdd49$var$sizeControls","$0597ff46967fdd49$var$elements","sizeSelect","sizeCustom","orientationSelect","$0597ff46967fdd49$var$cmToPixels","cm","dpi","$0597ff46967fdd49$var$SCREEN_SIZE","screen","$0597ff46967fdd49$var$SIZES","$2085f05924b9087c$var$numberRegExp","$2085f05924b9087c$var$booleanRegExp","$2085f05924b9087c$export$39ef19ebad6081a3","serializedCofig","serializedConfigValues","commaCount","split","test","booleanMatch","match","configKeys","keys","serializedValue","$72facf7821ef2ed6$var$getShareData","dataUrl","toDataURL","blob","fetch","files","File","lastModified","Date","getTime","url","location","href","title","text","alert","message","$52852adbc3c0b381$var$elements","patternLink","downloadBtn","downloadNailsBtn","resetBtn","shareBtn","playerBtn","buttons","instructionsLink","$52852adbc3c0b381$var$patterns","Pattern","$52852adbc3c0b381$var$currentPattern","$52852adbc3c0b381$var$player","parentEl","elements","player","playerPosition","playBtn","pauseBtn","_isPlaying","play","pause","updateStatus","isPlaying","update","stringArt","style","removeProperty","updateStringArt","updatePosition","setInstructions","cancelAnimationFrame","renderRafId","$52852adbc3c0b381$var$sizeControls","element","getCurrentSize","sizeOptionsFragment","sizeListItem","selectedSize","selectedSizeId","find","_notifyOnChange","getValue","select","parseInt","dispatchEvent","CustomEvent","detail","from","$52852adbc3c0b381$var$thumbnails","root","thumbnails","toggleBtn","dropdown","open","close","thumbnailsRendered","createThumbnails","_onClickOutside","closest","setCurrentPattern","thumbnailsFragment","patterns","PatternType","thumbnailConfig","li","stopPropagation","addOnChangeListener","listener","removeOnChangeListener","$52852adbc3c0b381$var$controls","$52852adbc3c0b381$var$initPattern","$52852adbc3c0b381$var$setSize","$52852adbc3c0b381$var$downloadCanvas","$52852adbc3c0b381$var$downloadNailsImage","$52852adbc3c0b381$var$reset","navigator","share","shareData","canShare","$72facf7821ef2ed6$export$4fa6f570da04f7cc","$52852adbc3c0b381$var$unHide","downloadLink","download","click","currentConfig","confirm","$52852adbc3c0b381$var$setCurrentPattern","$52852adbc3c0b381$var$onInputsChange","withConfig","configQuery","nonDefaultConfigValues","toFixed","pop","$2085f05924b9087c$export$fa8157df3262779b","history","replaceState","encodeURIComponent","setPatternOptions","$52852adbc3c0b381$var$selectPattern","pushState","$52852adbc3c0b381$var$updateState","$52852adbc3c0b381$var$findPatternById","$52852adbc3c0b381$var$unselectPattern","patternId","isFirstTime","$2fc16ffa17719734$export$2e2bcd8739ae039","$52852adbc3c0b381$var$hide","$52852adbc3c0b381$var$initRouting","serviceWorker","hostname","registration","register","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","$df9fee1b96456f2b$export$d594efb518b3cec4","queryParams","URLSearchParams","search","queryPattern","async","$72facf7821ef2ed6$export$ed80d9de1d9df928","btn","dialogId","toggleFor"],"version":3,"file":"index.269ca1f7.js.map"}