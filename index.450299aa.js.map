{"mappings":"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","sources":["src/scripts/helpers/Color.js","src/scripts/Nails.js","src/scripts/StringArt.js","src/scripts/string_art_types/Circle.js","src/scripts/string_art_types/Spiral.js","src/scripts/string_art_types/Spirals.js","src/scripts/string_art_types/Eye.js","src/scripts/pattern_types.js","src/scripts/string_art_types/Star.js","src/scripts/string_art_types/Assymetry.js","src/scripts/string_art_types/TimesTables.js","src/scripts/string_art_types/Wave.js","src/scripts/string_art_types/Circles.js","src/scripts/editor/EditorControls.js","src/scripts/editor/EditorSizeControls.js","src/scripts/main.js","src/scripts/editor/Player.js"],"sourcesContent":["const COLOR_CONTROLS = [\n    {\n        key: 'color',\n        label: 'String color',\n        defaultValue: \"#ff4d00\",\n        type: \"color\",\n        show: ({isMultiColor}) => !isMultiColor\n    },\n    {\n        key: 'isMultiColor',\n        label: 'Use multiple colors',\n        defaultValue: false,\n        type: \"checkbox\",\n    },\n    {\n        key: 'multicolorRange',\n        label: 'Multicolor range',\n        defaultValue: 360,\n        type: \"range\",\n        attr: {\n            min: 1,\n            max: 360,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'multicolorStart',\n        label: 'Multicolor start',\n        defaultValue:0,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 360,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'reverseColors',\n        label: 'Reverse colors order',\n        defaultValue: false,\n        type: \"checkbox\",\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'saturation',\n        label: 'Saturation',\n        defaultValue: 100,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 100,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'lightness',\n        label: 'Lightness',\n        type: 'group',\n        defaultValue: 'minimized',\n        show: ({isMultiColor}) => isMultiColor,\n        children: [\n            {\n                key: 'multicolorByLightness',\n                label: 'Multi lightness',\n                defaultValue: false,\n                type: 'checkbox',\n                show: ({isMultiColor}) => isMultiColor\n            },\n            {\n                key: 'minLightness',\n                label: 'Minimum lightness',\n                defaultValue:0,\n                type: \"range\",\n                attr: {\n                    min: 0,\n                    max: 100,\n                    step: 1\n                },\n                show: ({multicolorByLightness, isMultiColor}) => multicolorByLightness && isMultiColor\n            },\n            {\n                key: 'maxLightness',\n                label: 'Maximum lightness',\n                defaultValue:100,\n                type: \"range\",\n                attr: {\n                    min: 0,\n                    max: 100,\n                    step: 1\n                },\n                show: ({multicolorByLightness, isMultiColor}) => multicolorByLightness && isMultiColor\n            },\n        ]\n    },\n];\n\nexport default class Color {\n    constructor(config) {\n        this.config = config;\n        const {\n            multicolorRange,\n            colorCount,\n            multicolorByLightness,\n            minLightness = 0,\n            maxLightness = 100,\n            multicolorStart,\n            darkMode,\n            saturation,\n            reverseColors,\n            isMultiColor,\n        } = config;\n        \n        if (isMultiColor) {\n            this.multiColorStep = multicolorRange / colorCount;\n            this.multiColorLightnessStep = multicolorByLightness ? (maxLightness - minLightness) / colorCount : 1;\n\n            this.colors = new Array(colorCount).fill(null).map((_, colorIndex) => {\n                const lightness = multicolorByLightness ? minLightness + this.multiColorLightnessStep * colorIndex : darkMode ? 50 : 40;\n                return `hsl(${multicolorStart + colorIndex * this.multiColorStep}, ${saturation}%, ${lightness}%)`;\n            });\n\n            if (reverseColors) {\n                this.colors.reverse();\n            }\n        }\n    }\n\n    /**\n     * Returns the color to be used in the provided layer index. If no multiColor is used, will use the 'color' config property. \n     * @param {number} colorIndex \n     * @returns string\n     */\n    getColor(colorIndex) {\n        const {\n            isMultiColor,\n            colorCount,\n            color,\n        } = this.config;\n    \n        if (!isMultiColor) {\n            return color;\n        }\n\n        if (colorIndex >= colorCount) {\n            colorIndex = colorCount - 1;\n        }\n\n        return this.colors[colorIndex];\n    }\n   \n    static getConfig({ include, exclude, defaults = {}}) {\n        const controls = getControls();\n\n        return {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: controls\n        };\n\n        function getControls(controlsConfig = COLOR_CONTROLS) {\n            return controlsConfig\n                .filter(({key}) => (!exclude || !exclude.includes(key)) && (!include || include.includes(key)))\n                .map(control => {\n                    const finalControl = {\n                        ...control,\n                        defaultValue: defaults[control.key] ?? control.defaultValue\n                    };\n\n                    if (control.type === \"group\") {\n                        finalControl.children = getControls(control.children);\n                    } \n                    return Object.freeze(finalControl);\n                });\n        }\n    }\n}","const PI2 = Math.PI * 2;\nconst NUMBER_MARGIN = 4;\n\nexport default class Nails {\n    constructor(canvas, config) {\n        this.context = canvas.getContext(\"2d\");\n        this.setConfig(config);\n        this.centerX = canvas.width / 2;\n        this.nails = [];\n    }\n\n    setConfig({ nailRadius, nailsColor, nailNumbersFontSize}) {\n        this.nailRadius = nailRadius;\n        this.nailsColor = nailsColor;\n        this.nailNumbersFontSize = nailNumbersFontSize;\n        this.nails = [];\n    }\n\n    // Adds a nail to be rendered. nail: { point, number }\n    addNail(nail) {\n        this.nails.push(nail);\n    }\n\n    fill({ drawNumbers = true} = {}) {\n        this.context.globalCompositeOperation = \"source-over\";\n        this.context.beginPath();\n        this.context.fillStyle = this.nailsColor;\n        this.context.textBaseline = \"middle\";\n        this.context.font = `${this.nailNumbersFontSize}px sans-serif`;\n        const nailNumberOffset = this.nailRadius + NUMBER_MARGIN;\n\n        this.nails.forEach(({ point: [x, y], number }) => {\n            this.context.moveTo(x + this.nailRadius, y);\n            this.context.arc(x, y, this.nailRadius, 0, PI2)\n            if (drawNumbers && number !== undefined && number !== null) {\n                const isRightAlign = x < this.centerX;\n\n                const numberPosition = [\n                    isRightAlign ? x - nailNumberOffset : x + nailNumberOffset,\n                    y\n                ];\n\n                this.context.textAlign = isRightAlign ? \"right\" : \"left\";\n                this.context.fillText(String(number), ...numberPosition);\n            }\n        });\n\n        this.context.fill();\n        this.nails = [];\n    }\n}","import Nails from \"./Nails.js\";\n\nconst COLORS = {\n    dark: \"#171717\",\n    light: \"#ffffff\"\n};\n\nconst COMMON_CONFIG_CONTROLS = [\n    {\n        key: 'strings',\n        label: 'Strings',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'showStrings',\n                label: 'Show strings',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showNails}) => !showNails\n            },\n            {\n                key: 'stringWidth',\n                label: 'String width',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 0.2,\n                    max: 4,\n                    step: 0.2\n                },\n                show: ({showStrings}) => showStrings\n            },\n        ]\n    },\n    {\n        key: 'nails',\n        label: 'Nails',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'showNails',\n                label: 'Show nails',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showStrings}) => !showStrings\n            },\n            {\n                key: 'margin',\n                label: 'Margin',\n                defaultValue: 20,\n                type: \"number\",\n                attr: {\n                    min: 0,\n                    max: 500,\n                    step: 1\n                },\n                displayValue: ({margin}) => `${margin}px`\n            },\n            {\n                key: 'nailRadius',\n                label: 'Nail size',\n                defaultValue: 1.5,\n                type: \"range\",\n                attr: {\n                    min: 0.5,\n                    max: 5,\n                    step: 0.25\n                },\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'nailsColor',\n                label: 'Nails color',\n                defaultValue: \"#ffffff\",\n                type: \"color\",\n            },\n            {\n                key: 'showNailNumbers',\n                label: 'Show nail numbers',\n                defaultValue: false,\n                type: \"checkbox\",\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'nailNumbersFontSize',\n                label: 'Nail numbers font size',\n                defaultValue: 10,\n                type: \"range\",\n                attr: {\n                    min: 6,\n                    max: 24,\n                    step: 0.5\n                },\n                displayValue: ({nailNumbersFontSize}) => `${nailNumbersFontSize}px`,\n                show: ({showNails, showNailNumbers}) => showNails && showNailNumbers\n            },\n        ]\n    },\n    {\n        key: 'background',\n        label: 'Background',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'darkMode',\n                label: 'Dark mode',\n                defaultValue: true,\n                type: 'checkbox'\n            },\n            {\n                key: 'customBackgroundColor',\n                label: 'Custom background color',\n                defaultValue: false,\n                type: 'checkbox',\n            },\n            {\n                key: 'backgroundColor',\n                label: 'Background color',\n                defaultValue: COLORS.dark,\n                type: 'color',\n                show: ({customBackgroundColor}) => customBackgroundColor\n            },\n        ]\n    }\n];\n\nclass StringArt {\n    constructor(canvas) {\n        if (!canvas) {\n            throw new Error(\"Canvas not specified!\");\n        }\n\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        const dpr = window.devicePixelRatio || 1;\n        const bsr = this.ctx.webkitBackingStorePixelRatio ||\n            this.ctx.mozBackingStorePixelRatio ||\n            this.ctx.msBackingStorePixelRatio ||\n            this.ctx.oBackingStorePixelRatio ||\n            this.ctx.backingStorePixelRatio || 1;\n        this.pixelRatio = dpr / bsr;\n    }\n\n    get configControls() {\n        return (this.controls ?? []).concat(COMMON_CONFIG_CONTROLS);\n    }\n\n    get defaultConfig() {\n        if (!this._defaultConfig) {\n            this._defaultConfig = flattenConfig(this.configControls);\n        }\n\n        return this._defaultConfig;\n    }\n\n    get config() {\n        return this._config ?? this.defaultConfig;\n    }\n\n    set config(value) {\n        this._config = Object.assign({}, this.defaultConfig, value);\n    }\n\n    getSize() {\n        const canvasScreenSize = [this.canvas.clientWidth, this.canvas.clientHeight];\n        return canvasScreenSize.map(v => v * this.pixelRatio);\n    }\n\n    setUpDraw() {\n        this.canvas.removeAttribute('width');\n        this.canvas.removeAttribute('height');\n        const [width, height] = this.size = this.getSize();\n        Object.assign(this, this.size);\n        this.canvas.setAttribute('width', width);\n        this.canvas.setAttribute('height', height);\n        this.center = this.size.map(value => value / 2);\n\n        if (this.nails) {\n            this.nails.setConfig(this.config);\n        } else {\n            this.nails = new Nails(this.canvas, this.config);\n        }\n\n        this.ctx.clearRect(0, 0, ...this.size);\n        this.ctx.lineWidth = this.config.stringWidth;\n    }\n\n    afterDraw() {\n        const {showNails, showNailNumbers} = this.config;\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill({ drawNumbers: showNailNumbers });\n        }\n    }\n\n    initDraw() {\n        this.setUpDraw(this.config);\n        const { showNails, showNailNumbers, darkMode, backgroundColor, customBackgroundColor } = this.config;\n\n        this.ctx.beginPath();\n        this.ctx.globalCompositeOperation = 'destination-over';\n        this.ctx.fillStyle = customBackgroundColor ? backgroundColor : darkMode ? COLORS.dark : COLORS.light;\n        this.ctx.fillRect(0, 0, ...this.size);\n\n        this.ctx.globalCompositeOperation = 'source-over';\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill({ drawNumbers: showNailNumbers });\n        }\n    }\n\n    /**\n     * Draws the string art on canvas\n     * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n     */\n    draw({position = Infinity} = {}) {\n        this.initDraw();\n        const { showStrings } = this.config;\n\n        if (showStrings) {\n            this.stringsIterator = this.generateStrings();\n            this.position = 0;\n\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        }\n    }\n\n    goto(position) {\n        if (position === this.position) {\n            return;\n        }\n\n        if (this.stringsIterator && position > this.position) {\n            while(!this.drawNext().done && this.position < position);\n        } else {\n            this.draw({ position });\n        }\n    }\n\n    drawNext() {\n        const result = this.stringsIterator.next();\n\n        if (result.done) {\n            this.afterDraw();\n        }\n        else {\n            this.position++;\n        }\n\n        return result;\n    }\n\n    generateStrings() {\n        throw new Error(\"generateStrings method not defined!\");\n    }\n\n    getStepCount() {\n        throw new Error(`'getStepCount' method not implemented for string art type \"${this.name}\"`);\n    }\n}\n\nfunction flattenConfig(configControls) {\n    return configControls.reduce((config, {key, defaultValue, children}) =>\n        children ? {\n            ...config,\n            ...flattenConfig(children)\n        } : {\n            ...config,\n            [key]: defaultValue\n        },\n    {});\n}\n\nexport default StringArt;\n","import Nails from \"../Nails.js\";\n\nconst PI2 = Math.PI * 2;\n\nexport default class Circle {\n    constructor(config) {\n        const { n, size, margin = 0, rotation = 0, center, radius, reverse = false } = this.config = config;\n        \n        this.center = center ?? size.map(v => v / 2);\n        this.radius = radius ?? Math.min(...this.center) - margin;\n\n        this.indexAngle = PI2 / n;\n        this.rotationAngle = -PI2 * rotation;\n        this.isReverse = reverse;\n    }\n\n    getPoint(index = 0) {\n        const realIndex = this.isReverse ? this.config.n - 1 - index : index;\n\n        return [\n            this.center[0] + Math.sin(realIndex * this.indexAngle + this.rotationAngle) * this.radius,\n            this.center[1] + Math.cos(realIndex * this.indexAngle + this.rotationAngle) * this.radius\n        ];\n    }\n\n    /**\n     * Given a Nails instance, uses it to draw the nails of this Circle\n     * @param {Nails} nails \n     * @param {{nailsNumberStart?: number, getNumber?: Function}} param1 \n     */\n    drawNails(nails, {nailsNumberStart = 0, getNumber} = {}) {\n        for (let i=0; i < this.config.n; i++) {\n            nails.addNail({point: this.getPoint(i), number: getNumber ? getNumber(i) : i + nailsNumberStart});\n        }\n    }\n\n    static rotationConfig = Object.freeze({\n        key: 'rotation',\n        label: 'Rotation',\n        defaultValue: 0,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 1 + 1/360,\n            step: 1 / 360,\n        },\n        displayValue: (config, { key }) => `${Math.round(config[key] * 360)}°`\n    });\n\n    static nailsConfig = Object.freeze({\n        key: 'n',\n        label: 'Number of nails',\n        defaultValue: 144,\n        type: \"range\",\n        attr: {\n            min: 3,\n            max: 300,\n            step: 1\n        }\n    });\n}","import Color from \"../helpers/Color.js\";\nimport StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Spiral extends StringArt{\n    id = \"spiral\";\n    name = \"Spiral\";\n    link = \"https://www.etsy.com/il-en/listing/840974781/boho-wall-decor-artwork-spiral-round\";\n    controls = [\n        {\n            ...Circle.nailsConfig,\n            defaultValue: 200\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 5,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 60,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 0.5,\n            type: \"range\",\n            attr: {\n                min: ({config: {n}}) => 1 / n,\n                max: 1,\n                step: ({config: {n}}) => 1 / n,\n            },\n            displayValue: ({n, innerLength}) => Math.round(n * innerLength)\n        },\n        {\n            ...Circle.rotationConfig,\n            defaultValue: 0.75,\n        },\n        Color.getConfig({ \n            defaults: {\n                isMultiColor: false,\n                color: \"#00ff7b\",\n            },\n            include: [\"color\"]\n        }),\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        const { n, rotation, layers, margin } = this.config;\n        this.layersCount = layers ?? 1;\n\n        this.circle = new Circle({\n            size: this.size,\n            n,\n            rotation,\n            margin,\n        });\n\n        this.color = new Color({\n            ...this.config,\n            colorCount: this.layersCount\n        });\n    }\n\n    *drawSpiral({ shift = 0, color = \"#ffffff\" } = {}) {\n        const {repetition, innerLength, n} = this.config;\n\n        let currentInnerLength = Math.round(innerLength * n);\n        let repetitionCount = 0;\n        this.ctx.strokeStyle = color;\n        let prevPoint = this.circle.getPoint(shift);\n        let isPrevPoint = false;\n\n        for(let i=0; currentInnerLength > 0; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...prevPoint);\n            const nextPointIndex = isPrevPoint ? i + shift : i + currentInnerLength + shift;\n\n            this.ctx.lineTo(...this.circle.getPoint(nextPointIndex));\n            repetitionCount++;\n            if (repetitionCount === repetition) {\n                currentInnerLength--;\n                repetitionCount = 0;\n                i++;\n                this.ctx.lineTo(...this.circle.getPoint(nextPointIndex + 1));\n                prevPoint = this.circle.getPoint(nextPointIndex + 2);\n            } else {\n                prevPoint = this.circle.getPoint(nextPointIndex + 1);\n            }\n\n            this.ctx.lineTo(...prevPoint);\n            this.ctx.stroke();\n\n            yield i;\n            isPrevPoint = !isPrevPoint;\n        }\n      \n    }\n\n    *generateStrings() {\n        yield* this.drawSpiral({ \n            color: this.color.getColor(0), \n        });\n    }\n\n    getStepCount() {\n        const {innerLength, repetition, n} = this.config;\n        return this.layersCount * Math.round(innerLength * n) * repetition;\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n}","import StringArt from \"../StringArt.js\";\n\nclass Spirals extends StringArt{\n    name = \"Spirals\";\n    id = \"spirals\";\n    link = \"https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 92,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'radiusIncrease',\n            label: 'Size',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 0.2\n            }\n        },\n        {\n            key: 'angleStep',\n            label: 'Angle step',\n            defaultValue: 0.05,\n            type: \"range\",\n            attr: {\n                min: 0.01,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'nSpirals',\n            label: 'Number of spirals',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'String color',\n            defaultValue: \"#00ddff\",\n            type: \"color\",\n        }\n    ];\n    \n    *generatePoints() {\n        const {\n            n, radiusIncrease, angleStep, nSpirals,\n        } = this.config;\n        \n        let currentRadius = 0;\n        let angle = 0;\n        const [centerx, centery] = this.center;\n\n        for (let i = 0; i < n; i++) {\n            for (let s = 0; s < nSpirals; s++) {\n                const rotation = s * 2 * Math.PI / nSpirals;\n                const point = [\n                    centerx + currentRadius * Math.sin(angle + rotation),\n                    centery + currentRadius * Math.cos(angle + rotation)\n                ];\n                yield {point, nailNumber: `${s}_${i}`};\n            }\n            \n            angle += angleStep;\n            currentRadius += radiusIncrease;\n        }\n    }\n\n    *generateStrings() {\n        const points = this.generatePoints();\n        let index = 0;\n        this.ctx.beginPath();\n        this.ctx.moveTo(...this.center);\n        this.ctx.strokeStyle = this.config.color;\n\n        let lastPoint = this.center;\n\n        for (const {point} of points) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...lastPoint);\n            lastPoint = point;\n            this.ctx.lineTo(...point);\n            this.ctx.strokeStyle = this.config.color;\n            this.ctx.stroke();\n            yield index++;\n        }\n    }\n\n    getStepCount() {\n        const { n, nSpirals } = this.config;\n        return n * nSpirals;\n    }\n\n    drawNails() {\n        const points = this.generatePoints();\n        for (const {point, nailNumber} of points) {\n            this.nails.addNail({point, number: nailNumber});\n        }\n    }\n}\n\nexport default Spirals;","import StringArt from \"../StringArt.js\";\n\nconst MARGIN = 20;\nconst SIDES = ['left', 'bottom', 'right', 'top'];\nconst SIDES_ORDER = ['left', 'bottom', 'right', 'top'];\n\nconst SIDES_ROTATION = {\n    left: 0,\n    bottom: Math.PI / 2,\n    right: Math.PI,\n    top: Math.PI * 1.5\n};\n\nclass Eye extends StringArt{\n    name = \"Eye\"\n    id = \"eye\"\n    link = \"https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails per side',\n            defaultValue: 82,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'angle',\n            label: 'Layer angle',\n            defaultValue: 30,\n            displayValue: ({angle}) => `${angle}°`,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 45,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'color1',\n                    label: 'String #1 color',\n                    defaultValue: \"#11e8bd\",\n                    type: \"color\",\n                },\n                {\n                    key: 'color2',\n                    label: 'String #2 color',\n                    defaultValue: \"#6fff52\",\n                    type: \"color\",\n                },\n                {\n                    key: 'colorPerLayer',\n                    label: 'Color per layer',\n                    defaultValue: false,\n                    type: 'checkbox'\n                },\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n\n        const { n, angle } = this.config;\n\n        this.maxSize = Math.min(...this.size) - 2 * MARGIN;\n        this.nailSpacing = this.maxSize / (n - 1);\n        this.layerAngle = angle * Math.PI / 180;\n    }\n\n    // Sides: top, right, bottom, left\n    getPoint({index, angle, layerStart, rotation}) {\n        const theta = angle + rotation;\n\n        const point = { \n            x: layerStart.x, \n            y: layerStart.y + this.nailSpacing * index\n        };\n\n        const pivot = { x: this.center[0], y: this.center[1] };\n\n        const cosAngle = Math.cos(theta);\n        const sinAngle = Math.sin(theta);\n\n        const position = [\n            (cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x),\n            (sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y),\n        ];\n        return position;\n    }\n\n    *drawSide({ side, color = '#ffffff', angle, size, layerStart, layerStringCount }) {\n        const sideIndex = SIDES.indexOf(side);\n        const nextSide = SIDES[sideIndex === SIDES.length - 1 ? 0 : sideIndex + 1];\n        const rotation = SIDES_ROTATION[side];\n        const nextSideRotation = SIDES_ROTATION[nextSide];\n        \n        const sideProps = { layerStringCount, size, layerStart, angle };\n        \n        for(let i=0; i <= layerStringCount; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...this.getPoint({ side, index: i, rotation, ...sideProps}));\n            this.ctx.lineTo(...this.getPoint({side: nextSide, index: i, rotation: nextSideRotation, ...sideProps}));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            yield i;\n        }\n    }\n\n    _getLayerProps(layerIndex) {\n        const colors = this._getLayerColors(layerIndex);\n        const layerAngle = this.layerAngle * layerIndex;\n        const layerSize = this.maxSize / Math.pow(Math.cos(this.layerAngle) + Math.sin(this.layerAngle), layerIndex);\n        const layerStart = { \n            x: this.center[0] - layerSize / 2, \n            y: this.center[1] - layerSize / 2\n        };\n        const layerStringCount = Math.floor(layerSize / this.nailSpacing);\n\n        return {\n            colors, layerAngle, layerSize, layerStart, layerStringCount\n        };\n    }\n\n    _getLayerColors(layerIndex) {\n        const { color1, color2, colorPerLayer } = this.config;\n        if (colorPerLayer) {\n            const layerColor = layerIndex % 2 ? color1 : color2;\n            return [layerColor, layerColor, layerColor, layerColor];\n        }\n        else {\n            return [color2, color1, color2, color1];\n        }\n    }\n\n    *drawLayer(layerIndex) {\n        const {\n            colors, layerAngle, layerSize, layerStart, layerStringCount\n        } = this._getLayerProps(layerIndex);\n\n        for (let i = 0; i < SIDES.length; i++) {\n            yield* this.drawSide({ \n                color: colors[i], \n                side: SIDES_ORDER[i],\n                angle: layerAngle,\n                size: layerSize,\n                layerStart,\n                layerStringCount\n            });\n        }\n    }\n\n    *generateStrings() {\n        const {layers} =  this.config;\n        for(let layer = layers - 1; layer >= 0; layer--) {\n            yield* this.drawLayer(layer);\n        }\n    }\n\n    getStepCount() {\n        let count = 0;\n        const {layers, angle, n} = this.config;\n        const layerAngle = angle * Math.PI / 180;\n        const maxSize = Math.min(this.canvas.clientWidth, this.canvas.clientHeight) - 2 * MARGIN;\n        const nailSpacing = maxSize / (n - 1);\n\n        for(let layer = 0; layer < layers; layer++) {\n            const layerSize = maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n            count += 4 * (Math.floor(layerSize / nailSpacing) + 1)\n        }\n\n        return count;\n    }\n\n    drawNails() {\n        const {layers} =  this.config;\n        for(let layer = layers - 1; layer >= 0; layer--) {\n            const {\n                layerAngle: angle, layerSize: size, layerStart, layerStringCount\n            } = this._getLayerProps(layer);\n\n            for (let s = 0; s < SIDES.length; s++) {\n                const sideOrder = SIDES_ORDER[s];\n                const rotation = SIDES_ROTATION[sideOrder];\n\n                for(let i=0; i <= layerStringCount; i++) {\n                    const sideProps = { layerStringCount, size, layerStart, angle };\n                    this.nails.addNail({\n                        point: this.getPoint({ sideOrder, index: i, rotation, ...sideProps}),\n                        number: `${layer}_${s}_${i}`\n                    });\n                }\n            }\n        }\n    }\n}\n\nexport default Eye;","import Spiral from \"./string_art_types/Spiral.js\";\nimport Spirals from \"./string_art_types/Spirals.js\";\nimport Wave from './string_art_types/Wave.js';\nimport Eye from './string_art_types/Eye.js';\nimport TimesTables from './string_art_types/TimesTables.js';\nimport Star from \"./string_art_types/Star.js\";\nimport Assymetry from \"./string_art_types/Assymetry.js\";\nimport Circles from './string_art_types/Circles.js';\n\nconst patternTypes = [Star, Assymetry, TimesTables, Spiral, Spirals, Wave, Eye, Circles];\n\nexport default patternTypes;\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Star extends StringArt{\n    name = \"Star\";\n    id = \"star\";\n    link = \"https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj\";\n    controls = [\n        {\n            key: 'sides',\n            label: 'Sides',\n            defaultValue: 3,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'sideNails',\n            label: 'Nails per side',\n            defaultValue: 40,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        Circle.rotationConfig,\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'innerColor',\n                    label: 'Star color',\n                    defaultValue: \"#2ec0ff\",\n                    type: \"color\",\n                },\n                {\n                    key: 'outterColor',\n                    label: 'Outter color',\n                    defaultValue: \"#2a82c6\",\n                    type: \"color\",\n                },\n            ]\n        }\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, sides} = this.config;\n            const extraNails = n % sides;\n            this._n = n - extraNails;\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const { sides, rotation, sideNails, margin = 0 } = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: sideNails * sides,\n            margin,\n            rotation,\n        });\n\n        this.sideAngle = Math.PI * 2 / sides;\n        this.nailSpacing = this.circle.radius / sideNails;\n        this.starCenterStart = (sideNails % 1) * this.nailSpacing;\n\n        this.sides = new Array(sides).fill(null).map((_, side) => {\n            const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n            const circlePointsStart = side * sideNails;\n\n            return {\n                sinSideAngle: Math.sin(sideAngle),\n                cosSideAngle: Math.cos(sideAngle),\n                circlePointsStart,\n                circlePointsEnd: circlePointsStart + sideNails\n            };\n        });\n    }\n\n    getStarPoint({ side, sideIndex }) {\n        const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n        const {sinSideAngle, cosSideAngle} = this.sides[side];\n        const [centerX, centerY] = this.circle.center;\n\n        return [\n            centerX + sinSideAngle * radius,\n            centerY + cosSideAngle * radius\n        ];\n    }\n\n    *generateStarPoints({ reverseOrder  = false} = {}) {\n        const {sides, sideNails} = this.config;\n\n        for (let side = 0; side < sides; side++) {\n            const prevSide = side === 0 ? sides - 1 : side - 1;\n            for (let i=0; i < sideNails; i++) {\n                const sideIndex = reverseOrder ? sideNails - i : i;\n                yield { side, prevSide, sideIndex, point: this.getStarPoint({ side, sideIndex }) };\n            }\n        }\n    }\n\n    *drawStar() {\n        const {innerColor, sideNails} = this.config;\n\n        this.ctx.strokeStyle = innerColor;\n        let prevPoint;\n\n        for (const { prevSide, sideIndex, point} of this.generateStarPoints()) {\n            this.ctx.beginPath();\n\n            if (sideIndex && !(sideIndex % 2)) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...point);\n            } else {\n                this.ctx.moveTo(...point);\n            }\n\n            const prevSideIndex = sideNails - sideIndex;\n            this.ctx.lineTo(...this.getStarPoint({ side: prevSide, sideIndex: prevSideIndex}))\n            prevPoint = point;\n            this.ctx.stroke();\n            yield;\n        }\n    }\n\n    *drawCircle() {\n        const {outterColor} = this.config;\n\n        let prevCirclePoint;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = outterColor;\n        for (const { side, prevSide, sideIndex, point} of this.generateStarPoints({ reverseOrder: true })) {\n            this.ctx.beginPath();\n            if (!prevCirclePoint) {\n                prevCirclePoint = this.circle.getPoint(this.sides[prevSide].circlePointsStart);\n            }\n\n            this.ctx.moveTo(...prevCirclePoint);\n\n            this.ctx.lineTo(...point);\n            this.ctx.stroke();\n\n            yield;\n\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            const nextPointIndex = isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex\n                : this.sides[side].circlePointsStart + sideIndex;\n\n            const nextPoint = this.circle.getPoint(nextPointIndex);\n            this.ctx.lineTo(...nextPoint);\n\n            prevCirclePoint = this.circle.getPoint(isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex + 1\n                : this.sides[side].circlePointsStart + sideIndex - 1);\n\n            this.ctx.lineTo(...prevCirclePoint);\n\n            this.ctx.stroke();\n            isPrevSide = !isPrevSide;\n            yield;\n        }\n    }\n\n    *generateStrings() {\n        yield* this.drawCircle();\n        yield* this.drawStar();\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n\n        for (const {point, side, sideIndex} of this.generateStarPoints()) {\n            this.nails.addNail({ point, number: sideIndex ? `${side}_${sideIndex}` : 0 });\n        }\n\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        const {sides, sideNails} = this.config;\n        const starCount = sideNails * sides;\n        return starCount * 3; // Once for each side + two more times for the side's circle\n    }\n}\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Assymetry extends StringArt{\n    name = \"Assymetry\";\n    id = \"assymetry\";\n    link = \"https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for\";\n    controls = [\n        Circle.nailsConfig,\n        Circle.rotationConfig,\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: [\n                {\n                    key: 'layer1',\n                    label: 'Layer 1',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show1',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size1',\n                            label: 'Size',\n                            defaultValue: 0.25,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size1, n}) => Math.round(n * size1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'end1',\n                            label: 'End Position',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n,\n                            },\n                            displayValue: ({end1, n}) => Math.round(n * end1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'color1',\n                            label: 'Color',\n                            defaultValue: \"#a94fb0\",\n                            type: \"color\",\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'reverse1',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show1}) => show1\n                        },\n                    ]\n                },\n                {\n                    key: 'layer2',\n                    label: 'Layer 2',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show2',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size2',\n                            label: 'Size',\n                            defaultValue: 0.125,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size2, n}) => Math.round(n * size2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'end2',\n                            label: 'End Position',\n                            defaultValue: 0.888,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'color2',\n                            label: 'Color',\n                            defaultValue: \"#ec6ad0\",\n                            type: \"color\",\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'reverse2',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show2}) => show2\n                        },\n                    ]\n                },\n                {\n                    key: 'layer3',\n                    label: 'Layer 3',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show3',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size3',\n                            label: 'Size',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size3, n}) => Math.round(n * size3),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'end3',\n                            label: 'End Position',\n                            defaultValue: 0.826,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'color3',\n                            label: 'Color',\n                            defaultValue: \"#f08ad5\",\n                            type: \"color\",\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'reverse3',\n                            label: 'Reverse',\n                            defaultValue: true,\n                            type: 'checkbox',\n                            show: ({show3}) => show3\n                        },\n                    ]\n                }\n            ]\n        },\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n\n    getSetUp() {\n        const { rotation, n, margin = 0 } = this.config;\n        const circle = new Circle({\n            size: this.getSize(),\n            n,\n            margin,\n            rotation: rotation - 0.25,\n        });\n\n        let lineSpacing = circle.indexAngle * circle.radius;\n        const lineNailCount = Math.floor(circle.radius / lineSpacing) - 1;\n        lineSpacing += (circle.radius - lineSpacing * lineNailCount) / lineNailCount;\n        const firstCirclePoint = circle.getPoint(0);\n        const totalNailCount = lineNailCount + n;\n        const totalIndexCount = totalNailCount + lineNailCount;\n        const layers = new Array(3).fill(null)\n            .map((_, i) => getLayer.call(this, i + 1))\n            .filter(({enable}) => enable)\n\n        return {\n            circle,\n            lineSpacing,\n            lineNailCount,\n            firstCirclePoint,\n            layers,\n            totalNailCount,\n            totalIndexCount,\n        };\n\n        function getLayer(layerIndex) {\n            const size = Math.round(n * this.config['size' + layerIndex]) + lineNailCount\n            return {\n                size,\n                endIndex: Math.round(this.config['end' + layerIndex] * (totalNailCount + lineNailCount)) - size,\n                color: this.config['color' + layerIndex],\n                enable: this.config['show' + layerIndex],\n                isReverse: this.config['reverse' + layerIndex],\n            };\n        }\n    }\n\n    /**\n     * Returns the position of a point on the line\n     * @param {index of the point in the circle, 0 is the center} index\n     */\n    getPoint(index) {\n        if (index < this.lineNailCount || index > this.totalNailCount) {\n            const linePosition = index < this.lineNailCount ? this.lineNailCount - index : index - this.totalNailCount;\n\n            const indexLength = (linePosition) * this.lineSpacing;\n            return [\n                this.firstCirclePoint[0] - indexLength * Math.sin(this.circle.rotationAngle),\n                this.firstCirclePoint[1] - indexLength * Math.cos(this.circle.rotationAngle)\n            ];\n        } else {\n            const circleIndex = index - this.lineNailCount;\n            return this.circle.getPoint(circleIndex);\n        }\n    }\n\n    *drawCircle({endIndex, color, isReverse, size}) {\n        let prevPoint;\n        let prevPointIndex;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = color;\n        const self = this;\n        const advance = isReverse ? -1 : 1;\n\n        for(let index = 0; index <= endIndex; index++) {\n            this.ctx.beginPath();\n\n            if (prevPoint) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...this.getPoint(prevPointIndex + advance));\n            } else {\n                this.ctx.moveTo(...this.getPoint(getPointIndex(index)));\n            }\n\n            prevPointIndex = getPointIndex(isPrevSide ? index : index + size);\n            prevPoint = this.getPoint(prevPointIndex);\n            this.ctx.lineTo(...prevPoint);\n            this.ctx.stroke();\n\n            yield;\n\n            isPrevSide = !isPrevSide;\n        }\n\n        function getPointIndex(index) {\n            return isReverse ? self.totalIndexCount - index : index;\n        }\n    }\n\n    *generateStrings() {\n        for (const layer of this.layers) {\n            yield* this.drawCircle(layer);\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails, { nailsNumberStart: this.lineNailCount });\n\n        for (let i=0; i < this.lineNailCount; i++) {\n            this.nails.addNail({ point: this.getPoint(i), number: i });\n        }\n    }\n\n    getStepCount() {\n        const {layers} = this.getSetUp();\n        return layers.reduce((stepCount, layer) =>\n            stepCount + layer.endIndex + 1, 0\n        );\n    }\n}\n","import Color from \"../helpers/Color.js\";\nimport StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nconst MARGIN = 20;\n\nexport default class TimesTables extends StringArt{\n    name = \"Times Tables\";\n    id = \"times_tables\";\n    link = \"https://www.youtube.com/watch?v=LWin7w9hF-E&ab_channel=Jorgedelatierra\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 180,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 240,\n                step: 1\n            }\n        },\n        {\n            key: 'base',\n            label: 'Multiplication',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 99,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 7,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        Circle.rotationConfig,\n        Color.getConfig({ defaults: {\n            isMultiColor: true,\n            multicolorRange: 180,\n            multicolorStart: 256,\n            color: \"#ff4d00\"\n        }}),\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, layers} = this.config;\n            const extraNails = n % layers;\n            this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const {layers, rotation} = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: this.n,\n            margin: MARGIN,\n            rotation,\n        });\n        \n        this.color = new Color({\n            ...this.config,\n            colorCount: layers,\n        });\n\n        this.layerShift = Math.floor(this.n / layers);\n    }\n\n    *drawTimesTable({ shift = 0, color = \"#f00\", steps, time }) {\n        const {base} = this.config;\n        const n = this.n;\n        const stepsToRender = steps ?? n;\n\n        let point = this.circle.getPoint(shift);\n\n        for(let i=1; i <= stepsToRender; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            point = this.circle.getPoint(i + shift);\n            this.ctx.lineTo(...point);\n            const toIndex = (i * base) % n;\n            this.ctx.lineTo(...this.circle.getPoint(toIndex + shift));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            \n            yield { instructions: `${i - 1} → ${i} → ${toIndex} → ${i}`, index: time * n + i };\n        }\n    }\n\n    *generateStrings() {\n        const {layers} = this.config;\n\n        for(let time = 0; time < layers; time++) {\n            const color = this.color.getColor(time);\n            yield* this.drawTimesTable({ \n                time,\n                color, \n                shift: this.layerShift * time,\n            });\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        return this.config.layers * this.n;\n    }\n}\n            ","import Color from \"../helpers/Color.js\";\nimport StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\nimport Spiral from \"./Spiral.js\";\n\nexport default class Wave extends Spiral{\n    id = \"wave\";\n    name = \"Wave\";\n    link = \"https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1\";\n    controls = [\n        {\n            ...Circle.nailsConfig,\n            defaultValue: 200\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 1,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 60,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 0.5,\n            type: \"range\",\n            attr: {\n                min: ({config: {n}}) => 1 / n,\n                max: 1,\n                step: ({config: {n}}) => 1 / n,\n            },\n            displayValue: ({n, innerLength}) => Math.round(n * innerLength)\n        },\n        {\n            ...Circle.rotationConfig,\n            defaultValue: 0.5,\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 11,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'layerSpread',\n            label: 'Layer spread',\n            defaultValue: 0.075,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: ({config: {n}}) => 1 / n\n            },\n            displayValue: ({layerSpread, n}) => Math.round(layerSpread * n)\n        },\n        Color.getConfig({ defaults: {\n            isMultiColor: true,\n            multicolorRange: 216,\n            multicolorStart: 263,\n            color: \"#ffffff\",\n            multicolorByLightness: true,\n            minLightness: 10,\n            maxLightness: 90\n        }}),\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        const { n, layerSpread } = this.config;\n        this.layerShift = Math.round(n * layerSpread);\n    }\n\n    *generateStrings() {\n        for(let layer = 0; layer < this.layersCount; layer++) {\n            yield* this.drawSpiral({ \n                color: this.color.getColor(layer), \n                shift: -this.layerShift * layer \n            });\n        }\n    }\n}","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Circles extends StringArt {\n    name = \"Circles\";\n    id = \"circles\";\n    link = \"https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Circle nails',\n            defaultValue: 80,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'minNailDistance',\n            label: 'Min nail distance',\n            defaultValue: 20,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'Color',\n            defaultValue: \"#ec6ad0\",\n            type: \"color\",\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: [\n                {\n                    key: 'layer1',\n                    label: 'Layer 1',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show1',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius1',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'x1',\n                            label: 'Position X',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'y1',\n                            label: 'Position Y',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation1',\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'reverse1',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show1}) => show1\n                        },\n                    ]\n                },\n                {\n                    key: 'layer2',\n                    label: 'Layer 2',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show2',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius2',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'x2',\n                            label: 'Position X',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'y2',\n                            label: 'Position Y',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation2',\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'reverse2',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show2}) => show2\n                        },\n                    ]\n                },\n                {\n                    key: 'layer3',\n                    label: 'Layer 3',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show3',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius3',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'x3',\n                            label: 'Position X',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'y3',\n                            label: 'Position Y',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation3',\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'reverse3',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show3}) => show3\n                        },\n                    ]\n                }\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n\n    getSetUp() {\n        const { n, margin = 0, minNailDistance } = this.config;\n        const size = this.getSize();\n\n        const maxRadius = Math.min(...size.map(v => v - 2 * margin)) / 2;\n        const layers = new Array(3).fill(null)\n            .map((_, i) => getLayer.call(this, i + 1))\n            .filter(({enable}) => enable)\n\n        const maxShapeNailsCount = Math.max(...layers.map(({circle}) => circle.config.n));\n\n        return {\n            layers,\n            maxShapeNailsCount,\n        };\n\n        function getLayer(layerIndex) {\n            const prop = prop => this.config[prop + layerIndex];\n            \n            const props = {\n                enable: prop('show'),\n                isReverse: prop('reverse'),\n                position: [prop('x'), prop('y')],\n                radius: maxRadius * prop('radius'),\n                rotation: prop('rotation'),\n            };\n\n            const circumsference = Math.PI * 2 * props.radius;\n            const circleNails = Math.min(n, Math.floor(circumsference / minNailDistance));\n\n            const circle = new Circle({\n                radius: props.radius,\n                center: props.position.map((v, i) => props.radius + margin + (size[i] - (props.radius + margin) * 2) * v),\n                n: circleNails,\n                rotation: props.rotation,\n                reverse: props.isReverse,\n            });\n\n            return {\n                circle,\n                ...props\n            };\n        }\n    }\n\n    getPoint(layer, index) {\n        const {circle} = layer;\n        let circleIndex = Math.round(index * circle.config.n / this.maxShapeNailsCount);\n        return circle.getPoint(circleIndex);\n    }\n\n    *generateStrings() {\n        const {n, color} = this.config;\n\n        this.ctx.strokeStyle = color;\n        let prevCirclePoint;\n\n        for (let i = 0; i < this.maxShapeNailsCount; i++) {\n            for(let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n                const layer = this.layers[layerIndex];\n                this.ctx.beginPath();\n                this.ctx.moveTo(...(prevCirclePoint ?? this.getPoint(layer, i)));\n\n                if (layerIndex === 0 && i) {\n                    this.ctx.lineTo(...this.getPoint(layer, i));\n                }\n\n                let nextLayerIndex = layerIndex + 1;\n                if (nextLayerIndex === this.layers.length) {\n                    nextLayerIndex = 0;\n                }\n\n                prevCirclePoint = this.getPoint(this.layers[nextLayerIndex], i);\n                this.ctx.lineTo(...prevCirclePoint)\n                this.ctx.stroke();\n                yield;\n            }\n        }\n        \n    }\n\n    drawNails() {\n        const n = this.config;\n        this.layers.forEach(({circle}, layerIndex) => circle.drawNails(this.nails, { \n            getNumber: i => `${layerIndex + 1}_${i + 1}` \n        }));\n    }\n\n    getStepCount() {\n        const {layers, maxShapeNailsCount} = this.getSetUp();\n        return layers.length * maxShapeNailsCount - 1;\n    }\n}\n","const elements = {\n    controls: document.querySelector(\"#controls\"),\n    sidebarForm: document.querySelector(\"#sidebar_form\"),\n};\n\nconst EVENTS = new Set(['input', 'change']);\nconst STATE_LOCAL_STORAGE_KEY = 'controls_state';\n\nlet inputTimeout;\n\nexport default class EditorControls {\n    constructor({pattern}) {\n        this.pattern = pattern;\n        this.state = this._getState() ?? { groups: {}};\n\n        this.eventHandlers = {\n            input: new Set(),\n            change: new Set()\n        }\n\n        this._wrappedOnInput = e => this._onInput(e);\n        this._toggleFieldset = e => {\n            if (e.target.nodeName === \"LEGEND\" ) {\n                e.target.parentElement.classList.toggle(\"minimized\");\n                const groupId = e.target.parentElement.dataset.group;\n                this.state = { ...this.state, groups: { ...this.state.groups, [groupId]: !e.target.parentElement.classList.contains(\"minimized\")}};\n                this._updateState(this.state);\n            }\n        };\n\n        this._toggleFieldSetOnEnter = e => {\n            if (e.target.nodeName === \"LEGEND\" && e.key === \"Enter\") {\n                this._toggleFieldset(e);\n            }\n        }\n\n        elements.controls.addEventListener(\"input\", this._wrappedOnInput);\n        elements.sidebarForm.addEventListener(\"click\", this._toggleFieldset);\n        elements.sidebarForm.addEventListener(\"keydown\", this._toggleFieldSetOnEnter);\n        this.controlElements = {};\n        this.renderControls();\n    }\n\n    destroy() {\n        elements.controls.removeEventListener(\"input\", this._wrappedOnInput);\n        elements.sidebarForm.removeEventListener(\"click\", this._toggleFieldset);\n        elements.sidebarForm.removeEventListener(\"keydown\", this._toggleFieldSetOnEnter);\n        elements.controls.innerHTML = \"\";\n    }\n\n    addEventListener(event, eventHandler) {\n        if (!EVENTS.has(event)) {\n            throw new Error(`Unsupported event for EditorControls, \"${event}\"!`);\n        }\n\n        if (!(eventHandler instanceof Function)) {\n            throw new Error('Invalid event handler.');\n        }\n\n        this.eventHandlers[event].add(eventHandler);\n    }\n\n    _triggerEvent(event, eventData) {\n        for(const eventHandler of this.eventHandlers[event]) {\n            eventHandler(eventData);\n        }\n    }\n\n    _onInput(e) {\n        requestAnimationFrame(() => {\n            clearTimeout(inputTimeout);\n\n            const inputValue = getInputValue(e.target.type, e.target);\n            const controlKey = e.target.id.replace(/^config_/, '');\n\n            this.pattern.config = Object.freeze({\n                ...this.pattern.config,\n                [controlKey]: inputValue\n            });\n\n            const {config, displayValue} = this.controlElements[controlKey];\n            if (displayValue) {\n                const formattedValue = config.displayValue ? config.displayValue(this.pattern.config, config) : e.target.value;\n                displayValue.innerText = formattedValue;\n            }\n\n            const eventData = Object.freeze({\n                control: controlKey,\n                value: inputValue,\n                originalEvent: e,\n                pattern: this.pattern,\n            });\n\n            this._triggerEvent('input', eventData);\n\n            inputTimeout = setTimeout(() => {\n                this._triggerEvent('change', eventData);\n                this.updateControlsVisibility();\n            }, 100);\n        });\n    }\n\n    _getState() {\n        const state = localStorage.getItem(STATE_LOCAL_STORAGE_KEY);\n        if (state) {\n            try {\n                return JSON.parse(state);\n            } catch(e) {\n                return null;\n            }\n        }\n\n        return null;\n    }\n\n    _updateState(newState) {\n        if (newState) {\n            localStorage.setItem(STATE_LOCAL_STORAGE_KEY, JSON.stringify(newState));\n        } else {\n            localStorage.removeItem(STATE_LOCAL_STORAGE_KEY);\n        }\n    }\n\n    updateControlsVisibility(configControls = this.pattern.configControls) {\n        configControls.forEach(control => {\n            if (control.show) {\n                const shouldShowControl = control.show(this.pattern.config);\n                const controlEl = this.controlElements[control.key].control;\n                if (controlEl) {\n                    if (shouldShowControl) {\n                        controlEl.removeAttribute('hidden');\n                    } else {\n                        controlEl.setAttribute('hidden', 'hidden');\n                    }\n                }\n            }\n\n            if (control.isDisabled) {\n                const shouldDisableControl = control.isDisabled(this.pattern.config);\n                const inputEl = this.controlElements[control.key].input;\n                if (inputEl) {\n                    if (shouldDisableControl) {\n                        inputEl.setAttribute('disabled', 'disabled');\n                    } else {\n                        inputEl.removeAttribute('disabled');\n                    }\n                }\n            }\n\n            if (control.children) {\n                this.updateControlsVisibility(control.children);\n            }\n        });\n    }\n\n    updateInputs(config) {\n        Object.entries(config).forEach(([key, value]) => {\n            const {input, value: valueEl} = this.controlElements[key];\n            if (input) {\n                if (input.type === \"checkbox\") {\n                    input.checked = value;\n                } else {\n                    input.value = value;\n                }\n                if (valueEl) {\n                    valueEl.innerText = value;\n                }\n            }\n        });\n    }\n\n    renderControls(containerEl = elements.controls, _configControls) {\n        const configControls = _configControls ?? this.pattern.configControls;\n        containerEl.innerHTML = \"\";\n        const controlsFragment = document.createDocumentFragment();\n\n\n        configControls.forEach(control => {\n            const controlId = `config_${control.key}`;\n            const controlElements = this.controlElements[control.key] = { config: control };\n\n            let controlEl;\n\n            if (control.type === \"group\") {\n                controlEl = document.createElement(\"fieldset\");\n                controlEl.setAttribute('data-group', control.key);\n                const groupTitleEl = document.createElement(\"legend\");\n                groupTitleEl.setAttribute(\"tabindex\", \"0\");\n                groupTitleEl.innerText = control.label;\n                controlEl.appendChild(groupTitleEl);\n                controlEl.className = \"control control_group\";\n                if (control.defaultValue === \"minimized\") {\n                    controlEl.classList.add('minimized');\n                    this.state.groups[control.key] = false;\n                }\n                const childrenContainer = document.createElement('div');\n                controlEl.appendChild(childrenContainer);\n                this.renderControls(childrenContainer, control.children);\n            }\n            else {\n                controlEl = document.createElement(\"div\");\n                controlEl.className = \"control\";\n\n                const label = document.createElement(\"label\");\n                label.innerHTML = control.label;\n                label.setAttribute(\"for\", controlId);\n\n                const inputEl = controlElements.input = document.createElement(\"input\");\n                inputEl.setAttribute(\"type\", control.type);\n                const inputValue = this.pattern.config[control.key] ?? control.defaultValue;\n\n                if (control.attr) {\n                    Object.entries(control.attr).forEach(([attr, value]) => {\n                        const realValue = value instanceof Function ? value(this.pattern) : value;\n                        inputEl.setAttribute(attr, realValue)\n                    });\n                }\n\n                if (control.type === \"checkbox\") {\n                    inputEl.checked = inputValue;\n                    controlEl.appendChild(inputEl);\n                    controlEl.appendChild(label);\n                } else {\n                    controlEl.appendChild(label);\n                    controlEl.appendChild(inputEl);\n                    inputEl.value = inputValue;\n                    const inputValueEl = controlElements.displayValue = document.createElement('span');\n                    inputValueEl.id = `config_${control.key}_value`;\n                    inputValueEl.innerText = control.displayValue ? control.displayValue(this.pattern.config, control) : inputValue;\n                    inputValueEl.className = \"control_input_value\";\n                    controlEl.appendChild(inputValueEl);\n                }\n                inputEl.id = controlId;\n            }\n\n            this.controlElements[control.key].control = controlEl;\n            controlEl.id = `control_${control.key}`;\n            controlsFragment.appendChild(controlEl);\n        });\n\n        containerEl.appendChild(controlsFragment);\n        this.updateGroupsState();\n        requestAnimationFrame(() => this.updateControlsVisibility())\n    }\n\n    updateGroupsState() {\n        const groups = elements.sidebarForm.querySelectorAll('[data-group]');\n        groups.forEach(groupEl => {\n            const groupId = groupEl.dataset.group;\n            const groupState = this.state.groups[groupId];\n            if (typeof groupState === 'boolean') {\n                if (groupState) {\n                    groupEl.classList.remove('minimized');\n                } else {\n                    groupEl.classList.add('minimized');\n                }\n            }\n        });\n    }\n}\n\n\nfunction getInputValue(type, inputElement) {\n    switch(type) {\n        case 'range':\n            return parseFloat(inputElement.value);\n        case 'checkbox':\n            return inputElement.checked;\n        case 'number':\n            return parseFloat(inputElement.value);\n        default:\n            return inputElement.value;\n    }\n}\n","const sizeControls = document.querySelector(\"#size_controls\");\n\nconst elements = {\n    sizeSelect: sizeControls.querySelector(\"#size_select\"),\n    sizeCustom: sizeControls.querySelector(\"#size_custom\"),\n    width: sizeControls.querySelector(\"#size_custom_width\"),\n    height: sizeControls.querySelector(\"#size_custom_height\"),\n    orientationSelect: sizeControls.querySelector(\"#size_orientation_select\"),\n};\n\nfunction cmToPixels(cm, dpi = 300) {\n    return Math.floor(cm / 2.54 * dpi);\n}\n\nconst SCREEN_SIZE = [\n    Math.floor(window.screen.width),\n    Math.floor(window.screen.height),\n];\n\nconst SIZES = [\n    { id: 'fit', name: 'Fit to screen' },\n    { id: 'A4', value: [20, 28].map(v => cmToPixels(v)), orientationSelect: true },\n    { id: 'A3', value: [28, 40].map(v => cmToPixels(v)), orientationSelect: true },\n    { id: 'screen', name: `Screen size (${SCREEN_SIZE.join('x')})`, value: SCREEN_SIZE},\n    { id: 'custom', name: 'Custom...' }\n];\n\nexport default class EditorSizeControls {\n    element = document.querySelector(\"#size_controls\");\n\n    constructor({ getCurrentSize }) {\n        const sizeOptionsFragment = document.createDocumentFragment();\n        SIZES.forEach(size => {\n            const sizeListItem = document.createElement('option');\n            sizeListItem.setAttribute('value', size.id);\n            sizeListItem.innerText = size.name ?? size.id;\n            sizeOptionsFragment.appendChild(sizeListItem);\n        });\n        elements.sizeSelect.appendChild(sizeOptionsFragment)\n        this.selectedSize = SIZES[0];\n\n        elements.sizeSelect.addEventListener(\"change\", e => {\n            const selectedSizeId = e.target.value;\n            const size = SIZES.find(({id}) => id === selectedSizeId);\n            this.selectedSize = size;\n\n            if (size.id === \"custom\") {\n                elements.sizeCustom.removeAttribute('hidden');\n                const [width, height] = getCurrentSize();\n                elements.width.value = width;\n                elements.height.value = height;\n            } else {\n                elements.sizeCustom.setAttribute('hidden', 'hidden');\n                this._notifyOnChange(this.getValue());\n            }\n\n            if (size.orientationSelect) {\n                elements.orientationSelect.removeAttribute('hidden');\n            } else {\n                elements.orientationSelect.setAttribute('hidden', 'hidden');\n            }\n        });\n\n        elements.orientationSelect.addEventListener(\"change\", e => {\n            this._notifyOnChange(this.getValue());\n        });\n\n        elements.sizeCustom.addEventListener(\"focusin\", e => {\n            e.target.select();\n        });\n\n        elements.sizeCustom.addEventListener('input', () => {\n            this._notifyOnChange([\n                elements.width.value ? parseInt(elements.width.value) : null,\n                elements.height.value ? parseInt(elements.height.value) : null\n            ]);\n        });\n    }\n\n    _notifyOnChange([width, height] = []) {\n        this.element.dispatchEvent(new CustomEvent('sizechange', { detail: { width, height }}));\n    }\n\n    getValue() {\n        if (this.selectedSize.id === \"custom\") {\n            return [parseInt(elements.width.value, 10), parseInt(elements.height.value, 10)];\n        } else {\n            let value = this.selectedSize.value;\n            if (this.selectedSize.orientationSelect && elements.orientationSelect.value === \"horizontal\") {\n                value = Array.from(value).reverse();\n            }\n            return value;\n        }\n\n    }\n}\n","import Player from \"./editor/Player.js\";\nimport patternTypes from \"./pattern_types.js\";\nimport EditorControls from \"./editor/EditorControls.js\";\nimport EditorSizeControls from \"./editor/EditorSizeControls.js\";\n\nconst elements = {\n    canvas: document.querySelector(\"canvas\"),\n    patternSelector: document.querySelector(\"#pattern_select\"),\n    patternLink: document.querySelector(\"#pattern_link\"),\n    downloadBtn: document.querySelector(\"#download_btn\"),\n    downloadNailsBtn: document.querySelector(\"#download_nails_btn\"),\n};\n\nconst patterns = patternTypes.map(Pattern => new Pattern(elements.canvas));\n\nlet currentPattern;\nconst player = new Player(document.querySelector(\"#player\"));\nconst sizeControls = new EditorSizeControls({\n    getCurrentSize: () => [\n        elements.canvas.clientWidth,\n        elements.canvas.clientHeight\n    ]\n});\n\nlet controls;\n\nwindow.addEventListener('load', main);\n\nfunction main() {\n    initRouting();\n    initSize();\n    initControls();\n\n    if (history.state?.pattern) {\n        updateState(history.state);\n    } else {\n        const queryParams = new URLSearchParams(document.location.search);\n        const queryPattern = queryParams.get('pattern');\n\n        if (queryPattern) {\n            const config = queryParams.get('config');\n            updateState({ pattern: queryPattern, config })\n        } else {\n            selectPattern(patterns[0]);\n        }\n    }\n\n    window.addEventListener(\"resize\", () =>\n        currentPattern.draw()\n    );\n\n    elements.canvas.addEventListener('click', () => {\n        player.toggle();\n    });\n\n    elements.downloadBtn.addEventListener('click', downloadCanvas);\n    elements.downloadNailsBtn.addEventListener('click', downloadNailsImage);\n}\n\nfunction downloadCanvas() {\n    const downloadLink = document.createElement('a');\n    downloadLink.download = currentPattern.name + '.png';\n    downloadLink.href = elements.canvas.toDataURL(\"image/png\");\n    downloadLink.setAttribute('target', 'download')\n    downloadLink.click();\n}\n\nfunction downloadNailsImage() {\n    const currentConfig = currentPattern.config;\n    currentPattern.config = {\n        darkMode: false,\n        showNails: true,\n        showNailNumbers: true,\n        showStrings: false,\n        nailsColor: \"#000000\",\n    };\n    currentPattern.draw();\n    downloadCanvas();\n}\n\nfunction onInputsChange() {\n    player.update(currentPattern);\n    const configQuery = JSON.stringify(currentPattern.config);\n    history.replaceState({\n        pattern: currentPattern.id,\n        config: configQuery\n    }, currentPattern.name, `?pattern=${currentPattern.id}&config=${encodeURIComponent(configQuery)}`);\n}\n\nfunction initControls() {\n    patterns.forEach(pattern => {\n        const option = document.createElement('option');\n        option.innerText = pattern.name;\n        option.value = pattern.id;\n        elements.patternSelector.appendChild(option);\n    });\n\n    elements.patternSelector.addEventListener('change', e => {\n        const patternId = e.target.value;\n        selectPattern(findPatternById(patternId));\n        history.pushState({ pattern: patternId }, patternId, \"?pattern=\" + patternId)\n    });\n}\n\nfunction initSize() {\n    sizeControls.element.addEventListener('sizechange', ({ detail }) => {\n        setSize(detail);\n    });\n}\n\nfunction setSize({width, height}) {\n    elements.canvas.removeAttribute('width');\n    elements.canvas.removeAttribute('height');\n\n    if (width && height) {\n        elements.canvas.style.width = `${width}px`;\n        elements.canvas.style.height = `${height}px`;\n    } else {\n        elements.canvas.removeAttribute('style');\n    }\n\n    currentPattern.draw();\n}\n\nfunction initRouting() {\n    window.addEventListener('popstate', ({state}) => {\n        updateState(state);\n    });\n}\n\nfunction updateState(state) {\n    const pattern = findPatternById(state.pattern);\n    elements.patternSelector.value = pattern.id;\n    selectPattern(pattern, {\n        draw: false,\n        config: state.config ? JSON.parse(state.config) : null\n    });\n\n    currentPattern.draw();\n}\n\nfunction findPatternById(patternId) {\n    const pattern = patterns.find(({id}) => id === patternId);\n    if (!pattern) {\n        throw new Error(`Pattern with id \"${patternId} not found!`);\n    }\n    return pattern;\n}\n\nfunction selectPattern(pattern, { config, draw = true} = {}) {\n    currentPattern = pattern;\n    if (config) {\n        currentPattern.config = config;\n    }\n    if (controls) {\n        controls.destroy();\n    }\n    controls = new EditorControls({pattern, config});\n    controls.addEventListener('input', () => currentPattern.draw());\n    controls.addEventListener('change', onInputsChange);\n\n    elements.patternLink.setAttribute(\"href\", pattern.link);\n    if (draw) {\n        currentPattern.draw();\n    }\n    player.update(currentPattern, { draw: false });\n    document.title = `${pattern.name} - String Art Studio`;\n}\n","export default class Player {\n    constructor(parentEl) {\n        this.elements = {\n            player: parentEl,\n            step: parentEl.querySelector('#step'),\n            stepInstructions: parentEl.querySelector('#step_instructions'),\n            playerPosition: parentEl.querySelector('#player_position'),\n            playBtn: parentEl.querySelector('#play_btn'),\n            pauseBtn: parentEl.querySelector('#pause_btn')\n        };\n        this.stepCount = 0;\n        this._isPlaying = false;\n\n        this.elements.playerPosition.addEventListener('input', ({ target }) => {\n            this.goto(+target.value)\n        });\n\n        this.elements.playBtn.addEventListener('click', () => {\n            this.play();\n        });\n\n        this.elements.pauseBtn.addEventListener('click', () => {\n            this.pause();\n        });\n    }\n\n    updateStatus(isPlaying) {\n        if (this._isPlaying !== isPlaying) {\n            this.elements.player.classList.toggle('playing');\n            this._isPlaying = isPlaying;\n        }\n    }\n\n    update(stringArt, { draw = true} = {}) {\n        this.stringArt = stringArt;\n        this.stepCount = stringArt.getStepCount();\n        this.elements.playerPosition.setAttribute('max', this.stepCount);\n        this.goto(this.stepCount, { updateStringArt: draw });\n    }\n\n    updatePosition(position) {\n        this.elements.step.innerText = `${position}/${this.stepCount}`;\n        this.elements.playerPosition.value = position;\n    }\n\n    goto(position, { updateStringArt = true} = {}) {\n        this.pause();\n        this.updatePosition(position);\n        if (updateStringArt) {\n            this.stringArt.goto(position);\n        }\n    }\n\n    setInstructions(instructions) {\n        this.elements.stepInstructions.innerText = instructions;\n    }\n\n    play() {\n        this.updateStatus(true);\n        cancelAnimationFrame(this.renderRafId);\n\n        if (this.stringArt.position === this.stepCount) {\n            this.stringArt.goto(0);\n        }\n\n        const self = this;\n\n        step();\n\n        function step() {\n            if (!self.stringArt.drawNext().done) {\n                self.renderRafId = requestAnimationFrame(step);\n            } else {\n                self.updateStatus(false);\n            }\n            self.updatePosition(self.stringArt.position);\n        }\n    }\n\n    pause() {\n        cancelAnimationFrame(this.renderRafId);\n        this.updateStatus(false);\n    }\n\n    toggle() {\n        if (this._isPlaying) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n}\n"],"names":["$e8c1397eac31f13e$var$COLOR_CONTROLS","key","label","defaultValue","type","show","isMultiColor","attr","min","max","step","children","multicolorByLightness","config","this","multicolorRange","colorCount","minLightness","maxLightness","multicolorStart","darkMode","saturation","reverseColors","multiColorStep","multiColorLightnessStep","colors","Array","fill","map","_","colorIndex","lightness","reverse","getColor","color","include","exclude","defaults","controls","getControls","controlsConfig","filter","includes","control","finalControl","Object","freeze","$a8180031c78213da$var$PI2","Math","PI","canvas","context","getContext","setConfig","centerX","width","nails","nailRadius","nailsColor","nailNumbersFontSize","addNail","nail","push","drawNumbers","globalCompositeOperation","beginPath","fillStyle","textBaseline","font","nailNumberOffset","forEach","point","x","y","number","moveTo","arc","isRightAlign","numberPosition","textAlign","fillText","String","$65e05ee91a8797e3$var$COLORS","$65e05ee91a8797e3$var$COMMON_CONFIG_CONTROLS","isDisabled","showNails","showStrings","displayValue","margin","showNailNumbers","customBackgroundColor","$65e05ee91a8797e3$var$flattenConfig","configControls","reduce","$65e05ee91a8797e3$export$2e2bcd8739ae039","Error","ctx","dpr","window","devicePixelRatio","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","concat","defaultConfig","_defaultConfig","_config","value","assign","getSize","clientWidth","clientHeight","v","setUpDraw","removeAttribute","height","size","setAttribute","center","$a8180031c78213da$export$2e2bcd8739ae039","clearRect","lineWidth","stringWidth","afterDraw","drawNails","initDraw","backgroundColor","fillRect","draw","position","Infinity","stringsIterator","generateStrings","drawNext","done","goto","result","next","getStepCount","name","$188437ce07b37c18$var$PI2","n","rotation","radius","indexAngle","rotationAngle","isReverse","getPoint","index","realIndex","sin","cos","nailsNumberStart","getNumber","i","round","id","link","$188437ce07b37c18$export$2e2bcd8739ae039","nailsConfig","innerLength","rotationConfig","$e8c1397eac31f13e$export$2e2bcd8739ae039","getConfig","super","layers","layersCount","circle","shift","repetition","currentInnerLength","repetitionCount","strokeStyle","prevPoint","isPrevPoint","nextPointIndex","lineTo","stroke","drawSpiral","$17fe1039ca333e84$export$2e2bcd8739ae039","radiusIncrease","angleStep","nSpirals","currentRadius","angle","centerx","centery","s","nailNumber","points","generatePoints","lastPoint","$f11ad0f2a18da5c9$var$SIDES","$f11ad0f2a18da5c9$var$SIDES_ORDER","$f11ad0f2a18da5c9$var$SIDES_ROTATION","left","bottom","right","top","$f11ad0f2a18da5c9$export$2e2bcd8739ae039","maxSize","nailSpacing","layerAngle","layerStart","theta","pivot","cosAngle","sinAngle","side","layerStringCount","sideIndex","indexOf","nextSide","length","nextSideRotation","sideProps","_getLayerProps","layerIndex","_getLayerColors","layerSize","pow","floor","color1","color2","colorPerLayer","layerColor","drawSide","layer","drawLayer","count","sideOrder","$8b13425f1e264518$export$2e2bcd8739ae039","_n","sides","extraNails","sideNails","sideAngle","starCenterStart","circlePointsStart","sinSideAngle","cosSideAngle","circlePointsEnd","getStarPoint","centerY","reverseOrder","prevSide","innerColor","generateStarPoints","prevSideIndex","outterColor","prevCirclePoint","isPrevSide","nextPoint","drawCircle","drawStar","size1","show1","end1","size2","show2","end2","size3","show3","getSetUp","lineSpacing","lineNailCount","firstCirclePoint","totalNailCount","totalIndexCount","getLayer","call","enable","endIndex","indexLength","circleIndex","prevPointIndex","self","advance","getPointIndex","stepCount","layerShift","steps","time","base","stepsToRender","toIndex","instructions","drawTimesTable","$828d2af56886c091$export$2e2bcd8739ae039","layerSpread","minNailDistance","maxRadius","maxShapeNailsCount","prop","props","circumsference","circleNails","nextLayerIndex","$2fc16ffa17719734$var$elements","document","querySelector","sidebarForm","$2fc16ffa17719734$var$EVENTS","Set","$2fc16ffa17719734$var$inputTimeout","pattern","state","_getState","groups","eventHandlers","input","change","_wrappedOnInput","e","_onInput","_toggleFieldset","target","nodeName","parentElement","classList","toggle","groupId","dataset","group","contains","_updateState","_toggleFieldSetOnEnter","addEventListener","controlElements","renderControls","destroy","removeEventListener","innerHTML","event","eventHandler","has","Function","add","_triggerEvent","eventData","requestAnimationFrame","clearTimeout","inputValue","inputElement","parseFloat","checked","$2fc16ffa17719734$var$getInputValue","controlKey","replace","formattedValue","innerText","originalEvent","setTimeout","updateControlsVisibility","localStorage","getItem","JSON","parse","newState","setItem","stringify","removeItem","shouldShowControl","controlEl","shouldDisableControl","inputEl","updateInputs","entries","valueEl","containerEl","_configControls","controlsFragment","createDocumentFragment","controlId","createElement","groupTitleEl","appendChild","className","childrenContainer","realValue","inputValueEl","updateGroupsState","querySelectorAll","groupEl","groupState","remove","$0597ff46967fdd49$var$sizeControls","$0597ff46967fdd49$var$elements","sizeSelect","sizeCustom","orientationSelect","$0597ff46967fdd49$var$cmToPixels","cm","dpi","$0597ff46967fdd49$var$SCREEN_SIZE","screen","$0597ff46967fdd49$var$SIZES","join","$52852adbc3c0b381$var$elements","patternSelector","patternLink","downloadBtn","downloadNailsBtn","$52852adbc3c0b381$var$patterns","Pattern","$52852adbc3c0b381$var$currentPattern","$52852adbc3c0b381$var$player","parentEl","elements","player","stepInstructions","playerPosition","playBtn","pauseBtn","_isPlaying","play","pause","updateStatus","isPlaying","update","stringArt","updateStringArt","updatePosition","setInstructions","cancelAnimationFrame","renderRafId","$52852adbc3c0b381$var$sizeControls","element","getCurrentSize","sizeOptionsFragment","sizeListItem","selectedSize","selectedSizeId","find","_notifyOnChange","getValue","select","parseInt","dispatchEvent","CustomEvent","detail","from","$52852adbc3c0b381$var$controls","$52852adbc3c0b381$var$downloadCanvas","downloadLink","download","href","toDataURL","click","$52852adbc3c0b381$var$downloadNailsImage","$52852adbc3c0b381$var$onInputsChange","configQuery","history","replaceState","encodeURIComponent","$52852adbc3c0b381$var$updateState","$52852adbc3c0b381$var$findPatternById","$52852adbc3c0b381$var$selectPattern","patternId","$2fc16ffa17719734$export$2e2bcd8739ae039","title","$52852adbc3c0b381$var$initRouting","style","$52852adbc3c0b381$var$setSize","$52852adbc3c0b381$var$initSize","option","pushState","$52852adbc3c0b381$var$initControls","queryParams","URLSearchParams","location","search","queryPattern","get"],"version":3,"file":"index.450299aa.js.map"}