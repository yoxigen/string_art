{"mappings":"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","sources":["src/scripts/helpers/Color.js","src/scripts/Nails.js","src/scripts/renderers/Renderer.js","src/scripts/StringArt.js","src/scripts/helpers/math_utils.js","src/scripts/helpers/Circle.js","src/scripts/string_art_types/Spiral.js","src/scripts/string_art_types/Spirals.js","src/scripts/string_art_types/Mandala.js","src/scripts/string_art_types/Eye.js","src/scripts/string_art_types/Assymetry.js","src/scripts/helpers/Polygon.js","src/scripts/string_art_types/PolygonPattern.js","src/scripts/string_art_types/Flower.js","src/scripts/string_art_types/MaurerRose.js","src/scripts/string_art_types/FlowerOfLife.js","src/scripts/pattern_types.js","src/scripts/string_art_types/Star.js","src/scripts/string_art_types/Wave.js","src/scripts/string_art_types/Freestyle.js","src/scripts/editor/EditorControls.js","src/scripts/editor/EditorSizeControls.js","src/scripts/renderers/CanvasRenderer.js","src/scripts/Serialize.js","src/scripts/share.js","src/scripts/renderers/SVGRenderer.js","src/scripts/download/Download.js","src/scripts/main.js","src/scripts/editor/Player.js","src/scripts/thumbnails/Thumbnails.js","src/scripts/download/SVGDownload.js","src/scripts/pwa.js"],"sourcesContent":["const COLOR_CONTROLS = [\n  {\n    key: 'isMultiColor',\n    label: 'Use multiple colors',\n    defaultValue: false,\n    type: 'checkbox',\n  },\n  {\n    key: 'colorCount',\n    label: 'Colors count',\n    defaultValue: 7,\n    type: 'range',\n    attr: {\n      min: 1,\n      max: 20,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'color',\n    label: 'String color',\n    defaultValue: '#ff4d00',\n    type: 'color',\n    show: ({ isMultiColor }) => !isMultiColor,\n  },\n  {\n    key: 'repeatColors',\n    label: 'Repeat colors',\n    defaultValue: false,\n    type: 'checkbox',\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'multicolorRange',\n    label: 'Multicolor range',\n    defaultValue: 360,\n    type: 'range',\n    attr: {\n      min: 1,\n      max: 360,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'multicolorStart',\n    label: 'Multicolor start',\n    defaultValue: 0,\n    type: 'range',\n    attr: {\n      min: 0,\n      max: 360,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'reverseColors',\n    label: 'Reverse colors order',\n    defaultValue: false,\n    type: 'checkbox',\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'saturation',\n    label: 'Saturation',\n    defaultValue: 100,\n    type: 'range',\n    attr: {\n      min: 0,\n      max: 100,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'lightness',\n    label: 'Lightness',\n    type: 'group',\n    defaultValue: 'minimized',\n    show: ({ isMultiColor }) => isMultiColor,\n    children: [\n      {\n        key: 'multicolorByLightness',\n        label: 'Multi lightness',\n        defaultValue: false,\n        type: 'checkbox',\n        show: ({ isMultiColor }) => isMultiColor,\n      },\n      {\n        key: 'minLightness',\n        label: 'Minimum lightness',\n        defaultValue: 0,\n        type: 'range',\n        attr: {\n          min: 0,\n          max: 100,\n          step: 1,\n        },\n        show: ({ multicolorByLightness, isMultiColor }) =>\n          multicolorByLightness && isMultiColor,\n      },\n      {\n        key: 'maxLightness',\n        label: 'Maximum lightness',\n        defaultValue: 100,\n        type: 'range',\n        attr: {\n          min: 0,\n          max: 100,\n          step: 1,\n        },\n        show: ({ multicolorByLightness, isMultiColor }) =>\n          multicolorByLightness && isMultiColor,\n      },\n    ],\n  },\n];\n\nexport default class Color {\n  constructor(config) {\n    this.config = config;\n    const {\n      multicolorRange,\n      colorCount,\n      multicolorByLightness,\n      minLightness = 0,\n      maxLightness = 100,\n      multicolorStart,\n      darkMode,\n      saturation,\n      reverseColors,\n      isMultiColor,\n    } = config;\n\n    if (isMultiColor) {\n      this.multiColorStep = multicolorRange / colorCount;\n      this.multiColorLightnessStep = multicolorByLightness\n        ? (maxLightness - minLightness) / (Math.max(colorCount, 2) - 1)\n        : 1;\n\n      this.colors = new Array(colorCount).fill(null).map((_, colorIndex) => {\n        const lightness = multicolorByLightness\n          ? minLightness + this.multiColorLightnessStep * colorIndex\n          : darkMode\n          ? 50\n          : 40;\n        return `hsl(${\n          multicolorStart + colorIndex * this.multiColorStep\n        }, ${saturation}%, ${lightness}%)`;\n      });\n\n      if (reverseColors) {\n        this.colors.reverse();\n      }\n    }\n  }\n\n  /**\n   * Returns the color to be used in the provided layer index. If no multiColor is used, will use the 'color' config property.\n   * @param {number} colorIndex\n   * @returns string\n   */\n  getColor(colorIndex) {\n    const { isMultiColor, colorCount, color, repeatColors } = this.config;\n\n    if (!isMultiColor) {\n      return color;\n    }\n\n    if (colorIndex >= colorCount) {\n      colorIndex = repeatColors ? colorIndex % colorCount : colorCount - 1;\n    }\n\n    return this.colors[colorIndex];\n  }\n\n  getColorMap({ stepCount, colorCount }) {\n    if (!colorCount) {\n      throw new Error(\"Can't get color map, no colorCount provided!\");\n    }\n    const stepsPerColor = Math.floor(stepCount / colorCount);\n    const colorMap = new Map();\n    for (let i = 0; i < colorCount; i++) {\n      colorMap.set(i * stepsPerColor, this.getColor(i));\n    }\n    return colorMap;\n  }\n\n  static getConfig({ include, exclude, defaults = {}, customControls }) {\n    const controls = getControls();\n\n    return {\n      key: 'colorGroup',\n      label: 'Color',\n      type: 'group',\n      children: [...(customControls ?? []), ...controls],\n    };\n\n    function getControls(controlsConfig = COLOR_CONTROLS) {\n      return controlsConfig\n        .filter(\n          ({ key }) =>\n            (!exclude || !exclude.includes(key)) &&\n            (!include || include.includes(key))\n        )\n        .map(control => {\n          const finalControl = {\n            ...control,\n            defaultValue: defaults[control.key] ?? control.defaultValue,\n          };\n\n          if (control.type === 'group') {\n            finalControl.children = getControls(control.children);\n          }\n          return Object.freeze(finalControl);\n        });\n    }\n  }\n}\n","const NUMBER_MARGIN = 4;\n\nexport default class Nails {\n  constructor(renderer, config) {\n    this.setConfig(config);\n    this.nails = [];\n    this.addedPoints = new Set();\n    this.renderer = renderer;\n  }\n\n  setConfig({ nailRadius, nailsColor, nailNumbersFontSize }) {\n    this.nailRadius = nailRadius;\n    this.nailsColor = nailsColor;\n    this.nailNumbersFontSize = nailNumbersFontSize;\n    this.nails = [];\n    if (this.addedPoints) {\n      this.addedPoints.clear();\n    }\n  }\n\n  // Adds a nail to be rendered. nail: { point, number }\n  addNail(nail) {\n    const nailPoint = nail.point.map(Math.round).join('_');\n    if (!this.addedPoints.has(nailPoint)) {\n      this.nails.push(nail);\n      this.addedPoints.add(nailPoint);\n    }\n  }\n\n  fill({ drawNumbers = true } = {}) {\n    this.renderer.renderNails(this.nails, {\n      color: this.nailsColor,\n      fontSize: this.nailNumbersFontSize,\n      radius: this.nailRadius,\n      renderNumbers: drawNumbers,\n      margin: NUMBER_MARGIN,\n    });\n\n    this.nails = [];\n    this.addedPoints.clear();\n  }\n}\n","export default class Renderer {\n  constructor(parentElement) {\n    this.parentElement = parentElement;\n  }\n\n  destroy() {\n    this.parentElement.removeElement(this.element);\n  }\n\n  get element() {\n    throw new Error('element getter not implemented!');\n  }\n\n  reset() {}\n\n  setColor(color) {\n    this.color = color;\n  }\n\n  setLineWidth(width) {}\n\n  setBackground(color) {}\n\n  renderLines(startPosition, ...positions) {\n    throw new Error('Renderer \"renderLines\" method not implemented!');\n  }\n\n  /**\n   * Renders the nails for the string art\n   * @param {[{ point: [x: number, y: number], number: string }]} nails\n   * @param {*} param1\n   */\n  renderNails(nails, { color, fontSize, radius, renderNumbers, margin }) {\n    throw new Error('Renderer \"renderNails\" method not implemented!');\n  }\n\n  getSize() {\n    const { width, height } = this.parentElement.getBoundingClientRect();\n    return [width, height];\n  }\n\n  setSize(size) {\n    this.size = size;\n\n    this.element.removeAttribute('width');\n    this.element.removeAttribute('height');\n\n    if (size) {\n      this.element.style.width = `${size.width}px`;\n      this.element.style.height = `${size.height}px`;\n    } else {\n      this.element.removeAttribute('style');\n    }\n  }\n\n  clear() {\n    throw new Error('Renderer \"clear\" method not implemented!');\n  }\n\n  toDataURL() {\n    throw new Error('Renderer \"toDataURL\" method not implemented!');\n  }\n}\n","import Nails from './Nails.js';\nimport Renderer from './renderers/Renderer.js';\n\nconst COLORS = {\n  dark: '#0e0e0e',\n  light: '#ffffff',\n};\n\nconst COMMON_CONFIG_CONTROLS = [\n  {\n    key: 'strings',\n    label: 'Strings',\n    type: 'group',\n    defaultValue: 'minimized',\n    children: [\n      {\n        key: 'showStrings',\n        label: 'Show strings',\n        defaultValue: true,\n        type: 'checkbox',\n        isDisabled: ({ showNails }) => !showNails,\n      },\n      {\n        key: 'stringWidth',\n        label: 'String width',\n        defaultValue: 1,\n        type: 'range',\n        attr: { min: 0.2, max: 4, step: 0.1 },\n        show: ({ showStrings }) => showStrings,\n      },\n    ],\n  },\n  {\n    key: 'nails',\n    label: 'Nails',\n    type: 'group',\n    defaultValue: 'minimized',\n    children: [\n      {\n        key: 'showNails',\n        label: 'Show nails',\n        defaultValue: true,\n        type: 'checkbox',\n        isDisabled: ({ showStrings }) => !showStrings,\n      },\n      {\n        key: 'showNailNumbers',\n        label: 'Show nail numbers',\n        defaultValue: false,\n        type: 'checkbox',\n        show: ({ showNails }) => showNails,\n      },\n      {\n        key: 'nailNumbersFontSize',\n        label: 'Nail numbers font size',\n        defaultValue: 10,\n        type: 'range',\n        attr: { min: 6, max: 24, step: 0.5 },\n        displayValue: ({ nailNumbersFontSize }) => `${nailNumbersFontSize}px`,\n        show: ({ showNails, showNailNumbers }) => showNails && showNailNumbers,\n      },\n      {\n        key: 'margin',\n        label: 'Margin',\n        defaultValue: 20,\n        type: 'number',\n        attr: { min: 0, max: 500, step: 1 },\n        displayValue: ({ margin }) => `${margin}px`,\n      },\n      {\n        key: 'nailRadius',\n        label: 'Nail size',\n        defaultValue: 1.5,\n        type: 'range',\n        attr: { min: 0.5, max: 5, step: 0.25 },\n        show: ({ showNails }) => showNails,\n      },\n      {\n        key: 'nailsColor',\n        label: 'Nails color',\n        defaultValue: '#ffffff',\n        type: 'color',\n        show: ({ showNails }) => showNails,\n      },\n    ],\n  },\n  {\n    key: 'background',\n    label: 'Background',\n    type: 'group',\n    defaultValue: 'minimized',\n    children: [\n      {\n        key: 'darkMode',\n        label: 'Dark mode',\n        defaultValue: true,\n        type: 'checkbox',\n        isDisabled: ({ enableBackground }) => !enableBackground,\n      },\n      {\n        key: 'customBackgroundColor',\n        label: 'Custom background color',\n        defaultValue: false,\n        type: 'checkbox',\n        isDisabled: ({ enableBackground }) => !enableBackground,\n      },\n      {\n        key: 'backgroundColor',\n        label: 'Background color',\n        defaultValue: COLORS.dark,\n        type: 'color',\n        show: ({ customBackgroundColor }) => customBackgroundColor,\n        isDisabled: ({ enableBackground }) => !enableBackground,\n      },\n      {\n        key: 'enableBackground',\n        label: 'Enable background',\n        defaultValue: true,\n        type: 'checkbox',\n      },\n    ],\n  },\n];\n\nclass StringArt {\n  constructor(renderer) {\n    if (!renderer) {\n      throw new Error('Renderer not specified!');\n    }\n\n    if (!(renderer instanceof Renderer)) {\n      throw new Error('Renderer is not an instance of Renderer!');\n    }\n\n    this.renderer = renderer;\n  }\n\n  get configControls() {\n    return (this.controls ?? []).concat(COMMON_CONFIG_CONTROLS);\n  }\n\n  get controlsIndex() {\n    if (!this._controlsIndex) {\n      this._controlsIndex = getControlsIndex(this.controls);\n    }\n\n    return this._controlsIndex;\n  }\n\n  get defaultConfig() {\n    if (!this._defaultConfig) {\n      this._defaultConfig = Object.freeze(\n        Object.assign(flattenConfig(this.configControls), this.defaultValues)\n      );\n    }\n\n    return this._defaultConfig;\n  }\n\n  get config() {\n    return this._config ?? this.defaultConfig;\n  }\n\n  set config(value) {\n    this._config = Object.assign({}, this.defaultConfig, value);\n  }\n\n  setConfig(config) {\n    const currentConfig = this.config;\n    this.config = config;\n    if (this.onConfigChange) {\n      const changedControlKeys = Object.keys(currentConfig).filter(\n        key => config[key] !== currentConfig[key]\n      );\n\n      this.onConfigChange({\n        controls: changedControlKeys.map(key => ({\n          control: this.controlsIndex[key],\n          value: config[key],\n        })),\n      });\n    }\n  }\n\n  setConfigValue(controlKey, value) {\n    this._config = Object.freeze({\n      ...(this._config ?? this.defaultConfig),\n      [controlKey]: value,\n    });\n\n    if (this.onConfigChange) {\n      this.onConfigChange({\n        controls: [{ control: this.controlsIndex[controlKey], value }].filter(\n          ({ control }) => !!control\n        ),\n      });\n    }\n  }\n\n  getSize() {\n    return this.renderer.getSize();\n  }\n\n  setUpDraw() {\n    const previousSize = this.size;\n    this.renderer.reset();\n    const [width, height] = (this.size = this.getSize());\n    Object.assign(this, this.size);\n    this.center = this.size.map(value => value / 2);\n\n    if (\n      previousSize &&\n      (previousSize[0] !== width || previousSize[1] !== height)\n    ) {\n      if (this.onResize) {\n        this.onResize();\n      }\n    }\n\n    if (this.nails) {\n      this.nails.setConfig(this.config);\n    } else {\n      this.nails = new Nails(this.renderer, this.config);\n    }\n\n    this.renderer.setLineWidth(this.config.stringWidth);\n  }\n\n  afterDraw() {\n    const { showNails, showNailNumbers } = this.config;\n    if (showNails) {\n      this.drawNails();\n      this.nails.fill({ drawNumbers: showNailNumbers });\n    }\n  }\n\n  initDraw() {\n    this.setUpDraw(this.config);\n    const {\n      showNails,\n      showNailNumbers,\n      darkMode,\n      backgroundColor,\n      customBackgroundColor,\n      enableBackground,\n    } = this.config;\n\n    if (enableBackground) {\n      this.renderer.setBackground(\n        customBackgroundColor\n          ? backgroundColor\n          : darkMode\n          ? COLORS.dark\n          : COLORS.light\n      );\n    }\n\n    if (showNails) {\n      this.drawNails();\n      this.nails.fill({ drawNumbers: showNailNumbers });\n    }\n  }\n\n  /**\n   * Draws the string art\n   * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n   */\n  draw({ position = Infinity } = {}) {\n    this.initDraw();\n    const { showStrings } = this.config;\n\n    if (showStrings) {\n      this.stringsIterator = this.generateStrings();\n      this.position = 0;\n\n      while (!this.drawNext().done && this.position < position);\n      this.afterDraw();\n    }\n  }\n\n  goto(position) {\n    if (position === this.position) {\n      return;\n    }\n\n    if (this.stringsIterator && position > this.position) {\n      while (!this.drawNext().done && this.position < position);\n    } else {\n      this.draw({ position });\n    }\n  }\n\n  drawNext() {\n    const result = this.stringsIterator.next();\n\n    if (result.done) {\n      this.afterDraw();\n    } else {\n      this.position++;\n    }\n\n    return result;\n  }\n\n  generateStrings() {\n    throw new Error('generateStrings method not defined!');\n  }\n\n  getStepCount() {\n    throw new Error(\n      `'getStepCount' method not implemented for string art type \"${this.name}\"`\n    );\n  }\n}\n\nfunction flattenConfig(configControls) {\n  return configControls.reduce(\n    (config, { key, defaultValue, children }) =>\n      children\n        ? {\n            ...config,\n            ...flattenConfig(children),\n          }\n        : {\n            ...config,\n            [key]: defaultValue,\n          },\n    {}\n  );\n}\n\nfunction getControlsIndex(configControls) {\n  return configControls.reduce(\n    (controlsIndex, control) =>\n      control.children\n        ? {\n            ...controlsIndex,\n            ...getControlsIndex(control.children),\n          }\n        : {\n            ...controlsIndex,\n            [control.key]: control,\n          },\n    {}\n  );\n}\n\nexport default StringArt;\n","/**\n * Returns the greatest common divisor of two integers\n * https://en.wikipedia.org/wiki/Euclidean_algorithm\n * @param {number} int1\n * @param {number} int2\n * @returns number\n */\nexport function gcd(int1, int2) {\n  if (!int2) return int1;\n\n  return gcd(int2, int1 % int2);\n}\n\nexport const PI2 = Math.PI * 2;\n","import Nails from '../Nails.js';\nimport { PI2 } from './math_utils.js';\n\nexport default class Circle {\n  constructor(config) {\n    this.setConfig(config);\n  }\n\n  getPoint(index = 0) {\n    const realIndex = this.getNailIndex(index);\n\n    if (this.points.has(index)) {\n      return this.points.get(index);\n    }\n\n    const point = [\n      this.center[0] +\n        Math.sin(realIndex * this.indexAngle + this.rotationAngle) *\n          this.radius,\n      this.center[1] +\n        Math.cos(realIndex * this.indexAngle + this.rotationAngle) *\n          this.radius,\n    ];\n\n    this.points.set(index, point);\n    return point;\n  }\n\n  getNailIndex(index = 0) {\n    let realIndex = this.isReverse ? this.config.n - 1 - index : index;\n    if (realIndex > this.config.n - 1) {\n      realIndex = realIndex % this.config.n;\n    }\n    return realIndex;\n  }\n\n  setConfig(config) {\n    const serializedConfig = this._serializeConfig(config);\n    if (serializedConfig !== this.serializedConfig) {\n      const {\n        n,\n        size,\n        margin = 0,\n        rotation = 0,\n        center: configCenter,\n        radius,\n        reverse = false,\n      } = config;\n      const center = configCenter ?? size.map(v => v / 2);\n      const props = {\n        center,\n        radius: radius ?? Math.min(...center) - margin,\n        indexAngle: PI2 / n,\n        rotationAngle: -PI2 * rotation,\n        isReverse: reverse,\n      };\n      this.config = config;\n      this.serializedConfig = serializedConfig;\n      Object.assign(this, props);\n      if (this.points) {\n        this.points.clear();\n      } else {\n        this.points = new Map();\n      }\n    }\n  }\n\n  _serializeConfig({\n    n,\n    size,\n    margin = 0,\n    rotation = 0,\n    center,\n    radius,\n    reverse = false,\n  }) {\n    return [\n      size?.join(','),\n      center?.join(','),\n      radius,\n      margin,\n      n,\n      rotation,\n      reverse,\n    ].join('_');\n  }\n\n  /**\n   * Given a Nails instance, uses it to draw the nails of this Circle\n   * @param {Nails} nails\n   * @param {{nailsNumberStart?: number, getNumber?: Function}} param1\n   */\n  drawNails(nails, { nailsNumberStart = 0, getNumber } = {}) {\n    for (let i = 0; i < this.config.n; i++) {\n      nails.addNail({\n        point: this.getPoint(i),\n        number: getNumber ? getNumber(i) : i + nailsNumberStart,\n      });\n    }\n  }\n\n  *drawRing(renderer, { ringSize, color }) {\n    const { n } = this.config;\n    const ringDistance = Math.floor(ringSize * n);\n\n    let prevPoint;\n    let prevPointIndex = 0;\n    let isPrevSide = false;\n    renderer.setColor(color);\n\n    for (let i = 0; i < n; i++) {\n      if (!prevPoint) {\n        prevPoint = this.getPoint(0);\n      }\n\n      const startPoint = prevPoint;\n      const positions = [];\n      prevPointIndex = isPrevSide ? i : prevPointIndex + ringDistance;\n      prevPoint = this.getPoint(prevPointIndex);\n      positions.push(prevPoint);\n\n      if (i < n - 1) {\n        prevPointIndex++;\n        prevPoint = this.getPoint(prevPointIndex);\n        positions.push(prevPoint);\n      }\n\n      renderer.renderLines(startPoint, ...positions);\n      yield;\n\n      isPrevSide = !isPrevSide;\n    }\n  }\n\n  static rotationConfig = Object.freeze({\n    key: 'rotation',\n    label: 'Rotation',\n    defaultValue: 0,\n    type: 'range',\n    attr: {\n      min: 0,\n      max: 1 + 1 / 360,\n      step: 1 / 360,\n    },\n    displayValue: (config, { key }) => `${Math.round(config[key] * 360)}°`,\n    isStructural: true,\n    affectsStepCount: false,\n  });\n\n  static nailsConfig = Object.freeze({\n    key: 'n',\n    label: 'Number of nails',\n    defaultValue: 144,\n    type: 'range',\n    attr: {\n      min: 3,\n      max: 300,\n      step: 1,\n    },\n    isStructural: true,\n  });\n}\n","import Color from '../helpers/Color.js';\nimport StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    colorCount: 7,\n    color: '#ffbb29',\n    multicolorRange: '21',\n    multicolorStart: 32,\n    multicolorByLightness: true,\n    minLightness: 36,\n    maxLightness: 98,\n  },\n});\n\nexport default class Spiral extends StringArt {\n  id = 'spiral';\n  name = 'Spiral';\n  link =\n    'https://www.etsy.com/il-en/listing/840974781/boho-wall-decor-artwork-spiral-round';\n  controls = [\n    {\n      ...Circle.nailsConfig,\n      defaultValue: 200,\n    },\n    {\n      key: 'repetition',\n      label: 'Repetition',\n      defaultValue: 5,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      key: 'innerLength',\n      label: 'Spiral thickness',\n      defaultValue: 0.5,\n      type: 'range',\n      attr: {\n        min: ({ config: { n } }) => 1 / n,\n        max: 1,\n        step: ({ config: { n } }) => 1 / n,\n      },\n      displayValue: ({ n, innerLength }) => Math.round(n * innerLength),\n    },\n    {\n      ...Circle.rotationConfig,\n      defaultValue: 0.75,\n    },\n    COLOR_CONFIG,\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, rotation, layers, margin, colorCount, repetition } = this.config;\n    this.layersCount = layers ?? 1;\n    this.realRepetition = repetition * 2 - 1;\n\n    const circleConfig = {\n      size: this.size,\n      n,\n      margin,\n      rotation,\n    };\n\n    if (this.circle) {\n      this.circle.setConfig(circleConfig);\n    } else {\n      this.circle = new Circle(circleConfig);\n    }\n\n    this.color = new Color({\n      ...this.config,\n      colorCount: layers ?? colorCount,\n    });\n\n    if (colorCount) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.getStepCount(),\n        colorCount,\n      });\n    }\n  }\n\n  *drawSpiral({ shift = 0, color = '#ffffff' } = {}) {\n    const { innerLength, n } = this.config;\n\n    let currentInnerLength = Math.round(innerLength * n);\n    let repetitionCount = 0;\n    this.renderer.setColor(color);\n    let prevPointIndex = shift;\n    let prevPoint = this.circle.getPoint(prevPointIndex);\n    let isPrevPoint = false;\n\n    for (let i = 0; currentInnerLength > 0; i++) {\n      if (this.colorMap) {\n        const stepColor = this.colorMap.get(i);\n        if (stepColor) {\n          this.renderer.setColor(stepColor);\n        }\n      }\n\n      prevPointIndex = isPrevPoint\n        ? prevPointIndex - currentInnerLength + 1\n        : prevPointIndex + currentInnerLength;\n\n      if (repetitionCount === this.realRepetition) {\n        currentInnerLength--;\n        repetitionCount = 0;\n        prevPointIndex++;\n      } else {\n        repetitionCount++;\n      }\n\n      const nextPoint = this.circle.getPoint(prevPointIndex);\n\n      this.renderer.renderLines(prevPoint, nextPoint);\n      prevPoint = nextPoint;\n\n      yield i;\n      isPrevPoint = !isPrevPoint;\n    }\n  }\n\n  *generateStrings() {\n    yield* this.drawSpiral({\n      color: this.color.getColor(0),\n    });\n  }\n\n  getStepCount() {\n    const { innerLength, repetition, n, layers = 1 } = this.config;\n    return Math.round(layers * n * (innerLength * 2) * repetition);\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails);\n  }\n\n  static thumbnailConfig = {\n    n: 60,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Color from '../helpers/Color.js';\nimport { PI2 } from '../helpers/math_utils.js';\n\nclass Spirals extends StringArt {\n  name = 'Spirals';\n  id = 'spirals';\n  link =\n    'https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1';\n  controls = [\n    {\n      key: 'radiusIncrease',\n      label: 'Radius change',\n      defaultValue: 5.7,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 0.1 },\n    },\n    {\n      key: 'angleStep',\n      label: 'Angle step',\n      defaultValue: 0.45,\n      type: 'range',\n      attr: { min: 0, max: 1, step: 0.01 },\n    },\n    {\n      key: 'nSpirals',\n      label: 'Number of spirals',\n      defaultValue: 3,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      ...Circle.rotationConfig,\n      defaultValue: 330 / 360,\n    },\n    Color.getConfig({\n      defaults: {\n        isMultiColor: true,\n        colorCount: 4,\n        color: '#00d5ff',\n        multicolorRange: 1,\n        multicolorStart: 190,\n        multicolorByLightness: true,\n        minLightness: 50,\n        maxLightness: 88,\n        reverseColors: true,\n      },\n    }),\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n\n    const {\n      nSpirals,\n      rotation,\n      margin,\n      radiusIncrease,\n      angleStep,\n      colorCount,\n    } = this.config;\n\n    this.spiralRotations = new Array(nSpirals)\n      .fill(null)\n      .map((_, i) => (i * PI2) / nSpirals);\n    this.rotationAngle = -PI2 * rotation;\n    const maxRadius = Math.min(...this.size) / 2 - margin;\n    this.nailsPerSpiral = Math.floor(maxRadius / radiusIncrease);\n    this.angleIncrease = angleStep / (maxRadius / 50);\n    this.color = new Color(this.config);\n    this.colorMap = this.color.getColorMap({\n      stepCount: this.getStepCount(),\n      colorCount,\n    });\n  }\n\n  *generatePoints() {\n    const { nSpirals } = this.config;\n\n    for (let i = 0; i < this.nailsPerSpiral; i++) {\n      for (let s = 0; s < nSpirals; s++) {\n        const point = this.getPoint(s, i);\n        yield { point, nailNumber: `${s}_${i}` };\n      }\n    }\n  }\n\n  getPoint(spiralIndex, index) {\n    const [centerx, centery] = this.center;\n    const { radiusIncrease } = this.config;\n\n    const angle =\n      this.rotationAngle +\n      this.angleIncrease * index +\n      this.spiralRotations[spiralIndex];\n    const radius = index * radiusIncrease;\n\n    return [\n      centerx + radius * Math.sin(angle),\n      centery + radius * Math.cos(angle),\n    ];\n  }\n\n  *generateStrings() {\n    const points = this.generatePoints();\n    let index = 0;\n    this.renderer.setColor(this.color.getColor(0));\n    let lastPoint = this.center;\n\n    for (const { point } of points) {\n      if (this.colorMap) {\n        const stepColor = this.colorMap.get(index);\n        if (stepColor) {\n          this.renderer.setColor(stepColor);\n        }\n      }\n\n      if (lastPoint) {\n        this.renderer.renderLines(lastPoint, point);\n      }\n      lastPoint = point;\n      yield index++;\n    }\n  }\n\n  getStepCount() {\n    const { nSpirals, radiusIncrease, margin } = this.config;\n    const maxRadius = Math.min(...this.getSize()) / 2 - margin;\n    const n = Math.floor(maxRadius / radiusIncrease);\n    return n * nSpirals;\n  }\n\n  drawNails() {\n    const points = this.generatePoints();\n    for (const { point, nailNumber } of points) {\n      this.nails.addNail({ point, number: nailNumber });\n    }\n  }\n\n  static thumbnailConfig = {\n    radiusIncrease: 1.4,\n    angleStep: 0.11,\n  };\n}\n\nexport default Spirals;\n","import Color from '../helpers/Color.js';\nimport StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nexport default class Mandala extends StringArt {\n  name = 'Mandala';\n  id = 'mandala';\n  link = 'https://www.youtube.com/watch?v=qhbuKbxJsk8';\n  linkText = 'Learn';\n  controls = [\n    {\n      key: 'n',\n      label: 'Number of nails',\n      defaultValue: 180,\n      type: 'range',\n      attr: { min: 3, max: 240, step: 1 },\n    },\n    {\n      key: 'base',\n      label: 'Multiplication',\n      defaultValue: 2,\n      type: 'range',\n      attr: { min: 2, max: 99, step: 1 },\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 7,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    Circle.rotationConfig,\n    Color.getConfig({\n      defaults: {\n        isMultiColor: true,\n        multicolorRange: 180,\n        multicolorStart: 256,\n        color: '#ff4d00',\n      },\n      exclude: ['colorCount'],\n    }),\n  ];\n\n  get n() {\n    if (!this._n) {\n      const { n, layers } = this.config;\n      const extraNails = n % layers;\n      this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n    }\n\n    return this._n;\n  }\n\n  setUpDraw() {\n    this._n = null;\n    super.setUpDraw();\n\n    const { layers, rotation, margin, layerFill, base, reverse } = this.config;\n    const circleConfig = {\n      size: this.size,\n      n: this.n,\n      margin,\n      rotation,\n      reverse,\n    };\n    this.stringsPerLayer = layerFill ? Math.floor(this.n * layerFill) : this.n;\n\n    if (this.circle) {\n      this.circle.setConfig(circleConfig);\n    } else {\n      this.circle = new Circle(circleConfig);\n    }\n\n    this.color = new Color({\n      ...this.config,\n      colorCount: layers,\n    });\n\n    this.layerShift = Math.floor(this.n / layers);\n    this.base = base;\n  }\n\n  *drawTimesTable({ shift = 0, color = '#f00', time }) {\n    const n = this.n;\n    this.renderer.setColor(color);\n\n    let point = this.circle.getPoint(shift);\n\n    for (let i = 1; i <= this.stringsPerLayer; i++) {\n      const startPoint = point;\n      point = this.circle.getPoint(i + shift);\n      const toIndex = (i * this.base) % n;\n      this.renderer.renderLines(\n        startPoint,\n        point,\n        this.circle.getPoint(toIndex + shift)\n      );\n\n      yield {\n        instructions: `${i - 1} → ${i} → ${toIndex} → ${i}`,\n        index: time * n + i,\n      };\n    }\n  }\n\n  *generateStrings() {\n    const { layers } = this.config;\n\n    for (let time = 0; time < layers; time++) {\n      const color = this.color.getColor(time);\n      yield* this.drawTimesTable({\n        time,\n        color,\n        shift: this.layerShift * time,\n      });\n    }\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails);\n  }\n\n  getStepCount() {\n    const { layers, layerFill } = this.config;\n    const stringsPerLayer = layerFill ? Math.floor(this.n * layerFill) : this.n;\n    return (layers ?? 1) * stringsPerLayer;\n  }\n\n  static thumbnailConfig = {\n    n: 70,\n  };\n}\n","import StringArt from '../StringArt.js';\n\nconst SIDES = ['left', 'bottom', 'right', 'top'];\nconst SIDES_ORDER = ['left', 'bottom', 'right', 'top'];\n\nconst SIDES_ROTATION = {\n  left: 0,\n  bottom: Math.PI / 2,\n  right: Math.PI,\n  top: Math.PI * 1.5,\n};\n\nclass Eye extends StringArt {\n  name = 'Eye';\n  id = 'eye';\n  link =\n    'https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv';\n  controls = [\n    {\n      key: 'n',\n      label: 'Number of nails per side',\n      defaultValue: 82,\n      type: 'range',\n      attr: { min: 2, max: 200, step: 1 },\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 13,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      key: 'angle',\n      label: 'Layer angle',\n      defaultValue: 30,\n      displayValue: ({ angle }) => `${angle}°`,\n      type: 'range',\n      attr: { min: 0, max: 45, step: 1 },\n    },\n    {\n      key: 'color',\n      label: 'Color',\n      type: 'group',\n      children: [\n        {\n          key: 'color1',\n          label: 'String #1 color',\n          defaultValue: '#11e8bd',\n          type: 'color',\n        },\n        {\n          key: 'color2',\n          label: 'String #2 color',\n          defaultValue: '#6fff52',\n          type: 'color',\n        },\n        {\n          key: 'colorPerLayer',\n          label: 'Color per layer',\n          defaultValue: false,\n          type: 'checkbox',\n        },\n      ],\n    },\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n\n    const { n, angle, layers, margin } = this.config;\n\n    this.maxSize = Math.min(...this.size) - 2 * margin;\n    this.nailSpacing = this.maxSize / (n - 1);\n    this.layerAngle = (angle * Math.PI) / 180;\n\n    this.layers = new Array(layers)\n      .fill(null)\n      .map((_, layerIndex) => this._getLayerProps(layerIndex));\n  }\n\n  // Sides: top, right, bottom, left\n  getPoint({ index, angle, layerStart, rotation }) {\n    const theta = angle + rotation;\n\n    const point = {\n      x: layerStart.x,\n      y: layerStart.y + this.nailSpacing * index,\n    };\n\n    const pivot = { x: this.center[0], y: this.center[1] };\n\n    const cosAngle = Math.cos(theta);\n    const sinAngle = Math.sin(theta);\n\n    const position = [\n      cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x,\n      sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y,\n    ];\n    return position;\n  }\n\n  *drawSide({\n    side,\n    color = '#ffffff',\n    angle,\n    size,\n    layerStart,\n    layerStringCount,\n  }) {\n    const sideIndex = SIDES.indexOf(side);\n    const nextSide = SIDES[sideIndex === SIDES.length - 1 ? 0 : sideIndex + 1];\n    const rotation = SIDES_ROTATION[side];\n    const nextSideRotation = SIDES_ROTATION[nextSide];\n\n    const sideProps = { layerStringCount, size, layerStart, angle };\n    this.renderer.setColor(color);\n\n    for (let i = 0; i <= layerStringCount; i++) {\n      this.renderer.renderLines(\n        this.getPoint({ side, index: i, rotation, ...sideProps }),\n        this.getPoint({\n          side: nextSide,\n          index: i,\n          rotation: nextSideRotation,\n          ...sideProps,\n        })\n      );\n\n      yield i;\n    }\n  }\n\n  _getLayerProps(layerIndex) {\n    const colors = this._getLayerColors(layerIndex);\n    const layerAngle = this.layerAngle * layerIndex;\n    const layerSize =\n      this.maxSize /\n      Math.pow(\n        Math.cos(this.layerAngle) + Math.sin(this.layerAngle),\n        layerIndex\n      );\n    const layerStart = {\n      x: this.center[0] - layerSize / 2,\n      y: this.center[1] - layerSize / 2,\n    };\n    const layerStringCount = Math.floor(layerSize / this.nailSpacing);\n\n    return {\n      colors,\n      layerAngle,\n      layerSize,\n      layerStart,\n      layerStringCount,\n    };\n  }\n\n  _getLayerColors(layerIndex) {\n    const { color1, color2, colorPerLayer } = this.config;\n    if (colorPerLayer) {\n      const layerColor = layerIndex % 2 ? color1 : color2;\n      return [layerColor, layerColor, layerColor, layerColor];\n    } else {\n      return [color2, color1, color2, color1];\n    }\n  }\n\n  *drawLayer(layerIndex) {\n    const { colors, layerAngle, layerSize, layerStart, layerStringCount } =\n      this.layers[layerIndex];\n\n    for (let i = 0; i < SIDES.length; i++) {\n      yield* this.drawSide({\n        color: colors[i],\n        side: SIDES_ORDER[i],\n        angle: layerAngle,\n        size: layerSize,\n        layerStart,\n        layerStringCount,\n      });\n    }\n  }\n\n  *generateStrings() {\n    const { layers } = this.config;\n    for (let layer = layers - 1; layer >= 0; layer--) {\n      yield* this.drawLayer(layer);\n    }\n  }\n\n  getStepCount() {\n    let count = 0;\n    const { layers, angle, n, margin } = this.config;\n    const layerAngle = (angle * Math.PI) / 180;\n    const maxSize = Math.min(...this.renderer.getSize()) - 2 * margin;\n    const nailSpacing = maxSize / (n - 1);\n\n    for (let layer = 0; layer < layers; layer++) {\n      const layerSize =\n        maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n      count += 4 * (Math.floor(layerSize / nailSpacing) + 1);\n    }\n\n    return count;\n  }\n\n  drawNails() {\n    const { layers } = this.config;\n    for (let layer = layers - 1; layer >= 0; layer--) {\n      const {\n        layerAngle: angle,\n        layerSize: size,\n        layerStart,\n        layerStringCount,\n      } = this.layers[layer];\n\n      for (let s = 0; s < SIDES.length; s++) {\n        const sideOrder = SIDES_ORDER[s];\n        const rotation = SIDES_ROTATION[sideOrder];\n\n        for (let i = 0; i <= layerStringCount; i++) {\n          const sideProps = { layerStringCount, size, layerStart, angle };\n          this.nails.addNail({\n            point: this.getPoint({\n              sideOrder,\n              index: i,\n              rotation,\n              ...sideProps,\n            }),\n            number: `${layer}_${s}_${i}`,\n          });\n        }\n      }\n    }\n  }\n\n  static thumbnailConfig = {\n    n: 25,\n    layers: 7,\n  };\n}\n\nexport default Eye;\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nconst LAYER_DEFAULTS = [\n  { size: 0.25, end: 1, color: '#a94fb0' },\n  { size: 0.125, end: 0.888, color: '#ec6ad0' },\n  { size: 0, end: 0.826, color: '#f08ad5', reverse: true },\n];\n\nexport default class Assymetry extends StringArt {\n  name = 'Assymetry';\n  id = 'assymetry';\n  link =\n    'https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for';\n  controls = [\n    Circle.nailsConfig,\n    Circle.rotationConfig,\n    {\n      key: 'layers',\n      label: 'Layers',\n      type: 'group',\n      children: LAYER_DEFAULTS.map(({ size, end, color, reverse }, i) => {\n        const layer = i + 1;\n        return {\n          key: `layer${layer}`,\n          label: `Layer ${layer}`,\n          type: 'group',\n          children: [\n            {\n              key: `show${layer}`,\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: `size${layer}`,\n              label: 'Size',\n              defaultValue: size,\n              type: 'range',\n              attr: {\n                min: 0,\n                max: 0.5,\n                step: ({ config: { n } }) => 1 / n,\n              },\n              displayValue: (config, { key }) =>\n                Math.round(config.n * config[key]),\n              show: config => config[`show${layer}`],\n            },\n            {\n              key: `end${layer}`,\n              label: 'End Position',\n              defaultValue: end,\n              type: 'range',\n              attr: {\n                min: 0,\n                max: 1,\n                step: ({ config: { n } }) => 1 / n,\n              },\n              displayValue: (config, { key }) =>\n                Math.round(config.n * config[key]),\n              show: config => config[`show${layer}`],\n            },\n            {\n              key: `color${layer}`,\n              label: 'Color',\n              defaultValue: color,\n              type: 'color',\n              show: config => config[`show${layer}`],\n            },\n            {\n              key: `reverse${layer}`,\n              label: 'Reverse',\n              defaultValue: reverse === true,\n              type: 'checkbox',\n              show: config => config[`show${layer}`],\n            },\n          ],\n        };\n      }),\n    },\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    Object.assign(this, this.getSetUp());\n  }\n\n  getSetUp() {\n    const { rotation, n, margin = 0 } = this.config;\n    const size = this.getSize();\n\n    const circleConfig = {\n      size,\n      n,\n      margin,\n      rotation: rotation - 0.25,\n    };\n\n    let circle;\n    if (this.circle) {\n      circle = this.circle;\n      this.circle.setConfig(circleConfig);\n    } else {\n      circle = new Circle(circleConfig);\n    }\n\n    let lineSpacing = circle.indexAngle * circle.radius;\n    const lineNailCount = Math.floor(circle.radius / lineSpacing) - 1;\n    lineSpacing +=\n      (circle.radius - lineSpacing * lineNailCount) / lineNailCount;\n    const firstCirclePoint = circle.getPoint(0);\n    const totalNailCount = lineNailCount + n;\n    const totalIndexCount = totalNailCount + lineNailCount;\n    const layers = new Array(3)\n      .fill(null)\n      .map((_, i) => getLayer.call(this, i + 1))\n      .filter(({ enable }) => enable);\n\n    return {\n      circle,\n      lineSpacing,\n      lineNailCount,\n      firstCirclePoint,\n      layers,\n      totalNailCount,\n      totalIndexCount,\n    };\n\n    function getLayer(layerIndex) {\n      const size =\n        Math.round(n * this.config['size' + layerIndex]) + lineNailCount;\n      return {\n        size,\n        endIndex:\n          Math.round(\n            this.config['end' + layerIndex] * (totalNailCount + lineNailCount)\n          ) - size,\n        color: this.config['color' + layerIndex],\n        enable: this.config['show' + layerIndex],\n        isReverse: this.config['reverse' + layerIndex],\n      };\n    }\n  }\n\n  /**\n   * Returns the position of a point on the line\n   * @param {index of the point in the circle, 0 is the center} index\n   */\n  getPoint(index) {\n    if (index < this.lineNailCount || index > this.totalNailCount) {\n      const linePosition =\n        index < this.lineNailCount\n          ? this.lineNailCount - index\n          : index - this.totalNailCount;\n\n      const indexLength = linePosition * this.lineSpacing;\n      return [\n        this.firstCirclePoint[0] -\n          indexLength * Math.sin(this.circle.rotationAngle),\n        this.firstCirclePoint[1] -\n          indexLength * Math.cos(this.circle.rotationAngle),\n      ];\n    } else {\n      const circleIndex = index - this.lineNailCount;\n      return this.circle.getPoint(circleIndex);\n    }\n  }\n\n  *drawCircle({ endIndex, color, isReverse, size }) {\n    let prevPoint;\n    let prevPointIndex;\n    let isPrevSide = false;\n    this.renderer.setColor(color);\n    const self = this;\n    const advance = isReverse ? -1 : 1;\n\n    for (let index = 0; index <= endIndex; index++) {\n      const startPoint = prevPoint ?? this.getPoint(getPointIndex(index));\n      const positions = [];\n      if (prevPoint) {\n        positions.push(this.getPoint(prevPointIndex + advance));\n      }\n      prevPointIndex = getPointIndex(isPrevSide ? index : index + size);\n      positions.push((prevPoint = this.getPoint(prevPointIndex)));\n\n      this.renderer.renderLines(startPoint, ...positions);\n\n      yield;\n\n      isPrevSide = !isPrevSide;\n    }\n\n    function getPointIndex(index) {\n      return isReverse ? self.totalIndexCount - index : index;\n    }\n  }\n\n  *generateStrings() {\n    for (const layer of this.layers) {\n      yield* this.drawCircle(layer);\n    }\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails, { nailsNumberStart: this.lineNailCount });\n\n    for (let i = 0; i < this.lineNailCount; i++) {\n      this.nails.addNail({ point: this.getPoint(i), number: i });\n    }\n  }\n\n  getStepCount() {\n    const { layers } = this.getSetUp();\n    return layers.reduce(\n      (stepCount, layer) => stepCount + layer.endIndex + 1,\n      0\n    );\n  }\n\n  static thumbnailConfig = {\n    n: 50,\n  };\n}\n","import { PI2 } from './math_utils.js';\n\nexport default class Polygon {\n  constructor(config) {\n    this.setConfig(config);\n  }\n\n  setConfig(config) {\n    const serializedConfig = this._serializeConfig(config);\n    if (serializedConfig !== this.serializedConfig) {\n      const { rotation = 0, sides: sideCount } = (this.config = config);\n\n      const sideAngle = PI2 / sideCount;\n\n      const sides = new Array(sideCount).fill(null).map((_, i) => {\n        const angle = sideAngle * i + PI2 * rotation;\n        const radiusAngle = -sideAngle * (i - 0.5) - PI2 * rotation;\n\n        return {\n          cos: Math.cos(angle),\n          sin: Math.sin(angle),\n          center: {\n            cos: Math.cos(radiusAngle),\n            sin: Math.sin(radiusAngle),\n          },\n        };\n      });\n\n      Object.assign(this, {\n        sides,\n        sideCount,\n        sideAngle,\n      });\n\n      if (this.points) {\n        this.points.clear();\n      } else {\n        this.points = new Map();\n      }\n\n      Object.assign(this, this._getProps());\n\n      if (config.fitSize) {\n        Object.assign(this, this._getProps(this.getSizeAndCenter()));\n        this.points.clear();\n      }\n    }\n  }\n\n  getSizeAndCenter() {\n    const { size: configSize, margin } = this.config;\n\n    const boundingRect = this.getBoundingRect();\n    const scale = Math.min(\n      (configSize[0] - 2 * margin) / boundingRect.width,\n      (configSize[1] - 2 * margin) / boundingRect.height\n    );\n\n    const size = configSize.map(v => v * scale);\n    const center = [\n      this.center[0] -\n        (scale * (boundingRect.left - configSize[0] + boundingRect.right)) / 2,\n      this.center[1] -\n        (scale * (boundingRect.top - configSize[1] + boundingRect.bottom)) / 2,\n    ];\n\n    this.points.clear();\n    return { size, center };\n  }\n\n  _getProps(overrideConfig) {\n    const {\n      nailsSpacing,\n      size,\n      margin = 0,\n      center: configCenter,\n    } = Object.assign({}, this.config, overrideConfig);\n\n    const center = configCenter ?? this.config.size.map(v => v / 2);\n\n    const radius = Math.min(...size) / 2 - margin;\n    const sideSize = 2 * radius * Math.sin(this.sideAngle / 2);\n    const start = [\n      radius * Math.sin(this.sideAngle / 2),\n      radius * Math.cos(this.sideAngle / 2),\n    ];\n    const nailsDistance = sideSize * nailsSpacing;\n    const radiusNailsCount = Math.floor(radius / nailsDistance);\n    const radiusNailsDistance = radius / radiusNailsCount;\n\n    return {\n      nailsSpacing,\n      nailsPerSide: 1 / nailsSpacing,\n      center,\n      radius,\n      sideSize,\n      start,\n      nailsDistance,\n      radiusNailsCount,\n      radiusNailsDistance,\n    };\n  }\n\n  _serializeConfig({ size, margin = 0, rotation = 0, center, sides }) {\n    return [size?.join(','), center?.join(','), sides, margin, rotation].join(\n      '_'\n    );\n  }\n\n  getSidePoint({ side, index }) {\n    const pointsMapIndex = [side, index].join('_');\n\n    if (this.points.has(pointsMapIndex)) {\n      return this.points.get(pointsMapIndex);\n    }\n\n    const startX = this.start[0] - index * this.nailsDistance;\n    const { cos, sin } = this.sides[side];\n\n    const point = [\n      cos * startX - sin * this.start[1] + this.center[0],\n      sin * startX + cos * this.start[1] + this.center[1],\n    ];\n\n    this.points.set(pointsMapIndex, point);\n    return point;\n  }\n\n  getCenterPoint({ side, index }) {\n    const radius = index * this.radiusNailsDistance;\n    const { sin, cos } = this.sides[side].center;\n\n    return [this.center[0] + sin * radius, this.center[1] + cos * radius];\n  }\n\n  getBoundingRect() {\n    const points = this.sides.map((_, side) =>\n      this.getSidePoint({ side, index: 0 })\n    );\n    const firstPoint = points[0];\n\n    const boundingRect = points.slice(1).reduce(\n      (boundingRect, [x, y]) => ({\n        left: Math.min(boundingRect.left, x),\n        right: Math.max(boundingRect.right, x),\n        top: Math.min(boundingRect.top, y),\n        bottom: Math.max(boundingRect.bottom, y),\n      }),\n      {\n        left: firstPoint[0],\n        right: firstPoint[0],\n        top: firstPoint[1],\n        bottom: firstPoint[1],\n      }\n    );\n\n    boundingRect.height = boundingRect.bottom - boundingRect.top;\n    boundingRect.width = boundingRect.right - boundingRect.left;\n    Object.freeze(boundingRect);\n    return boundingRect;\n  }\n\n  drawNails(nails, { drawCenter = false, drawSides = true } = {}) {\n    for (let side = 0; side < this.sideCount; side++) {\n      const sideIndexStart = side * this.nailsPerSide;\n\n      if (drawSides) {\n        for (let index = 0; index < this.nailsPerSide; index++) {\n          nails.addNail({\n            point: this.getSidePoint({ side, index }),\n            number: sideIndexStart + index,\n          });\n        }\n      }\n\n      if (drawCenter) {\n        for (let index = 0; index < this.radiusNailsCount; index++) {\n          nails.addNail({\n            point: this.getCenterPoint({ side, index }),\n            number: `${side}_${index}`,\n          });\n        }\n      }\n    }\n  }\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Polygon from '../helpers/Polygon.js';\nimport Color from '../helpers/Color.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#ff0000',\n    multicolorRange: 1,\n    multicolorStart: 0,\n    multicolorByLightness: true,\n    minLightness: 20,\n    maxLightness: 50,\n  },\n  exclude: ['colorCount'],\n});\n\nexport default class PolygonPattern extends StringArt {\n  name = 'Polygon';\n  id = 'polygon';\n  controls = [\n    {\n      key: 'sides',\n      label: 'Sides',\n      defaultValue: 5,\n      type: 'range',\n      attr: {\n        min: 3,\n        max: 10,\n        step: 1,\n      },\n    },\n    {\n      key: 'n',\n      label: 'Nails per side',\n      defaultValue: 60,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 100,\n        step: 1,\n      },\n    },\n    {\n      key: 'bezier',\n      label: 'Bezier',\n      defaultValue: 2,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 4,\n        step: 1,\n      },\n      show: ({ sides }) => sides > 4,\n    },\n    Circle.rotationConfig,\n    COLOR_CONFIG,\n  ];\n\n  defaultValues = {\n    nailsColor: '#5c5c5c',\n    nailRadius: 1,\n  };\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, rotation, sides, margin, isMultiColor } = this.config;\n    const size = this.getSize();\n\n    const polygonConfig = {\n      sides,\n      rotation,\n      margin,\n      size,\n      nailsSpacing: 1 / n,\n      fitSize: true,\n    };\n\n    if (this.polygon) {\n      this.polygon.setConfig(polygonConfig);\n    } else {\n      this.polygon = new Polygon(polygonConfig);\n    }\n\n    this.color = new Color({\n      ...this.config,\n      isMultiColor,\n      colorCount: sides,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.getStepCount(),\n        colorCount: sides,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  *generateStrings() {\n    const { sides, bezier } = this.config;\n    const limitedBezier = Math.min(bezier, Math.ceil(sides / 2) - 1);\n\n    let step = 0;\n    this.renderer.setColor(this.color.getColor(0));\n\n    for (let side = 0; side < sides; side++) {\n      const nextSide = (side + limitedBezier) % sides;\n\n      if (this.colorMap) {\n        this.renderer.setColor(this.colorMap.get(step));\n      }\n      for (let index = 0; index < this.polygon.nailsPerSide; index++) {\n        this.renderer.renderLines(\n          this.polygon.getSidePoint({ side, index }),\n          this.polygon.getSidePoint({ side: nextSide, index })\n        );\n\n        yield;\n        step++;\n      }\n    }\n  }\n\n  getStepCount() {\n    const { sides, n } = this.config;\n    return sides * n;\n  }\n\n  drawNails() {\n    this.polygon.drawNails(this.nails);\n  }\n\n  static thumbnailConfig = {\n    n: 20,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Polygon from '../helpers/Polygon.js';\nimport Color from '../helpers/Color.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#29f1ff',\n    multicolorRange: 264,\n    multicolorStart: 53,\n    multicolorByLightness: false,\n    minLightness: 30,\n    maxLightness: 70,\n  },\n  exclude: ['colorCount'],\n});\n\nexport default class Flower extends StringArt {\n  name = 'Flower';\n  id = 'flower';\n  link = 'https://www.sqrt.ch/Buch/fadenmodell4_100.svg';\n  controls = [\n    {\n      key: 'sides',\n      label: 'Sides',\n      defaultValue: 4,\n      type: 'range',\n      attr: {\n        min: 3,\n        max: 10,\n        step: 1,\n      },\n    },\n    {\n      key: 'n',\n      label: 'Nails per side',\n      defaultValue: 60,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 100,\n        step: 1,\n      },\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 2,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 10,\n        step: 1,\n      },\n    },\n    Circle.rotationConfig,\n    COLOR_CONFIG,\n  ];\n\n  defaultValues = {\n    nailsColor: '#29f1ff',\n    nailRadius: 1,\n    stringWidth: 0.5,\n  };\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, rotation, sides, layers, margin, isMultiColor } = this.config;\n    const size = this.getSize();\n\n    const layerAngleShift = 1 / (sides * layers);\n\n    this.polygons = new Array(layers).fill(null).map((_, i) => {\n      const polygonConfig = {\n        sides,\n        rotation: rotation + i * layerAngleShift,\n        margin,\n        size,\n        nailsSpacing: 1 / n,\n      };\n\n      return new Polygon(polygonConfig);\n    });\n\n    this.color = new Color({\n      ...this.config,\n      isMultiColor,\n      colorCount: layers,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.getStepCount(),\n        colorCount: layers,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  *generateStrings() {\n    const { sides, layers } = this.config;\n\n    let step = 0;\n    this.renderer.setColor(this.color.getColor(0));\n\n    for (let layer = 0; layer < layers; layer++) {\n      const polygon = this.polygons[layer];\n\n      for (let side = 0; side < sides; side++) {\n        const leftSide = side === sides - 1 ? 0 : side + 1;\n\n        for (let index = 0; index <= polygon.nailsPerSide; index++) {\n          if (this.colorMap?.has(step)) {\n            this.renderer.setColor(this.colorMap.get(step));\n          }\n\n          const centerIndexes = this.getCenterIndexes({\n            polygon,\n            sideIndex: index,\n          });\n\n          this.renderer.renderLines(\n            polygon.getCenterPoint({\n              side: side,\n              index: centerIndexes[0],\n            }),\n            polygon.getSidePoint({ side, index }),\n            polygon.getCenterPoint({\n              side: leftSide,\n              index: centerIndexes[1],\n            })\n          );\n\n          yield;\n          step++;\n        }\n      }\n    }\n  }\n\n  getCenterIndexes({ polygon, sideIndex }) {\n    const extraNailCount = polygon.nailsPerSide - polygon.radiusNailsCount;\n\n    return [\n      sideIndex < extraNailCount\n        ? -extraNailCount + sideIndex\n        : sideIndex - extraNailCount,\n      polygon.radiusNailsCount - sideIndex,\n    ];\n  }\n\n  getStepCount() {\n    const { sides, n, layers } = this.config;\n    return sides * (n + 1) * layers;\n  }\n\n  drawNails() {\n    this.polygons.forEach(polygon =>\n      polygon.drawNails(this.nails, { drawCenter: true })\n    );\n  }\n\n  static thumbnailConfig = {\n    n: 20,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Color from '../helpers/Color.js';\nimport { gcd, PI2 } from '../helpers/math_utils.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#ffffff',\n    multicolorRange: 133,\n    multicolorStart: 239,\n    multicolorByLightness: false,\n    minLightness: 30,\n    maxLightness: 70,\n    colorCount: 4,\n  },\n});\n\nexport default class MaurerRose extends StringArt {\n  name = 'Maurer Rose';\n  id = 'maurer_rose';\n  link = 'https://blog.glitch.land/en/posts/maurer-rose/';\n  linkText = 'Learn';\n  controls = [\n    {\n      key: 'n',\n      label: 'N',\n      defaultValue: 4,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 12,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'maxSteps',\n      label: 'Max steps',\n      defaultValue: 512,\n      type: 'range',\n      attr: {\n        min: 3,\n        max: 720,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'angle',\n      label: 'Angle',\n      defaultValue: 341,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 720,\n        step: 1,\n      },\n      displayValue: ({ angle }) => `${angle}°`,\n      isStructural: true,\n    },\n    Circle.rotationConfig,\n    COLOR_CONFIG,\n  ];\n\n  resetStructure() {\n    if (this.points) {\n      this.points.clear();\n    }\n    this.calc = null;\n  }\n\n  onConfigChange({ controls }) {\n    if (controls.some(({ control }) => control.isStructural)) {\n      this.resetStructure();\n      if (controls.some(({ control }) => control.affectsStepCount !== false)) {\n        this.stepCount = null;\n      }\n    }\n  }\n\n  onResize() {\n    this.resetStructure();\n  }\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { isMultiColor, colorCount } = this.config;\n\n    if (!this.calc) {\n      this.calc = this.getCalc();\n    }\n\n    if (!this.points) {\n      this.points = new Map();\n    }\n\n    if (!this.stepCount) {\n      this.stepCount = this.getStepCount();\n    }\n\n    this.color = new Color({\n      ...this.config,\n      isMultiColor,\n      colorCount,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.stepCount,\n        colorCount,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  getCalc() {\n    const { n, angle, rotation, maxSteps } = this.config;\n    const size = this.getSize();\n\n    return {\n      n,\n      angleRadians: (PI2 * angle) / maxSteps,\n      radius: Math.min(...size) / 2,\n      currentSize: size,\n      rotationAngle: -Math.PI * 2 * rotation,\n    };\n  }\n\n  getPoint(index) {\n    if (this.points.has(index)) {\n      return this.points.get(index);\n    }\n\n    const k = index * this.calc.angleRadians;\n    const r = this.calc.radius * Math.sin(this.calc.n * k);\n\n    const point = [\n      this.center[0] - r * Math.cos(k - this.calc.rotationAngle),\n      this.center[1] - r * Math.sin(k - this.calc.rotationAngle),\n    ];\n    this.points.set(index, point);\n    return point;\n  }\n\n  *generatePoints() {\n    const count = this.stepCount;\n\n    for (let i = 0; i < count + 1; i++) {\n      yield { point: this.getPoint(i), index: i };\n    }\n  }\n\n  *generateStrings() {\n    const points = this.generatePoints();\n\n    let prevPoint;\n    this.renderer.setColor(this.color.getColor(0));\n\n    for (const { point, index } of points) {\n      if (!prevPoint) {\n        prevPoint = point;\n        continue;\n      }\n\n      if (this.colorMap) {\n        const stepColor = this.colorMap.get(index);\n        if (stepColor) {\n          this.renderer.setColor(stepColor);\n        }\n      }\n\n      this.renderer.renderLines(prevPoint, point);\n      prevPoint = point;\n\n      yield;\n    }\n  }\n\n  getStepCount() {\n    if (this.stepCount) {\n      return this.stepCount;\n    }\n\n    const { maxSteps, angle, n } = this.config;\n    const angleGcd = gcd(maxSteps, angle);\n\n    let steps = maxSteps / angleGcd;\n    if (!(steps % 2) && n % 2) {\n      steps /= 2;\n    }\n    return Math.round(steps);\n  }\n\n  drawNails() {\n    const points = this.generatePoints();\n    for (const { point, index } of points) {\n      this.nails.addNail({ point, number: index });\n    }\n  }\n\n  static thumbnailConfig = {\n    maxSteps: 160,\n    angle: 213,\n  };\n}\n","import { PI2 } from '../helpers/math_utils.js';\nimport StringArt from '../StringArt.js';\nimport Color from '../helpers/Color.js';\nimport Polygon from '../helpers/Polygon.js';\nimport Circle from '../helpers/Circle.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#29f1ff',\n    multicolorRange: 43,\n    multicolorStart: 25,\n    multicolorByLightness: true,\n    minLightness: 40,\n    maxLightness: 95,\n    colorCount: 3,\n    repeatColors: true,\n    saturation: 83,\n    reverseColors: true,\n  },\n  customControls: [\n    {\n      key: 'colorPerLevel',\n      label: 'Color per level',\n      defaultValue: true,\n      type: 'checkbox',\n    },\n  ],\n});\n\nconst ANGLE = -PI2 / 6; // The angle of a equilateral triangle;\nconst SIDE_ANGLES = new Array(6)\n  .fill(null)\n  .map((_, i) => Math.PI / 2 + ANGLE * i);\n\nexport default class FlowerOfLife extends StringArt {\n  name = 'Flower of Life';\n  id = 'flower_of_life';\n  link =\n    'https://www.reddit.com/r/psychedelicartwork/comments/mk97gi/rainbow_flower_of_life_uv_reactive_string_art/';\n  controls = [\n    {\n      key: 'levels',\n      label: 'Levels',\n      defaultValue: 3,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 10,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'density',\n      label: 'Density',\n      defaultValue: 10,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 50,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'globalRotation',\n      label: 'Rotation',\n      defaultValue: 0,\n      type: 'range',\n      attr: {\n        min: 0,\n        max: 30,\n        step: 1,\n      },\n      displayValue: (config, { key }) => `${config[key]}°`,\n      isStructural: true,\n      affectsStepCount: false,\n    },\n    {\n      key: 'fillGroup',\n      label: 'Fill',\n      type: 'group',\n      children: [\n        {\n          key: 'fill',\n          label: 'Show fill',\n          defaultValue: true,\n          type: 'checkbox',\n          isStructural: true,\n        },\n        {\n          key: 'fillColor',\n          label: 'Fill color',\n          defaultValue: '#292e29',\n          type: 'color',\n          show: ({ fill }) => fill,\n        },\n      ],\n    },\n    {\n      key: 'ringGroup',\n      label: 'Ring',\n      type: 'group',\n      children: [\n        {\n          key: 'renderRing',\n          label: 'Show outer ring',\n          type: 'checkbox',\n          defaultValue: true,\n          isStructural: true,\n        },\n        {\n          key: 'ringNailCount',\n          label: 'Ring nail count',\n          defaultValue: 144,\n          type: 'range',\n          attr: {\n            min: 3,\n            max: 360,\n            step: 1,\n          },\n          show: ({ renderRing }) => renderRing,\n          isStructural: true,\n        },\n        {\n          key: 'ringSize',\n          label: 'Outer ring size',\n          defaultValue: 0.23,\n          type: 'range',\n          attr: {\n            min: 0,\n            max: 0.5,\n            step: 0.01,\n          },\n          show: ({ renderRing }) => renderRing,\n          displayValue: ({ ringSize }) => `${Math.round(100 * ringSize)}%`,\n          isStructural: true,\n        },\n        {\n          key: 'ringPadding',\n          label: 'Ring padding',\n          defaultValue: 0.06,\n          type: 'range',\n          attr: {\n            min: 0,\n            max: 0.5,\n            step: 0.01,\n          },\n          show: ({ renderRing }) => renderRing,\n          isStructural: true,\n          displayValue: ({ ringPadding }) =>\n            `${Math.round(100 * ringPadding)}%`,\n        },\n        {\n          key: 'ringColor',\n          label: 'Ring color',\n          defaultValue: '#e8b564',\n          type: 'color',\n          show: ({ renderRing }) => renderRing,\n        },\n      ],\n    },\n    {\n      key: 'renderTriangles',\n      label: 'Show triangles',\n      defaultValue: true,\n      type: 'checkbox',\n      isStructural: true,\n    },\n    {\n      key: 'renderCaps',\n      label: 'Show caps',\n      defaultValue: true,\n      type: 'checkbox',\n      show: ({ renderTriangles }) => renderTriangles,\n      isStructural: true,\n    },\n\n    COLOR_CONFIG,\n  ];\n\n  defaultValues = {\n    nailsColor: '#474747',\n  };\n\n  getCalc() {\n    const {\n      levels,\n      density,\n      margin,\n      globalRotation,\n      renderCaps,\n      fill,\n      renderTriangles,\n      renderRing,\n      ringNailCount,\n      ringSize,\n      ringPadding,\n    } = this.config;\n    const globalRotationRadians =\n      (globalRotation * Math.PI) / 180 + Math.PI / 6;\n\n    const radius = renderRing\n      ? Math.min(...(this.size ?? this.getSize()).map(v => v / 2 - margin))\n      : null;\n    const ringDistance = renderRing\n      ? Math.floor((ringSize * ringNailCount) / 2)\n      : 0; // The number of nails to count for strings in the outer ring\n    const ringWidth = renderRing\n      ? radius * (1 - Math.cos((PI2 * (ringDistance / ringNailCount)) / 2))\n      : 0;\n\n    const polygon = new Polygon({\n      sides: 6,\n      size: this.getSize(),\n      margin:\n        margin +\n        ringWidth +\n        (renderRing && ringSize ? ringPadding * radius : 0),\n      rotation: globalRotationRadians,\n      fitSize: false,\n    });\n\n    const edgeSize = polygon.sideSize / levels;\n    const nailsLength = edgeSize / (2 * Math.cos(Math.PI / 6));\n\n    const countPerLevelSide = new Array(levels + (renderCaps ? 1 : 0))\n      .fill(null)\n      .map((_, level) => level * 2 + 1);\n\n    return {\n      edgeSize,\n      triangleHeight: (edgeSize * Math.sqrt(3)) / 2,\n      nailsLength,\n      triangleCenterDistance: edgeSize / 2,\n      nailDistance: nailsLength / density,\n      triangleCount: 6 * levels ** 2,\n      countPerLevelSide,\n      globalRotationRadians,\n      fill,\n      renderTriangles,\n      renderCaps,\n      ringNailCount,\n      radius,\n    };\n  }\n\n  resetStructure() {\n    this.points = null;\n    this.calc = null;\n  }\n\n  onConfigChange({ controls }) {\n    if (controls.some(({ control }) => control.isStructural)) {\n      this.resetStructure();\n      if (controls.some(({ control }) => control.affectsStepCount !== false)) {\n        this.stepCount = null;\n      }\n    }\n  }\n\n  onResize() {\n    this.resetStructure();\n  }\n\n  setUpDraw() {\n    super.setUpDraw();\n\n    const {\n      isMultiColor,\n      levels,\n      colorPerLevel,\n      colorCount,\n      renderRing,\n      ringSize,\n      ...config\n    } = this.config;\n\n    if (!this.calc) {\n      this.calc = this.getCalc();\n    }\n\n    if (renderRing && ringSize) {\n      const circleConfig = {\n        size: this.size,\n        n: this.calc.ringNailCount,\n        margin: config.margin,\n        rotation: config.globalRotation,\n      };\n\n      if (this.circle) {\n        this.circle.setConfig(circleConfig);\n      } else {\n        this.circle = new Circle(circleConfig);\n      }\n    } else {\n      this.circle = null;\n    }\n\n    if (!this.points) {\n      this.points = this.getPoints();\n    }\n\n    if (!this.stepCount) {\n      this.stepCount = this.getStepCount(this.calc);\n    }\n\n    const realColorCount = isMultiColor\n      ? colorPerLevel\n        ? levels\n        : Math.min(colorCount, levels)\n      : 1;\n\n    this.color = new Color({\n      ...config,\n      isMultiColor,\n      colorCount: realColorCount,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: realColorCount,\n        colorCount: realColorCount,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  getTrianglePoints({ center, rotation, isCapLevel, triangleIndexInSide }) {\n    let missingSide;\n    if (isCapLevel) {\n      const triangleIndex = (triangleIndexInSide + 2) % 3;\n      missingSide = this._getNextIndexInTriangle(triangleIndex);\n    }\n\n    // For each side of the triangle, the first point is the center of the triangle:\n    const trianglePoints = new Array(3)\n      .fill(null)\n      .map((_, i) => (i === missingSide ? [] : [center]));\n\n    for (let side = 0; side < 3; side++) {\n      if (isCapLevel && side === missingSide) {\n        continue;\n      }\n      const sideAngle = rotation + side * (PI2 / 3);\n      const triangleSidePoints = trianglePoints[side];\n\n      const cosSideAngle = Math.cos(sideAngle);\n      const sinSideAngle = Math.sin(sideAngle);\n\n      for (let n = 1; n <= this.config.density; n++) {\n        const nNailDistance = n * this.calc.nailDistance;\n\n        triangleSidePoints.push([\n          center[0] + nNailDistance * cosSideAngle,\n          center[1] + nNailDistance * sinSideAngle,\n        ]);\n      }\n    }\n\n    return trianglePoints;\n  }\n\n  getPoints() {\n    if (this.points) {\n      return this.points;\n    }\n\n    const { levels, renderCaps } = this.config;\n\n    const largeDistance = this.calc.nailsLength;\n    const smallDistance = this.calc.triangleHeight - largeDistance;\n    const levelsPoints = [];\n\n    const levelsCount = renderCaps ? levels + 1 : levels;\n\n    for (let level = 0; level < levelsCount; level++) {\n      const isCapLevel = renderCaps && level === levels;\n\n      const levelTrianglesPoints = [];\n      levelsPoints.push(levelTrianglesPoints);\n\n      const levelSideTriangleCount = this.calc.countPerLevelSide[level];\n\n      // Caching distances to avoid repeated calculations for each side:\n      const levelPositions = new Array(levelSideTriangleCount)\n        .fill(null)\n        .map((_, n) => {\n          const isFlipped = n % 2 === 0;\n          const trianglePosition = [\n            this.calc.triangleCenterDistance * (n - level),\n            level * this.calc.triangleHeight +\n              (isFlipped ? largeDistance : smallDistance),\n          ];\n\n          return {\n            rotation: Math.atan(trianglePosition[0] / trianglePosition[1]),\n            distanceFromCenter: Math.sqrt(\n              trianglePosition[0] ** 2 + trianglePosition[1] ** 2\n            ),\n          };\n        });\n\n      for (let side = 0; side < 6; side++) {\n        const sideRotation = SIDE_ANGLES[side];\n\n        for (let n = 0; n < levelSideTriangleCount; n++) {\n          if (isCapLevel && n % 2 === 0) {\n            // Cap triangles are only odd indexes\n            levelTrianglesPoints.push(null);\n            continue;\n          }\n\n          const { distanceFromCenter, rotation } = levelPositions[n];\n\n          const triangleCenterAngle =\n            sideRotation - rotation - this.calc.globalRotationRadians;\n\n          const rotatedTrianglePosition = [\n            this.center[0] + distanceFromCenter * Math.cos(triangleCenterAngle),\n            this.center[1] - distanceFromCenter * Math.sin(triangleCenterAngle),\n          ];\n\n          const trianglePoints = this.getTrianglePoints({\n            center: rotatedTrianglePosition,\n            rotation:\n              sideRotation +\n              (side * PI2) / 3 -\n              n * ANGLE +\n              this.calc.globalRotationRadians,\n            isCapLevel,\n            triangleIndexInSide: n,\n          });\n\n          levelTrianglesPoints.push(trianglePoints);\n        }\n      }\n    }\n\n    return levelsPoints;\n  }\n\n  *generateTriangleStrings({ points, level, indexInSide }) {\n    this.renderer.setColor(this.color.getColor(level));\n    const { density, levels } = this.config;\n    const isCapLevel = level === levels;\n\n    const initialSide = isCapLevel\n      ? this._getNextIndexInTriangle(indexInSide % 3)\n      : 0;\n    const lastSide = isCapLevel ? initialSide : 2;\n    const lastIndex = isCapLevel ? density : density - 1;\n\n    for (let side = initialSide; side <= lastSide; side++) {\n      const nextSide = this._getNextIndexInTriangle(side);\n      let prevPoint = points[side][0];\n\n      for (let n = 0; n <= lastIndex; n++) {\n        const isNextSide = n % 2 === 0;\n\n        const positions = [];\n        const nextSidePoint = isNextSide ? this.config.density - n : n;\n        const targetSide = isNextSide ? nextSide : side;\n        positions.push(points[targetSide][nextSidePoint]);\n\n        if (n < density) {\n          positions.push(\n            points[targetSide][\n              isNextSide ? nextSidePoint - 1 : nextSidePoint + 1\n            ]\n          );\n        }\n\n        this.renderer.renderLines(prevPoint, ...positions);\n        prevPoint = positions[positions.length - 1];\n\n        yield;\n      }\n    }\n  }\n\n  *generateStringsBetweenTriangles({\n    triangle1,\n    triangle2,\n    level,\n    triangleIndex,\n    triangleIndexInSide,\n    isNextLevel,\n    nextLevelTriangleIndex,\n  }) {\n    const { density, fillColor } = this.config;\n    const levelSideCount = this.calc.countPerLevelSide[level];\n    const angleShift = (triangleIndex % levelSideCount) % 3;\n\n    this.renderer.setColor(fillColor);\n\n    const isLastTriangleInSide = triangleIndexInSide === levelSideCount - 1;\n    const firstSide = angleShift;\n\n    const sideIndex = isNextLevel\n      ? [\n          this._getNextIndexInTriangle(angleShift),\n          this._getNextIndexInTriangle(angleShift, -1),\n        ]\n      : [\n          firstSide,\n          this._getNextIndexInTriangle(\n            firstSide,\n            triangleIndexInSide % 2 ? 1 : -1\n          ),\n        ];\n\n    for (let s = 0; s < 2; s++) {\n      const order = generateOrderInSide.call(this, s);\n\n      for (const { pointIndex, triangle1Points, triangle2Points } of order) {\n        this.renderer.renderLines(\n          triangle1Points[pointIndex],\n          triangle2Points[pointIndex]\n        );\n\n        yield;\n      }\n    }\n\n    function* generateOrderInSide(side) {\n      const t1Side = sideIndex[side];\n      const t2Side = getNextTriangleSide.call(this);\n\n      const triangle1Points = triangle1[t1Side];\n      const triangle2Points = triangle2[t2Side];\n\n      const last = side ? density : density - 1;\n\n      if (side === 0) {\n        for (let n = 0; n <= last; n++) {\n          yield { pointIndex: density - n, triangle1Points, triangle2Points };\n        }\n      } else {\n        for (let n = last; n >= 1; n--) {\n          yield { pointIndex: density - n, triangle1Points, triangle2Points };\n        }\n      }\n\n      function getNextTriangleSide() {\n        if (isNextLevel) {\n          return this._getNextIndexInTriangle(t1Side);\n        } else {\n          if (side === 0 && isLastTriangleInSide) {\n            return 1;\n          } else {\n            if (side === 1 && isLastTriangleInSide) {\n              return 0;\n            } else {\n              return this._getNextIndexInTriangle(t1Side, 1);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  _getNextIndexInTriangle(index, direction = 1) {\n    const result = index + direction;\n    if (result < 0) {\n      return 2;\n    }\n    if (result > 2) {\n      return 0;\n    }\n    return result;\n  }\n\n  *generateStrings() {\n    const {\n      fill,\n      renderTriangles,\n      renderCaps,\n      levels,\n      renderRing,\n      ringSize,\n      ringColor,\n    } = this.config;\n\n    const triangleLevels = this.getPoints();\n\n    let levelIndex = -1;\n\n    for (const level of triangleLevels) {\n      levelIndex++;\n      const isCapLevel = levelIndex === levels;\n\n      let triangleIndex = -1;\n      const lastIndexInLevel = level.length - 1;\n\n      for (const triangle of level) {\n        triangleIndex++;\n        const levelSideCount = this.calc.countPerLevelSide[levelIndex];\n        const triangleIndexInSide = triangleIndex % levelSideCount;\n\n        if (fill && !isCapLevel) {\n          if (triangleIndex === 0) {\n            yield* this.generateStringsBetweenTriangles({\n              triangle1: level[lastIndexInLevel],\n              triangle2: triangle,\n              level: levelIndex,\n              triangleIndex: lastIndexInLevel,\n              triangleIndexInSide: lastIndexInLevel % levelSideCount,\n            });\n          }\n          if (triangleIndex !== lastIndexInLevel) {\n            yield* this.generateStringsBetweenTriangles({\n              triangle1: triangle,\n              triangle2: level[triangleIndex + 1],\n              level: levelIndex,\n              triangleIndex,\n              triangleIndexInSide,\n            });\n          }\n\n          if (\n            triangleIndexInSide % 2 === 0 &&\n            (renderCaps || levelIndex < levels - 1)\n          ) {\n            const side = Math.floor(triangleIndex / levelSideCount);\n            const nextLevelSideCount =\n              this.calc.countPerLevelSide[levelIndex + 1];\n            const nextLevelTriangleIndex =\n              side * nextLevelSideCount + triangleIndexInSide + 1;\n\n            yield* this.generateStringsBetweenTriangles({\n              triangle1: triangle,\n              triangle2: triangleLevels[levelIndex + 1][nextLevelTriangleIndex],\n              level: levelIndex,\n              triangleIndex,\n              triangleIndexInSide,\n              isNextLevel: true,\n              nextLevelTriangleIndex,\n            });\n          }\n        }\n\n        const indexInSide =\n          triangleIndex % this.calc.countPerLevelSide[levelIndex];\n\n        if (renderTriangles && (!isCapLevel || indexInSide % 2)) {\n          yield* this.generateTriangleStrings({\n            points: triangle,\n            level: levelIndex,\n            indexInSide,\n          });\n        }\n      }\n    }\n\n    if (renderRing && ringSize) {\n      yield* this.circle.drawRing(this.renderer, {\n        ringSize: ringSize / 2,\n        color: ringColor,\n      });\n    }\n  }\n\n  getStepCount(calc) {\n    if (this.stepCount) {\n      return this.stepCount;\n    }\n\n    if (!calc) {\n      calc = this.getCalc();\n    }\n\n    const { levels, density, fill, renderTriangles, renderCaps } = this.config;\n    const { triangleCount, ringNailCount = 0 } = calc;\n\n    const fillStepsPerTriangle = fill ? density * 2 : 0;\n    const triangleSteps = renderTriangles ? density * 3 : 0;\n\n    const stepsPerTriangle = triangleSteps + fillStepsPerTriangle;\n\n    const levelsWithFillBetween = levels + (renderCaps ? 1 : 0);\n    const fillStepsBetweenLevels =\n      (fillStepsPerTriangle *\n        (levelsWithFillBetween - 1) *\n        6 *\n        levelsWithFillBetween) /\n      2;\n    const stepsPerCap = density + 1;\n    const capSteps =\n      renderTriangles && renderCaps ? 6 * levels * stepsPerCap : 0;\n\n    return (\n      triangleCount * stepsPerTriangle +\n      capSteps +\n      fillStepsBetweenLevels +\n      ringNailCount\n    );\n  }\n\n  drawNails() {\n    const triangleLevels = this.getPoints();\n    let index = 0;\n    for (const level of triangleLevels) {\n      for (const triangle of level) {\n        if (triangle != null) {\n          // A cap level has nulls between caps\n          for (const triangleSide of triangle) {\n            for (const point of triangleSide) {\n              this.nails.addNail({ point, number: index++ });\n            }\n          }\n        }\n      }\n    }\n\n    if (this.circle) {\n      this.circle.drawNails(this.nails);\n    }\n  }\n\n  static thumbnailConfig = {\n    levels: 3,\n    density: 3,\n    fill: false,\n    renderRing: true,\n  };\n}\n","import Spiral from './string_art_types/Spiral.js';\nimport Spirals from './string_art_types/Spirals.js';\nimport Wave from './string_art_types/Wave.js';\nimport Eye from './string_art_types/Eye.js';\nimport Mandala from './string_art_types/Mandala.js';\nimport Star from './string_art_types/Star.js';\nimport Assymetry from './string_art_types/Assymetry.js';\nimport Freestyle from './string_art_types/Freestyle.js';\nimport PolygonPattern from './string_art_types/PolygonPattern.js';\nimport Flower from './string_art_types/Flower.js';\nimport MaurerRose from './string_art_types/MaurerRose.js';\nimport FlowerOfLife from './string_art_types/FlowerOfLife.js';\n\nconst patternTypes = [\n  Star,\n  Assymetry,\n  Mandala,\n  Spiral,\n  Spirals,\n  Wave,\n  Eye,\n  Freestyle,\n  PolygonPattern,\n  Flower,\n  MaurerRose,\n  FlowerOfLife,\n];\n\nexport default patternTypes;\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nexport default class Star extends StringArt {\n  name = 'Star';\n  id = 'star';\n  link =\n    'https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj';\n  controls = [\n    {\n      key: 'sides',\n      label: 'Sides',\n      defaultValue: 3,\n      type: 'range',\n      attr: { min: 3, max: 20, step: 1 },\n    },\n    {\n      key: 'sideNails',\n      label: 'Nails per side',\n      defaultValue: 40,\n      type: 'range',\n      attr: { min: 1, max: 200, step: 1 },\n    },\n    {\n      key: 'ringSize',\n      label: 'Outer ring size',\n      defaultValue: 0.1,\n      type: 'range',\n      attr: {\n        min: 0,\n        max: 0.5,\n        step: ({ config: { sideNails, sides } }) => 1 / (sideNails * sides),\n      },\n      displayValue: ({ sideNails, sides, ringSize }) =>\n        Math.floor(ringSize * sideNails * sides),\n    },\n    Circle.rotationConfig,\n    {\n      key: 'colorGroup',\n      label: 'Color',\n      type: 'group',\n      children: [\n        {\n          key: 'innerColor',\n          label: 'Star color',\n          defaultValue: '#2ec0ff',\n          type: 'color',\n        },\n        {\n          key: 'outterColor',\n          label: 'Outter color',\n          defaultValue: '#2a82c6',\n          type: 'color',\n        },\n        {\n          key: 'ringColor',\n          label: 'Ring color',\n          defaultValue: '#2ec0ff',\n          type: 'color',\n        },\n      ],\n    },\n  ];\n\n  get n() {\n    if (!this._n) {\n      const { n, sides } = this.config;\n      const extraNails = n % sides;\n      this._n = n - extraNails;\n    }\n\n    return this._n;\n  }\n\n  setUpDraw() {\n    this._n = null;\n    super.setUpDraw();\n\n    const { sides, rotation, sideNails, margin = 0 } = this.config;\n    const circleConfig = {\n      size: this.size,\n      n: sideNails * sides,\n      margin,\n      rotation,\n    };\n\n    if (this.circle) {\n      this.circle.setConfig(circleConfig);\n    } else {\n      this.circle = new Circle(circleConfig);\n    }\n\n    this.sideAngle = (Math.PI * 2) / sides;\n    this.nailSpacing = this.circle.radius / sideNails;\n    this.starCenterStart = (sideNails % 1) * this.nailSpacing;\n\n    this.sides = new Array(sides).fill(null).map((_, side) => {\n      const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n      const circlePointsStart = side * sideNails;\n\n      return {\n        sinSideAngle: Math.sin(sideAngle),\n        cosSideAngle: Math.cos(sideAngle),\n        circlePointsStart,\n        circlePointsEnd: circlePointsStart + sideNails,\n      };\n    });\n  }\n\n  getStarPoint({ side, sideIndex }) {\n    const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n    const { sinSideAngle, cosSideAngle } = this.sides[side];\n    const [centerX, centerY] = this.circle.center;\n\n    return [centerX + sinSideAngle * radius, centerY + cosSideAngle * radius];\n  }\n\n  getArcPoint({ side, sideIndex }) {\n    return this.circle.getPoint(side * this.config.sideNails + sideIndex);\n  }\n\n  *generateStarPoints({ reverseOrder = false } = {}) {\n    const { sides, sideNails } = this.config;\n\n    for (let side = 0; side < sides; side++) {\n      const prevSide = side === 0 ? sides - 1 : side - 1;\n      for (let i = 0; i < sideNails; i++) {\n        const sideIndex = reverseOrder ? sideNails - i : i;\n        yield {\n          side,\n          prevSide,\n          sideIndex,\n          point: this.getStarPoint({ side, sideIndex }),\n        };\n      }\n    }\n  }\n\n  *drawStar() {\n    const { innerColor, sideNails, sides } = this.config;\n\n    this.renderer.setColor(innerColor);\n    let alternate = false;\n    const linesPerRound = sides % 2 ? sides * 2 : sides;\n    const rounds = sides % 2 ? Math.floor(sideNails / 2) : sideNails;\n\n    let prevPointIndex = 0;\n    let prevPoint = this.getStarPoint({ side: 0, sideIndex: prevPointIndex });\n\n    for (let round = 0; round <= rounds; round++) {\n      let side = 0;\n\n      const linesPerThisRound = linesPerRound - (round === rounds ? sides : 0);\n\n      for (let i = 0; i < linesPerThisRound; i++) {\n        side = side !== sides - 1 ? side + 1 : 0;\n        alternate = !alternate;\n        prevPointIndex = alternate ? sideNails - round : round;\n        const nextPoint = this.getStarPoint({\n          side,\n          sideIndex: prevPointIndex,\n        });\n        this.renderer.renderLines(prevPoint, nextPoint);\n        prevPoint = nextPoint;\n        yield;\n      }\n\n      prevPointIndex = alternate ? prevPointIndex - 1 : prevPointIndex + 1;\n      const nextPoint = this.getStarPoint({\n        side: 0,\n        sideIndex: prevPointIndex,\n      });\n      this.renderer.renderLines(prevPoint, nextPoint);\n      prevPoint = nextPoint;\n    }\n  }\n\n  *drawCircle() {\n    const { outterColor, sides, sideNails } = this.config;\n    this.renderer.setColor(outterColor);\n\n    let prevPoint = this.getStarPoint({ side: 0, sideIndex: 0 });\n    let alternate = false;\n    let isStar = false;\n\n    const rounds = sides % 2 ? Math.ceil(sideNails / 2) : sideNails;\n    let side = 0;\n    const linesPerRound = sides % 2 ? sides * 4 : sides * 2;\n\n    for (let round = 0; round <= rounds; round++) {\n      const linesPerThisRound =\n        linesPerRound - (round === rounds ? sides * 2 : 0);\n\n      for (let i = 0; i < linesPerThisRound; i++) {\n        const pointPosition = {\n          side,\n          sideIndex: alternate ? sideNails - round : round,\n        };\n\n        const nextPoint = isStar\n          ? this.getStarPoint(pointPosition)\n          : this.getArcPoint(pointPosition);\n\n        this.renderer.renderLines(prevPoint, nextPoint);\n        prevPoint = nextPoint;\n\n        yield;\n        isStar = !isStar;\n\n        if (isStar) {\n          side = side !== sides - 1 ? side + 1 : 0;\n          alternate = !alternate;\n        }\n      }\n      prevPoint = this.getStarPoint({ side: 0, sideIndex: round + 1 });\n    }\n  }\n\n  *generateStrings() {\n    yield* this.drawCircle();\n\n    const { ringSize, ringColor } = this.config;\n\n    if (ringSize !== 0) {\n      yield* this.circle.drawRing(this.renderer, {\n        ringSize,\n        color: ringColor,\n      });\n    }\n    yield* this.drawStar();\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails);\n\n    for (const { point, side, sideIndex } of this.generateStarPoints()) {\n      this.nails.addNail({\n        point,\n        number: sideIndex ? `${side}_${sideIndex}` : 0,\n      });\n    }\n\n    this.circle.drawNails(this.nails);\n  }\n\n  getStepCount() {\n    const { sides, sideNails, ringSize } = this.config;\n    const ringCount = ringSize ? sideNails * sides : 0;\n    const starAndCircleCount = 3 * sides * (sideNails + (sides % 2 ? 1 : 0));\n\n    return starAndCircleCount + ringCount;\n  }\n\n  static thumbnailConfig = {\n    sideNails: 18,\n  };\n}\n","import Color from '../helpers/Color.js';\nimport Circle from '../helpers/Circle.js';\nimport Mandala from './Mandala.js';\n\nexport default class Wave extends Mandala {\n  id = 'wave';\n  name = 'Wave';\n  link =\n    'https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1';\n  controls = [\n    {\n      ...Circle.nailsConfig,\n      defaultValue: 200,\n    },\n    {\n      key: 'layerFill',\n      label: 'Layer fill',\n      defaultValue: 0.5,\n      type: 'range',\n      attr: {\n        min: ({ config: { n } }) => 1 / n,\n        max: 1,\n        step: ({ config: { n } }) => 1 / n,\n      },\n      displayValue: ({ layerFill }) => Math.floor(100 * layerFill) + '%',\n    },\n    {\n      ...Circle.rotationConfig,\n      defaultValue: 176 / 360,\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 11,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      key: 'layerSpread',\n      label: 'Layer spread',\n      defaultValue: 15 / 200,\n      type: 'range',\n      attr: {\n        min: 0,\n        max: 1,\n        step: ({ config: { n } }) => 1 / n,\n      },\n      displayValue: ({ layerSpread, n }) => Math.round(layerSpread * n),\n    },\n    {\n      key: 'reverse',\n      label: 'Reverse',\n      defaultValue: true,\n      type: 'checkbox',\n    },\n    Color.getConfig({\n      defaults: {\n        isMultiColor: true,\n        multicolorRange: 216,\n        multicolorStart: 263,\n        color: '#ffffff',\n        multicolorByLightness: true,\n        minLightness: 10,\n        maxLightness: 90,\n      },\n      exclude: ['colorCount'],\n    }),\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, layerSpread } = this.config;\n    this.layerShift = Math.round(n * layerSpread);\n    this.base = 2;\n  }\n\n  *generateStrings() {\n    const {layers, reverse} = this.config;\n\n    for (let layer = 0; layer < layers; layer++) {\n      yield* this.drawTimesTable({\n        color: this.color.getColor(layer),\n        shift: this.layerShift * (reverse ? 1 : -1) * layer,\n        time: layer,\n      });\n    }\n  }\n\n  static thumbnailConfig = {\n    n: 70,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nexport default class Freestyle extends StringArt {\n  name = 'Freestyle';\n  id = 'freestyle';\n  link =\n    'https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for';\n  controls = [\n    {\n      key: 'n',\n      label: 'Circle nails',\n      defaultValue: 80,\n      type: 'range',\n      attr: { min: 1, max: 300, step: 1 },\n    },\n    {\n      key: 'minNailDistance',\n      label: 'Min nail distance',\n      defaultValue: 20,\n      type: 'range',\n      attr: { min: 1, max: 300, step: 1 },\n    },\n    {\n      key: 'color',\n      label: 'Color',\n      defaultValue: '#ec6ad0',\n      type: 'color',\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      type: 'group',\n      children: [\n        {\n          key: 'layer1',\n          label: 'Layer 1',\n          type: 'group',\n          children: [\n            {\n              key: 'show1',\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: 'radius1',\n              label: 'Radius',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0.01, max: 1, step: 0.01 },\n              show: ({ show1 }) => show1,\n            },\n            {\n              key: 'x1',\n              label: 'Position X',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show1 }) => show1,\n            },\n            {\n              key: 'y1',\n              label: 'Position Y',\n              defaultValue: 0,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show1 }) => show1,\n            },\n            {\n              ...Circle.rotationConfig,\n              key: 'rotation1',\n              show: ({ show1 }) => show1,\n            },\n            {\n              key: 'reverse1',\n              label: 'Reverse',\n              defaultValue: false,\n              type: 'checkbox',\n              show: ({ show1 }) => show1,\n            },\n          ],\n        },\n        {\n          key: 'layer2',\n          label: 'Layer 2',\n          type: 'group',\n          children: [\n            {\n              key: 'show2',\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: 'radius2',\n              label: 'Radius',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0.01, max: 1, step: 0.01 },\n              show: ({ show2 }) => show2,\n            },\n            {\n              key: 'x2',\n              label: 'Position X',\n              defaultValue: 0,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show2 }) => show2,\n            },\n            {\n              key: 'y2',\n              label: 'Position Y',\n              defaultValue: 1,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show2 }) => show2,\n            },\n            {\n              ...Circle.rotationConfig,\n              key: 'rotation2',\n              show: ({ show2 }) => show2,\n            },\n            {\n              key: 'reverse2',\n              label: 'Reverse',\n              defaultValue: false,\n              type: 'checkbox',\n              show: ({ show2 }) => show2,\n            },\n          ],\n        },\n        {\n          key: 'layer3',\n          label: 'Layer 3',\n          type: 'group',\n          children: [\n            {\n              key: 'show3',\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: 'radius3',\n              label: 'Radius',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0.01, max: 1, step: 0.01 },\n              show: ({ show3 }) => show3,\n            },\n            {\n              key: 'x3',\n              label: 'Position X',\n              defaultValue: 1,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show3 }) => show3,\n            },\n            {\n              key: 'y3',\n              label: 'Position Y',\n              defaultValue: 1,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show3 }) => show3,\n            },\n            {\n              ...Circle.rotationConfig,\n              key: 'rotation3',\n              show: ({ show3 }) => show3,\n            },\n            {\n              key: 'reverse3',\n              label: 'Reverse',\n              defaultValue: false,\n              type: 'checkbox',\n              show: ({ show3 }) => show3,\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    Object.assign(this, this.getSetUp());\n  }\n\n  getSetUp() {\n    const { n, margin = 0, minNailDistance } = this.config;\n    const size = this.getSize();\n\n    const maxRadius = Math.min(...size.map(v => v - 2 * margin)) / 2;\n    const layers = new Array(3)\n      .fill(null)\n      .map((_, i) => getLayer.call(this, i + 1))\n      .filter(({ enable }) => enable);\n\n    const maxShapeNailsCount = Math.max(\n      ...layers.map(({ circle }) => circle.config.n)\n    );\n\n    return {\n      layers,\n      maxShapeNailsCount,\n    };\n\n    function getLayer(layerIndex) {\n      const prop = prop => this.config[prop + layerIndex];\n\n      const props = {\n        enable: prop('show'),\n        isReverse: prop('reverse'),\n        position: [prop('x'), prop('y')],\n        radius: maxRadius * prop('radius'),\n        rotation: prop('rotation'),\n      };\n\n      const circumsference = Math.PI * 2 * props.radius;\n      const circleNails = Math.min(\n        n,\n        Math.floor(circumsference / minNailDistance)\n      );\n\n      const circle = new Circle({\n        radius: props.radius,\n        center: props.position.map(\n          (v, i) =>\n            props.radius + margin + (size[i] - (props.radius + margin) * 2) * v\n        ),\n        n: circleNails,\n        rotation: props.rotation,\n        reverse: props.isReverse,\n      });\n\n      return {\n        circle,\n        ...props,\n      };\n    }\n  }\n\n  getPoint(layer, index) {\n    const { circle } = layer;\n    let circleIndex = Math.round(\n      (index * circle.config.n) / this.maxShapeNailsCount\n    );\n    return circle.getPoint(circleIndex);\n  }\n\n  *generateStrings() {\n    const { n, color } = this.config;\n\n    this.renderer.setColor(color);\n    let prevCirclePoint;\n\n    for (let i = 0; i < this.maxShapeNailsCount; i++) {\n      for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n        const layer = this.layers[layerIndex];\n        const startPoint = prevCirclePoint ?? this.getPoint(layer, i);\n\n        const positions = [];\n        if (layerIndex === 0 && i) {\n          positions.push(this.getPoint(layer, i));\n        }\n\n        let nextLayerIndex = layerIndex + 1;\n        if (nextLayerIndex === this.layers.length) {\n          nextLayerIndex = 0;\n        }\n\n        prevCirclePoint = this.getPoint(this.layers[nextLayerIndex], i);\n\n        this.renderer.renderLines(startPoint, prevCirclePoint);\n        yield;\n      }\n    }\n  }\n\n  drawNails() {\n    const n = this.config;\n    this.layers.forEach(({ circle }, layerIndex) =>\n      circle.drawNails(this.nails, {\n        getNumber: i => `${layerIndex + 1}_${i + 1}`,\n      })\n    );\n  }\n\n  getStepCount() {\n    const { layers, maxShapeNailsCount } = this.getSetUp();\n    return layers.length * maxShapeNailsCount - 1;\n  }\n\n  static thumbnailConfig = {\n    minNailDistance: 3,\n  };\n}\n","const elements = {\n  controls: document.querySelector('#controls'),\n  controlsPanel: document.querySelector('#controls_panel'),\n  sidebarForm: document.querySelector('#sidebar_form'),\n};\n\nconst EVENTS = new Set(['input', 'change']);\nconst STATE_LOCAL_STORAGE_KEY = 'controls_state';\nconst RANGE_SCROLL_LOCK_TIMEOUT = 120;\n\nlet inputTimeout;\n\nexport default class EditorControls {\n  constructor({ pattern }) {\n    this.pattern = pattern;\n    this.state = this._getState() ?? { groups: {} };\n\n    this.eventHandlers = {\n      input: new Set(),\n      change: new Set(),\n    };\n\n    this._toggleFieldset = e => {\n      if (e.target.nodeName === 'LEGEND') {\n        e.target.parentElement.classList.toggle('minimized');\n        const groupId = e.target.parentElement.dataset.group;\n        this.state = {\n          ...this.state,\n          groups: {\n            ...this.state.groups,\n            [groupId]: !e.target.parentElement.classList.contains('minimized'),\n          },\n        };\n        this._updateState(this.state);\n      }\n    };\n\n    this._toggleFieldSetOnEnter = e => {\n      if (e.target.nodeName === 'LEGEND' && e.key === 'Enter') {\n        this._toggleFieldset(e);\n      }\n    };\n\n    this._wrappedOnInput = e => this._onInput(e);\n    elements.controls.addEventListener('input', this._wrappedOnInput);\n    this._wrappedOnTouchStart = e => this._onTouchStart(e);\n    elements.controls.addEventListener('touchstart', this._wrappedOnTouchStart);\n    elements.sidebarForm.addEventListener('click', this._toggleFieldset);\n    elements.sidebarForm.addEventListener(\n      'keydown',\n      this._toggleFieldSetOnEnter\n    );\n    this.controlElements = {};\n    this.renderControls();\n  }\n\n  destroy() {\n    elements.controls.removeEventListener('input', this._wrappedOnInput);\n    elements.sidebarForm.removeEventListener('click', this._toggleFieldset);\n    elements.sidebarForm.removeEventListener(\n      'keydown',\n      this._toggleFieldSetOnEnter\n    );\n    elements.controls.removeEventListener(\n      'touchstart',\n      this._wrappedOnTouchStart\n    );\n    elements.controls.innerHTML = '';\n  }\n\n  addEventListener(event, eventHandler) {\n    if (!EVENTS.has(event)) {\n      throw new Error(`Unsupported event for EditorControls, \"${event}\"!`);\n    }\n\n    if (!(eventHandler instanceof Function)) {\n      throw new Error('Invalid event handler.');\n    }\n\n    this.eventHandlers[event].add(eventHandler);\n  }\n\n  _triggerEvent(event, eventData) {\n    for (const eventHandler of this.eventHandlers[event]) {\n      eventHandler(eventData);\n    }\n  }\n\n  /**\n   * Needed for range inputs, to avoid changing the value when the user drags to\n   * scroll and accidentally touches a range input when intending to scroll.\n   * @param {Event} e\n   */\n  _onTouchStart(e) {\n    if (e.target.getAttribute('type') === 'range') {\n      this._postponeRangeInput = true;\n      this.currentInputRange = e.target;\n      this.currentInputRangeValue = e.target.value;\n      this._rangeLockTimeout = setTimeout(() => {\n        this._postponeRangeInput = false;\n      }, RANGE_SCROLL_LOCK_TIMEOUT);\n      this._wrappedOnTouchEnd = e => this._onTouchEnd(e);\n      document.body.addEventListener('touchend', this._wrappedOnTouchEnd);\n      this._wrappedOnRangeScroll = e => this._onRangeScroll(e);\n      elements.controlsPanel.addEventListener(\n        'scroll',\n        this._wrappedOnRangeScroll\n      );\n    }\n  }\n\n  _onTouchEnd() {\n    document.body.removeEventListener('touchend', this._wrappedOnTouchEnd);\n    elements.controlsPanel.removeEventListener(\n      'scroll',\n      this._wrappedOnRangeScroll\n    );\n\n    if (this._lockRange) {\n      this._lockRange = false;\n      if (this.currentInputRange) {\n        this.currentInputRange.value = this.currentInputRangeValue;\n      }\n    }\n\n    this.currentInputRange = this.currentInputRangeValue = null;\n  }\n\n  _onRangeScroll() {\n    this._lockRange = true;\n  }\n\n  _onInput(e) {\n    clearTimeout(inputTimeout);\n    clearTimeout(this._postponeRangeInputTimeout);\n\n    if (this._postponeRangeInput && e.target.getAttribute('type') === 'range') {\n      e.preventDefault();\n      this._postponeRangeInputTimeout = setTimeout(() => {\n        this._onInput(e);\n      }, RANGE_SCROLL_LOCK_TIMEOUT);\n      return false;\n    }\n    if (this._lockRange) {\n      e.preventDefault();\n      return false;\n    }\n\n    this.updateInput({\n      inputElement: e.target,\n      originalEvent: e,\n      deferChange: true,\n    });\n  }\n\n  updateInput({ inputElement, originalEvent, deferChange = true }) {\n    const inputValue = getInputValue(inputElement.type, inputElement);\n    const controlKey = inputElement.id.replace(/^config_/, '');\n\n    this.pattern.setConfigValue(controlKey, inputValue);\n\n    const { config, displayValue } = this.controlElements[controlKey];\n    if (displayValue) {\n      const formattedValue = config.displayValue\n        ? config.displayValue(this.pattern.config, config)\n        : inputElement.value;\n      displayValue.innerText = formattedValue;\n    }\n\n    const eventData = Object.freeze({\n      control: controlKey,\n      value: inputValue,\n      originalEvent,\n      pattern: this.pattern,\n    });\n\n    this._triggerEvent('input', eventData);\n\n    const triggerChange = () => {\n      this._triggerEvent('change', eventData);\n      this.updateControlsVisibility();\n    };\n\n    if (deferChange) {\n      inputTimeout = setTimeout(triggerChange, 100);\n    } else {\n      triggerChange();\n    }\n  }\n\n  _getState() {\n    const state = localStorage.getItem(STATE_LOCAL_STORAGE_KEY);\n    if (state) {\n      try {\n        return JSON.parse(state);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n  _updateState(newState) {\n    if (newState) {\n      localStorage.setItem(STATE_LOCAL_STORAGE_KEY, JSON.stringify(newState));\n    } else {\n      localStorage.removeItem(STATE_LOCAL_STORAGE_KEY);\n    }\n  }\n\n  updateControlsVisibility(configControls = this.pattern.configControls) {\n    configControls.forEach(control => {\n      if (control.show) {\n        const shouldShowControl = control.show(this.pattern.config, control);\n        const controlEl = this.controlElements[control.key].control;\n        if (controlEl) {\n          if (shouldShowControl) {\n            controlEl.removeAttribute('hidden');\n          } else {\n            controlEl.setAttribute('hidden', 'hidden');\n          }\n        }\n      }\n\n      if (control.isDisabled) {\n        const shouldDisableControl = control.isDisabled(this.pattern.config);\n        const inputEl = this.controlElements[control.key].input;\n        if (inputEl) {\n          if (shouldDisableControl) {\n            inputEl.setAttribute('disabled', 'disabled');\n          } else {\n            inputEl.removeAttribute('disabled');\n          }\n        }\n      }\n\n      if (control.children) {\n        this.updateControlsVisibility(control.children);\n      }\n    });\n  }\n\n  updateInputs(config) {\n    Object.entries(config).forEach(([key, value]) => {\n      const { input, value: valueEl } = this.controlElements[key];\n      if (input) {\n        if (input.type === 'checkbox') {\n          input.checked = value;\n        } else {\n          input.value = value;\n        }\n        if (valueEl) {\n          valueEl.innerText = value;\n        }\n      }\n    });\n  }\n\n  renderControls(containerEl = elements.controls, _configControls) {\n    const configControls = _configControls ?? this.pattern.configControls;\n    containerEl.innerHTML = '';\n    const controlsFragment = document.createDocumentFragment();\n\n    configControls.forEach(control => {\n      const controlId = `config_${control.key}`;\n      const controlElements = (this.controlElements[control.key] = {\n        config: control,\n      });\n\n      let controlEl;\n\n      if (control.type === 'group') {\n        controlEl = document.createElement('fieldset');\n        controlEl.setAttribute('data-group', control.key);\n        const groupTitleEl = document.createElement('legend');\n        groupTitleEl.setAttribute('tabindex', '0');\n        groupTitleEl.innerText = control.label;\n        controlEl.appendChild(groupTitleEl);\n        controlEl.className = 'control control_group';\n        if (control.defaultValue === 'minimized') {\n          controlEl.classList.add('minimized');\n          this.state.groups[control.key] = false;\n        }\n        const childrenContainer = document.createElement('div');\n        controlEl.appendChild(childrenContainer);\n        this.renderControls(childrenContainer, control.children);\n      } else {\n        controlEl = document.createElement('div');\n        controlEl.className = 'control';\n\n        const label = document.createElement('label');\n        label.innerHTML = control.label;\n        label.setAttribute('for', controlId);\n\n        const inputEl = (controlElements.input =\n          document.createElement('input'));\n        inputEl.setAttribute('type', control.type);\n        const inputValue =\n          this.pattern.config[control.key] ?? control.defaultValue;\n\n        if (control.attr) {\n          Object.entries(control.attr).forEach(([attr, value]) => {\n            const realValue =\n              value instanceof Function ? value(this.pattern) : value;\n            inputEl.setAttribute(attr, realValue);\n          });\n        }\n\n        if (control.type === 'checkbox') {\n          inputEl.checked = inputValue;\n          controlEl.appendChild(inputEl);\n          controlEl.appendChild(label);\n        } else {\n          controlEl.appendChild(label);\n          controlEl.appendChild(inputEl);\n          inputEl.value = inputValue;\n          const inputValueEl = (controlElements.displayValue =\n            document.createElement('span'));\n          inputValueEl.id = `config_${control.key}_value`;\n          inputValueEl.innerText = control.displayValue\n            ? control.displayValue(this.pattern.config, control)\n            : inputValue;\n          inputValueEl.className = 'control_input_value';\n          controlEl.appendChild(inputValueEl);\n        }\n        inputEl.id = controlId;\n      }\n\n      this.controlElements[control.key].control = controlEl;\n      controlEl.id = `control_${control.key}`;\n      controlsFragment.appendChild(controlEl);\n    });\n\n    containerEl.appendChild(controlsFragment);\n    this.updateGroupsState();\n    requestAnimationFrame(() => this.updateControlsVisibility());\n  }\n\n  updateGroupsState() {\n    const groups = elements.sidebarForm.querySelectorAll('[data-group]');\n    groups.forEach(groupEl => {\n      const groupId = groupEl.dataset.group;\n      const groupState = this.state.groups[groupId];\n      if (typeof groupState === 'boolean') {\n        if (groupState) {\n          groupEl.classList.remove('minimized');\n        } else {\n          groupEl.classList.add('minimized');\n        }\n      }\n    });\n  }\n}\n\nfunction getInputValue(type, inputElement) {\n  switch (type) {\n    case 'range':\n      return parseFloat(inputElement.value);\n    case 'checkbox':\n      return inputElement.checked;\n    case 'number':\n      return parseFloat(inputElement.value);\n    default:\n      return inputElement.value;\n  }\n}\n","const sizeControls = document.querySelector('#size_controls');\n\nconst elements = {\n  sizeSelect: sizeControls.querySelector('#size_select'),\n  sizeCustom: sizeControls.querySelector('#size_custom'),\n  width: sizeControls.querySelector('#size_custom_width'),\n  height: sizeControls.querySelector('#size_custom_height'),\n  orientationSelect: sizeControls.querySelector('#size_orientation_select'),\n};\n\nfunction cmToPixels(cm, dpi = 300) {\n  return Math.floor((cm / 2.54) * dpi);\n}\n\nconst SCREEN_SIZE = [\n  Math.floor(window.screen.width),\n  Math.floor(window.screen.height),\n];\n\nconst SIZES = [\n  { id: 'fit', name: 'Fit to screen' },\n  {\n    id: 'A4',\n    value: [20, 28].map(v => cmToPixels(v)),\n    orientationSelect: true,\n  },\n  {\n    id: 'A3',\n    value: [28, 40].map(v => cmToPixels(v)),\n    orientationSelect: true,\n  },\n  {\n    id: 'screen',\n    name: `Screen size (${SCREEN_SIZE.join('x')})`,\n    value: SCREEN_SIZE,\n  },\n  { id: 'custom', name: 'Custom...' },\n];\n\nexport default class EditorSizeControls {\n  element = document.querySelector('#size_controls');\n\n  constructor({ getCurrentSize }) {\n    const sizeOptionsFragment = document.createDocumentFragment();\n    SIZES.forEach(size => {\n      const sizeListItem = document.createElement('option');\n      sizeListItem.setAttribute('value', size.id);\n      sizeListItem.innerText = size.name ?? size.id;\n      sizeOptionsFragment.appendChild(sizeListItem);\n    });\n    elements.sizeSelect.appendChild(sizeOptionsFragment);\n    this.selectedSize = SIZES[0];\n\n    elements.sizeSelect.addEventListener('change', e => {\n      const selectedSizeId = e.target.value;\n      const size = SIZES.find(({ id }) => id === selectedSizeId);\n      this.selectedSize = size;\n\n      if (size.id === 'custom') {\n        elements.sizeCustom.removeAttribute('hidden');\n        const [width, height] = getCurrentSize();\n        elements.width.value = width;\n        elements.height.value = height;\n      } else {\n        elements.sizeCustom.setAttribute('hidden', 'hidden');\n        this._notifyOnChange(this.getValue());\n      }\n\n      if (size.orientationSelect) {\n        elements.orientationSelect.removeAttribute('hidden');\n      } else {\n        elements.orientationSelect.setAttribute('hidden', 'hidden');\n      }\n    });\n\n    elements.orientationSelect.addEventListener('change', e => {\n      this._notifyOnChange(this.getValue());\n    });\n\n    elements.sizeCustom.addEventListener('focusin', e => {\n      e.target.select();\n    });\n\n    elements.sizeCustom.addEventListener('input', () => {\n      this._notifyOnChange([\n        elements.width.value ? parseInt(elements.width.value) : null,\n        elements.height.value ? parseInt(elements.height.value) : null,\n      ]);\n    });\n  }\n\n  _notifyOnChange([width, height] = []) {\n    this.element.dispatchEvent(\n      new CustomEvent('sizechange', { detail: { width, height } })\n    );\n  }\n\n  getValue() {\n    if (this.selectedSize.id === 'custom') {\n      return [\n        parseInt(elements.width.value, 10),\n        parseInt(elements.height.value, 10),\n      ];\n    } else {\n      let value = this.selectedSize.value;\n      if (\n        this.selectedSize.orientationSelect &&\n        elements.orientationSelect.value === 'horizontal'\n      ) {\n        value = Array.from(value).reverse();\n      }\n      return value;\n    }\n  }\n}\n","import Renderer from './Renderer.js';\nimport { PI2 } from '../helpers/math_utils.js';\n\nexport default class CanvasRenderer extends Renderer {\n  constructor(parentElement) {\n    super(parentElement);\n\n    this.canvas = document.createElement('canvas');\n    this.ctx = this.canvas.getContext('2d');\n\n    const dpr = window.devicePixelRatio || 1;\n    const bsr =\n      this.ctx.webkitBackingStorePixelRatio ||\n      this.ctx.mozBackingStorePixelRatio ||\n      this.ctx.msBackingStorePixelRatio ||\n      this.ctx.oBackingStorePixelRatio ||\n      this.ctx.backingStorePixelRatio ||\n      1;\n    this.pixelRatio = dpr / bsr;\n    this.ctx.globalCompositeOperation = 'source-over';\n\n    parentElement.appendChild(this.canvas);\n  }\n\n  get element() {\n    return this.canvas;\n  }\n\n  reset() {\n    this.ctx.clearRect(0, 0, ...this.getSize());\n    this.canvas.removeAttribute('width');\n    this.canvas.removeAttribute('height');\n\n    const [width, height] = this.getSize();\n    this.canvas.setAttribute('width', width);\n    this.canvas.setAttribute('height', height);\n  }\n\n  setColor(color) {\n    this.ctx.strokeStyle = color;\n  }\n\n  setLineWidth(width) {\n    this.ctx.lineWidth = width;\n  }\n\n  setBackground(color) {\n    this.ctx.globalCompositeOperation = 'destination-over';\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(0, 0, ...this.getSize());\n    this.ctx.globalCompositeOperation = 'source-over';\n  }\n\n  getSize() {\n    return [\n      this.canvas.clientWidth * this.pixelRatio,\n      this.canvas.clientHeight * this.pixelRatio,\n    ];\n  }\n\n  renderLines(startPosition, ...positions) {\n    this.ctx.beginPath();\n    this.ctx.moveTo(...startPosition);\n\n    for (const position of positions) {\n      this.ctx.lineTo(...position);\n    }\n\n    this.ctx.stroke();\n  }\n\n  renderNails(nails, { color, fontSize, radius, renderNumbers, margin = 0 }) {\n    const centerX = this.canvas.width / 2;\n\n    this.ctx.globalCompositeOperation = 'source-over';\n    this.ctx.beginPath();\n    this.ctx.fillStyle = color;\n    this.ctx.textBaseline = 'middle';\n    this.ctx.font = `${fontSize}px sans-serif`;\n    const nailNumberOffset = radius + margin;\n\n    nails.forEach(({ point: [x, y], number }) => {\n      this.ctx.moveTo(x + radius, y);\n      this.ctx.arc(x, y, radius, 0, PI2);\n      if (renderNumbers && number != null) {\n        const isRightAlign = x < centerX;\n\n        const numberPosition = [\n          isRightAlign ? x - nailNumberOffset : x + nailNumberOffset,\n          y,\n        ];\n\n        this.ctx.textAlign = isRightAlign ? 'right' : 'left';\n        this.ctx.fillText(String(number), ...numberPosition);\n      }\n    });\n\n    this.ctx.fill();\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  toDataURL() {\n    return this.canvas.toDataURL();\n  }\n}\n","const MAX_FLOAT_DECIMALS = 6;\n\nexport function serializeConfig(pattern) {\n  const { defaultConfig, config } = pattern;\n\n  const nonDefaultConfigValues = Object.entries(config).map(([key, value]) => {\n    if (value === defaultConfig[key]) {\n      return null;\n    }\n\n    if (typeof value === 'boolean') {\n      return `!${value ? 1 : 0}`;\n    }\n\n    if (typeof value === 'number') {\n      return parseFloat(value.toFixed(MAX_FLOAT_DECIMALS));\n    }\n\n    return value;\n  });\n\n  while (nonDefaultConfigValues[nonDefaultConfigValues.length - 1] === null) {\n    nonDefaultConfigValues.pop();\n  }\n\n  if (!nonDefaultConfigValues.length) {\n    return '';\n  }\n\n  const serializedConfigValues = nonDefaultConfigValues\n    .join('_')\n    .replace(/\\_{2,}/g, match => '~' + match.length + '_');\n  return serializedConfigValues;\n}\n\nconst numberRegExp = /^\\-?\\d+(\\.\\d+)?$/;\nconst booleanRegExp = /^(?:!)([01])$/;\n\nexport function deserializeConfig(pattern, serializedCofig) {\n  const serializedConfigValues = serializedCofig\n    .replace(/(?:~)(\\d+)(?:_)/g, (_, commaCount) =>\n      new Array(+commaCount).fill('_').join('')\n    )\n    .split('_')\n    .map(v => {\n      if (v === '') {\n        return null;\n      }\n\n      if (numberRegExp.test(v)) {\n        return parseFloat(v);\n      }\n\n      const booleanMatch = v.match(booleanRegExp);\n      if (booleanMatch) {\n        return booleanMatch[1] === '1';\n      }\n\n      return v;\n    });\n\n  const configKeys = Object.keys(pattern.defaultConfig);\n\n  return serializedConfigValues.reduce((config, serializedValue, i) => {\n    if (serializedValue !== null) {\n      const key = configKeys[i];\n      return { ...config, [key]: serializedValue };\n    }\n\n    return config;\n  }, {});\n}\n","export async function share(input) {\n  try {\n    navigator.share(await getShareData(input));\n  } catch (error) {\n    alert('Error: ' + error.message);\n  }\n}\n\nexport async function isShareSupported(input) {\n  if (!navigator.share) {\n    return false;\n  }\n\n  const shareData = await getShareData(input);\n  return navigator.canShare(shareData);\n}\n\nasync function getShareData({ renderer, pattern }) {\n  const dataUrl = renderer.toDataURL();\n  const blob = await (await fetch(dataUrl)).blob();\n  const files = [\n    new File([blob], pattern.name + '.jpg', {\n      type: blob.type,\n      lastModified: new Date().getTime(),\n    }),\n  ];\n  return {\n    url: window.location.href,\n    files,\n    title: document.title,\n    text: 'String Art Studio - ' + pattern.name,\n  };\n}\n","import Renderer from './Renderer.js';\nimport { PI2 } from '../helpers/math_utils.js';\n\nconst SVG_NS = 'http://www.w3.org/2000/svg';\n\nexport default class SVGRenderer extends Renderer {\n  constructor(parentElement) {\n    super(parentElement);\n\n    this.svg = document.createElementNS(SVG_NS, 'svg');\n    this.svg.style.setProperty('display', 'block');\n    this.backgroundGroup = document.createElementNS(SVG_NS, 'g');\n    this.backgroundGroup.setAttribute('data-id', 'background');\n    this.linesGroup = document.createElementNS(SVG_NS, 'g');\n    this.linesGroup.setAttribute('data-id', 'lines');\n    this.nailsGroup = document.createElementNS(SVG_NS, 'g');\n    this.nailsGroup.setAttribute('data-id', 'nails');\n\n    this.nailsCirclesGroup = document.createElementNS(SVG_NS, 'g');\n    this.nailsCirclesGroup.setAttribute('data-id', 'nailsCircles');\n\n    this.nailsTextGroup = document.createElementNS(SVG_NS, 'g');\n    this.nailsTextGroup.setAttribute('data-id', 'nailsText');\n\n    this.nailsGroup.appendChild(this.nailsCirclesGroup);\n    this.nailsGroup.appendChild(this.nailsTextGroup);\n\n    this.svg.appendChild(this.backgroundGroup);\n    this.svg.appendChild(this.linesGroup);\n    this.svg.appendChild(this.nailsGroup);\n\n    this.svg.setAttribute('xmlns', SVG_NS);\n\n    parentElement.appendChild(this.svg);\n  }\n\n  get element() {\n    return this.svg;\n  }\n\n  reset() {\n    this.linesGroup.innerHTML = '';\n    this.nailsCirclesGroup.innerHTML = '';\n    this.nailsTextGroup.innerHTML = '';\n\n    const [width, height] = this.getSize().map(Math.trunc);\n    this.svg.setAttributeNS(SVG_NS, 'viewBox', `0 0 ${width} ${height}`);\n    this.svg.setAttributeNS(SVG_NS, 'width', width);\n    this.svg.setAttributeNS(SVG_NS, 'height', height);\n    this.svg.style.width = width + 'px';\n    this.svg.style.height = height + 'px';\n    this.currentColor = null;\n    this.lineWidth = null;\n  }\n\n  setColor(color) {\n    if (color !== this.currentColor) {\n      this.currentLineGroup = document.createElementNS(SVG_NS, 'g');\n      this.currentLineGroup.setAttribute('stroke', color);\n      this.currentLineGroup.setAttribute('stroke-width', this.lineWidth);\n      this.linesGroup.appendChild(this.currentLineGroup);\n      this.currentColor = color;\n    }\n  }\n\n  setLineWidth(width) {\n    this.lineWidth = width ?? '1';\n    this.linesGroup.setAttributeNS(SVG_NS, 'stroke-width', width ?? '1');\n    this.linesGroup.childNodes.forEach(group =>\n      group.setAttributeNS(SVG_NS, 'stroke-width', width ?? '1')\n    );\n  }\n\n  setBackground(color) {\n    if (color) {\n      if (!this.background) {\n        this.background = document.createElementNS(SVG_NS, 'rect');\n        this.background.setAttribute('width', '100%');\n        this.background.setAttribute('height', '100%');\n        this.backgroundGroup.appendChild(this.background);\n      }\n\n      this.background.setAttribute('fill', color);\n    } else {\n      this.background = null;\n      this.backgroundGroup.innerHTML = '';\n    }\n  }\n\n  setSize(size) {\n    super.setSize(size);\n    const [width, height] = size.map(Math.trunc);\n\n    this.svg.setAttributeNS(SVG_NS, 'viewBox', `0 0 ${width} ${height}`);\n    this.svg.setAttributeNS(SVG_NS, 'width', width);\n    this.svg.setAttributeNS(SVG_NS, 'height', height);\n  }\n  renderLines(startPosition, ...positions) {\n    let previousPoint = startPosition;\n    const fragment = document.createDocumentFragment();\n\n    for (const position of positions) {\n      const line = document.createElementNS(SVG_NS, 'line');\n      line.setAttribute('x1', Math.trunc(previousPoint[0]));\n      line.setAttribute('y1', Math.trunc(previousPoint[1]));\n      line.setAttribute('x2', Math.trunc(position[0]));\n      line.setAttribute('y2', Math.trunc(position[1]));\n      previousPoint = position;\n\n      fragment.appendChild(line);\n    }\n\n    this.currentLineGroup.appendChild(fragment);\n  }\n\n  renderNails(nails, { color, fontSize, radius, renderNumbers, margin = 0 }) {\n    const centerX = this.getSize()[0] / 2;\n    this.nailsCirclesGroup.innerHTML = this.nailsTextGroup.innerHTML = '';\n    const circlesFragment = document.createDocumentFragment();\n    const textFragment = document.createDocumentFragment();\n    this.nailsGroup.setAttribute('fill', color);\n    const nailNumberOffset = radius + margin;\n\n    this.nailsTextGroup.style.fontSize = fontSize;\n    nails.forEach(({ point: [x, y], number }) => {\n      const circle = document.createElementNS(SVG_NS, 'circle');\n      circle.setAttribute('cx', x);\n      circle.setAttribute('cy', y);\n      circle.setAttribute('r', radius);\n      circlesFragment.appendChild(circle);\n\n      if (renderNumbers && number != null) {\n        const isRightAlign = x < centerX;\n\n        const numberPosition = [\n          isRightAlign ? x - nailNumberOffset : x + nailNumberOffset,\n          y,\n        ];\n\n        const textEl = document.createElementNS(SVG_NS, 'text');\n        textEl.innerHTML = String(number);\n        textEl.setAttribute('x', numberPosition[0]);\n        textEl.setAttribute('y', numberPosition[1]);\n        if (isRightAlign) {\n          textEl.setAttribute('text-anchor', 'end');\n        }\n        textFragment.appendChild(textEl);\n      }\n    });\n\n    this.nailsCirclesGroup.appendChild(circlesFragment);\n    this.nailsTextGroup.appendChild(textFragment);\n  }\n\n  clear() {\n    this.linesGroup.innerHTML = '';\n    this.nailsGroup.innerHTML = '';\n  }\n\n  toDataURL() {\n    return '';\n  }\n}\n","export function downloadFile(dataUrl, fileName) {\n  const downloadLink = document.createElement('a');\n  downloadLink.href = dataUrl;\n  downloadLink.download = fileName;\n  document.body.appendChild(downloadLink);\n  downloadLink.click();\n  document.body.removeChild(downloadLink);\n}\n","import Player from './editor/Player.js';\nimport patternTypes from './pattern_types.js';\nimport EditorControls from './editor/EditorControls.js';\nimport EditorSizeControls from './editor/EditorSizeControls.js';\nimport { Thumbnails } from './thumbnails/Thumbnails.js';\nimport { deserializeConfig, serializeConfig } from './Serialize.js';\nimport { isShareSupported, share } from './share.js';\nimport { initServiceWorker } from './pwa.js';\nimport CanvasRenderer from './renderers/CanvasRenderer.js';\nimport SVGRenderer from './renderers/SVGRenderer.js';\nimport { downloadPatternAsSVG } from './download/SVGDownload.js';\nimport { downloadFile } from './download/Download.js';\n\nwindow.addEventListener('error', function (event) {\n  alert('Error: ' + event.message);\n});\n\nconst elements = {\n  canvas: document.querySelector('#canvas_panel'),\n  patternLink: document.querySelector('#pattern_link'),\n  downloadBtn: document.querySelector('#download_btn'),\n  downloadSVGBtn: document.querySelector('#download_svg_btn'),\n  downloadNailsBtn: document.querySelector('#download_nails_btn'),\n  resetBtn: document.querySelector('#reset_btn'),\n  shareBtn: document.querySelector('#share_btn'),\n  playerBtn: document.querySelector('#player_btn'),\n  buttons: document.querySelector('#buttons'),\n  instructionsLink: document.querySelector(\n    '#pattern_select_dropdown_instructions'\n  ),\n};\n\nlet canvasRenderer;\nlet patterns;\n\nlet currentPattern;\nconst player = new Player(document.querySelector('#player'));\nconst sizeControls = new EditorSizeControls({\n  getCurrentSize: () => [\n    elements.canvas.clientWidth,\n    elements.canvas.clientHeight,\n  ],\n});\n\nconst thumbnails = new Thumbnails();\n\nlet controls;\n\nwindow.addEventListener('load', main);\n\nasync function main() {\n  initRouting();\n\n  await initServiceWorker();\n\n  document.body.querySelectorAll('.pattern_only').forEach(hide);\n  unHide(document.querySelector('main'));\n\n  const queryParams = new URLSearchParams(document.location.search);\n  canvasRenderer =\n    queryParams.get('renderer') === 'svg'\n      ? new SVGRenderer(elements.canvas)\n      : new CanvasRenderer(elements.canvas);\n\n  patterns = patternTypes.map(Pattern => new Pattern(canvasRenderer));\n\n  if (history.state?.pattern) {\n    updateState(history.state);\n  } else {\n    const queryPattern = queryParams.get('pattern');\n\n    if (queryPattern) {\n      const config = queryParams.get('config');\n      updateState({ pattern: queryPattern, config });\n    } else {\n      thumbnails.toggle();\n    }\n  }\n\n  elements.downloadBtn.addEventListener('click', downloadCanvas);\n  elements.downloadSVGBtn.addEventListener('click', downloadSVG);\n  elements.downloadNailsBtn.addEventListener('click', downloadNailsImage);\n  elements.resetBtn.addEventListener('click', reset);\n  elements.shareBtn.addEventListener(\n    'click',\n    async () =>\n      await share({\n        renderer: canvasRenderer,\n        pattern: currentPattern,\n      })\n  );\n  elements.playerBtn.addEventListener('click', () => {\n    document.querySelectorAll('#buttons [data-toggle-for]').forEach(btn => {\n      if (btn.classList.contains('active')) {\n        btn.click();\n      }\n    });\n  });\n\n  elements.instructionsLink.addEventListener('click', e => {\n    e.preventDefault();\n    history.pushState({ pattern: null }, 'String Art Studio', './');\n    unselectPattern();\n  });\n\n  thumbnails.addOnChangeListener(({ detail }) => {\n    const pattern = findPatternById(detail.pattern);\n    setCurrentPattern(pattern);\n  });\n\n  document.body.addEventListener('click', e => {\n    const toggleBtn = e.target.closest('[data-toggle-for]');\n    if (toggleBtn) {\n      const dialogId = toggleBtn.dataset.toggleFor;\n\n      toggleBtn.classList.toggle('active');\n      const toggledElement = document.querySelector('#' + dialogId);\n      toggledElement.classList.toggle('open');\n      document.body.classList.toggle('dialog_' + dialogId);\n      currentPattern &&\n        currentPattern.draw({ position: currentPattern.position });\n    }\n  });\n}\n\nasync function initPattern() {\n  if (!currentPattern) {\n    throw new Error(\"Can't init pattern - no current pattern available!\");\n  }\n\n  initSize();\n\n  window.addEventListener(\n    'resize',\n    () => currentPattern && currentPattern.draw()\n  );\n\n  elements.downloadBtn.addEventListener('click', downloadCanvas);\n  elements.downloadNailsBtn.addEventListener('click', downloadNailsImage);\n  elements.resetBtn.addEventListener('click', reset);\n  const showShare = await isShareSupported({\n    renderer: canvasRenderer,\n    pattern: currentPattern,\n  });\n  if (showShare) {\n    unHide(elements.shareBtn);\n  }\n}\n\nfunction downloadCanvas() {\n  downloadFile(canvasRenderer.toDataURL(), currentPattern.name + '.png');\n}\n\nfunction downloadSVG() {\n  downloadPatternAsSVG(currentPattern, canvasRenderer.getSize());\n}\n\nfunction downloadNailsImage() {\n  const currentConfig = currentPattern.config;\n  currentPattern.config = {\n    darkMode: false,\n    showNails: true,\n    showNailNumbers: true,\n    showStrings: false,\n    nailsColor: '#000000',\n  };\n  currentPattern.draw();\n  downloadCanvas();\n\n  // Reset to the config before the download:\n  currentPattern.config = currentConfig;\n  currentPattern.draw();\n}\n\nfunction reset() {\n  if (confirm('Are you sure you wish to reset options to defaults?')) {\n    setCurrentPattern(currentPattern, { config: {} });\n  }\n}\n\nfunction onInputsChange({ withConfig = true } = {}) {\n  player.update(currentPattern);\n  const configQuery = withConfig ? serializeConfig(currentPattern) : null;\n  history.replaceState(\n    {\n      pattern: currentPattern.id,\n      config: configQuery,\n    },\n    currentPattern.name,\n    `?pattern=${currentPattern.id}${\n      withConfig && configQuery\n        ? `&config=${encodeURIComponent(configQuery)}`\n        : ''\n    }`\n  );\n}\n\nfunction setCurrentPattern(pattern, setPatternOptions) {\n  selectPattern(pattern, setPatternOptions);\n  history.pushState(\n    { pattern: pattern.id },\n    pattern.name,\n    '?pattern=' + pattern.id\n  );\n}\n\nfunction initSize() {\n  sizeControls.element.addEventListener('sizechange', ({ detail }) => {\n    setSize(detail);\n  });\n}\n\nfunction setSize(size) {\n  if (size.width && size.height) {\n    canvasRenderer.setSize(size);\n    if (!elements.canvas.classList.contains('overflow')) {\n      elements.canvas.classList.add('overflow');\n    }\n  } else {\n    elements.canvas.classList.remove('overflow');\n    canvasRenderer.setSize(null);\n  }\n\n  currentPattern.draw();\n}\n\nfunction initRouting() {\n  window.addEventListener('popstate', ({ state }) => {\n    updateState(state);\n  });\n}\n\nfunction updateState(state) {\n  if (state?.pattern) {\n    const pattern = findPatternById(state.pattern);\n    selectPattern(pattern, {\n      draw: false,\n      config: state.config ? deserializeConfig(pattern, state.config) : {},\n    });\n\n    thumbnails.close();\n    currentPattern.draw();\n  } else {\n    unselectPattern();\n    thumbnails.open();\n  }\n}\n\nfunction findPatternById(patternId) {\n  const pattern = patterns.find(({ id }) => id === patternId);\n  if (!pattern) {\n    throw new Error(`Pattern with id \"${patternId}\" not found!`);\n  }\n  return pattern;\n}\n\nfunction selectPattern(pattern, { config, draw = true } = {}) {\n  const isFirstTime = !currentPattern;\n\n  currentPattern = pattern;\n  if (config) {\n    currentPattern.setConfig(config);\n  }\n  if (controls) {\n    controls.destroy();\n  }\n  controls = new EditorControls({ pattern, config });\n  controls.addEventListener('input', () => currentPattern.draw());\n  controls.addEventListener('change', onInputsChange);\n\n  if (pattern.link) {\n    elements.patternLink.setAttribute('href', pattern.link);\n    elements.patternLink.innerText = pattern.linkText ?? 'Example';\n    unHide(elements.patternLink);\n  } else {\n    hide(elements.patternLink);\n  }\n\n  if (draw) {\n    requestAnimationFrame(() => {\n      currentPattern.draw();\n    });\n  }\n\n  player.update(currentPattern, { draw: false });\n  thumbnails.setCurrentPattern(pattern);\n  document.title = `${pattern.name} - String Art Studio`;\n  document.body.setAttribute('data-pattern', pattern.id);\n\n  if (isFirstTime) {\n    initPattern();\n    document.body.querySelectorAll('.pattern_only').forEach(unHide);\n  }\n}\n\nfunction unHide(element) {\n  element.removeAttribute('hidden');\n}\n\nfunction hide(element) {\n  element.setAttribute('hidden', 'hidden');\n}\n\nfunction unselectPattern() {\n  currentPattern = null;\n  canvasRenderer.clear();\n  hide(elements.patternLink);\n  thumbnails.setCurrentPattern(null);\n  controls && controls.destroy();\n  document.body.querySelectorAll('.pattern_only').forEach(hide);\n  document.body.removeAttribute('data-pattern');\n}\n","export default class Player {\n  constructor(parentEl) {\n    this.elements = {\n      player: parentEl,\n      step: parentEl.querySelector('#step'),\n      //stepInstructions: parentEl.querySelector('#step_instructions'),\n      playerPosition: parentEl.querySelector('#player_position'),\n      playBtn: parentEl.querySelector('#play_btn'),\n      pauseBtn: parentEl.querySelector('#pause_btn'),\n      text: parentEl.querySelector('#player_text'),\n    };\n    this.stepCount = 0;\n    this._isPlaying = false;\n\n    this.elements.playerPosition.addEventListener('input', ({ target }) => {\n      this.goto(+target.value);\n    });\n\n    this.elements.playBtn.addEventListener('click', () => {\n      this.play();\n    });\n\n    this.elements.pauseBtn.addEventListener('click', () => {\n      this.pause();\n    });\n  }\n\n  updateStatus(isPlaying) {\n    if (this._isPlaying !== isPlaying) {\n      this.elements.player.classList.toggle('playing');\n      this._isPlaying = isPlaying;\n    }\n  }\n\n  update(stringArt, { draw = true } = {}) {\n    this.stringArt = stringArt;\n    this.stepCount = stringArt.getStepCount();\n    this.elements.playerPosition.setAttribute('max', this.stepCount);\n    this.elements.step.innerText = `${this.stepCount}/${this.stepCount}`;\n    this.elements.text.style.removeProperty('width');\n    this.elements.text.style.width =\n      (this.elements.text.clientWidth || 70) + 'px';\n    this.goto(this.stepCount, { updateStringArt: draw });\n  }\n\n  updatePosition(position) {\n    this.elements.step.innerText = `${position}/${this.stepCount}`;\n    this.elements.playerPosition.value = position;\n  }\n\n  goto(position, { updateStringArt = true } = {}) {\n    this.pause();\n    this.updatePosition(position);\n    if (updateStringArt) {\n      this.stringArt.goto(position);\n    }\n  }\n\n  setInstructions(instructions) {\n    // this.elements.stepInstructions.innerText = instructions;\n  }\n\n  play() {\n    this.updateStatus(true);\n    cancelAnimationFrame(this.renderRafId);\n\n    if (this.stringArt.position === this.stepCount) {\n      this.stringArt.goto(0);\n    }\n\n    const self = this;\n\n    step();\n\n    function step() {\n      if (!self.stringArt.drawNext().done) {\n        self.renderRafId = requestAnimationFrame(step);\n      } else {\n        self.updateStatus(false);\n      }\n      self.updatePosition(self.stringArt.position);\n    }\n  }\n\n  pause() {\n    cancelAnimationFrame(this.renderRafId);\n    this.updateStatus(false);\n  }\n\n  toggle() {\n    if (this._isPlaying) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n}\n","import patternTypes from '../pattern_types.js';\nimport CanvasRenderer from '../renderers/CanvasRenderer.js';\n\nconst THUMBNAIL_WIDTH_PX = '100px';\nconst MINIMIZED_CLASS = 'minimized';\n\nexport class Thumbnails {\n  elements = {\n    root: document.querySelector('#pattern_select_panel'),\n    thumbnails: document.querySelector('#pattern_select_thumbnails'),\n    toggleBtn: document.querySelector('#pattern_select_btn'),\n    dropdown: document.querySelector('#pattern_select_dropdown'),\n  };\n\n  constructor() {\n    this.elements.toggleBtn.addEventListener('click', () => this.toggle());\n  }\n\n  toggle() {\n    if (this.elements.root.classList.contains(MINIMIZED_CLASS)) {\n      this.open();\n    } else if (this.pattern) {\n      this.close();\n    }\n  }\n\n  open() {\n    if (this.elements.root.classList.contains(MINIMIZED_CLASS)) {\n      this.elements.root.classList.remove(MINIMIZED_CLASS);\n      if (!this.thumbnailsRendered) {\n        this.createThumbnails();\n        this.thumbnailsRendered = true;\n      }\n\n      this._onClickOutside = e => {\n        if (!e.target.closest('#pattern_select_panel')) {\n          this.toggle();\n        }\n      };\n\n      document.body.addEventListener('mousedown', this._onClickOutside);\n    }\n  }\n\n  close() {\n    if (!this.elements.root.classList.contains(MINIMIZED_CLASS)) {\n      this.elements.root.classList.add(MINIMIZED_CLASS);\n      document.body.removeEventListener('mousedown', this._onClickOutside);\n      this._onClickOutside = null;\n    }\n  }\n\n  setCurrentPattern(pattern) {\n    this.pattern = pattern;\n    this.elements.toggleBtn.innerText = pattern?.name ?? 'Choose a pattern';\n  }\n\n  createThumbnails() {\n    const thumbnailsFragment = document.createDocumentFragment();\n    const patterns = [];\n\n    patternTypes.forEach(PatternType => {\n      const patternLink = document.createElement('a');\n      const renderer = new CanvasRenderer(patternLink);\n\n      patternLink.style.width = patternLink.style.height = THUMBNAIL_WIDTH_PX;\n\n      const pattern = new PatternType(renderer);\n      pattern.config = Object.assign(\n        {\n          margin: 1,\n          enableBackground: false,\n          nailRadius: 0.5,\n        },\n        PatternType.thumbnailConfig\n      );\n\n      patterns.push(pattern);\n\n      const li = document.createElement('li');\n      thumbnailsFragment.appendChild(li);\n\n      patternLink.href = `?pattern=${pattern.id}`;\n      patternLink.setAttribute('data-pattern', pattern.id);\n      patternLink.title = pattern.name;\n      li.appendChild(patternLink);\n    });\n\n    this.elements.thumbnails.appendChild(thumbnailsFragment);\n    patterns.forEach(pattern => pattern.draw());\n\n    this.elements.thumbnails.addEventListener('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      const link = e.target.closest('[data-pattern]');\n\n      if (!link) {\n        return false;\n      }\n\n      this.elements.root.dispatchEvent(\n        new CustomEvent('change', {\n          detail: { pattern: link.dataset.pattern },\n        })\n      );\n      this.toggle();\n    });\n  }\n\n  addOnChangeListener(listener) {\n    this.elements.root.addEventListener('change', listener);\n  }\n\n  removeOnChangeListener(listener) {\n    this.elements.root.removeEventListener('change', listener);\n  }\n}\n","import SVGRenderer from '../renderers/SVGRenderer.js';\nimport { downloadFile } from './Download.js';\n\nexport function downloadPatternAsSVG(pattern, size) {\n  const parentEl = document.createElement('article');\n  parentEl.style.width = size[0] + 'px';\n  parentEl.style.height = size[1] + 'px';\n  document.body.appendChild(parentEl);\n  const svgRenderer = new SVGRenderer(parentEl);\n\n  const PatternConstructor = pattern.constructor;\n  const svgPattern = new PatternConstructor(svgRenderer);\n\n  svgPattern.setConfig(pattern.config);\n  svgPattern.draw();\n\n  var svgData = svgPattern.renderer.svg.outerHTML;\n  var svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n  var svgUrl = URL.createObjectURL(svgBlob);\n\n  downloadFile(svgUrl, pattern.name + '.svg');\n  document.body.removeChild(parentEl);\n}\n","const swFilename = 'service-worker.js';\n\nexport async function initServiceWorker() {\n  if (!navigator.serviceWorker || document.location.hostname === '127.0.0.1') {\n    return;\n  }\n\n  try {\n    const registration = await navigator.serviceWorker.register(swFilename);\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log(\n              'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n            );\n          } else {\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  } catch (error) {\n    console.error('Error during service worker registration:', error);\n  }\n}\n"],"names":["$e8c1397eac31f13e$var$COLOR_CONTROLS","key","label","defaultValue","type","attr","min","max","step","show","isMultiColor","children","multicolorByLightness","config","this","multicolorRange","colorCount","minLightness","maxLightness","multicolorStart","darkMode","saturation","reverseColors","multiColorStep","multiColorLightnessStep","Math","colors","Array","fill","map","_","colorIndex","lightness","reverse","getColor","color","repeatColors","getColorMap","stepCount","Error","stepsPerColor","floor","colorMap","Map","i","set","include","exclude","defaults","customControls","controls","getControls","controlsConfig","filter","includes","control","finalControl","Object","freeze","renderer","setConfig","nails","addedPoints","Set","nailRadius","nailsColor","nailNumbersFontSize","clear","addNail","nail","nailPoint","point","round","join","has","push","add","drawNumbers","renderNails","fontSize","radius","renderNumbers","margin","parentElement","destroy","removeElement","element","reset","setColor","setLineWidth","width","setBackground","renderLines","startPosition","positions","getSize","height","getBoundingClientRect","setSize","size","removeAttribute","style","toDataURL","$65e05ee91a8797e3$var$COLORS","$65e05ee91a8797e3$var$COMMON_CONFIG_CONTROLS","isDisabled","showNails","showStrings","displayValue","showNailNumbers","enableBackground","customBackgroundColor","$65e05ee91a8797e3$var$flattenConfig","configControls","reduce","$65e05ee91a8797e3$var$getControlsIndex","controlsIndex","$65e05ee91a8797e3$export$2e2bcd8739ae039","$2784b5c9c7b1f845$export$2e2bcd8739ae039","concat","_controlsIndex","defaultConfig","_defaultConfig","assign","defaultValues","_config","value","currentConfig","onConfigChange","changedControlKeys","keys","setConfigValue","controlKey","setUpDraw","previousSize","center","onResize","$a8180031c78213da$export$2e2bcd8739ae039","stringWidth","afterDraw","drawNails","initDraw","backgroundColor","draw","position","Infinity","stringsIterator","generateStrings","drawNext","done","goto","result","next","getStepCount","name","$97e1d102fa450510$export$f81847884871263e","int1","int2","$97e1d102fa450510$export$f4644083ce95e7e3","PI","getPoint","index","realIndex","getNailIndex","points","get","sin","indexAngle","rotationAngle","cos","isReverse","n","serializedConfig","_serializeConfig","rotation","configCenter","v","props","nailsNumberStart","getNumber","number","ringSize","ringDistance","prevPoint","prevPointIndex","isPrevSide","startPoint","isStructural","affectsStepCount","$828d2af56886c091$var$COLOR_CONFIG","$e8c1397eac31f13e$export$2e2bcd8739ae039","getConfig","$17fe1039ca333e84$export$2e2bcd8739ae039","id","link","$ff21866e88ed26dc$export$2e2bcd8739ae039","rotationConfig","super","nSpirals","radiusIncrease","angleStep","spiralRotations","maxRadius","nailsPerSpiral","angleIncrease","s","nailNumber","spiralIndex","centerx","centery","angle","generatePoints","lastPoint","stepColor","linkText","_n","layers","extraNails","layerFill","base","circleConfig","stringsPerLayer","circle","layerShift","shift","time","toIndex","instructions","drawTimesTable","$f11ad0f2a18da5c9$var$SIDES","$f11ad0f2a18da5c9$var$SIDES_ORDER","$f11ad0f2a18da5c9$var$SIDES_ROTATION","left","bottom","right","top","$f11ad0f2a18da5c9$export$2e2bcd8739ae039","maxSize","nailSpacing","layerAngle","layerIndex","_getLayerProps","layerStart","theta","x","y","pivot","cosAngle","sinAngle","side","layerStringCount","sideIndex","indexOf","nextSide","length","nextSideRotation","sideProps","_getLayerColors","layerSize","pow","color1","color2","colorPerLayer","layerColor","drawSide","layer","drawLayer","count","sideOrder","$da53f1772640b858$var$LAYER_DEFAULTS","end","sides","sideCount","sideAngle","radiusAngle","_getProps","fitSize","getSizeAndCenter","configSize","boundingRect","getBoundingRect","scale","overrideConfig","nailsSpacing","sideSize","start","nailsDistance","radiusNailsCount","nailsPerSide","getSidePoint","pointsMapIndex","startX","getCenterPoint","radiusNailsDistance","firstPoint","boundingRect1","slice","drawCenter","drawSides","sideIndexStart","index1","$d89aefe1e0b94ba8$var$COLOR_CONFIG","$a3a02ffca86b5e03$var$COLOR_CONFIG","$4231afd05203ede9$var$COLOR_CONFIG","$f7e3e90b370cc9b7$var$COLOR_CONFIG","$f7e3e90b370cc9b7$var$ANGLE","$f7e3e90b370cc9b7$var$SIDE_ANGLES","$8b13425f1e264518$export$2e2bcd8739ae039","sideNails","starCenterStart","circlePointsStart","sinSideAngle","cosSideAngle","circlePointsEnd","getStarPoint","centerX","centerY","getArcPoint","reverseOrder","prevSide","innerColor","alternate","linesPerRound","rounds","linesPerThisRound","nextPoint","outterColor","isStar","ceil","pointPosition","drawCircle","ringColor","drawRing","drawStar","generateStarPoints","nailsConfig","getSetUp","lineSpacing","lineNailCount","firstCirclePoint","totalNailCount","totalIndexCount","getLayer","call","enable","endIndex","indexLength","circleIndex","self","advance","getPointIndex","$4252a999d90491dd$export$2e2bcd8739ae039","innerLength","repetition","layersCount","realRepetition","currentInnerLength","repetitionCount","isPrevPoint","drawSpiral","layerSpread","show1","show2","show3","minNailDistance","maxShapeNailsCount","prop","circumsference","circleNails","prevCirclePoint","nextLayerIndex","forEach","polygonConfig","polygon","$6489b1167eb82c4c$export$2e2bcd8739ae039","bezier","limitedBezier","layerAngleShift","polygons","leftSide","centerIndexes","getCenterIndexes","extraNailCount","resetStructure","calc","some","getCalc","maxSteps","angleRadians","currentSize","k","r","steps","renderRing","ringPadding","renderTriangles","levels","density","globalRotation","renderCaps","ringNailCount","globalRotationRadians","ringWidth","edgeSize","nailsLength","countPerLevelSide","level","triangleHeight","sqrt","triangleCenterDistance","nailDistance","triangleCount","colorPerLevel","getPoints","realColorCount","getTrianglePoints","isCapLevel","triangleIndexInSide","missingSide","triangleIndex","_getNextIndexInTriangle","trianglePoints","triangleSidePoints","nNailDistance","largeDistance","smallDistance","levelsPoints","levelsCount","levelTrianglesPoints","levelSideTriangleCount","levelPositions","isFlipped","trianglePosition","atan","distanceFromCenter","sideRotation","triangleCenterAngle","rotatedTrianglePosition","indexInSide","initialSide","lastSide","lastIndex","isNextSide","nextSidePoint","targetSide","triangle1","triangle2","isNextLevel","nextLevelTriangleIndex","fillColor","levelSideCount","angleShift","isLastTriangleInSide","firstSide","order","generateOrderInSide","pointIndex","triangle1Points","triangle2Points","t1Side","t2Side","last","n1","direction","triangleLevels","levelIndex","lastIndexInLevel","triangle","generateStringsBetweenTriangles","generateTriangleStrings","fillStepsPerTriangle","levelsWithFillBetween","triangleSide","$2fc16ffa17719734$var$elements","document","querySelector","controlsPanel","sidebarForm","$2fc16ffa17719734$var$EVENTS","$2fc16ffa17719734$var$inputTimeout","pattern","state","_getState","groups","eventHandlers","input","change","_toggleFieldset","e","target","nodeName","classList","toggle","groupId","dataset","group","contains","_updateState","_toggleFieldSetOnEnter","_wrappedOnInput","_onInput","addEventListener","_wrappedOnTouchStart","_onTouchStart","controlElements","renderControls","removeEventListener","innerHTML","event","eventHandler","Function","_triggerEvent","eventData","e1","getAttribute","_postponeRangeInput","currentInputRange","currentInputRangeValue","_rangeLockTimeout","setTimeout","_wrappedOnTouchEnd","_onTouchEnd","body","_wrappedOnRangeScroll","_onRangeScroll","_lockRange","clearTimeout","_postponeRangeInputTimeout","preventDefault","updateInput","inputElement","originalEvent","deferChange","inputValue","parseFloat","checked","$2fc16ffa17719734$var$getInputValue","replace","formattedValue","innerText","triggerChange","updateControlsVisibility","localStorage","getItem","JSON","parse","newState","setItem","stringify","removeItem","shouldShowControl","controlEl","setAttribute","shouldDisableControl","inputEl","updateInputs","entries","valueEl","containerEl","_configControls","controlsFragment","createDocumentFragment","controlId","createElement","groupTitleEl","appendChild","className","childrenContainer","realValue","inputValueEl","updateGroupsState","requestAnimationFrame","querySelectorAll","groupEl","groupState","remove","$0597ff46967fdd49$var$sizeControls","$0597ff46967fdd49$var$elements","sizeSelect","sizeCustom","orientationSelect","$0597ff46967fdd49$var$cmToPixels","cm","dpi","$0597ff46967fdd49$var$SCREEN_SIZE","window","screen","$0597ff46967fdd49$var$SIZES","canvas","ctx","getContext","dpr","devicePixelRatio","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","globalCompositeOperation","clearRect","strokeStyle","lineWidth","fillStyle","fillRect","clientWidth","clientHeight","beginPath","moveTo","lineTo","stroke","textBaseline","font","nailNumberOffset","arc","isRightAlign","numberPosition","textAlign","fillText","String","$2085f05924b9087c$var$numberRegExp","$2085f05924b9087c$var$booleanRegExp","$2085f05924b9087c$export$39ef19ebad6081a3","serializedCofig","serializedConfigValues","commaCount","split","test","booleanMatch","match","configKeys","serializedValue","$72facf7821ef2ed6$var$getShareData","dataUrl","blob","fetch","files","File","lastModified","Date","getTime","url","location","href","title","text","svg","createElementNS","setProperty","backgroundGroup","linesGroup","nailsGroup","nailsCirclesGroup","nailsTextGroup","trunc","setAttributeNS","currentColor","currentLineGroup","childNodes","background","previousPoint","fragment","line","circlesFragment","textFragment","textEl","$0d3af79709377726$export$bb3b75778e3e272","fileName","downloadLink","download","click","removeChild","alert","message","$52852adbc3c0b381$var$elements","patternLink","downloadBtn","downloadSVGBtn","downloadNailsBtn","resetBtn","shareBtn","playerBtn","buttons","instructionsLink","$52852adbc3c0b381$var$canvasRenderer","$52852adbc3c0b381$var$patterns","$52852adbc3c0b381$var$currentPattern","$52852adbc3c0b381$var$player","parentEl","elements","player","playerPosition","playBtn","pauseBtn","_isPlaying","play","pause","updateStatus","isPlaying","update","stringArt","removeProperty","updateStringArt","updatePosition","setInstructions","cancelAnimationFrame","renderRafId","$52852adbc3c0b381$var$sizeControls","getCurrentSize","sizeOptionsFragment","sizeListItem","selectedSize","selectedSizeId","find","_notifyOnChange","getValue","select","parseInt","dispatchEvent","CustomEvent","detail","from","$52852adbc3c0b381$var$thumbnails","root","thumbnails","toggleBtn","dropdown","open","close","thumbnailsRendered","createThumbnails","_onClickOutside","closest","setCurrentPattern","thumbnailsFragment","patterns","PatternType","$ec63feea13ad1aa1$export$2e2bcd8739ae039","thumbnailConfig","li","stopPropagation","addOnChangeListener","listener","removeOnChangeListener","$52852adbc3c0b381$var$controls","$52852adbc3c0b381$var$initPattern","$52852adbc3c0b381$var$downloadCanvas","$52852adbc3c0b381$var$downloadNailsImage","$52852adbc3c0b381$var$reset","navigator","share","shareData","canShare","$72facf7821ef2ed6$export$4fa6f570da04f7cc","$52852adbc3c0b381$var$unHide","$52852adbc3c0b381$var$downloadSVG","svgRenderer","$273eaa0957855dac$export$2e2bcd8739ae039","svgPattern","PatternConstructor","constructor","svgData","outerHTML","svgBlob","Blob","URL","createObjectURL","$9afd79be8d7b163c$export$a0b41a3b036d92d2","confirm","$52852adbc3c0b381$var$setCurrentPattern","$52852adbc3c0b381$var$onInputsChange","withConfig","configQuery","nonDefaultConfigValues","toFixed","pop","$2085f05924b9087c$export$fa8157df3262779b","history","replaceState","encodeURIComponent","setPatternOptions","$52852adbc3c0b381$var$selectPattern","pushState","$52852adbc3c0b381$var$updateState","$52852adbc3c0b381$var$findPatternById","$52852adbc3c0b381$var$unselectPattern","patternId","isFirstTime","$2fc16ffa17719734$export$2e2bcd8739ae039","$52852adbc3c0b381$var$hide","serviceWorker","hostname","registration","register","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","$df9fee1b96456f2b$export$d594efb518b3cec4","queryParams","URLSearchParams","search","Pattern","queryPattern","async","$72facf7821ef2ed6$export$ed80d9de1d9df928","btn","dialogId","toggleFor"],"version":3,"file":"index.e39d28df.js.map"}