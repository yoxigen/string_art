{"mappings":"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","sources":["src/scripts/helpers/Color.js","src/scripts/Nails.js","src/scripts/StringArt.js","src/scripts/string_art_types/Circle.js","src/scripts/string_art_types/Spiral.js","src/scripts/string_art_types/Spirals.js","src/scripts/string_art_types/Eye.js","src/scripts/pattern_types.js","src/scripts/string_art_types/Star.js","src/scripts/string_art_types/Assymetry.js","src/scripts/string_art_types/TimesTables.js","src/scripts/string_art_types/Wave.js","src/scripts/string_art_types/Circles.js","src/scripts/editor/EditorControls.js","src/scripts/editor/EditorSizeControls.js","src/scripts/main.js","src/scripts/editor/Player.js"],"sourcesContent":["const COLOR_CONTROLS = [\n    {\n        key: 'color',\n        label: 'String color',\n        defaultValue: \"#ff4d00\",\n        type: \"color\",\n        show: ({isMultiColor}) => !isMultiColor\n    },\n    {\n        key: 'isMultiColor',\n        label: 'Use multiple colors',\n        defaultValue: false,\n        type: \"checkbox\",\n    },\n    {\n        key: 'multicolorRange',\n        label: 'Multicolor range',\n        defaultValue: 360,\n        type: \"range\",\n        attr: {\n            min: 1,\n            max: 360,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'multicolorStart',\n        label: 'Multicolor start',\n        defaultValue:0,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 360,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'reverseColors',\n        label: 'Reverse colors order',\n        defaultValue: false,\n        type: \"checkbox\",\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'saturation',\n        label: 'Saturation',\n        defaultValue: 100,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 100,\n            step: 1\n        },\n        show: ({isMultiColor}) => isMultiColor\n    },\n    {\n        key: 'lightness',\n        label: 'Lightness',\n        type: 'group',\n        defaultValue: 'minimized',\n        show: ({isMultiColor}) => isMultiColor,\n        children: [\n            {\n                key: 'multicolorByLightness',\n                label: 'Multi lightness',\n                defaultValue: false,\n                type: 'checkbox',\n                show: ({isMultiColor}) => isMultiColor\n            },\n            {\n                key: 'minLightness',\n                label: 'Minimum lightness',\n                defaultValue:0,\n                type: \"range\",\n                attr: {\n                    min: 0,\n                    max: 100,\n                    step: 1\n                },\n                show: ({multicolorByLightness, isMultiColor}) => multicolorByLightness && isMultiColor\n            },\n            {\n                key: 'maxLightness',\n                label: 'Maximum lightness',\n                defaultValue:100,\n                type: \"range\",\n                attr: {\n                    min: 0,\n                    max: 100,\n                    step: 1\n                },\n                show: ({multicolorByLightness, isMultiColor}) => multicolorByLightness && isMultiColor\n            },\n        ]\n    },\n];\n\nexport default class Color {\n    constructor(config) {\n        this.config = config;\n        const {\n            multicolorRange,\n            colorCount,\n            multicolorByLightness,\n            minLightness = 0,\n            maxLightness = 100,\n            multicolorStart,\n            darkMode,\n            saturation,\n            reverseColors,\n            isMultiColor,\n        } = config;\n        \n        if (isMultiColor) {\n            this.multiColorStep = multicolorRange / colorCount;\n            this.multiColorLightnessStep = multicolorByLightness ? (maxLightness - minLightness) / colorCount : 1;\n\n            this.colors = new Array(colorCount).fill(null).map((_, colorIndex) => {\n                const lightness = multicolorByLightness ? minLightness + this.multiColorLightnessStep * colorIndex : darkMode ? 50 : 40;\n                return `hsl(${multicolorStart + colorIndex * this.multiColorStep}, ${saturation}%, ${lightness}%)`;\n            });\n\n            if (reverseColors) {\n                this.colors.reverse();\n            }\n        }\n    }\n\n    /**\n     * Returns the color to be used in the provided layer index. If no multiColor is used, will use the 'color' config property. \n     * @param {number} colorIndex \n     * @returns string\n     */\n    getColor(colorIndex) {\n        const {\n            isMultiColor,\n            colorCount,\n            color,\n        } = this.config;\n    \n        if (!isMultiColor) {\n            return color;\n        }\n\n        if (colorIndex >= colorCount) {\n            colorIndex = colorCount - 1;\n        }\n\n        return this.colors[colorIndex];\n    }\n   \n    getColorMap({ stepCount, colorCount}) {\n        const stepsPerColor = Math.floor(stepCount / colorCount);\n        const colorMap = new Map();\n        for (let i = 0; i < colorCount; i++) {\n            colorMap.set(i * stepsPerColor, this.getColor(i))\n        }\n        return colorMap;\n    }\n\n    static getConfig({ include, exclude, defaults = {}}) {\n        const controls = getControls();\n\n        return {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: controls\n        };\n\n        function getControls(controlsConfig = COLOR_CONTROLS) {\n            return controlsConfig\n                .filter(({key}) => (!exclude || !exclude.includes(key)) && (!include || include.includes(key)))\n                .map(control => {\n                    const finalControl = {\n                        ...control,\n                        defaultValue: defaults[control.key] ?? control.defaultValue\n                    };\n\n                    if (control.type === \"group\") {\n                        finalControl.children = getControls(control.children);\n                    } \n                    return Object.freeze(finalControl);\n                });\n        }\n    }\n}","const PI2 = Math.PI * 2;\nconst NUMBER_MARGIN = 4;\n\nexport default class Nails {\n    constructor(canvas, config) {\n        this.context = canvas.getContext(\"2d\");\n        this.setConfig(config);\n        this.centerX = canvas.width / 2;\n        this.nails = [];\n    }\n\n    setConfig({ nailRadius, nailsColor, nailNumbersFontSize}) {\n        this.nailRadius = nailRadius;\n        this.nailsColor = nailsColor;\n        this.nailNumbersFontSize = nailNumbersFontSize;\n        this.nails = [];\n    }\n\n    // Adds a nail to be rendered. nail: { point, number }\n    addNail(nail) {\n        this.nails.push(nail);\n    }\n\n    fill({ drawNumbers = true} = {}) {\n        this.context.globalCompositeOperation = \"source-over\";\n        this.context.beginPath();\n        this.context.fillStyle = this.nailsColor;\n        this.context.textBaseline = \"middle\";\n        this.context.font = `${this.nailNumbersFontSize}px sans-serif`;\n        const nailNumberOffset = this.nailRadius + NUMBER_MARGIN;\n\n        this.nails.forEach(({ point: [x, y], number }) => {\n            this.context.moveTo(x + this.nailRadius, y);\n            this.context.arc(x, y, this.nailRadius, 0, PI2)\n            if (drawNumbers && number !== undefined && number !== null) {\n                const isRightAlign = x < this.centerX;\n\n                const numberPosition = [\n                    isRightAlign ? x - nailNumberOffset : x + nailNumberOffset,\n                    y\n                ];\n\n                this.context.textAlign = isRightAlign ? \"right\" : \"left\";\n                this.context.fillText(String(number), ...numberPosition);\n            }\n        });\n\n        this.context.fill();\n        this.nails = [];\n    }\n}","import Nails from \"./Nails.js\";\n\nconst COLORS = {\n    dark: \"#171717\",\n    light: \"#ffffff\"\n};\n\nconst COMMON_CONFIG_CONTROLS = [\n    {\n        key: 'strings',\n        label: 'Strings',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'showStrings',\n                label: 'Show strings',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showNails}) => !showNails\n            },\n            {\n                key: 'stringWidth',\n                label: 'String width',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 0.2,\n                    max: 4,\n                    step: 0.2\n                },\n                show: ({showStrings}) => showStrings\n            },\n        ]\n    },\n    {\n        key: 'nails',\n        label: 'Nails',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'showNails',\n                label: 'Show nails',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showStrings}) => !showStrings\n            },\n            {\n                key: 'margin',\n                label: 'Margin',\n                defaultValue: 20,\n                type: \"number\",\n                attr: {\n                    min: 0,\n                    max: 500,\n                    step: 1\n                },\n                displayValue: ({margin}) => `${margin}px`\n            },\n            {\n                key: 'nailRadius',\n                label: 'Nail size',\n                defaultValue: 1.5,\n                type: \"range\",\n                attr: {\n                    min: 0.5,\n                    max: 5,\n                    step: 0.25\n                },\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'nailsColor',\n                label: 'Nails color',\n                defaultValue: \"#ffffff\",\n                type: \"color\",\n            },\n            {\n                key: 'showNailNumbers',\n                label: 'Show nail numbers',\n                defaultValue: false,\n                type: \"checkbox\",\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'nailNumbersFontSize',\n                label: 'Nail numbers font size',\n                defaultValue: 10,\n                type: \"range\",\n                attr: {\n                    min: 6,\n                    max: 24,\n                    step: 0.5\n                },\n                displayValue: ({nailNumbersFontSize}) => `${nailNumbersFontSize}px`,\n                show: ({showNails, showNailNumbers}) => showNails && showNailNumbers\n            },\n        ]\n    },\n    {\n        key: 'background',\n        label: 'Background',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'darkMode',\n                label: 'Dark mode',\n                defaultValue: true,\n                type: 'checkbox'\n            },\n            {\n                key: 'customBackgroundColor',\n                label: 'Custom background color',\n                defaultValue: false,\n                type: 'checkbox',\n            },\n            {\n                key: 'backgroundColor',\n                label: 'Background color',\n                defaultValue: COLORS.dark,\n                type: 'color',\n                show: ({customBackgroundColor}) => customBackgroundColor\n            },\n        ]\n    }\n];\n\nclass StringArt {\n    constructor(canvas) {\n        if (!canvas) {\n            throw new Error(\"Canvas not specified!\");\n        }\n\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        const dpr = window.devicePixelRatio || 1;\n        const bsr = this.ctx.webkitBackingStorePixelRatio ||\n            this.ctx.mozBackingStorePixelRatio ||\n            this.ctx.msBackingStorePixelRatio ||\n            this.ctx.oBackingStorePixelRatio ||\n            this.ctx.backingStorePixelRatio || 1;\n        this.pixelRatio = dpr / bsr;\n    }\n\n    get configControls() {\n        return (this.controls ?? []).concat(COMMON_CONFIG_CONTROLS);\n    }\n\n    get defaultConfig() {\n        if (!this._defaultConfig) {\n            this._defaultConfig = flattenConfig(this.configControls);\n        }\n\n        return this._defaultConfig;\n    }\n\n    get config() {\n        return this._config ?? this.defaultConfig;\n    }\n\n    set config(value) {\n        this._config = Object.assign({}, this.defaultConfig, value);\n    }\n\n    getSize() {\n        const canvasScreenSize = [this.canvas.clientWidth, this.canvas.clientHeight];\n        return canvasScreenSize.map(v => v * this.pixelRatio);\n    }\n\n    setUpDraw() {\n        this.canvas.removeAttribute('width');\n        this.canvas.removeAttribute('height');\n        const [width, height] = this.size = this.getSize();\n        Object.assign(this, this.size);\n        this.canvas.setAttribute('width', width);\n        this.canvas.setAttribute('height', height);\n        this.center = this.size.map(value => value / 2);\n\n        if (this.nails) {\n            this.nails.setConfig(this.config);\n        } else {\n            this.nails = new Nails(this.canvas, this.config);\n        }\n\n        this.ctx.clearRect(0, 0, ...this.size);\n        this.ctx.lineWidth = this.config.stringWidth;\n    }\n\n    afterDraw() {\n        const {showNails, showNailNumbers} = this.config;\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill({ drawNumbers: showNailNumbers });\n        }\n    }\n\n    initDraw() {\n        this.setUpDraw(this.config);\n        const { showNails, showNailNumbers, darkMode, backgroundColor, customBackgroundColor } = this.config;\n\n        this.ctx.beginPath();\n        this.ctx.globalCompositeOperation = 'destination-over';\n        this.ctx.fillStyle = customBackgroundColor ? backgroundColor : darkMode ? COLORS.dark : COLORS.light;\n        this.ctx.fillRect(0, 0, ...this.size);\n\n        this.ctx.globalCompositeOperation = 'source-over';\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill({ drawNumbers: showNailNumbers });\n        }\n    }\n\n    /**\n     * Draws the string art on canvas\n     * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n     */\n    draw({position = Infinity} = {}) {\n        this.initDraw();\n        const { showStrings } = this.config;\n\n        if (showStrings) {\n            this.stringsIterator = this.generateStrings();\n            this.position = 0;\n\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        }\n    }\n\n    goto(position) {\n        if (position === this.position) {\n            return;\n        }\n\n        if (this.stringsIterator && position > this.position) {\n            while(!this.drawNext().done && this.position < position);\n        } else {\n            this.draw({ position });\n        }\n    }\n\n    drawNext() {\n        const result = this.stringsIterator.next();\n\n        if (result.done) {\n            this.afterDraw();\n        }\n        else {\n            this.position++;\n        }\n\n        return result;\n    }\n\n    generateStrings() {\n        throw new Error(\"generateStrings method not defined!\");\n    }\n\n    getStepCount() {\n        throw new Error(`'getStepCount' method not implemented for string art type \"${this.name}\"`);\n    }\n}\n\nfunction flattenConfig(configControls) {\n    return configControls.reduce((config, {key, defaultValue, children}) =>\n        children ? {\n            ...config,\n            ...flattenConfig(children)\n        } : {\n            ...config,\n            [key]: defaultValue\n        },\n    {});\n}\n\nexport default StringArt;\n","import Nails from \"../Nails.js\";\n\nconst PI2 = Math.PI * 2;\n\nexport default class Circle {\n    constructor(config) {\n        const { n, size, margin = 0, rotation = 0, center, radius, reverse = false } = this.config = config;\n        \n        this.center = center ?? size.map(v => v / 2);\n        this.radius = radius ?? Math.min(...this.center) - margin;\n\n        this.indexAngle = PI2 / n;\n        this.rotationAngle = -PI2 * rotation;\n        this.isReverse = reverse;\n    }\n\n    getPoint(index = 0) {\n        const realIndex = this.isReverse ? this.config.n - 1 - index : index;\n\n        return [\n            this.center[0] + Math.sin(realIndex * this.indexAngle + this.rotationAngle) * this.radius,\n            this.center[1] + Math.cos(realIndex * this.indexAngle + this.rotationAngle) * this.radius\n        ];\n    }\n\n    /**\n     * Given a Nails instance, uses it to draw the nails of this Circle\n     * @param {Nails} nails \n     * @param {{nailsNumberStart?: number, getNumber?: Function}} param1 \n     */\n    drawNails(nails, {nailsNumberStart = 0, getNumber} = {}) {\n        for (let i=0; i < this.config.n; i++) {\n            nails.addNail({point: this.getPoint(i), number: getNumber ? getNumber(i) : i + nailsNumberStart});\n        }\n    }\n\n    static rotationConfig = Object.freeze({\n        key: 'rotation',\n        label: 'Rotation',\n        defaultValue: 0,\n        type: \"range\",\n        attr: {\n            min: 0,\n            max: 1 + 1/360,\n            step: 1 / 360,\n        },\n        displayValue: (config, { key }) => `${Math.round(config[key] * 360)}°`\n    });\n\n    static nailsConfig = Object.freeze({\n        key: 'n',\n        label: 'Number of nails',\n        defaultValue: 144,\n        type: \"range\",\n        attr: {\n            min: 3,\n            max: 300,\n            step: 1\n        }\n    });\n}","import Color from \"../helpers/Color.js\";\nimport StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nconst COLOR_CONFIG = Color.getConfig({ \n    defaults: {\n        isMultiColor: true,\n        color: \"#ffbb29\",\n        multicolorRange: \"21\",\n        multicolorStart: 32,\n        multicolorByLightness: true,\n        minLightness: 36,\n        maxLightness: 98\n    },\n});\n\nCOLOR_CONFIG.children.splice(COLOR_CONFIG.children.findIndex(({key}) => key === 'isMultiColor'), 0, {\n    key: 'colorCount',\n    label: 'Colors count',\n    defaultValue: 7,\n    type: \"range\",\n    attr: {\n        min: 1,\n        max: 20,\n        step: 1,\n    },\n    show: ({isMultiColor}) => isMultiColor\n});\n\nexport default class Spiral extends StringArt{\n    id = \"spiral\";\n    name = \"Spiral\";\n    link = \"https://www.etsy.com/il-en/listing/840974781/boho-wall-decor-artwork-spiral-round\";\n    controls = [\n        {\n            ...Circle.nailsConfig,\n            defaultValue: 200\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 5,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 60,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 0.5,\n            type: \"range\",\n            attr: {\n                min: ({config: {n}}) => 1 / n,\n                max: 1,\n                step: ({config: {n}}) => 1 / n,\n            },\n            displayValue: ({n, innerLength}) => Math.round(n * innerLength)\n        },\n        {\n            ...Circle.rotationConfig,\n            defaultValue: 0.75,\n        },\n        COLOR_CONFIG,\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        const { n, rotation, layers, margin, colorCount } = this.config;\n        this.layersCount = layers ?? 1;\n\n        this.circle = new Circle({\n            size: this.size,\n            n,\n            rotation,\n            margin,\n        });\n\n        this.color = new Color({\n            ...this.config,\n            colorCount: layers ?? colorCount\n        });\n\n        if (colorCount) {\n            this.colorsMap = this.color.getColorMap({ stepCount: this.getStepCount(), colorCount });\n        }\n    }\n\n    *drawSpiral({ shift = 0, color = \"#ffffff\" } = {}) {\n        const {repetition, innerLength, n, colorCount} = this.config;\n\n        let currentInnerLength = Math.round(innerLength * n);\n        let repetitionCount = 0;\n        this.ctx.strokeStyle = color;\n        let prevPoint = this.circle.getPoint(shift);\n        let isPrevPoint = false;\n\n        for(let i=0; currentInnerLength > 0; i++) {\n            if (this.colorsMap) {\n                const stepColor = this.colorsMap.get(i);\n                if (stepColor) {\n                    this.ctx.strokeStyle = stepColor;\n                }\n            }\n            \n            this.ctx.beginPath();\n            this.ctx.moveTo(...prevPoint);\n            const nextPointIndex = isPrevPoint ? i + shift : i + currentInnerLength + shift;\n\n            this.ctx.lineTo(...this.circle.getPoint(nextPointIndex));\n            repetitionCount++;\n            if (repetitionCount === repetition) {\n                currentInnerLength--;\n                repetitionCount = 0;\n                i++;\n                this.ctx.lineTo(...this.circle.getPoint(nextPointIndex + 1));\n                prevPoint = this.circle.getPoint(nextPointIndex + 2);\n            } else {\n                prevPoint = this.circle.getPoint(nextPointIndex + 1);\n            }\n\n            this.ctx.lineTo(...prevPoint);\n            this.ctx.stroke();\n\n            yield i;\n            isPrevPoint = !isPrevPoint;\n        }\n      \n    }\n\n    *generateStrings() {\n        yield* this.drawSpiral({ \n            color: this.color.getColor(0), \n        });\n    }\n\n    getStepCount() {\n        const {innerLength, repetition, n} = this.config;\n        return this.layersCount * Math.round(innerLength * n) * repetition;\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n}","import StringArt from \"../StringArt.js\";\nimport Circle from './Circle.js';\n\nclass Spirals extends StringArt{\n    name = \"Spirals\";\n    id = \"spirals\";\n    link = \"https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1\";\n    controls = [\n        {\n            key: 'radiusIncrease',\n            label: 'Radius change',\n            defaultValue: 3.2,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 0.1\n            }\n        },\n        {\n            key: 'angleStep',\n            label: 'Angle step',\n            defaultValue: 0.27,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'nSpirals',\n            label: 'Number of spirals',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            ...Circle.rotationConfig,\n            defaultValue: 330/360\n        },\n        {\n            key: 'color',\n            label: 'String color',\n            defaultValue: \"#00ddff\",\n            type: \"color\",\n        }\n    ];\n    \n    setUpDraw() {\n        super.setUpDraw();\n\n        const {nSpirals, rotation, margin, radiusIncrease, angleStep} = this.config;\n        const PI2 = Math.PI * 2;\n\n        this.spiralRotations = new Array(nSpirals).fill(null).map((_, i) => i * PI2 / nSpirals);\n        this.rotationAngle = -PI2 * rotation;\n        const maxRadius = Math.min(...this.size) / 2 - margin;\n        this.nailsPerSpiral = Math.floor(maxRadius / radiusIncrease);\n        this.angleIncrease = angleStep / (maxRadius / 50);\n    }\n\n    *generatePoints() {\n        const {\n            nSpirals\n        } = this.config;\n      \n        for (let i = 0; i < this.nailsPerSpiral; i++) {\n            for (let s = 0; s < nSpirals; s++) {\n                const point = this.getPoint(s, i);\n                yield {point, nailNumber: `${s}_${i}`};\n            }\n        }\n    }\n\n    getPoint(spiralIndex, index) {\n        const [centerx, centery] = this.center;\n        const {radiusIncrease} = this.config;\n\n        const angle = this.rotationAngle + this.angleIncrease * index + this.spiralRotations[spiralIndex];\n        const radius = index * radiusIncrease;\n\n        return [\n            centerx + radius * Math.sin(angle),\n            centery + radius * Math.cos(angle)\n        ];\n    }\n\n    *generateStrings() {\n        const points = this.generatePoints();\n        let index = 0;\n        this.ctx.beginPath();\n        this.ctx.moveTo(...this.center);\n        this.ctx.strokeStyle = this.config.color;\n\n        let lastPoint;\n\n        for (const {point} of points) {\n            this.ctx.beginPath();\n            if (lastPoint) {\n                this.ctx.moveTo(...lastPoint);\n                this.ctx.lineTo(...point);\n            }\n            lastPoint = point;\n            this.ctx.stroke();\n            yield index++;\n        }\n    }\n\n    getStepCount() {\n        const { nSpirals, radiusIncrease, margin } = this.config;\n        const maxRadius = Math.min(...this.getSize()) / 2 - margin;\n        const n = Math.floor(maxRadius / radiusIncrease);\n        return n * nSpirals;\n    }\n\n    drawNails() {\n        const points = this.generatePoints();\n        for (const {point, nailNumber} of points) {\n            this.nails.addNail({point, number: nailNumber});\n        }\n    }\n}\n\nexport default Spirals;","import StringArt from \"../StringArt.js\";\n\nconst MARGIN = 20;\nconst SIDES = ['left', 'bottom', 'right', 'top'];\nconst SIDES_ORDER = ['left', 'bottom', 'right', 'top'];\n\nconst SIDES_ROTATION = {\n    left: 0,\n    bottom: Math.PI / 2,\n    right: Math.PI,\n    top: Math.PI * 1.5\n};\n\nclass Eye extends StringArt{\n    name = \"Eye\"\n    id = \"eye\"\n    link = \"https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails per side',\n            defaultValue: 82,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'angle',\n            label: 'Layer angle',\n            defaultValue: 30,\n            displayValue: ({angle}) => `${angle}°`,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 45,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'color1',\n                    label: 'String #1 color',\n                    defaultValue: \"#11e8bd\",\n                    type: \"color\",\n                },\n                {\n                    key: 'color2',\n                    label: 'String #2 color',\n                    defaultValue: \"#6fff52\",\n                    type: \"color\",\n                },\n                {\n                    key: 'colorPerLayer',\n                    label: 'Color per layer',\n                    defaultValue: false,\n                    type: 'checkbox'\n                },\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n\n        const { n, angle } = this.config;\n\n        this.maxSize = Math.min(...this.size) - 2 * MARGIN;\n        this.nailSpacing = this.maxSize / (n - 1);\n        this.layerAngle = angle * Math.PI / 180;\n    }\n\n    // Sides: top, right, bottom, left\n    getPoint({index, angle, layerStart, rotation}) {\n        const theta = angle + rotation;\n\n        const point = { \n            x: layerStart.x, \n            y: layerStart.y + this.nailSpacing * index\n        };\n\n        const pivot = { x: this.center[0], y: this.center[1] };\n\n        const cosAngle = Math.cos(theta);\n        const sinAngle = Math.sin(theta);\n\n        const position = [\n            (cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x),\n            (sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y),\n        ];\n        return position;\n    }\n\n    *drawSide({ side, color = '#ffffff', angle, size, layerStart, layerStringCount }) {\n        const sideIndex = SIDES.indexOf(side);\n        const nextSide = SIDES[sideIndex === SIDES.length - 1 ? 0 : sideIndex + 1];\n        const rotation = SIDES_ROTATION[side];\n        const nextSideRotation = SIDES_ROTATION[nextSide];\n        \n        const sideProps = { layerStringCount, size, layerStart, angle };\n        \n        for(let i=0; i <= layerStringCount; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...this.getPoint({ side, index: i, rotation, ...sideProps}));\n            this.ctx.lineTo(...this.getPoint({side: nextSide, index: i, rotation: nextSideRotation, ...sideProps}));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            yield i;\n        }\n    }\n\n    _getLayerProps(layerIndex) {\n        const colors = this._getLayerColors(layerIndex);\n        const layerAngle = this.layerAngle * layerIndex;\n        const layerSize = this.maxSize / Math.pow(Math.cos(this.layerAngle) + Math.sin(this.layerAngle), layerIndex);\n        const layerStart = { \n            x: this.center[0] - layerSize / 2, \n            y: this.center[1] - layerSize / 2\n        };\n        const layerStringCount = Math.floor(layerSize / this.nailSpacing);\n\n        return {\n            colors, layerAngle, layerSize, layerStart, layerStringCount\n        };\n    }\n\n    _getLayerColors(layerIndex) {\n        const { color1, color2, colorPerLayer } = this.config;\n        if (colorPerLayer) {\n            const layerColor = layerIndex % 2 ? color1 : color2;\n            return [layerColor, layerColor, layerColor, layerColor];\n        }\n        else {\n            return [color2, color1, color2, color1];\n        }\n    }\n\n    *drawLayer(layerIndex) {\n        const {\n            colors, layerAngle, layerSize, layerStart, layerStringCount\n        } = this._getLayerProps(layerIndex);\n\n        for (let i = 0; i < SIDES.length; i++) {\n            yield* this.drawSide({ \n                color: colors[i], \n                side: SIDES_ORDER[i],\n                angle: layerAngle,\n                size: layerSize,\n                layerStart,\n                layerStringCount\n            });\n        }\n    }\n\n    *generateStrings() {\n        const {layers} =  this.config;\n        for(let layer = layers - 1; layer >= 0; layer--) {\n            yield* this.drawLayer(layer);\n        }\n    }\n\n    getStepCount() {\n        let count = 0;\n        const {layers, angle, n} = this.config;\n        const layerAngle = angle * Math.PI / 180;\n        const maxSize = Math.min(this.canvas.clientWidth, this.canvas.clientHeight) - 2 * MARGIN;\n        const nailSpacing = maxSize / (n - 1);\n\n        for(let layer = 0; layer < layers; layer++) {\n            const layerSize = maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n            count += 4 * (Math.floor(layerSize / nailSpacing) + 1)\n        }\n\n        return count;\n    }\n\n    drawNails() {\n        const {layers} =  this.config;\n        for(let layer = layers - 1; layer >= 0; layer--) {\n            const {\n                layerAngle: angle, layerSize: size, layerStart, layerStringCount\n            } = this._getLayerProps(layer);\n\n            for (let s = 0; s < SIDES.length; s++) {\n                const sideOrder = SIDES_ORDER[s];\n                const rotation = SIDES_ROTATION[sideOrder];\n\n                for(let i=0; i <= layerStringCount; i++) {\n                    const sideProps = { layerStringCount, size, layerStart, angle };\n                    this.nails.addNail({\n                        point: this.getPoint({ sideOrder, index: i, rotation, ...sideProps}),\n                        number: `${layer}_${s}_${i}`\n                    });\n                }\n            }\n        }\n    }\n}\n\nexport default Eye;","import Spiral from \"./string_art_types/Spiral.js\";\nimport Spirals from \"./string_art_types/Spirals.js\";\nimport Wave from './string_art_types/Wave.js';\nimport Eye from './string_art_types/Eye.js';\nimport TimesTables from './string_art_types/TimesTables.js';\nimport Star from \"./string_art_types/Star.js\";\nimport Assymetry from \"./string_art_types/Assymetry.js\";\nimport Circles from './string_art_types/Circles.js';\n\nconst patternTypes = [Star, Assymetry, TimesTables, Spiral, Spirals, Wave, Eye, Circles];\n\nexport default patternTypes;\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Star extends StringArt{\n    name = \"Star\";\n    id = \"star\";\n    link = \"https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj\";\n    controls = [\n        {\n            key: 'sides',\n            label: 'Sides',\n            defaultValue: 3,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'sideNails',\n            label: 'Nails per side',\n            defaultValue: 40,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        Circle.rotationConfig,\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'innerColor',\n                    label: 'Star color',\n                    defaultValue: \"#2ec0ff\",\n                    type: \"color\",\n                },\n                {\n                    key: 'outterColor',\n                    label: 'Outter color',\n                    defaultValue: \"#2a82c6\",\n                    type: \"color\",\n                },\n            ]\n        }\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, sides} = this.config;\n            const extraNails = n % sides;\n            this._n = n - extraNails;\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const { sides, rotation, sideNails, margin = 0 } = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: sideNails * sides,\n            margin,\n            rotation,\n        });\n\n        this.sideAngle = Math.PI * 2 / sides;\n        this.nailSpacing = this.circle.radius / sideNails;\n        this.starCenterStart = (sideNails % 1) * this.nailSpacing;\n\n        this.sides = new Array(sides).fill(null).map((_, side) => {\n            const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n            const circlePointsStart = side * sideNails;\n\n            return {\n                sinSideAngle: Math.sin(sideAngle),\n                cosSideAngle: Math.cos(sideAngle),\n                circlePointsStart,\n                circlePointsEnd: circlePointsStart + sideNails\n            };\n        });\n    }\n\n    getStarPoint({ side, sideIndex }) {\n        const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n        const {sinSideAngle, cosSideAngle} = this.sides[side];\n        const [centerX, centerY] = this.circle.center;\n\n        return [\n            centerX + sinSideAngle * radius,\n            centerY + cosSideAngle * radius\n        ];\n    }\n\n    *generateStarPoints({ reverseOrder  = false} = {}) {\n        const {sides, sideNails} = this.config;\n\n        for (let side = 0; side < sides; side++) {\n            const prevSide = side === 0 ? sides - 1 : side - 1;\n            for (let i=0; i < sideNails; i++) {\n                const sideIndex = reverseOrder ? sideNails - i : i;\n                yield { side, prevSide, sideIndex, point: this.getStarPoint({ side, sideIndex }) };\n            }\n        }\n    }\n\n    *drawStar() {\n        const {innerColor, sideNails} = this.config;\n\n        this.ctx.strokeStyle = innerColor;\n        let prevPoint;\n\n        for (const { prevSide, sideIndex, point} of this.generateStarPoints()) {\n            this.ctx.beginPath();\n\n            if (sideIndex && !(sideIndex % 2)) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...point);\n            } else {\n                this.ctx.moveTo(...point);\n            }\n\n            const prevSideIndex = sideNails - sideIndex;\n            this.ctx.lineTo(...this.getStarPoint({ side: prevSide, sideIndex: prevSideIndex}))\n            prevPoint = point;\n            this.ctx.stroke();\n            yield;\n        }\n    }\n\n    *drawCircle() {\n        const {outterColor} = this.config;\n\n        let prevCirclePoint;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = outterColor;\n        for (const { side, prevSide, sideIndex, point} of this.generateStarPoints({ reverseOrder: true })) {\n            this.ctx.beginPath();\n            if (!prevCirclePoint) {\n                prevCirclePoint = this.circle.getPoint(this.sides[prevSide].circlePointsStart);\n            }\n\n            this.ctx.moveTo(...prevCirclePoint);\n\n            this.ctx.lineTo(...point);\n            this.ctx.stroke();\n\n            yield;\n\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            const nextPointIndex = isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex\n                : this.sides[side].circlePointsStart + sideIndex;\n\n            const nextPoint = this.circle.getPoint(nextPointIndex);\n            this.ctx.lineTo(...nextPoint);\n\n            prevCirclePoint = this.circle.getPoint(isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex + 1\n                : this.sides[side].circlePointsStart + sideIndex - 1);\n\n            this.ctx.lineTo(...prevCirclePoint);\n\n            this.ctx.stroke();\n            isPrevSide = !isPrevSide;\n            yield;\n        }\n    }\n\n    *generateStrings() {\n        yield* this.drawCircle();\n        yield* this.drawStar();\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n\n        for (const {point, side, sideIndex} of this.generateStarPoints()) {\n            this.nails.addNail({ point, number: sideIndex ? `${side}_${sideIndex}` : 0 });\n        }\n\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        const {sides, sideNails} = this.config;\n        const starCount = sideNails * sides;\n        return starCount * 3; // Once for each side + two more times for the side's circle\n    }\n}\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Assymetry extends StringArt{\n    name = \"Assymetry\";\n    id = \"assymetry\";\n    link = \"https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for\";\n    controls = [\n        Circle.nailsConfig,\n        Circle.rotationConfig,\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: [\n                {\n                    key: 'layer1',\n                    label: 'Layer 1',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show1',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size1',\n                            label: 'Size',\n                            defaultValue: 0.25,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size1, n}) => Math.round(n * size1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'end1',\n                            label: 'End Position',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n,\n                            },\n                            displayValue: ({end1, n}) => Math.round(n * end1),\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'color1',\n                            label: 'Color',\n                            defaultValue: \"#a94fb0\",\n                            type: \"color\",\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'reverse1',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show1}) => show1\n                        },\n                    ]\n                },\n                {\n                    key: 'layer2',\n                    label: 'Layer 2',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show2',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size2',\n                            label: 'Size',\n                            defaultValue: 0.125,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size2, n}) => Math.round(n * size2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'end2',\n                            label: 'End Position',\n                            defaultValue: 0.888,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'color2',\n                            label: 'Color',\n                            defaultValue: \"#ec6ad0\",\n                            type: \"color\",\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'reverse2',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show2}) => show2\n                        },\n                    ]\n                },\n                {\n                    key: 'layer3',\n                    label: 'Layer 3',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show3',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'size3',\n                            label: 'Size',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({size3, n}) => Math.round(n * size3),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'end3',\n                            label: 'End Position',\n                            defaultValue: 0.826,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({config: {n}}) => 1 / n\n                            },\n                            displayValue: ({end2, n}) => Math.round(n * end2),\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'color3',\n                            label: 'Color',\n                            defaultValue: \"#f08ad5\",\n                            type: \"color\",\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'reverse3',\n                            label: 'Reverse',\n                            defaultValue: true,\n                            type: 'checkbox',\n                            show: ({show3}) => show3\n                        },\n                    ]\n                }\n            ]\n        },\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n\n    getSetUp() {\n        const { rotation, n, margin = 0 } = this.config;\n        const circle = new Circle({\n            size: this.getSize(),\n            n,\n            margin,\n            rotation: rotation - 0.25,\n        });\n\n        let lineSpacing = circle.indexAngle * circle.radius;\n        const lineNailCount = Math.floor(circle.radius / lineSpacing) - 1;\n        lineSpacing += (circle.radius - lineSpacing * lineNailCount) / lineNailCount;\n        const firstCirclePoint = circle.getPoint(0);\n        const totalNailCount = lineNailCount + n;\n        const totalIndexCount = totalNailCount + lineNailCount;\n        const layers = new Array(3).fill(null)\n            .map((_, i) => getLayer.call(this, i + 1))\n            .filter(({enable}) => enable)\n\n        return {\n            circle,\n            lineSpacing,\n            lineNailCount,\n            firstCirclePoint,\n            layers,\n            totalNailCount,\n            totalIndexCount,\n        };\n\n        function getLayer(layerIndex) {\n            const size = Math.round(n * this.config['size' + layerIndex]) + lineNailCount\n            return {\n                size,\n                endIndex: Math.round(this.config['end' + layerIndex] * (totalNailCount + lineNailCount)) - size,\n                color: this.config['color' + layerIndex],\n                enable: this.config['show' + layerIndex],\n                isReverse: this.config['reverse' + layerIndex],\n            };\n        }\n    }\n\n    /**\n     * Returns the position of a point on the line\n     * @param {index of the point in the circle, 0 is the center} index\n     */\n    getPoint(index) {\n        if (index < this.lineNailCount || index > this.totalNailCount) {\n            const linePosition = index < this.lineNailCount ? this.lineNailCount - index : index - this.totalNailCount;\n\n            const indexLength = (linePosition) * this.lineSpacing;\n            return [\n                this.firstCirclePoint[0] - indexLength * Math.sin(this.circle.rotationAngle),\n                this.firstCirclePoint[1] - indexLength * Math.cos(this.circle.rotationAngle)\n            ];\n        } else {\n            const circleIndex = index - this.lineNailCount;\n            return this.circle.getPoint(circleIndex);\n        }\n    }\n\n    *drawCircle({endIndex, color, isReverse, size}) {\n        let prevPoint;\n        let prevPointIndex;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = color;\n        const self = this;\n        const advance = isReverse ? -1 : 1;\n\n        for(let index = 0; index <= endIndex; index++) {\n            this.ctx.beginPath();\n\n            if (prevPoint) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...this.getPoint(prevPointIndex + advance));\n            } else {\n                this.ctx.moveTo(...this.getPoint(getPointIndex(index)));\n            }\n\n            prevPointIndex = getPointIndex(isPrevSide ? index : index + size);\n            prevPoint = this.getPoint(prevPointIndex);\n            this.ctx.lineTo(...prevPoint);\n            this.ctx.stroke();\n\n            yield;\n\n            isPrevSide = !isPrevSide;\n        }\n\n        function getPointIndex(index) {\n            return isReverse ? self.totalIndexCount - index : index;\n        }\n    }\n\n    *generateStrings() {\n        for (const layer of this.layers) {\n            yield* this.drawCircle(layer);\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails, { nailsNumberStart: this.lineNailCount });\n\n        for (let i=0; i < this.lineNailCount; i++) {\n            this.nails.addNail({ point: this.getPoint(i), number: i });\n        }\n    }\n\n    getStepCount() {\n        const {layers} = this.getSetUp();\n        return layers.reduce((stepCount, layer) =>\n            stepCount + layer.endIndex + 1, 0\n        );\n    }\n}\n","import Color from \"../helpers/Color.js\";\nimport StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nconst MARGIN = 20;\n\nexport default class TimesTables extends StringArt{\n    name = \"Times Tables\";\n    id = \"times_tables\";\n    link = \"https://www.youtube.com/watch?v=LWin7w9hF-E&ab_channel=Jorgedelatierra\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 180,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 240,\n                step: 1\n            }\n        },\n        {\n            key: 'base',\n            label: 'Multiplication',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 99,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 7,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        Circle.rotationConfig,\n        Color.getConfig({ defaults: {\n            isMultiColor: true,\n            multicolorRange: 180,\n            multicolorStart: 256,\n            color: \"#ff4d00\"\n        }}),\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, layers} = this.config;\n            const extraNails = n % layers;\n            this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const {layers, rotation} = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: this.n,\n            margin: MARGIN,\n            rotation,\n        });\n        \n        this.color = new Color({\n            ...this.config,\n            colorCount: layers,\n        });\n\n        this.layerShift = Math.floor(this.n / layers);\n    }\n\n    *drawTimesTable({ shift = 0, color = \"#f00\", steps, time }) {\n        const {base} = this.config;\n        const n = this.n;\n        const stepsToRender = steps ?? n;\n\n        let point = this.circle.getPoint(shift);\n\n        for(let i=1; i <= stepsToRender; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            point = this.circle.getPoint(i + shift);\n            this.ctx.lineTo(...point);\n            const toIndex = (i * base) % n;\n            this.ctx.lineTo(...this.circle.getPoint(toIndex + shift));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            \n            yield { instructions: `${i - 1} → ${i} → ${toIndex} → ${i}`, index: time * n + i };\n        }\n    }\n\n    *generateStrings() {\n        const {layers} = this.config;\n\n        for(let time = 0; time < layers; time++) {\n            const color = this.color.getColor(time);\n            yield* this.drawTimesTable({ \n                time,\n                color, \n                shift: this.layerShift * time,\n            });\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        return this.config.layers * this.n;\n    }\n}\n            ","import Color from \"../helpers/Color.js\";\nimport StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\nimport Spiral from \"./Spiral.js\";\n\nexport default class Wave extends Spiral{\n    id = \"wave\";\n    name = \"Wave\";\n    link = \"https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1\";\n    controls = [\n        {\n            ...Circle.nailsConfig,\n            defaultValue: 200\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 1,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 60,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 0.5,\n            type: \"range\",\n            attr: {\n                min: ({config: {n}}) => 1 / n,\n                max: 1,\n                step: ({config: {n}}) => 1 / n,\n            },\n            displayValue: ({n, innerLength}) => Math.round(n * innerLength)\n        },\n        {\n            ...Circle.rotationConfig,\n            defaultValue: 0.5,\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 11,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'layerSpread',\n            label: 'Layer spread',\n            defaultValue: 0.075,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: ({config: {n}}) => 1 / n\n            },\n            displayValue: ({layerSpread, n}) => Math.round(layerSpread * n)\n        },\n        Color.getConfig({ defaults: {\n            isMultiColor: true,\n            multicolorRange: 216,\n            multicolorStart: 263,\n            color: \"#ffffff\",\n            multicolorByLightness: true,\n            minLightness: 10,\n            maxLightness: 90\n        }}),\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        const { n, layerSpread } = this.config;\n        this.layerShift = Math.round(n * layerSpread);\n    }\n\n    *generateStrings() {\n        for(let layer = 0; layer < this.layersCount; layer++) {\n            yield* this.drawSpiral({ \n                color: this.color.getColor(layer), \n                shift: -this.layerShift * layer \n            });\n        }\n    }\n}","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Circles extends StringArt {\n    name = \"Circles\";\n    id = \"circles\";\n    link = \"https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Circle nails',\n            defaultValue: 80,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'minNailDistance',\n            label: 'Min nail distance',\n            defaultValue: 20,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'Color',\n            defaultValue: \"#ec6ad0\",\n            type: \"color\",\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: [\n                {\n                    key: 'layer1',\n                    label: 'Layer 1',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show1',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius1',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'x1',\n                            label: 'Position X',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'y1',\n                            label: 'Position Y',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation1',\n                            show: ({show1}) => show1,\n                        },\n                        {\n                            key: 'reverse1',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show1}) => show1\n                        },\n                    ]\n                },\n                {\n                    key: 'layer2',\n                    label: 'Layer 2',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show2',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius2',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'x2',\n                            label: 'Position X',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'y2',\n                            label: 'Position Y',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation2',\n                            show: ({show2}) => show2,\n                        },\n                        {\n                            key: 'reverse2',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show2}) => show2\n                        },\n                    ]\n                },\n                {\n                    key: 'layer3',\n                    label: 'Layer 3',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show3',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius3',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'x3',\n                            label: 'Position X',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'y3',\n                            label: 'Position Y',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            ...Circle.rotationConfig,\n                            key: 'rotation3',\n                            show: ({show3}) => show3,\n                        },\n                        {\n                            key: 'reverse3',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({show3}) => show3\n                        },\n                    ]\n                }\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n\n    getSetUp() {\n        const { n, margin = 0, minNailDistance } = this.config;\n        const size = this.getSize();\n\n        const maxRadius = Math.min(...size.map(v => v - 2 * margin)) / 2;\n        const layers = new Array(3).fill(null)\n            .map((_, i) => getLayer.call(this, i + 1))\n            .filter(({enable}) => enable)\n\n        const maxShapeNailsCount = Math.max(...layers.map(({circle}) => circle.config.n));\n\n        return {\n            layers,\n            maxShapeNailsCount,\n        };\n\n        function getLayer(layerIndex) {\n            const prop = prop => this.config[prop + layerIndex];\n            \n            const props = {\n                enable: prop('show'),\n                isReverse: prop('reverse'),\n                position: [prop('x'), prop('y')],\n                radius: maxRadius * prop('radius'),\n                rotation: prop('rotation'),\n            };\n\n            const circumsference = Math.PI * 2 * props.radius;\n            const circleNails = Math.min(n, Math.floor(circumsference / minNailDistance));\n\n            const circle = new Circle({\n                radius: props.radius,\n                center: props.position.map((v, i) => props.radius + margin + (size[i] - (props.radius + margin) * 2) * v),\n                n: circleNails,\n                rotation: props.rotation,\n                reverse: props.isReverse,\n            });\n\n            return {\n                circle,\n                ...props\n            };\n        }\n    }\n\n    getPoint(layer, index) {\n        const {circle} = layer;\n        let circleIndex = Math.round(index * circle.config.n / this.maxShapeNailsCount);\n        return circle.getPoint(circleIndex);\n    }\n\n    *generateStrings() {\n        const {n, color} = this.config;\n\n        this.ctx.strokeStyle = color;\n        let prevCirclePoint;\n\n        for (let i = 0; i < this.maxShapeNailsCount; i++) {\n            for(let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n                const layer = this.layers[layerIndex];\n                this.ctx.beginPath();\n                this.ctx.moveTo(...(prevCirclePoint ?? this.getPoint(layer, i)));\n\n                if (layerIndex === 0 && i) {\n                    this.ctx.lineTo(...this.getPoint(layer, i));\n                }\n\n                let nextLayerIndex = layerIndex + 1;\n                if (nextLayerIndex === this.layers.length) {\n                    nextLayerIndex = 0;\n                }\n\n                prevCirclePoint = this.getPoint(this.layers[nextLayerIndex], i);\n                this.ctx.lineTo(...prevCirclePoint)\n                this.ctx.stroke();\n                yield;\n            }\n        }\n        \n    }\n\n    drawNails() {\n        const n = this.config;\n        this.layers.forEach(({circle}, layerIndex) => circle.drawNails(this.nails, { \n            getNumber: i => `${layerIndex + 1}_${i + 1}` \n        }));\n    }\n\n    getStepCount() {\n        const {layers, maxShapeNailsCount} = this.getSetUp();\n        return layers.length * maxShapeNailsCount - 1;\n    }\n}\n","const elements = {\n    controls: document.querySelector(\"#controls\"),\n    sidebarForm: document.querySelector(\"#sidebar_form\"),\n};\n\nconst EVENTS = new Set(['input', 'change']);\nconst STATE_LOCAL_STORAGE_KEY = 'controls_state';\n\nlet inputTimeout;\n\nexport default class EditorControls {\n    constructor({pattern}) {\n        this.pattern = pattern;\n        this.state = this._getState() ?? { groups: {}};\n\n        this.eventHandlers = {\n            input: new Set(),\n            change: new Set()\n        }\n\n        this._wrappedOnInput = e => this._onInput(e);\n        this._toggleFieldset = e => {\n            if (e.target.nodeName === \"LEGEND\" ) {\n                e.target.parentElement.classList.toggle(\"minimized\");\n                const groupId = e.target.parentElement.dataset.group;\n                this.state = { ...this.state, groups: { ...this.state.groups, [groupId]: !e.target.parentElement.classList.contains(\"minimized\")}};\n                this._updateState(this.state);\n            }\n        };\n\n        this._toggleFieldSetOnEnter = e => {\n            if (e.target.nodeName === \"LEGEND\" && e.key === \"Enter\") {\n                this._toggleFieldset(e);\n            }\n        }\n\n        elements.controls.addEventListener(\"input\", this._wrappedOnInput);\n        elements.sidebarForm.addEventListener(\"click\", this._toggleFieldset);\n        elements.sidebarForm.addEventListener(\"keydown\", this._toggleFieldSetOnEnter);\n        this.controlElements = {};\n        this.renderControls();\n    }\n\n    destroy() {\n        elements.controls.removeEventListener(\"input\", this._wrappedOnInput);\n        elements.sidebarForm.removeEventListener(\"click\", this._toggleFieldset);\n        elements.sidebarForm.removeEventListener(\"keydown\", this._toggleFieldSetOnEnter);\n        elements.controls.innerHTML = \"\";\n    }\n\n    addEventListener(event, eventHandler) {\n        if (!EVENTS.has(event)) {\n            throw new Error(`Unsupported event for EditorControls, \"${event}\"!`);\n        }\n\n        if (!(eventHandler instanceof Function)) {\n            throw new Error('Invalid event handler.');\n        }\n\n        this.eventHandlers[event].add(eventHandler);\n    }\n\n    _triggerEvent(event, eventData) {\n        for(const eventHandler of this.eventHandlers[event]) {\n            eventHandler(eventData);\n        }\n    }\n\n    _onInput(e) {\n        requestAnimationFrame(() => {\n            clearTimeout(inputTimeout);\n\n            const inputValue = getInputValue(e.target.type, e.target);\n            const controlKey = e.target.id.replace(/^config_/, '');\n\n            this.pattern.config = Object.freeze({\n                ...this.pattern.config,\n                [controlKey]: inputValue\n            });\n\n            const {config, displayValue} = this.controlElements[controlKey];\n            if (displayValue) {\n                const formattedValue = config.displayValue ? config.displayValue(this.pattern.config, config) : e.target.value;\n                displayValue.innerText = formattedValue;\n            }\n\n            const eventData = Object.freeze({\n                control: controlKey,\n                value: inputValue,\n                originalEvent: e,\n                pattern: this.pattern,\n            });\n\n            this._triggerEvent('input', eventData);\n\n            inputTimeout = setTimeout(() => {\n                this._triggerEvent('change', eventData);\n                this.updateControlsVisibility();\n            }, 100);\n        });\n    }\n\n    _getState() {\n        const state = localStorage.getItem(STATE_LOCAL_STORAGE_KEY);\n        if (state) {\n            try {\n                return JSON.parse(state);\n            } catch(e) {\n                return null;\n            }\n        }\n\n        return null;\n    }\n\n    _updateState(newState) {\n        if (newState) {\n            localStorage.setItem(STATE_LOCAL_STORAGE_KEY, JSON.stringify(newState));\n        } else {\n            localStorage.removeItem(STATE_LOCAL_STORAGE_KEY);\n        }\n    }\n\n    updateControlsVisibility(configControls = this.pattern.configControls) {\n        configControls.forEach(control => {\n            if (control.show) {\n                const shouldShowControl = control.show(this.pattern.config);\n                const controlEl = this.controlElements[control.key].control;\n                if (controlEl) {\n                    if (shouldShowControl) {\n                        controlEl.removeAttribute('hidden');\n                    } else {\n                        controlEl.setAttribute('hidden', 'hidden');\n                    }\n                }\n            }\n\n            if (control.isDisabled) {\n                const shouldDisableControl = control.isDisabled(this.pattern.config);\n                const inputEl = this.controlElements[control.key].input;\n                if (inputEl) {\n                    if (shouldDisableControl) {\n                        inputEl.setAttribute('disabled', 'disabled');\n                    } else {\n                        inputEl.removeAttribute('disabled');\n                    }\n                }\n            }\n\n            if (control.children) {\n                this.updateControlsVisibility(control.children);\n            }\n        });\n    }\n\n    updateInputs(config) {\n        Object.entries(config).forEach(([key, value]) => {\n            const {input, value: valueEl} = this.controlElements[key];\n            if (input) {\n                if (input.type === \"checkbox\") {\n                    input.checked = value;\n                } else {\n                    input.value = value;\n                }\n                if (valueEl) {\n                    valueEl.innerText = value;\n                }\n            }\n        });\n    }\n\n    renderControls(containerEl = elements.controls, _configControls) {\n        const configControls = _configControls ?? this.pattern.configControls;\n        containerEl.innerHTML = \"\";\n        const controlsFragment = document.createDocumentFragment();\n\n\n        configControls.forEach(control => {\n            const controlId = `config_${control.key}`;\n            const controlElements = this.controlElements[control.key] = { config: control };\n\n            let controlEl;\n\n            if (control.type === \"group\") {\n                controlEl = document.createElement(\"fieldset\");\n                controlEl.setAttribute('data-group', control.key);\n                const groupTitleEl = document.createElement(\"legend\");\n                groupTitleEl.setAttribute(\"tabindex\", \"0\");\n                groupTitleEl.innerText = control.label;\n                controlEl.appendChild(groupTitleEl);\n                controlEl.className = \"control control_group\";\n                if (control.defaultValue === \"minimized\") {\n                    controlEl.classList.add('minimized');\n                    this.state.groups[control.key] = false;\n                }\n                const childrenContainer = document.createElement('div');\n                controlEl.appendChild(childrenContainer);\n                this.renderControls(childrenContainer, control.children);\n            }\n            else {\n                controlEl = document.createElement(\"div\");\n                controlEl.className = \"control\";\n\n                const label = document.createElement(\"label\");\n                label.innerHTML = control.label;\n                label.setAttribute(\"for\", controlId);\n\n                const inputEl = controlElements.input = document.createElement(\"input\");\n                inputEl.setAttribute(\"type\", control.type);\n                const inputValue = this.pattern.config[control.key] ?? control.defaultValue;\n\n                if (control.attr) {\n                    Object.entries(control.attr).forEach(([attr, value]) => {\n                        const realValue = value instanceof Function ? value(this.pattern) : value;\n                        inputEl.setAttribute(attr, realValue)\n                    });\n                }\n\n                if (control.type === \"checkbox\") {\n                    inputEl.checked = inputValue;\n                    controlEl.appendChild(inputEl);\n                    controlEl.appendChild(label);\n                } else {\n                    controlEl.appendChild(label);\n                    controlEl.appendChild(inputEl);\n                    inputEl.value = inputValue;\n                    const inputValueEl = controlElements.displayValue = document.createElement('span');\n                    inputValueEl.id = `config_${control.key}_value`;\n                    inputValueEl.innerText = control.displayValue ? control.displayValue(this.pattern.config, control) : inputValue;\n                    inputValueEl.className = \"control_input_value\";\n                    controlEl.appendChild(inputValueEl);\n                }\n                inputEl.id = controlId;\n            }\n\n            this.controlElements[control.key].control = controlEl;\n            controlEl.id = `control_${control.key}`;\n            controlsFragment.appendChild(controlEl);\n        });\n\n        containerEl.appendChild(controlsFragment);\n        this.updateGroupsState();\n        requestAnimationFrame(() => this.updateControlsVisibility())\n    }\n\n    updateGroupsState() {\n        const groups = elements.sidebarForm.querySelectorAll('[data-group]');\n        groups.forEach(groupEl => {\n            const groupId = groupEl.dataset.group;\n            const groupState = this.state.groups[groupId];\n            if (typeof groupState === 'boolean') {\n                if (groupState) {\n                    groupEl.classList.remove('minimized');\n                } else {\n                    groupEl.classList.add('minimized');\n                }\n            }\n        });\n    }\n}\n\n\nfunction getInputValue(type, inputElement) {\n    switch(type) {\n        case 'range':\n            return parseFloat(inputElement.value);\n        case 'checkbox':\n            return inputElement.checked;\n        case 'number':\n            return parseFloat(inputElement.value);\n        default:\n            return inputElement.value;\n    }\n}\n","const sizeControls = document.querySelector(\"#size_controls\");\n\nconst elements = {\n    sizeSelect: sizeControls.querySelector(\"#size_select\"),\n    sizeCustom: sizeControls.querySelector(\"#size_custom\"),\n    width: sizeControls.querySelector(\"#size_custom_width\"),\n    height: sizeControls.querySelector(\"#size_custom_height\"),\n    orientationSelect: sizeControls.querySelector(\"#size_orientation_select\"),\n};\n\nfunction cmToPixels(cm, dpi = 300) {\n    return Math.floor(cm / 2.54 * dpi);\n}\n\nconst SCREEN_SIZE = [\n    Math.floor(window.screen.width),\n    Math.floor(window.screen.height),\n];\n\nconst SIZES = [\n    { id: 'fit', name: 'Fit to screen' },\n    { id: 'A4', value: [20, 28].map(v => cmToPixels(v)), orientationSelect: true },\n    { id: 'A3', value: [28, 40].map(v => cmToPixels(v)), orientationSelect: true },\n    { id: 'screen', name: `Screen size (${SCREEN_SIZE.join('x')})`, value: SCREEN_SIZE},\n    { id: 'custom', name: 'Custom...' }\n];\n\nexport default class EditorSizeControls {\n    element = document.querySelector(\"#size_controls\");\n\n    constructor({ getCurrentSize }) {\n        const sizeOptionsFragment = document.createDocumentFragment();\n        SIZES.forEach(size => {\n            const sizeListItem = document.createElement('option');\n            sizeListItem.setAttribute('value', size.id);\n            sizeListItem.innerText = size.name ?? size.id;\n            sizeOptionsFragment.appendChild(sizeListItem);\n        });\n        elements.sizeSelect.appendChild(sizeOptionsFragment)\n        this.selectedSize = SIZES[0];\n\n        elements.sizeSelect.addEventListener(\"change\", e => {\n            const selectedSizeId = e.target.value;\n            const size = SIZES.find(({id}) => id === selectedSizeId);\n            this.selectedSize = size;\n\n            if (size.id === \"custom\") {\n                elements.sizeCustom.removeAttribute('hidden');\n                const [width, height] = getCurrentSize();\n                elements.width.value = width;\n                elements.height.value = height;\n            } else {\n                elements.sizeCustom.setAttribute('hidden', 'hidden');\n                this._notifyOnChange(this.getValue());\n            }\n\n            if (size.orientationSelect) {\n                elements.orientationSelect.removeAttribute('hidden');\n            } else {\n                elements.orientationSelect.setAttribute('hidden', 'hidden');\n            }\n        });\n\n        elements.orientationSelect.addEventListener(\"change\", e => {\n            this._notifyOnChange(this.getValue());\n        });\n\n        elements.sizeCustom.addEventListener(\"focusin\", e => {\n            e.target.select();\n        });\n\n        elements.sizeCustom.addEventListener('input', () => {\n            this._notifyOnChange([\n                elements.width.value ? parseInt(elements.width.value) : null,\n                elements.height.value ? parseInt(elements.height.value) : null\n            ]);\n        });\n    }\n\n    _notifyOnChange([width, height] = []) {\n        this.element.dispatchEvent(new CustomEvent('sizechange', { detail: { width, height }}));\n    }\n\n    getValue() {\n        if (this.selectedSize.id === \"custom\") {\n            return [parseInt(elements.width.value, 10), parseInt(elements.height.value, 10)];\n        } else {\n            let value = this.selectedSize.value;\n            if (this.selectedSize.orientationSelect && elements.orientationSelect.value === \"horizontal\") {\n                value = Array.from(value).reverse();\n            }\n            return value;\n        }\n\n    }\n}\n","import Player from \"./editor/Player.js\";\nimport patternTypes from \"./pattern_types.js\";\nimport EditorControls from \"./editor/EditorControls.js\";\nimport EditorSizeControls from \"./editor/EditorSizeControls.js\";\n\nconst elements = {\n    canvas: document.querySelector(\"canvas\"),\n    patternSelector: document.querySelector(\"#pattern_select\"),\n    patternLink: document.querySelector(\"#pattern_link\"),\n    downloadBtn: document.querySelector(\"#download_btn\"),\n    downloadNailsBtn: document.querySelector(\"#download_nails_btn\"),\n};\n\nconst patterns = patternTypes.map(Pattern => new Pattern(elements.canvas));\n\nlet currentPattern;\nconst player = new Player(document.querySelector(\"#player\"));\nconst sizeControls = new EditorSizeControls({\n    getCurrentSize: () => [\n        elements.canvas.clientWidth,\n        elements.canvas.clientHeight\n    ]\n});\n\nlet controls;\n\nwindow.addEventListener('load', main);\n\nfunction main() {\n    initRouting();\n    initSize();\n    initControls();\n\n    if (history.state?.pattern) {\n        updateState(history.state);\n    } else {\n        const queryParams = new URLSearchParams(document.location.search);\n        const queryPattern = queryParams.get('pattern');\n\n        if (queryPattern) {\n            const config = queryParams.get('config');\n            updateState({ pattern: queryPattern, config })\n        } else {\n            selectPattern(patterns[0]);\n        }\n    }\n\n    window.addEventListener(\"resize\", () =>\n        currentPattern.draw()\n    );\n\n    elements.canvas.addEventListener('click', () => {\n        player.toggle();\n    });\n\n    elements.downloadBtn.addEventListener('click', downloadCanvas);\n    elements.downloadNailsBtn.addEventListener('click', downloadNailsImage);\n}\n\nfunction downloadCanvas() {\n    const downloadLink = document.createElement('a');\n    downloadLink.download = currentPattern.name + '.png';\n    downloadLink.href = elements.canvas.toDataURL(\"image/png\");\n    downloadLink.setAttribute('target', 'download')\n    downloadLink.click();\n}\n\nfunction downloadNailsImage() {\n    const currentConfig = currentPattern.config;\n    currentPattern.config = {\n        darkMode: false,\n        showNails: true,\n        showNailNumbers: true,\n        showStrings: false,\n        nailsColor: \"#000000\",\n    };\n    currentPattern.draw();\n    downloadCanvas();\n}\n\nfunction onInputsChange() {\n    player.update(currentPattern);\n    const configQuery = JSON.stringify(currentPattern.config);\n    history.replaceState({\n        pattern: currentPattern.id,\n        config: configQuery\n    }, currentPattern.name, `?pattern=${currentPattern.id}&config=${encodeURIComponent(configQuery)}`);\n}\n\nfunction initControls() {\n    patterns.forEach(pattern => {\n        const option = document.createElement('option');\n        option.innerText = pattern.name;\n        option.value = pattern.id;\n        elements.patternSelector.appendChild(option);\n    });\n\n    elements.patternSelector.addEventListener('change', e => {\n        const patternId = e.target.value;\n        selectPattern(findPatternById(patternId));\n        history.pushState({ pattern: patternId }, patternId, \"?pattern=\" + patternId)\n    });\n}\n\nfunction initSize() {\n    sizeControls.element.addEventListener('sizechange', ({ detail }) => {\n        setSize(detail);\n    });\n}\n\nfunction setSize({width, height}) {\n    elements.canvas.removeAttribute('width');\n    elements.canvas.removeAttribute('height');\n\n    if (width && height) {\n        elements.canvas.style.width = `${width}px`;\n        elements.canvas.style.height = `${height}px`;\n    } else {\n        elements.canvas.removeAttribute('style');\n    }\n\n    currentPattern.draw();\n}\n\nfunction initRouting() {\n    window.addEventListener('popstate', ({state}) => {\n        updateState(state);\n    });\n}\n\nfunction updateState(state) {\n    const pattern = findPatternById(state.pattern);\n    elements.patternSelector.value = pattern.id;\n    selectPattern(pattern, {\n        draw: false,\n        config: state.config ? JSON.parse(state.config) : null\n    });\n\n    currentPattern.draw();\n}\n\nfunction findPatternById(patternId) {\n    const pattern = patterns.find(({id}) => id === patternId);\n    if (!pattern) {\n        throw new Error(`Pattern with id \"${patternId} not found!`);\n    }\n    return pattern;\n}\n\nfunction selectPattern(pattern, { config, draw = true} = {}) {\n    currentPattern = pattern;\n    if (config) {\n        currentPattern.config = config;\n    }\n    if (controls) {\n        controls.destroy();\n    }\n    controls = new EditorControls({pattern, config});\n    controls.addEventListener('input', () => currentPattern.draw());\n    controls.addEventListener('change', onInputsChange);\n\n    elements.patternLink.setAttribute(\"href\", pattern.link);\n    if (draw) {\n        currentPattern.draw();\n    }\n    player.update(currentPattern, { draw: false });\n    document.title = `${pattern.name} - String Art Studio`;\n}\n","export default class Player {\n    constructor(parentEl) {\n        this.elements = {\n            player: parentEl,\n            step: parentEl.querySelector('#step'),\n            stepInstructions: parentEl.querySelector('#step_instructions'),\n            playerPosition: parentEl.querySelector('#player_position'),\n            playBtn: parentEl.querySelector('#play_btn'),\n            pauseBtn: parentEl.querySelector('#pause_btn')\n        };\n        this.stepCount = 0;\n        this._isPlaying = false;\n\n        this.elements.playerPosition.addEventListener('input', ({ target }) => {\n            this.goto(+target.value)\n        });\n\n        this.elements.playBtn.addEventListener('click', () => {\n            this.play();\n        });\n\n        this.elements.pauseBtn.addEventListener('click', () => {\n            this.pause();\n        });\n    }\n\n    updateStatus(isPlaying) {\n        if (this._isPlaying !== isPlaying) {\n            this.elements.player.classList.toggle('playing');\n            this._isPlaying = isPlaying;\n        }\n    }\n\n    update(stringArt, { draw = true} = {}) {\n        this.stringArt = stringArt;\n        this.stepCount = stringArt.getStepCount();\n        this.elements.playerPosition.setAttribute('max', this.stepCount);\n        this.goto(this.stepCount, { updateStringArt: draw });\n    }\n\n    updatePosition(position) {\n        this.elements.step.innerText = `${position}/${this.stepCount}`;\n        this.elements.playerPosition.value = position;\n    }\n\n    goto(position, { updateStringArt = true} = {}) {\n        this.pause();\n        this.updatePosition(position);\n        if (updateStringArt) {\n            this.stringArt.goto(position);\n        }\n    }\n\n    setInstructions(instructions) {\n        this.elements.stepInstructions.innerText = instructions;\n    }\n\n    play() {\n        this.updateStatus(true);\n        cancelAnimationFrame(this.renderRafId);\n\n        if (this.stringArt.position === this.stepCount) {\n            this.stringArt.goto(0);\n        }\n\n        const self = this;\n\n        step();\n\n        function step() {\n            if (!self.stringArt.drawNext().done) {\n                self.renderRafId = requestAnimationFrame(step);\n            } else {\n                self.updateStatus(false);\n            }\n            self.updatePosition(self.stringArt.position);\n        }\n    }\n\n    pause() {\n        cancelAnimationFrame(this.renderRafId);\n        this.updateStatus(false);\n    }\n\n    toggle() {\n        if (this._isPlaying) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n}\n"],"names":["$e8c1397eac31f13e$var$COLOR_CONTROLS","key","label","defaultValue","type","show","isMultiColor","attr","min","max","step","children","multicolorByLightness","config","this","multicolorRange","colorCount","minLightness","maxLightness","multicolorStart","darkMode","saturation","reverseColors","multiColorStep","multiColorLightnessStep","colors","Array","fill","map","_","colorIndex","lightness","reverse","getColor","color","getColorMap","stepCount","stepsPerColor","Math","floor","colorMap","Map","i","set","include","exclude","defaults","controls","getControls","controlsConfig","filter","includes","control","finalControl","Object","freeze","$a8180031c78213da$var$PI2","PI","canvas","context","getContext","setConfig","centerX","width","nails","nailRadius","nailsColor","nailNumbersFontSize","addNail","nail","push","drawNumbers","globalCompositeOperation","beginPath","fillStyle","textBaseline","font","nailNumberOffset","forEach","point","x","y","number","moveTo","arc","isRightAlign","numberPosition","textAlign","fillText","String","$65e05ee91a8797e3$var$COLORS","$65e05ee91a8797e3$var$COMMON_CONFIG_CONTROLS","isDisabled","showNails","showStrings","displayValue","margin","showNailNumbers","customBackgroundColor","$65e05ee91a8797e3$var$flattenConfig","configControls","reduce","$65e05ee91a8797e3$export$2e2bcd8739ae039","Error","ctx","dpr","window","devicePixelRatio","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","concat","defaultConfig","_defaultConfig","_config","value","assign","getSize","clientWidth","clientHeight","v","setUpDraw","removeAttribute","height","size","setAttribute","center","$a8180031c78213da$export$2e2bcd8739ae039","clearRect","lineWidth","stringWidth","afterDraw","drawNails","initDraw","backgroundColor","fillRect","draw","position","Infinity","stringsIterator","generateStrings","drawNext","done","goto","result","next","getStepCount","name","$188437ce07b37c18$var$PI2","n","rotation","radius","indexAngle","rotationAngle","isReverse","getPoint","index","realIndex","sin","cos","nailsNumberStart","getNumber","round","$828d2af56886c091$var$COLOR_CONFIG","$e8c1397eac31f13e$export$2e2bcd8739ae039","getConfig","splice","findIndex","id","link","$188437ce07b37c18$export$2e2bcd8739ae039","nailsConfig","innerLength","rotationConfig","super","layers","layersCount","circle","colorsMap","shift","repetition","currentInnerLength","repetitionCount","strokeStyle","prevPoint","isPrevPoint","stepColor","get","nextPointIndex","lineTo","stroke","drawSpiral","$17fe1039ca333e84$export$2e2bcd8739ae039","nSpirals","radiusIncrease","angleStep","PI2","spiralRotations","maxRadius","nailsPerSpiral","angleIncrease","s","nailNumber","spiralIndex","centerx","centery","angle","points","generatePoints","lastPoint","$f11ad0f2a18da5c9$var$SIDES","$f11ad0f2a18da5c9$var$SIDES_ORDER","$f11ad0f2a18da5c9$var$SIDES_ROTATION","left","bottom","right","top","$f11ad0f2a18da5c9$export$2e2bcd8739ae039","maxSize","nailSpacing","layerAngle","layerStart","theta","pivot","cosAngle","sinAngle","side","layerStringCount","sideIndex","indexOf","nextSide","length","nextSideRotation","sideProps","_getLayerProps","layerIndex","_getLayerColors","layerSize","pow","color1","color2","colorPerLayer","layerColor","drawSide","layer","drawLayer","count","sideOrder","$8b13425f1e264518$export$2e2bcd8739ae039","_n","sides","extraNails","sideNails","sideAngle","starCenterStart","circlePointsStart","sinSideAngle","cosSideAngle","circlePointsEnd","getStarPoint","centerY","reverseOrder","prevSide","innerColor","generateStarPoints","prevSideIndex","outterColor","prevCirclePoint","isPrevSide","nextPoint","drawCircle","drawStar","size1","show1","end1","size2","show2","end2","size3","show3","getSetUp","lineSpacing","lineNailCount","firstCirclePoint","totalNailCount","totalIndexCount","getLayer","call","enable","endIndex","indexLength","circleIndex","prevPointIndex","self","advance","getPointIndex","layerShift","steps","time","base","stepsToRender","toIndex","instructions","drawTimesTable","$828d2af56886c091$export$2e2bcd8739ae039","layerSpread","minNailDistance","maxShapeNailsCount","prop","props","circumsference","circleNails","nextLayerIndex","$2fc16ffa17719734$var$elements","document","querySelector","sidebarForm","$2fc16ffa17719734$var$EVENTS","Set","$2fc16ffa17719734$var$inputTimeout","pattern","state","_getState","groups","eventHandlers","input","change","_wrappedOnInput","e","_onInput","_toggleFieldset","target","nodeName","parentElement","classList","toggle","groupId","dataset","group","contains","_updateState","_toggleFieldSetOnEnter","addEventListener","controlElements","renderControls","destroy","removeEventListener","innerHTML","event","eventHandler","has","Function","add","_triggerEvent","eventData","requestAnimationFrame","clearTimeout","inputValue","inputElement","parseFloat","checked","$2fc16ffa17719734$var$getInputValue","controlKey","replace","formattedValue","innerText","originalEvent","setTimeout","updateControlsVisibility","localStorage","getItem","JSON","parse","newState","setItem","stringify","removeItem","shouldShowControl","controlEl","shouldDisableControl","inputEl","updateInputs","entries","valueEl","containerEl","_configControls","controlsFragment","createDocumentFragment","controlId","createElement","groupTitleEl","appendChild","className","childrenContainer","realValue","inputValueEl","updateGroupsState","querySelectorAll","groupEl","groupState","remove","$0597ff46967fdd49$var$sizeControls","$0597ff46967fdd49$var$elements","sizeSelect","sizeCustom","orientationSelect","$0597ff46967fdd49$var$cmToPixels","cm","dpi","$0597ff46967fdd49$var$SCREEN_SIZE","screen","$0597ff46967fdd49$var$SIZES","join","$52852adbc3c0b381$var$elements","patternSelector","patternLink","downloadBtn","downloadNailsBtn","$52852adbc3c0b381$var$patterns","Pattern","$52852adbc3c0b381$var$currentPattern","$52852adbc3c0b381$var$player","parentEl","elements","player","stepInstructions","playerPosition","playBtn","pauseBtn","_isPlaying","play","pause","updateStatus","isPlaying","update","stringArt","updateStringArt","updatePosition","setInstructions","cancelAnimationFrame","renderRafId","$52852adbc3c0b381$var$sizeControls","element","getCurrentSize","sizeOptionsFragment","sizeListItem","selectedSize","selectedSizeId","find","_notifyOnChange","getValue","select","parseInt","dispatchEvent","CustomEvent","detail","from","$52852adbc3c0b381$var$controls","$52852adbc3c0b381$var$downloadCanvas","downloadLink","download","href","toDataURL","click","$52852adbc3c0b381$var$downloadNailsImage","$52852adbc3c0b381$var$onInputsChange","configQuery","history","replaceState","encodeURIComponent","$52852adbc3c0b381$var$updateState","$52852adbc3c0b381$var$findPatternById","$52852adbc3c0b381$var$selectPattern","patternId","$2fc16ffa17719734$export$2e2bcd8739ae039","title","$52852adbc3c0b381$var$initRouting","style","$52852adbc3c0b381$var$setSize","$52852adbc3c0b381$var$initSize","option","pushState","$52852adbc3c0b381$var$initControls","queryParams","URLSearchParams","location","search","queryPattern"],"version":3,"file":"index.804a825b.js.map"}