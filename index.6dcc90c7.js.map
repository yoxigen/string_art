{"mappings":"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","sources":["src/scripts/Nails.js","src/scripts/StringArt.js","src/scripts/string_art_types/Spirals.js","src/scripts/string_art_types/Circle.js","src/scripts/string_art_types/Eye.js","src/scripts/pattern_types.js","src/scripts/string_art_types/TimesTables.js","src/scripts/string_art_types/Spiral.js","src/scripts/string_art_types/Star.js","src/scripts/main.js","src/scripts/Player.js"],"sourcesContent":["const PI2 = Math.PI * 2;\n\nexport default class Nails {\n    constructor(canvas, config) {\n        this.context = canvas.getContext(\"2d\");\n        this.setConfig(config);\n        this.nails = [];\n    }\n\n    setConfig({ nailRadius, darkMode}) {\n        this.nailRadius = nailRadius;\n        this.nailsColor = darkMode ? '#ffffff' : '#000000';\n        this.nails = [];\n    }\n\n    // Adds a nail to be rendered. nail: { point, number }\n    addNail(nail) {\n        this.nails.push(nail);\n    }\n\n    fill() {\n        this.context.globalCompositeOperation = \"source-over\";\n        this.context.beginPath();\n        this.nails.forEach(({ point: [x, y] }) => {\n            this.context.moveTo(x + this.nailRadius, y);\n            this.context.arc(x, y, this.nailRadius, 0, PI2)\n        });\n\n        this.context.fillStyle = this.nailsColor;\n        this.context.fill();\n\n        this.nails = [];\n    }\n}","import Nails from \"./Nails.js\";\n\nconst COMMON_CONFIG_CONTROLS = [\n    {\n        key: 'general',\n        label: 'General',\n        type: 'group',\n        children: [\n            {\n                key: 'darkMode',\n                label: 'Dark mode',\n                defaultValue: true,\n                type: 'checkbox'\n            },\n            {\n                key: 'showStrings',\n                label: 'Show strings',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showNails}) => !showNails\n            },\n            {\n                key: 'showNails',\n                label: 'Show nails',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showStrings}) => !showStrings\n            },\n            {\n                key: 'nailRadius',\n                label: 'Nail size',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 1,\n                    max: 5,\n                    step: 1\n                },\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'stringWidth',\n                label: 'String width',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 1,\n                    max: 4,\n                    step: 0.2\n                }\n            }\n        ]\n    },\n];\n\nclass StringArt {\n    constructor(canvas) {\n        if (!canvas) {\n            throw new Error(\"Canvas not specified!\");\n        }\n\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        const dpr = window.devicePixelRatio || 1;\n        const bsr = this.ctx.webkitBackingStorePixelRatio ||\n            this.ctx.mozBackingStorePixelRatio ||\n            this.ctx.msBackingStorePixelRatio ||\n            this.ctx.oBackingStorePixelRatio ||\n            this.ctx.backingStorePixelRatio || 1;\n        this.pixelRatio = dpr / bsr;\n    }\n\n    get configControls() {\n        return (this.controls ?? []).concat(COMMON_CONFIG_CONTROLS);\n    }\n\n    get defaultConfig() {\n        if (!this._defaultConfig) {\n            this._defaultConfig = flattenConfig(this.configControls);\n        }\n\n        return this._defaultConfig;\n    }\n\n    get config() {\n        return this._config ?? this.defaultConfig;\n    }\n\n    set config(value) {\n        this._config = Object.assign({}, this.defaultConfig, value);\n    }\n\n    setUpDraw() {\n        this.canvas.removeAttribute('width');\n        this.canvas.removeAttribute('height');\n\n        const canvasScreenSize = [this.canvas.clientWidth, this.canvas.clientHeight];\n        const [width, height] = this.size = canvasScreenSize.map(v => v * this.pixelRatio);\n        Object.assign(this, this.size);\n        this.canvas.setAttribute('width', width);\n        this.canvas.setAttribute('height', height);\n        this.center = this.size.map(value => value / 2);\n\n        if (this.nails) {\n            this.nails.setConfig(this.config);\n        } else {\n            this.nails = new Nails(this.canvas, this.config);\n        }\n\n        this.ctx.clearRect(0, 0, ...this.size);\n        this.ctx.lineWidth = this.config.stringWidth;\n    }\n\n    afterDraw() {\n        if (this.config.showNails) {\n            this.drawNails();\n            this.nails.fill();\n        }\n    }\n\n    initDraw() {\n        this.setUpDraw(this.config);\n        const { showNails } = this.config;\n\n        this.ctx.beginPath();\n        this.ctx.globalCompositeOperation = 'destination-over';\n        this.ctx.fillStyle = this.config.darkMode ? '#222222' : '#ffffff';\n        this.ctx.fillRect(0, 0, ...this.size);\n\n        this.ctx.globalCompositeOperation = 'source-over';\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill();\n        }\n    }\n\n    /**\n     * Draws the string art on canvas\n     * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n     */\n    draw({position = Infinity} = {}) {\n        this.initDraw();\n        const { showStrings } = this.config;\n\n        if (showStrings) {\n            this.stringsIterator = this.generateStrings();\n            this.position = 0;\n\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        }\n    }\n\n    goto(position) {\n        if (position === this.position) {\n            return;\n        }\n\n        if (this.stringsIterator && position > this.position) {\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        } else {\n            this.draw({ position });\n        }\n    }\n\n    drawNext() {\n        const result = this.stringsIterator.next();\n\n        if (result.done) {\n            this.afterDraw();\n        } else {\n            this.position++;\n        }\n\n        return result;\n    }\n\n    generateStrings(config) {\n        throw new Error(\"generateStrings method not defined!\");\n    }\n\n    getStepCount(config) {\n        throw new Error(`'getStepCount' method not implemented for string art type \"${this.name}\"`);\n    }\n}\n\nfunction flattenConfig(configControls) {\n    return configControls.reduce((config, {key, defaultValue, children}) =>\n        children ? {\n            ...config,\n            ...flattenConfig(children)\n        } : {\n            ...config,\n            [key]: defaultValue\n        },\n    {});\n}\n\nexport default StringArt;\n","import StringArt from \"../StringArt.js\";\n\nclass Spirals extends StringArt{\n    name = \"Spirals\";\n    id = \"spirals\";\n    link = \"https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 92,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'radiusIncrease',\n            label: 'Size',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 0.2\n            }\n        },\n        {\n            key: 'angleStep',\n            label: 'Angle step',\n            defaultValue: 0.05,\n            type: \"range\",\n            attr: {\n                min: 0.01,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'nSpirals',\n            label: 'Number of spirals',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'String color',\n            defaultValue: \"#00ddff\",\n            type: \"color\",\n        }\n    ];\n    \n    *generatePoints() {\n        const {\n            n, radiusIncrease, angleStep, nSpirals,\n        } = this.config;\n        \n        let currentRadius = 0;\n        let angle = 0;\n        const [centerx, centery] = this.center;\n\n        for (let i = 0; i < n; i++) {\n            for (let s = 0; s < nSpirals; s++) {\n                const rotation = s * 2 * Math.PI / nSpirals;\n                const point = [\n                    centerx + currentRadius * Math.sin(angle + rotation),\n                    centery + currentRadius * Math.cos(angle + rotation)\n                ];\n                yield point;\n            }\n            \n            angle += angleStep;\n            currentRadius += radiusIncrease;\n        }\n    }\n\n    *generateStrings() {\n        const points = this.generatePoints();\n        let index = 0;\n        this.ctx.beginPath();\n        this.ctx.moveTo(...this.center);\n        this.ctx.strokeStyle = this.config.color;\n\n        let lastPoint = this.center;\n\n        for (const point of points) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...lastPoint);\n            lastPoint = point;\n            this.ctx.lineTo(...point);\n            this.ctx.strokeStyle = this.config.color;\n            this.ctx.stroke();\n            yield index++;\n        }\n    }\n\n    getStepCount() {\n        const { n, nSpirals } = this.config;\n        return n * nSpirals;\n    }\n\n    drawNails() {\n        const points = this.generatePoints();\n        let index = 0;\n        for (const point of points) {\n            this.nails.addNail({point, number: `${index++}`});\n        }\n    }\n}\n\nexport default Spirals;","const PI2 = Math.PI * 2;\n\nexport default class Circle {\n    constructor(config) {\n        const { n, size, margin = 0, rotation = 0, center } = this.config = config;\n        \n        this.center = center ?? size.map(v => v / 2);\n        this.radius = Math.min(...this.center) - margin;\n\n        this.indexAngle = PI2 / n;\n        this.rotationAngle = -PI2 * rotation;\n    }\n\n    getPoint(index = 0) {\n        return [\n            this.center[0] + Math.sin(index * this.indexAngle + this.rotationAngle) * this.radius,\n            this.center[1] + Math.cos(index * this.indexAngle + this.rotationAngle) * this.radius\n        ];\n    }\n\n    drawNails(nails) {\n        for (let i=0; i < this.config.n; i++) {\n            nails.addNail({point: this.getPoint(i)});\n        }\n    }\n}","import StringArt from \"../StringArt.js\";\n\nconst MARGIN = 20;\nconst SIDES = ['left', 'bottom', 'right', 'top'];\nconst SIDES_ORDER = ['left', 'bottom', 'right', 'top'];\n\nconst SIDES_ROTATION = {\n    left: 0,\n    bottom: Math.PI / 2,\n    right: Math.PI,\n    top: Math.PI * 1.5\n};\n\nclass Eye extends StringArt{\n    name = \"Eye\"\n    id = \"eye\"\n    link = \"https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails per side',\n            defaultValue: 82,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'angle',\n            label: 'Layer angle',\n            defaultValue: 30,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 45,\n                step: 1\n            }\n        },\n        {\n            key: 'color1',\n            label: 'String #1 color',\n            defaultValue: \"#11e8bd\",\n            type: \"color\",\n        },\n        {\n            key: 'color2',\n            label: 'String #2 color',\n            defaultValue: \"#6fff52\",\n            type: \"color\",\n        },\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n\n        const { n, angle } = this.config;\n\n        this.maxSize = Math.min(...this.size) - 2 * MARGIN;\n        this.nailSpacing = this.maxSize / (n - 1);\n        this.layerAngle = angle * Math.PI / 180;\n    }\n\n    // Sides: top, right, bottom, left\n    getPoint({index, angle, layerStart, rotation}) {\n        const theta = angle + rotation;\n\n        const point = { \n            x: layerStart.x, \n            y: layerStart.y + this.nailSpacing * index\n        };\n\n        const pivot = { x: this.center[0], y: this.center[1] };\n\n        const cosAngle = Math.cos(theta);\n        const sinAngle = Math.sin(theta);\n\n        const position = [\n            (cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x),\n            (sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y),\n        ];\n        return position;\n    }\n\n    *drawSide({ side, color = '#ffffff', angle, size, layerStart }) {\n        const sideIndex = SIDES.indexOf(side);\n        const nextSide = SIDES[sideIndex === SIDES.length - 1 ? 0 : sideIndex + 1];\n        const rotation = SIDES_ROTATION[side];\n        const nextSideRotation = SIDES_ROTATION[nextSide];\n        const nLayer = Math.floor(size / this.nailSpacing);\n        \n        const sideProps = { nLayer, size, layerStart, angle };\n        \n        for(let i=0; i <= nLayer; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...this.getPoint({ side, index: i, rotation, ...sideProps}));\n            this.ctx.lineTo(...this.getPoint({side: nextSide, index: i, rotation: nextSideRotation, ...sideProps}));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            yield i;\n        }\n    }\n\n    *drawLayer(layer) {\n        const { color1, color2 } = this.config;\n        const colors = [color2, color1, color2, color1];\n        const layerAngle = this.layerAngle * layer;\n        const layerSize = this.maxSize / Math.pow(Math.cos(this.layerAngle) + Math.sin(this.layerAngle), layer);\n        const layerStart = { \n            x: this.center[0] - layerSize / 2, \n            y: this.center[1] - layerSize / 2\n        };\n\n        for (let i = 0; i < SIDES.length; i++) {\n            yield* this.drawSide({ \n                color: colors[i], \n                side: SIDES_ORDER[i],\n                angle: layerAngle,\n                size: layerSize,\n                layerStart,\n            });\n        }\n    }\n\n    *generateStrings() {\n        const {layers} =  this.config;\n        for(let layer=layers - 1; layer >= 0; layer--) {\n            yield* this.drawLayer(layer);\n        }\n    }\n\n    getStepCount() {\n        let count = 0;\n        const {layers, angle, n} = this.config;\n        const layerAngle = angle * Math.PI / 180;\n        const maxSize = Math.min(this.canvas.clientWidth, this.canvas.clientHeight) - 2 * MARGIN;\n        const nailSpacing = maxSize / (n - 1);\n\n        for(let layer = 0; layer < layers; layer++) {\n            const layerSize = maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n            count += 4 * (Math.floor(layerSize / nailSpacing) + 1)\n        }\n\n        return count;\n    }\n\n    drawNails() {\n        const {n} = this.config;\n\n        for(let i=0; i < 4; i++) {\n            const side = SIDES[i];\n            for (let nail = 0; nail < n; nail++) {\n               //this.nails.addNail({ point: this.getPoint({ side, index: nail })})\n            }\n        }\n    }\n}\n\nexport default Eye;","import Spirals from \"./string_art_types/Spirals.js\";\nimport Spiral from './string_art_types/Spiral.js';\nimport Eye from './string_art_types/Eye.js';\nimport TimesTables from './string_art_types/TimesTables.js';\nimport Star from \"./string_art_types/Star.js\";\n\nconst patternTypes = [TimesTables, Spirals, Spiral, Eye, Star];\n\nexport default patternTypes;","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nconst MARGIN = 20;\n\nexport default class TimesTables extends StringArt{\n    name = \"Times Tables\";\n    id = \"times_tables\";\n    link = \"https://www.youtube.com/watch?v=LWin7w9hF-E&ab_channel=Jorgedelatierra\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 180,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 240,\n                step: 1\n            }\n        },\n        {\n            key: 'base',\n            label: 'Multiplication',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 99,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 7,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'multicolor',\n                    label: 'Use multiple colors',\n                    defaultValue: true,\n                    type: \"checkbox\",\n                },\n                {\n                    key: 'multicolorRange',\n                    label: 'Multicolor range',\n                    defaultValue: 180,\n                    type: \"range\",\n                    attr: {\n                        min: 1,\n                        max: 360,\n                        step: 1\n                    },\n                    show: ({multicolor}) => multicolor,\n                },\n                {\n                    key: 'multicolorStart',\n                    label: 'Multicolor start',\n                    defaultValue: 256,\n                    type: \"range\",\n                    attr: {\n                        min: 0,\n                        max: 360,\n                        step: 1\n                    },\n                    show: ({multicolor}) => multicolor,\n                },\n                {\n                    key: 'color',\n                    label: 'String color',\n                    defaultValue: \"#ff4d00\",\n                    type: \"color\",\n                    show: ({multicolor}) => !multicolor\n                },\n            ]\n        },\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, layers} = this.config;\n            const extraNails = n % layers;\n            this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const {layers, multicolorRange} = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: this.n,\n            margin: MARGIN\n        });\n        this.multiColorStep = multicolorRange / layers;\n        this.layerShift = Math.floor(this.n / layers);\n    }\n\n    *drawTimesTable({ shift = 0, color = \"#f00\", steps, time }) {\n        const {base} = this.config;\n        const n = this.n;\n        const stepsToRender = steps ?? n;\n\n        let point = this.circle.getPoint(shift);\n\n        for(let i=1; i <= stepsToRender; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            point = this.circle.getPoint(i + shift);\n            this.ctx.lineTo(...point);\n            const toIndex = (i * base) % n;\n            this.ctx.lineTo(...this.circle.getPoint(toIndex + shift));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            \n            yield { instructions: `${i - 1} → ${i} → ${toIndex} → ${i}`, index: time * n + i };\n        }\n    }\n\n    *generateStrings() {\n        const {color, multicolor, layers} = this.config;\n\n        for(let time = 0; time < layers; time++) {\n            const timeColor = multicolor ? this.getTimeColor(time, layers) : color;\n            yield* this.drawTimesTable({ \n                time,\n                color: timeColor, \n                shift: this.layerShift * time,\n            });\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n\n    getTimeColor(time) {\n        const {multicolorStart, darkMode} = this.config;\n\n        return `hsl(${multicolorStart + time * this.multiColorStep}, 80%, ${darkMode ? 50 : 40}%)`;\n    }\n\n    getStepCount() {\n        return this.config.layers * this.n;\n    }\n}\n            ","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Spiral extends StringArt{\n    id = \"spiral\";\n    name = \"Spiral\";\n    link = \"https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 144,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 60,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 72,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 144,\n                step: 1,\n            }\n        },\n        {\n            key: 'rotation',\n            label: 'Rotation',\n            defaultValue: 0.49,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 9,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'layerSpread',\n            label: 'Layer spread',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'multicolorRange',\n                    label: 'Multicolor range',\n                    defaultValue: 216,\n                    type: \"range\",\n                    attr: {\n                        min: 1,\n                        max: 360,\n                        step: 1\n                    },\n                },\n                {\n                    key: 'multicolorStart',\n                    label: 'Multicolor start',\n                    defaultValue: 263,\n                    type: \"range\",\n                    attr: {\n                        min: 0,\n                        max: 360,\n                        step: 1\n                    },\n                },\n                {\n                    key: 'multicolorByLightness',\n                    label: 'Multicolor by lightness',\n                    defaultValue: true,\n                    type: 'checkbox'\n                }\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        const { n, rotation } = this.config;\n\n        this.circle = new Circle({\n            size: this.size,\n            n,\n            rotation,\n            margin: 20,\n        });\n        const {layers, multicolorRange, multicolorByLightness, layerSpread} = this.config;\n        this.multiColorStep = multicolorRange / layers;\n        this.multiColorLightnessStep = multicolorByLightness ? 100 / layers : 1;\n        this.layerShift = layerSpread;\n    }\n\n    *drawSpiral({ shift = 0, color = \"#f00\" } = {}) {\n        const {repetition, innerLength} = this.config;\n        \n        this.ctx.moveTo(...this.circle.getPoint(shift));\n        \n        let currentInnerLength = innerLength;\n        let repetitionCount = 0;\n        this.ctx.strokeStyle = color;\n        \n        for(let i=0; currentInnerLength; i++) {\n            this.ctx.beginPath();\n            this.ctx.lineTo(...this.circle.getPoint(i + currentInnerLength + shift));\n            this.ctx.lineTo(...this.circle.getPoint(i + 1 + shift));\n            this.ctx.stroke();\n\n            repetitionCount++;\n            if (repetitionCount === repetition) {\n                currentInnerLength--;\n                repetitionCount = 0;\n            }\n\n            yield i;\n        }\n      \n    }\n\n    *generateStrings() {\n        const { layers } = this.config;\n        for(let layer = 0; layer < layers; layer++) {\n            yield* this.drawSpiral({ \n                color: this.getLayerColor(layer), \n                shift: -this.layerShift * layer \n            });\n        }\n    }\n\n    getLayerColor(layer) {\n        const {multicolorStart, darkMode, multicolorByLightness} = this.config;\n        const lightness = multicolorByLightness ? this.multiColorLightnessStep * layer : darkMode ? 50 : 40;\n\n        return `hsl(${multicolorStart + layer * this.multiColorStep}, 80%, ${lightness}%)`;\n    }\n\n    getStepCount() {\n        const {innerLength, repetition, layers} = this.config;\n        return layers * innerLength * repetition;\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n}","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nconst MARGIN = 20;\n\nexport default class Star extends StringArt{\n    name = \"Star\";\n    id = \"star\";\n    link = \"https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj\";\n    controls = [\n        {\n            key: 'sides',\n            label: 'Sides',\n            defaultValue: 3,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'sideNails',\n            label: 'Nails per side',\n            defaultValue: 40,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'rotation',\n            label: 'Rotation',\n            defaultValue: 0,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'innerColor',\n                    label: 'Star color',\n                    defaultValue: \"#2ec0ff\",\n                    type: \"color\",\n                },\n                {\n                    key: 'outterColor',\n                    label: 'Outter color',\n                    defaultValue: \"#2a82c6\",\n                    type: \"color\",\n                },\n            ]\n        }\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, sides} = this.config;\n            const extraNails = n % sides;\n            this._n = n - extraNails;\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const { sides, rotation, sideNails } = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: sideNails * sides,\n            margin: MARGIN,\n            rotation,\n        });\n\n        this.sideAngle = Math.PI * 2 / sides;\n        this.nailSpacing = this.circle.radius / sideNails;\n        this.starCenterStart = (sideNails % 1) * this.nailSpacing;     \n\n        this.sides = new Array(sides).fill(null).map((_, side) => {\n            const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n            const circlePointsStart = side * sideNails;\n\n            return {\n                sinSideAngle: Math.sin(sideAngle),\n                cosSideAngle: Math.cos(sideAngle),\n                circlePointsStart,\n                circlePointsEnd: circlePointsStart + sideNails\n            };\n        });\n    }\n\n    getStarPoint({ side, sideIndex }) {\n        const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n        const {sinSideAngle, cosSideAngle} = this.sides[side];\n        const [centerX, centerY] = this.circle.center;\n\n        return [\n            centerX + sinSideAngle * radius,\n            centerY + cosSideAngle * radius\n        ];\n    }\n\n    *generateStarPoints({ reverseOrder  = false} = {}) {\n        const {sides, sideNails} = this.config;\n\n        for (let side = 0; side < sides; side++) {\n            const prevSide = side === 0 ? sides - 1 : side - 1;\n            for (let i=0; i < sideNails; i++) {\n                const sideIndex = reverseOrder ? sideNails - i : i;\n                yield { side, prevSide, sideIndex, point: this.getStarPoint({ side, sideIndex }) };\n            }\n        }\n    }\n\n    *drawStar() {\n        const {innerColor, sideNails} = this.config;\n\n        this.ctx.strokeStyle = innerColor;\n        let prevPoint;\n\n        for (const { prevSide, sideIndex, point} of this.generateStarPoints()) {\n            this.ctx.beginPath();\n\n            if (sideIndex && !(sideIndex % 2)) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...point);\n            } else {\n                this.ctx.moveTo(...point);\n            }\n\n            const prevSideIndex = sideNails - sideIndex;\n            this.ctx.lineTo(...this.getStarPoint({ side: prevSide, sideIndex: prevSideIndex}))\n            prevPoint = point;\n            this.ctx.stroke();\n            yield;\n        }\n    }\n\n    *drawCircle() {\n        const {outterColor, sides} = this.config;\n\n        let prevCirclePoint;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = outterColor;\n        for (const { side, prevSide, sideIndex, point} of this.generateStarPoints({ reverseOrder: true })) {\n            this.ctx.beginPath();\n            if (!prevCirclePoint) {\n                prevCirclePoint = this.circle.getPoint(this.sides[prevSide].circlePointsStart);\n            }\n           \n            this.ctx.moveTo(...prevCirclePoint);\n\n            this.ctx.lineTo(...point);\n            this.ctx.stroke();\n\n            yield;\n\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            const nextPointIndex = isPrevSide \n                ? this.sides[prevSide].circlePointsEnd - sideIndex \n                : this.sides[side].circlePointsStart + sideIndex;\n\n            const nextPoint = this.circle.getPoint(nextPointIndex);\n            this.ctx.lineTo(...nextPoint);\n\n            prevCirclePoint = this.circle.getPoint(isPrevSide \n                ? this.sides[prevSide].circlePointsEnd - sideIndex + 1\n                : this.sides[side].circlePointsStart + sideIndex - 1);\n\n            this.ctx.lineTo(...prevCirclePoint);\n\n            this.ctx.stroke();\n            isPrevSide = !isPrevSide;\n            yield;\n        }\n    }\n\n    *generateStrings() {\n        yield* this.drawCircle();\n        yield* this.drawStar();\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n\n        for (const {point} of this.generateStarPoints()) {\n            this.nails.addNail({ point });\n        }\n\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        const {sides, sideNails} = this.config;\n        const starCount = sideNails * sides;\n        return starCount * 3; // Once for each side + two more times for the side's circle\n    }\n}","import Player from \"./Player.js\";\nimport patternTypes from \"./pattern_types.js\";\n\nconst elements = {\n    canvas: document.querySelector(\"canvas\"),\n    patternSelector: document.querySelector(\"#pattern_select\"),\n    controls: document.querySelector(\"#controls\"),\n    patternLink: document.querySelector(\"#pattern_link\"),\n    size: {\n        printSize: document.querySelector(\"#print_size\"),\n        sizeCustom: document.querySelector(\"#size_custom\"),\n        width: document.querySelector(\"#size_custom_width\"),\n        height: document.querySelector(\"#size_custom_height\"),\n    }\n};\n\nconst patterns = patternTypes.map(Pattern => new Pattern(elements.canvas));\n\nlet currentPattern;\nlet inputTimeout;\nconst player = new Player(document.querySelector(\"#player\"))\n\nmain();\n\nfunction main() {\n    initControls();\n    initRouting();\n\n    if (history.state?.pattern) {\n        updateState(history.state);\n    } else {\n        const queryParams = new URLSearchParams(document.location.search);\n        const queryPattern = queryParams.get('pattern');\n\n        if (queryPattern) {\n            const config = queryParams.get('config');\n            updateState({ pattern: queryPattern, config })\n        } else {\n            selectPattern(patterns[0]);\n        }\n    }\n\n    window.addEventListener(\"resize\", () =>\n        currentPattern.draw()\n    );\n\n    elements.canvas.addEventListener('click', () => {\n        player.toggle();        \n    });\n}\n\nfunction initControls() {\n    elements.controls.addEventListener(\"input\", (e) => {\n        requestAnimationFrame(() => {\n            clearTimeout(inputTimeout);\n\n            const inputValue = getInputValue(e.target.type, e.target);\n            const controlKey = e.target.id.replace(/^config_/, '');\n    \n            currentPattern.config = Object.freeze({\n                ...currentPattern.config,\n                [controlKey]: inputValue\n            });\n            const inputValueEl = document.querySelector(\"#\" + e.target.id + \"_value\");\n            if (inputValueEl) {\n                inputValueEl.innerText = e.target.value;\n            }\n    \n            currentPattern.draw();\n            \n            inputTimeout = setTimeout(() => {\n                player.update(currentPattern, { goToEnd: false });\n                const configQuery = JSON.stringify(currentPattern.config)\n                history.replaceState({\n                    pattern: currentPattern.id,\n                    config: configQuery\n                }, currentPattern.name, `?pattern=${currentPattern.id}&config=${encodeURIComponent(configQuery)}`);\n                updateControlsVisibility();\n            }, 100);\n        })\n    })\n\n    patterns.forEach(pattern => {\n        const option = document.createElement('option');\n        option.innerText = pattern.name;\n        option.value = pattern.id;\n        elements.patternSelector.appendChild(option);\n    });\n    \n    elements.patternSelector.addEventListener('change', e => {\n        const patternId = e.target.value;\n        selectPattern(findPatternById(patternId));\n        history.pushState({ pattern: patternId }, patternId, \"?pattern=\" + patternId)\n    });\n}\n\nfunction initRouting() {\n    window.addEventListener('popstate', ({state}) => {\n        updateState(state);\n    });\n}\n\nfunction updateState(state) {\n    const pattern = findPatternById(state.pattern);\n    elements.patternSelector.value = pattern.id;\n    selectPattern(pattern, { \n        draw: false,\n        config: state.config ? JSON.parse(state.config) : null\n    });\n    \n    currentPattern.draw();\n    updateInputs(currentPattern.config);\n}\n\nfunction updateInputs(config) {\n    Object.entries(config).forEach(([key, value]) => {\n        const inputEl = document.querySelector(`#config_${key}`);\n        if (inputEl) {\n            const inputValueEl = document.querySelector(`#config_${key}_value`);\n\n            if (inputEl.type === \"checkbox\") {\n                inputEl.checked = value;\n            } else {\n                inputEl.value = value;\n            }\n            if (inputValueEl) {\n                inputValueEl.innerText = value;\n            }\n        }\n    });\n}\n\nfunction findPatternById(patternId) {\n    const pattern = patterns.find(({id}) => id === patternId);\n    if (!pattern) {\n        throw new Error(`Pattern with id \"${patternId} not found!`);\n    }\n    return pattern;\n}\n\nfunction selectPattern(pattern, { config, draw = true} = {}) {\n    currentPattern = pattern;\n    if (config) {\n        currentPattern.config = config;\n    }\n\n    renderControls();\n    elements.patternLink.setAttribute(\"href\", pattern.link);\n    if (draw) {\n        currentPattern.draw();\n    }\n    player.update(currentPattern);\n    document.title = `${pattern.name} - String Art Studio`;\n}\n\nfunction getInputValue(type, inputElement) {\n    switch(type) {\n        case 'range':\n            return parseFloat(inputElement.value);\n        case 'checkbox':\n            return inputElement.checked;\n        default:\n            return inputElement.value;\n    }\n}\n\nfunction updateControlsVisibility(configControls = currentPattern.configControls) {\n    configControls.forEach(control => {\n        if (control.show) {\n            const shouldShowControl = control.show(currentPattern.config);\n            const controlEl = document.querySelector(`#control_${control.key}`);\n            if (controlEl) {\n                if (shouldShowControl) {\n                    controlEl.removeAttribute('hidden');\n                } else {\n                    controlEl.setAttribute('hidden', 'hidden');\n                }\n            }\n        }\n\n        if (control.isDisabled) {\n            const shouldDisableControl = control.isDisabled(currentPattern.config);\n            const inputEl = document.querySelector(`#config_${control.key}`);\n            if (inputEl) {\n                if (shouldDisableControl) {\n                    inputEl.setAttribute('disabled', 'disabled');\n                } else {\n                    inputEl.removeAttribute('disabled');\n                }\n            }\n        }\n\n        if (control.children) {\n            updateControlsVisibility(control.children);\n        }\n    });\n}\n\nfunction renderControls(containerEl = elements.controls, configControls = currentPattern.configControls) {\n    containerEl.innerHTML = \"\";\n\n    configControls.forEach(control => {\n        const controlId = `config_${control.key}`;\n        let controlEl;\n\n        if (control.type === \"group\") {\n            controlEl = document.createElement(\"fieldset\");\n            const groupTitleEl = document.createElement(\"legend\");\n            groupTitleEl.innerText = control.label;\n            controlEl.appendChild(groupTitleEl);\n            controlEl.className = \"control control_group\";\n            const childrenContainer = document.createElement('div');\n            controlEl.appendChild(childrenContainer);\n            renderControls(childrenContainer, control.children);    \n        }\n        else {\n            controlEl = document.createElement(\"div\");\n            controlEl.className = \"control\";\n\n            const label = document.createElement(\"label\");\n            label.innerHTML = control.label;\n            label.setAttribute(\"for\", controlId);\n\n            const inputEl = document.createElement(\"input\");\n\n            inputEl.setAttribute(\"type\", control.type);\n            const inputValue = currentPattern.config[control.key] ?? control.defaultValue;\n\n            if (control.attr) {\n                Object.entries(control.attr).forEach(([attr, value]) => { \n                    const realValue = value instanceof Function ? value(currentPattern) : value;\n                    inputEl.setAttribute(attr, realValue)\n                });\n            }\n\n            if (control.type === \"checkbox\") {\n                inputEl.checked = inputValue;\n                controlEl.appendChild(inputEl);\n                controlEl.appendChild(label);\n            } else {\n                controlEl.appendChild(label);\n                controlEl.appendChild(inputEl);\n                inputEl.value = inputValue;\n                const inputValueEl = document.createElement('span');\n                inputValueEl.id = `config_${control.key}_value`;\n                inputValueEl.innerText = inputValue;\n                inputValueEl.className = \"control_input_value\";\n                controlEl.appendChild(inputValueEl);\n            }\n            inputEl.id = controlId;\n        }\n\n        controlEl.id = `control_${control.key}`;\n        containerEl.appendChild(controlEl);\n    });\n\n    requestAnimationFrame(() => updateControlsVisibility())\n}","export default class Player {\n    constructor(parentEl) {\n        this.elements = {\n            player: parentEl,\n            step: parentEl.querySelector('#step'),\n            stepInstructions: parentEl.querySelector('#step_instructions'),\n            playerPosition: parentEl.querySelector('#player_position'),\n            playBtn: parentEl.querySelector('#play_btn'),\n            pauseBtn: parentEl.querySelector('#pause_btn')\n        };\n        this.stepCount = 0;\n\n        this.elements.playerPosition.addEventListener('input', ({ target }) => {\n            this.setPosition(+target.value)\n        });\n\n        this.elements.playBtn.addEventListener('click', () => {\n            this.play();\n            this.togglePlaying();\n        });\n\n        this.elements.pauseBtn.addEventListener('click', () => {\n            this.pause();\n            this.togglePlaying();\n        });\n    }\n\n    togglePlaying() {\n        this.elements.player.classList.toggle('playing');\n        this._isPlaying = !this._isPlaying;\n    }\n\n    update(stringArt) {\n        this.stringArt = stringArt;\n        this.stepCount = stringArt.getStepCount();\n        this.elements.playerPosition.setAttribute('max', this.stepCount);\n        this.setPosition(this.stepCount);\n    }\n\n    updatePosition(position) {\n        this.elements.step.innerText = `${position}/${this.stepCount}`;\n        this.elements.playerPosition.value = position;\n    }\n    setPosition(position) {\n        this.updatePosition(position);\n        this.stringArt.goto(position);\n    }\n\n    setInstructions(instructions) {\n        this.elements.stepInstructions.innerText = instructions;\n    }\n\n    play() {\n        this._isPlaying = true;\n        cancelAnimationFrame(this.renderRafId);\n\n        if (this.stringArt.position === this.stepCount) {\n            this.stringArt.goto(0);\n        }\n\n        const self = this;\n\n        step();\n            \n        function step() {\n            if (!self.stringArt.drawNext().done) {\n                self.renderRafId = requestAnimationFrame(step);\n            } else {\n                self.togglePlaying();\n            }\n            self.updatePosition(self.stringArt.position);\n        }\n    }\n\n    pause() {\n        cancelAnimationFrame(this.renderRafId);\n        this._isPlaying = false;\n    }\n\n    toggle() {\n        if (this._isPlaying) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n}"],"names":["$a8180031c78213da$var$PI2","Math","PI","canvas","config","this","context","getContext","setConfig","nails","nailRadius","darkMode","nailsColor","addNail","nail","push","fill","globalCompositeOperation","beginPath","forEach","point","x","y","moveTo","arc","fillStyle","$65e05ee91a8797e3$var$COMMON_CONFIG_CONTROLS","key","label","type","children","defaultValue","isDisabled","showNails","showStrings","attr","min","max","step","show","$65e05ee91a8797e3$var$flattenConfig","configControls","reduce","$65e05ee91a8797e3$export$2e2bcd8739ae039","Error","ctx","dpr","window","devicePixelRatio","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","controls","concat","defaultConfig","_defaultConfig","_config","value","Object","assign","setUpDraw","removeAttribute","canvasScreenSize","clientWidth","clientHeight","width","height","size","map","v","setAttribute","center","$a8180031c78213da$export$2e2bcd8739ae039","clearRect","lineWidth","stringWidth","afterDraw","drawNails","initDraw","fillRect","draw","position","Infinity","stringsIterator","generateStrings","drawNext","done","goto","result","next","getStepCount","name","$17fe1039ca333e84$export$2e2bcd8739ae039","id","link","n","radiusIncrease","angleStep","nSpirals","currentRadius","angle","centerx","centery","i","s","rotation","sin","cos","points","generatePoints","index","strokeStyle","color","lastPoint","lineTo","stroke","number","$188437ce07b37c18$var$PI2","margin","radius","indexAngle","rotationAngle","getPoint","$f11ad0f2a18da5c9$var$SIDES","$f11ad0f2a18da5c9$var$SIDES_ORDER","$f11ad0f2a18da5c9$var$SIDES_ROTATION","left","bottom","right","top","$f11ad0f2a18da5c9$export$2e2bcd8739ae039","super","maxSize","nailSpacing","layerAngle","layerStart","theta","pivot","cosAngle","sinAngle","side","sideIndex","indexOf","nextSide","length","nextSideRotation","nLayer","floor","sideProps","layer","color1","color2","colors","layerSize","pow","drawSide","layers","drawLayer","count","$8b13425f1e264518$export$2e2bcd8739ae039","multicolor","_n","extraNails","multicolorRange","circle","$188437ce07b37c18$export$2e2bcd8739ae039","multiColorStep","layerShift","shift","steps","time","base","stepsToRender","toIndex","instructions","timeColor","getTimeColor","drawTimesTable","multicolorStart","multicolorByLightness","layerSpread","multiColorLightnessStep","repetition","innerLength","currentInnerLength","repetitionCount","drawSpiral","getLayerColor","lightness","sides","sideNails","sideAngle","starCenterStart","Array","_","circlePointsStart","sinSideAngle","cosSideAngle","circlePointsEnd","getStarPoint","centerX","centerY","reverseOrder","prevSide","innerColor","prevPoint","generateStarPoints","prevSideIndex","outterColor","prevCirclePoint","isPrevSide","nextPointIndex","nextPoint","drawCircle","drawStar","$52852adbc3c0b381$var$elements","document","querySelector","patternSelector","patternLink","printSize","sizeCustom","$52852adbc3c0b381$var$patterns","Pattern","$52852adbc3c0b381$var$currentPattern","$52852adbc3c0b381$var$inputTimeout","$52852adbc3c0b381$var$player","parentEl","elements","player","stepInstructions","playerPosition","playBtn","pauseBtn","stepCount","addEventListener","target","setPosition","play","togglePlaying","pause","classList","toggle","_isPlaying","update","stringArt","updatePosition","innerText","setInstructions","cancelAnimationFrame","renderRafId","self","requestAnimationFrame","$52852adbc3c0b381$var$updateState","state","pattern","$52852adbc3c0b381$var$findPatternById","$52852adbc3c0b381$var$selectPattern","JSON","parse","entries","inputEl","inputValueEl","checked","patternId","find","$52852adbc3c0b381$var$renderControls","title","$52852adbc3c0b381$var$updateControlsVisibility","control","shouldShowControl","controlEl","shouldDisableControl","containerEl","innerHTML","controlId","createElement","groupTitleEl","appendChild","className","childrenContainer","inputValue","realValue","Function","e","clearTimeout","inputElement","parseFloat","$52852adbc3c0b381$var$getInputValue","controlKey","replace","freeze","setTimeout","goToEnd","configQuery","stringify","history","replaceState","encodeURIComponent","option","pushState","$52852adbc3c0b381$var$initControls","$52852adbc3c0b381$var$initRouting","queryParams","URLSearchParams","location","search","queryPattern","get","$52852adbc3c0b381$var$main"],"version":3,"file":"index.6dcc90c7.js.map"}