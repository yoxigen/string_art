{"mappings":"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","sources":["src/scripts/Nails.js","src/scripts/StringArt.js","src/scripts/string_art_types/Spirals.js","src/scripts/string_art_types/Circle.js","src/scripts/string_art_types/Eye.js","src/scripts/pattern_types.js","src/scripts/string_art_types/TimesTables.js","src/scripts/string_art_types/Spiral.js","src/scripts/string_art_types/Star.js","src/scripts/string_art_types/Assymetry.js","src/scripts/editor/EditorControls.js","src/scripts/editor/EditorSizeControls.js","src/scripts/main.js","src/scripts/editor/Player.js"],"sourcesContent":["const PI2 = Math.PI * 2;\n\nexport default class Nails {\n    constructor(canvas, config) {\n        this.context = canvas.getContext(\"2d\");\n        this.setConfig(config);\n        this.nails = [];\n    }\n\n    setConfig({ nailRadius, darkMode}) {\n        this.nailRadius = nailRadius;\n        this.nailsColor = darkMode ? '#ffffff' : '#000000';\n        this.nails = [];\n    }\n\n    // Adds a nail to be rendered. nail: { point, number }\n    addNail(nail) {\n        this.nails.push(nail);\n    }\n\n    fill() {\n        this.context.globalCompositeOperation = \"source-over\";\n        this.context.beginPath();\n        this.nails.forEach(({ point: [x, y] }) => {\n            this.context.moveTo(x + this.nailRadius, y);\n            this.context.arc(x, y, this.nailRadius, 0, PI2)\n        });\n\n        this.context.fillStyle = this.nailsColor;\n        this.context.fill();\n\n        this.nails = [];\n    }\n}","import Nails from \"./Nails.js\";\n\nconst COLORS = {\n    dark: \"#171717\",\n    light: \"#ffffff\"\n};\n\nconst COMMON_CONFIG_CONTROLS = [\n    {\n        key: 'general',\n        label: 'General',\n        type: 'group',\n        children: [\n            {\n                key: 'showStrings',\n                label: 'Show strings',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showNails}) => !showNails\n            },\n            {\n                key: 'stringWidth',\n                label: 'String width',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 0.2,\n                    max: 4,\n                    step: 0.2\n                },\n                show: ({showStrings}) => showStrings\n            },\n            {\n                key: 'showNails',\n                label: 'Show nails',\n                defaultValue: true,\n                type: \"checkbox\",\n                isDisabled: ({showStrings}) => !showStrings\n            },\n            {\n                key: 'nailRadius',\n                label: 'Nail size',\n                defaultValue: 1,\n                type: \"range\",\n                attr: {\n                    min: 0.5,\n                    max: 5,\n                    step: 0.25\n                },\n                show: ({showNails}) => showNails\n            },\n            {\n                key: 'margin',\n                label: 'Margin',\n                defaultValue: 20,\n                type: \"number\",\n                attr: {\n                    min: 0,\n                    max: 500,\n                    step: 1\n                }\n            }\n        ]\n    },\n    {\n        key: 'theme',\n        label: 'Theme',\n        type: 'group',\n        children: [\n            {\n                key: 'darkMode',\n                label: 'Dark mode',\n                defaultValue: true,\n                type: 'checkbox'\n            },\n            {\n                key: 'customBackgroundColor',\n                label: 'Custom background color',\n                defaultValue: false,\n                type: 'checkbox',\n            },\n            {\n                key: 'backgroundColor',\n                label: 'Background color',\n                defaultValue: COLORS.dark,\n                type: 'color',\n                show: ({customBackgroundColor}) => customBackgroundColor\n            },\n        ]\n    }\n];\n\nclass StringArt {\n    constructor(canvas) {\n        if (!canvas) {\n            throw new Error(\"Canvas not specified!\");\n        }\n\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        const dpr = window.devicePixelRatio || 1;\n        const bsr = this.ctx.webkitBackingStorePixelRatio ||\n            this.ctx.mozBackingStorePixelRatio ||\n            this.ctx.msBackingStorePixelRatio ||\n            this.ctx.oBackingStorePixelRatio ||\n            this.ctx.backingStorePixelRatio || 1;\n        this.pixelRatio = dpr / bsr;\n    }\n\n    get configControls() {\n        return (this.controls ?? []).concat(COMMON_CONFIG_CONTROLS);\n    }\n\n    get defaultConfig() {\n        if (!this._defaultConfig) {\n            this._defaultConfig = flattenConfig(this.configControls);\n        }\n\n        return this._defaultConfig;\n    }\n\n    get config() {\n        return this._config ?? this.defaultConfig;\n    }\n\n    set config(value) {\n        this._config = Object.assign({}, this.defaultConfig, value);\n    }\n\n    getSize() {\n        const canvasScreenSize = [this.canvas.clientWidth, this.canvas.clientHeight];\n        return canvasScreenSize.map(v => v * this.pixelRatio);\n    }\n\n    setUpDraw() {\n        this.canvas.removeAttribute('width');\n        this.canvas.removeAttribute('height');\n        const [width, height] = this.size = this.getSize();\n        Object.assign(this, this.size);\n        this.canvas.setAttribute('width', width);\n        this.canvas.setAttribute('height', height);\n        this.center = this.size.map(value => value / 2);\n\n        if (this.nails) {\n            this.nails.setConfig(this.config);\n        } else {\n            this.nails = new Nails(this.canvas, this.config);\n        }\n\n        this.ctx.clearRect(0, 0, ...this.size);\n        this.ctx.lineWidth = this.config.stringWidth;\n    }\n\n    afterDraw() {\n        if (this.config.showNails) {\n            this.drawNails();\n            this.nails.fill();\n        }\n    }\n\n    initDraw() {\n        this.setUpDraw(this.config);\n        const { showNails, darkMode, backgroundColor, customBackgroundColor } = this.config;\n\n        this.ctx.beginPath();\n        this.ctx.globalCompositeOperation = 'destination-over';\n        this.ctx.fillStyle = customBackgroundColor ? backgroundColor : darkMode ? COLORS.dark : COLORS.light;\n        this.ctx.fillRect(0, 0, ...this.size);\n\n        this.ctx.globalCompositeOperation = 'source-over';\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill();\n        }\n    }\n\n    /**\n     * Draws the string art on canvas\n     * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n     */\n    draw({position = Infinity} = {}) {\n        this.initDraw();\n        const { showStrings } = this.config;\n\n        if (showStrings) {\n            this.stringsIterator = this.generateStrings();\n            this.position = 0;\n\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        }\n    }\n\n    goto(position) {\n        if (position === this.position) {\n            return;\n        }\n\n        if (this.stringsIterator && position > this.position) {\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        } else {\n            this.draw({ position });\n        }\n    }\n\n    drawNext() {\n        const result = this.stringsIterator.next();\n\n        if (result.done) {\n            this.afterDraw();\n        } else {\n            this.position++;\n        }\n\n        return result;\n    }\n\n    generateStrings() {\n        throw new Error(\"generateStrings method not defined!\");\n    }\n\n    getStepCount() {\n        throw new Error(`'getStepCount' method not implemented for string art type \"${this.name}\"`);\n    }\n}\n\nfunction flattenConfig(configControls) {\n    return configControls.reduce((config, {key, defaultValue, children}) =>\n        children ? {\n            ...config,\n            ...flattenConfig(children)\n        } : {\n            ...config,\n            [key]: defaultValue\n        },\n    {});\n}\n\nexport default StringArt;\n","import StringArt from \"../StringArt.js\";\n\nclass Spirals extends StringArt{\n    name = \"Spirals\";\n    id = \"spirals\";\n    link = \"https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 92,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'radiusIncrease',\n            label: 'Size',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 0.2\n            }\n        },\n        {\n            key: 'angleStep',\n            label: 'Angle step',\n            defaultValue: 0.05,\n            type: \"range\",\n            attr: {\n                min: 0.01,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'nSpirals',\n            label: 'Number of spirals',\n            defaultValue: 3,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'String color',\n            defaultValue: \"#00ddff\",\n            type: \"color\",\n        }\n    ];\n    \n    *generatePoints() {\n        const {\n            n, radiusIncrease, angleStep, nSpirals,\n        } = this.config;\n        \n        let currentRadius = 0;\n        let angle = 0;\n        const [centerx, centery] = this.center;\n\n        for (let i = 0; i < n; i++) {\n            for (let s = 0; s < nSpirals; s++) {\n                const rotation = s * 2 * Math.PI / nSpirals;\n                const point = [\n                    centerx + currentRadius * Math.sin(angle + rotation),\n                    centery + currentRadius * Math.cos(angle + rotation)\n                ];\n                yield point;\n            }\n            \n            angle += angleStep;\n            currentRadius += radiusIncrease;\n        }\n    }\n\n    *generateStrings() {\n        const points = this.generatePoints();\n        let index = 0;\n        this.ctx.beginPath();\n        this.ctx.moveTo(...this.center);\n        this.ctx.strokeStyle = this.config.color;\n\n        let lastPoint = this.center;\n\n        for (const point of points) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...lastPoint);\n            lastPoint = point;\n            this.ctx.lineTo(...point);\n            this.ctx.strokeStyle = this.config.color;\n            this.ctx.stroke();\n            yield index++;\n        }\n    }\n\n    getStepCount() {\n        const { n, nSpirals } = this.config;\n        return n * nSpirals;\n    }\n\n    drawNails() {\n        const points = this.generatePoints();\n        let index = 0;\n        for (const point of points) {\n            this.nails.addNail({point, number: `${index++}`});\n        }\n    }\n}\n\nexport default Spirals;","const PI2 = Math.PI * 2;\n\nexport default class Circle {\n    constructor(config) {\n        const { n, size, margin = 0, rotation = 0, center } = this.config = config;\n        \n        this.center = center ?? size.map(v => v / 2);\n        this.radius = Math.min(...this.center) - margin;\n\n        this.indexAngle = PI2 / n;\n        this.rotationAngle = -PI2 * rotation;\n    }\n\n    getPoint(index = 0) {\n        return [\n            this.center[0] + Math.sin(index * this.indexAngle + this.rotationAngle) * this.radius,\n            this.center[1] + Math.cos(index * this.indexAngle + this.rotationAngle) * this.radius\n        ];\n    }\n\n    drawNails(nails) {\n        for (let i=0; i < this.config.n; i++) {\n            nails.addNail({point: this.getPoint(i)});\n        }\n    }\n}","import StringArt from \"../StringArt.js\";\n\nconst MARGIN = 20;\nconst SIDES = ['left', 'bottom', 'right', 'top'];\nconst SIDES_ORDER = ['left', 'bottom', 'right', 'top'];\n\nconst SIDES_ROTATION = {\n    left: 0,\n    bottom: Math.PI / 2,\n    right: Math.PI,\n    top: Math.PI * 1.5\n};\n\nclass Eye extends StringArt{\n    name = \"Eye\"\n    id = \"eye\"\n    link = \"https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails per side',\n            defaultValue: 82,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'angle',\n            label: 'Layer angle',\n            defaultValue: 30,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 45,\n                step: 1\n            }\n        },\n        {\n            key: 'color1',\n            label: 'String #1 color',\n            defaultValue: \"#11e8bd\",\n            type: \"color\",\n        },\n        {\n            key: 'color2',\n            label: 'String #2 color',\n            defaultValue: \"#6fff52\",\n            type: \"color\",\n        },\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n\n        const { n, angle } = this.config;\n\n        this.maxSize = Math.min(...this.size) - 2 * MARGIN;\n        this.nailSpacing = this.maxSize / (n - 1);\n        this.layerAngle = angle * Math.PI / 180;\n    }\n\n    // Sides: top, right, bottom, left\n    getPoint({index, angle, layerStart, rotation}) {\n        const theta = angle + rotation;\n\n        const point = { \n            x: layerStart.x, \n            y: layerStart.y + this.nailSpacing * index\n        };\n\n        const pivot = { x: this.center[0], y: this.center[1] };\n\n        const cosAngle = Math.cos(theta);\n        const sinAngle = Math.sin(theta);\n\n        const position = [\n            (cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x),\n            (sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y),\n        ];\n        return position;\n    }\n\n    *drawSide({ side, color = '#ffffff', angle, size, layerStart }) {\n        const sideIndex = SIDES.indexOf(side);\n        const nextSide = SIDES[sideIndex === SIDES.length - 1 ? 0 : sideIndex + 1];\n        const rotation = SIDES_ROTATION[side];\n        const nextSideRotation = SIDES_ROTATION[nextSide];\n        const nLayer = Math.floor(size / this.nailSpacing);\n        \n        const sideProps = { nLayer, size, layerStart, angle };\n        \n        for(let i=0; i <= nLayer; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...this.getPoint({ side, index: i, rotation, ...sideProps}));\n            this.ctx.lineTo(...this.getPoint({side: nextSide, index: i, rotation: nextSideRotation, ...sideProps}));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            yield i;\n        }\n    }\n\n    *drawLayer(layer) {\n        const { color1, color2 } = this.config;\n        const colors = [color2, color1, color2, color1];\n        const layerAngle = this.layerAngle * layer;\n        const layerSize = this.maxSize / Math.pow(Math.cos(this.layerAngle) + Math.sin(this.layerAngle), layer);\n        const layerStart = { \n            x: this.center[0] - layerSize / 2, \n            y: this.center[1] - layerSize / 2\n        };\n\n        for (let i = 0; i < SIDES.length; i++) {\n            yield* this.drawSide({ \n                color: colors[i], \n                side: SIDES_ORDER[i],\n                angle: layerAngle,\n                size: layerSize,\n                layerStart,\n            });\n        }\n    }\n\n    *generateStrings() {\n        const {layers} =  this.config;\n        for(let layer=layers - 1; layer >= 0; layer--) {\n            yield* this.drawLayer(layer);\n        }\n    }\n\n    getStepCount() {\n        let count = 0;\n        const {layers, angle, n} = this.config;\n        const layerAngle = angle * Math.PI / 180;\n        const maxSize = Math.min(this.canvas.clientWidth, this.canvas.clientHeight) - 2 * MARGIN;\n        const nailSpacing = maxSize / (n - 1);\n\n        for(let layer = 0; layer < layers; layer++) {\n            const layerSize = maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n            count += 4 * (Math.floor(layerSize / nailSpacing) + 1)\n        }\n\n        return count;\n    }\n\n    drawNails() {\n        const {n} = this.config;\n\n        for(let i=0; i < 4; i++) {\n            const side = SIDES[i];\n            for (let nail = 0; nail < n; nail++) {\n               //this.nails.addNail({ point: this.getPoint({ side, index: nail })})\n            }\n        }\n    }\n}\n\nexport default Eye;","import Spirals from \"./string_art_types/Spirals.js\";\nimport Spiral from './string_art_types/Spiral.js';\nimport Eye from './string_art_types/Eye.js';\nimport TimesTables from './string_art_types/TimesTables.js';\nimport Star from \"./string_art_types/Star.js\";\nimport Assymetry from \"./string_art_types/Assymetry.js\";\n\nconst patternTypes = [TimesTables, Spirals, Spiral, Eye, Star, Assymetry];\n\nexport default patternTypes;\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nconst MARGIN = 20;\n\nexport default class TimesTables extends StringArt{\n    name = \"Times Tables\";\n    id = \"times_tables\";\n    link = \"https://www.youtube.com/watch?v=LWin7w9hF-E&ab_channel=Jorgedelatierra\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 180,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 240,\n                step: 1\n            }\n        },\n        {\n            key: 'base',\n            label: 'Multiplication',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 2,\n                max: 99,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 7,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'multicolor',\n                    label: 'Use multiple colors',\n                    defaultValue: true,\n                    type: \"checkbox\",\n                },\n                {\n                    key: 'multicolorRange',\n                    label: 'Multicolor range',\n                    defaultValue: 180,\n                    type: \"range\",\n                    attr: {\n                        min: 1,\n                        max: 360,\n                        step: 1\n                    },\n                    show: ({multicolor}) => multicolor,\n                },\n                {\n                    key: 'multicolorStart',\n                    label: 'Multicolor start',\n                    defaultValue: 256,\n                    type: \"range\",\n                    attr: {\n                        min: 0,\n                        max: 360,\n                        step: 1\n                    },\n                    show: ({multicolor}) => multicolor,\n                },\n                {\n                    key: 'color',\n                    label: 'String color',\n                    defaultValue: \"#ff4d00\",\n                    type: \"color\",\n                    show: ({multicolor}) => !multicolor\n                },\n            ]\n        },\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, layers} = this.config;\n            const extraNails = n % layers;\n            this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const {layers, multicolorRange} = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: this.n,\n            margin: MARGIN\n        });\n        this.multiColorStep = multicolorRange / layers;\n        this.layerShift = Math.floor(this.n / layers);\n    }\n\n    *drawTimesTable({ shift = 0, color = \"#f00\", steps, time }) {\n        const {base} = this.config;\n        const n = this.n;\n        const stepsToRender = steps ?? n;\n\n        let point = this.circle.getPoint(shift);\n\n        for(let i=1; i <= stepsToRender; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            point = this.circle.getPoint(i + shift);\n            this.ctx.lineTo(...point);\n            const toIndex = (i * base) % n;\n            this.ctx.lineTo(...this.circle.getPoint(toIndex + shift));\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n            \n            yield { instructions: `${i - 1} → ${i} → ${toIndex} → ${i}`, index: time * n + i };\n        }\n    }\n\n    *generateStrings() {\n        const {color, multicolor, layers} = this.config;\n\n        for(let time = 0; time < layers; time++) {\n            const timeColor = multicolor ? this.getTimeColor(time, layers) : color;\n            yield* this.drawTimesTable({ \n                time,\n                color: timeColor, \n                shift: this.layerShift * time,\n            });\n        }\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n\n    getTimeColor(time) {\n        const {multicolorStart, darkMode} = this.config;\n\n        return `hsl(${multicolorStart + time * this.multiColorStep}, 80%, ${darkMode ? 50 : 40}%)`;\n    }\n\n    getStepCount() {\n        return this.config.layers * this.n;\n    }\n}\n            ","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Spiral extends StringArt{\n    id = \"spiral\";\n    name = \"Spiral\";\n    link = \"https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 144,\n            type: \"range\",\n            attr: {\n                min: 3,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 2,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 60,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 72,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 144,\n                step: 1,\n            }\n        },\n        {\n            key: 'rotation',\n            label: 'Rotation',\n            defaultValue: 0.49,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 9,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'layerSpread',\n            label: 'Layer spread',\n            defaultValue: 13,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'multicolorRange',\n                    label: 'Multicolor range',\n                    defaultValue: 216,\n                    type: \"range\",\n                    attr: {\n                        min: 1,\n                        max: 360,\n                        step: 1\n                    },\n                },\n                {\n                    key: 'multicolorStart',\n                    label: 'Multicolor start',\n                    defaultValue: 263,\n                    type: \"range\",\n                    attr: {\n                        min: 0,\n                        max: 360,\n                        step: 1\n                    },\n                },\n                {\n                    key: 'multicolorByLightness',\n                    label: 'Multicolor by lightness',\n                    defaultValue: true,\n                    type: 'checkbox'\n                }\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        const { n, rotation } = this.config;\n\n        this.circle = new Circle({\n            size: this.size,\n            n,\n            rotation,\n            margin: 20,\n        });\n        const {layers, multicolorRange, multicolorByLightness, layerSpread} = this.config;\n        this.multiColorStep = multicolorRange / layers;\n        this.multiColorLightnessStep = multicolorByLightness ? 100 / layers : 1;\n        this.layerShift = layerSpread;\n    }\n\n    *drawSpiral({ shift = 0, color = \"#f00\" } = {}) {\n        const {repetition, innerLength} = this.config;\n        \n        this.ctx.moveTo(...this.circle.getPoint(shift));\n        \n        let currentInnerLength = innerLength;\n        let repetitionCount = 0;\n        this.ctx.strokeStyle = color;\n        \n        for(let i=0; currentInnerLength; i++) {\n            this.ctx.beginPath();\n            this.ctx.lineTo(...this.circle.getPoint(i + currentInnerLength + shift));\n            this.ctx.lineTo(...this.circle.getPoint(i + 1 + shift));\n            this.ctx.stroke();\n\n            repetitionCount++;\n            if (repetitionCount === repetition) {\n                currentInnerLength--;\n                repetitionCount = 0;\n            }\n\n            yield i;\n        }\n      \n    }\n\n    *generateStrings() {\n        const { layers } = this.config;\n        for(let layer = 0; layer < layers; layer++) {\n            yield* this.drawSpiral({ \n                color: this.getLayerColor(layer), \n                shift: -this.layerShift * layer \n            });\n        }\n    }\n\n    getLayerColor(layer) {\n        const {multicolorStart, darkMode, multicolorByLightness} = this.config;\n        const lightness = multicolorByLightness ? this.multiColorLightnessStep * layer : darkMode ? 50 : 40;\n\n        return `hsl(${multicolorStart + layer * this.multiColorStep}, 80%, ${lightness}%)`;\n    }\n\n    getStepCount() {\n        const {innerLength, repetition, layers} = this.config;\n        return layers * innerLength * repetition;\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n}","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Star extends StringArt{\n    name = \"Star\";\n    id = \"star\";\n    link = \"https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj\";\n    controls = [\n        {\n            key: 'sides',\n            label: 'Sides',\n            defaultValue: 3,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'sideNails',\n            label: 'Nails per side',\n            defaultValue: 40,\n            type: \"range\",\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'rotation',\n            label: 'Rotation',\n            defaultValue: 0,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'innerColor',\n                    label: 'Star color',\n                    defaultValue: \"#2ec0ff\",\n                    type: \"color\",\n                },\n                {\n                    key: 'outterColor',\n                    label: 'Outter color',\n                    defaultValue: \"#2a82c6\",\n                    type: \"color\",\n                },\n            ]\n        }\n    ];\n\n    get n() {\n        if (!this._n) {\n            const {n, sides} = this.config;\n            const extraNails = n % sides;\n            this._n = n - extraNails;\n        }\n\n        return this._n;\n    }\n\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n\n        const { sides, rotation, sideNails, margin = 0 } = this.config;\n        this.circle = new Circle({\n            size: this.size,\n            n: sideNails * sides,\n            margin,\n            rotation,\n        });\n\n        this.sideAngle = Math.PI * 2 / sides;\n        this.nailSpacing = this.circle.radius / sideNails;\n        this.starCenterStart = (sideNails % 1) * this.nailSpacing;\n\n        this.sides = new Array(sides).fill(null).map((_, side) => {\n            const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n            const circlePointsStart = side * sideNails;\n\n            return {\n                sinSideAngle: Math.sin(sideAngle),\n                cosSideAngle: Math.cos(sideAngle),\n                circlePointsStart,\n                circlePointsEnd: circlePointsStart + sideNails\n            };\n        });\n    }\n\n    getStarPoint({ side, sideIndex }) {\n        const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n        const {sinSideAngle, cosSideAngle} = this.sides[side];\n        const [centerX, centerY] = this.circle.center;\n\n        return [\n            centerX + sinSideAngle * radius,\n            centerY + cosSideAngle * radius\n        ];\n    }\n\n    *generateStarPoints({ reverseOrder  = false} = {}) {\n        const {sides, sideNails} = this.config;\n\n        for (let side = 0; side < sides; side++) {\n            const prevSide = side === 0 ? sides - 1 : side - 1;\n            for (let i=0; i < sideNails; i++) {\n                const sideIndex = reverseOrder ? sideNails - i : i;\n                yield { side, prevSide, sideIndex, point: this.getStarPoint({ side, sideIndex }) };\n            }\n        }\n    }\n\n    *drawStar() {\n        const {innerColor, sideNails} = this.config;\n\n        this.ctx.strokeStyle = innerColor;\n        let prevPoint;\n\n        for (const { prevSide, sideIndex, point} of this.generateStarPoints()) {\n            this.ctx.beginPath();\n\n            if (sideIndex && !(sideIndex % 2)) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...point);\n            } else {\n                this.ctx.moveTo(...point);\n            }\n\n            const prevSideIndex = sideNails - sideIndex;\n            this.ctx.lineTo(...this.getStarPoint({ side: prevSide, sideIndex: prevSideIndex}))\n            prevPoint = point;\n            this.ctx.stroke();\n            yield;\n        }\n    }\n\n    *drawCircle() {\n        const {outterColor} = this.config;\n\n        let prevCirclePoint;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = outterColor;\n        for (const { side, prevSide, sideIndex, point} of this.generateStarPoints({ reverseOrder: true })) {\n            this.ctx.beginPath();\n            if (!prevCirclePoint) {\n                prevCirclePoint = this.circle.getPoint(this.sides[prevSide].circlePointsStart);\n            }\n\n            this.ctx.moveTo(...prevCirclePoint);\n\n            this.ctx.lineTo(...point);\n            this.ctx.stroke();\n\n            yield;\n\n            this.ctx.beginPath();\n            this.ctx.moveTo(...point);\n            const nextPointIndex = isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex\n                : this.sides[side].circlePointsStart + sideIndex;\n\n            const nextPoint = this.circle.getPoint(nextPointIndex);\n            this.ctx.lineTo(...nextPoint);\n\n            prevCirclePoint = this.circle.getPoint(isPrevSide\n                ? this.sides[prevSide].circlePointsEnd - sideIndex + 1\n                : this.sides[side].circlePointsStart + sideIndex - 1);\n\n            this.ctx.lineTo(...prevCirclePoint);\n\n            this.ctx.stroke();\n            isPrevSide = !isPrevSide;\n            yield;\n        }\n    }\n\n    *generateStrings() {\n        yield* this.drawCircle();\n        yield* this.drawStar();\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n\n        for (const {point} of this.generateStarPoints()) {\n            this.nails.addNail({ point });\n        }\n\n        this.circle.drawNails(this.nails);\n    }\n\n    getStepCount() {\n        const {sides, sideNails} = this.config;\n        const starCount = sideNails * sides;\n        return starCount * 3; // Once for each side + two more times for the side's circle\n    }\n}\n","import StringArt from \"../StringArt.js\";\nimport Circle from \"./Circle.js\";\n\nexport default class Assymetry extends StringArt{\n    name = \"Assymetry\";\n    id = \"assymetry\";\n    link = \"https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj\";\n    controls = [\n        {\n            key: 'n',\n            label: 'Nails',\n            defaultValue: 144,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'start',\n            label: 'Start Position',\n            defaultValue: 0.25,\n            type: 'range',\n            attr: {\n                min: 0,\n                max: 0.5,\n                step: 0.01\n            }\n        },\n        {\n            key: 'start2',\n            label: 'Start Position 2',\n            defaultValue: 0,\n            type: 'range',\n            attr: {\n                min: 0,\n                max: 0.5,\n                step: 0.01\n            }\n        },\n        {\n            key: 'rotation',\n            label: 'Rotation',\n            defaultValue: 0,\n            type: \"range\",\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01,\n            }\n        },\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'color1',\n                    label: 'Color layer 1',\n                    defaultValue: \"#6aee68\",\n                    type: \"color\",\n                },\n                {\n                    key: 'color2',\n                    label: 'Color layer 2',\n                    defaultValue: \"#ffffff\",\n                    type: \"color\",\n                },\n            ]\n        }\n    ];\n\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n\n    getSetUp() {\n        const { rotation, n, start, start2, margin = 0 } = this.config;\n        const circle = new Circle({\n            size: this.getSize(),\n            n,\n            margin,\n            rotation,\n        });\n\n        let lineSpacing = circle.indexAngle * circle.radius;\n        const lineNailCount = Math.floor(circle.radius / lineSpacing) - 1;\n        lineSpacing += (circle.radius - lineSpacing * lineNailCount) / lineNailCount;\n        const firstCirclePoint = circle.getPoint(0);\n        const startingIndex = Math.round(n * start) + lineNailCount;\n        const startingIndex2 = Math.round(n * start2) + lineNailCount;\n        const totalNailCount = lineNailCount + n;\n\n        return {\n            circle,\n            lineSpacing,\n            lineNailCount,\n            firstCirclePoint,\n            startingIndex,\n            startingIndex2,\n            totalNailCount,\n        };\n    }\n\n    /**\n     * Returns the position of a point on the line\n     * @param {index of the point in the circle, 0 is the center} index\n     */\n    getPoint(index) {\n        if (index < this.lineNailCount || index > this.totalNailCount) {\n            const linePosition = index < this.lineNailCount ? this.lineNailCount - index : index - this.totalNailCount;\n\n            const indexLength = (linePosition) * this.lineSpacing;\n            return [\n                this.firstCirclePoint[0] - indexLength * Math.sin(this.circle.rotationAngle),\n                this.firstCirclePoint[1] - indexLength * Math.cos(this.circle.rotationAngle)\n            ];\n        } else {\n            const circleIndex = index - this.lineNailCount;\n            return this.circle.getPoint(circleIndex);\n        }\n    }\n\n    *generateCircleIndexes(start) {\n        const lastIndex = this.totalNailCount + this.lineNailCount;\n        for(let i=start; i <= lastIndex; i++) {\n            yield i;\n        }\n    }\n\n    *drawInnerCircle({startIndex, color}) {\n        let prevPoint;\n        let prevPointIndex;\n        let isPrevSide = false;\n        this.ctx.strokeStyle = color;\n\n        for (const index of this.generateCircleIndexes(startIndex)) {\n            this.ctx.beginPath();\n\n            if (prevPoint) {\n                this.ctx.moveTo(...prevPoint);\n                this.ctx.lineTo(...this.getPoint(prevPointIndex + 1));\n            } else {\n                prevPoint = this.getPoint(startIndex)\n                this.ctx.moveTo(...prevPoint);\n            }\n\n            prevPointIndex = isPrevSide ? index : index - startIndex;\n            prevPoint = this.getPoint(prevPointIndex);\n            this.ctx.lineTo(...prevPoint);\n            this.ctx.stroke();\n\n            yield;\n\n            isPrevSide = !isPrevSide;\n        }\n    }\n\n    *generateStrings() {\n        const {color1, color2} = this.config;\n        yield* this.drawInnerCircle({\n            startIndex: this.startingIndex,\n            color: color1\n        });\n\n        yield* this.drawInnerCircle({\n            startIndex: this.startingIndex2,\n            color: color2\n        });\n    }\n\n    drawNails() {\n        this.circle.drawNails(this.nails);\n\n        for (let i=0; i < this.lineNailCount; i++) {\n            this.nails.addNail({ point: this.getPoint(i) });\n        }\n    }\n\n    getStepCount() {\n        const {totalNailCount, lineNailCount, startingIndex, startingIndex2} = this.getSetUp();\n        const layer1Count = totalNailCount + lineNailCount - startingIndex + 1;\n        const layer2Count = totalNailCount + lineNailCount - startingIndex2 + 1;\n        return layer1Count + layer2Count;\n    }\n}\n","const elements = {\n    controls: document.querySelector(\"#controls\"),\n};\n\nconst EVENTS = new Set(['input', 'change']);\nlet inputTimeout;\n\nexport default class EditorControls {\n    constructor({pattern}) {\n        this.pattern = pattern;\n        this.eventHandlers = {\n            input: new Set(),\n            change: new Set()\n        }\n\n        this._wrappedOnInput = e => this._onInput(e);\n\n        elements.controls.addEventListener(\"input\", this._wrappedOnInput);\n        this.controlElements = {};\n        this.renderControls();\n    }\n\n    destroy() {\n        elements.controls.removeEventListener(\"input\", this._wrappedOnInput);\n        elements.controls.innerHTML = \"\";\n    }\n\n    addEventListener(event, eventHandler) {\n        if (!EVENTS.has(event)) {\n            throw new Error(`Unsupported event for EditorControls, \"${event}\"!`);\n        }\n\n        if (!(eventHandler instanceof Function)) {\n            throw new Error('Invalid event handler.');\n        }\n\n        this.eventHandlers[event].add(eventHandler);\n    }\n\n    _triggerEvent(event, eventData) {\n        for(const eventHandler of this.eventHandlers[event]) {\n            eventHandler(eventData);\n        }\n    }\n\n    _onInput(e) {\n        requestAnimationFrame(() => {\n            clearTimeout(inputTimeout);\n\n            const inputValue = getInputValue(e.target.type, e.target);\n            const controlKey = e.target.id.replace(/^config_/, '');\n\n            this.pattern.config = Object.freeze({\n                ...this.pattern.config,\n                [controlKey]: inputValue\n            });\n            \n            const inputValueEl = this.controlElements[controlKey].value;\n            if (inputValueEl) {\n                inputValueEl.innerText = e.target.value;\n            }\n\n            const eventData = Object.freeze({\n                control: controlKey, \n                value: inputValue, \n                originalEvent: e,\n                pattern: this.pattern,\n            });\n\n            this._triggerEvent('input', eventData);\n\n            inputTimeout = setTimeout(() => {\n                this._triggerEvent('change', eventData);\n                this.updateControlsVisibility();\n            }, 100);\n        });\n    }\n\n    updateControlsVisibility(configControls = this.pattern.configControls) {\n        configControls.forEach(control => {\n            if (control.show) {\n                const shouldShowControl = control.show(this.pattern.config);\n                const controlEl = this.controlElements[control.key].control;\n                if (controlEl) {\n                    if (shouldShowControl) {\n                        controlEl.removeAttribute('hidden');\n                    } else {\n                        controlEl.setAttribute('hidden', 'hidden');\n                    }\n                }\n            }\n    \n            if (control.isDisabled) {\n                const shouldDisableControl = control.isDisabled(this.pattern.config);\n                const inputEl = this.controlElements[control.key].input;\n                if (inputEl) {\n                    if (shouldDisableControl) {\n                        inputEl.setAttribute('disabled', 'disabled');\n                    } else {\n                        inputEl.removeAttribute('disabled');\n                    }\n                }\n            }\n    \n            if (control.children) {\n                this.updateControlsVisibility(control.children);\n            }\n        });\n    }\n\n    updateInputs(config) {\n        Object.entries(config).forEach(([key, value]) => {\n            const {input, value: valueEl} = this.controlElements[key];\n            if (input) {\n                if (input.type === \"checkbox\") {\n                    input.checked = value;\n                } else {\n                    input.value = value;\n                }\n                if (valueEl) {\n                    valueEl.innerText = value;\n                }\n            }\n        });\n    }\n\n    renderControls(containerEl = elements.controls, _configControls) {\n        const configControls = _configControls ?? this.pattern.configControls;\n        containerEl.innerHTML = \"\";\n        const controlsFragment = document.createDocumentFragment();\n        \n\n        configControls.forEach(control => {\n            const controlId = `config_${control.key}`;\n            const controlElements = this.controlElements[control.key] = {};\n\n            let controlEl;\n            \n            if (control.type === \"group\") {\n                controlEl = document.createElement(\"fieldset\");\n                const groupTitleEl = document.createElement(\"legend\");\n                groupTitleEl.innerText = control.label;\n                controlEl.appendChild(groupTitleEl);\n                controlEl.className = \"control control_group\";\n                const childrenContainer = document.createElement('div');\n                controlEl.appendChild(childrenContainer);\n                this.renderControls(childrenContainer, control.children);\n            }\n            else {\n                controlEl = document.createElement(\"div\");\n                controlEl.className = \"control\";\n    \n                const label = document.createElement(\"label\");\n                label.innerHTML = control.label;\n                label.setAttribute(\"for\", controlId);\n    \n                const inputEl = controlElements.input = document.createElement(\"input\");\n                inputEl.setAttribute(\"type\", control.type);\n                const inputValue = this.pattern.config[control.key] ?? control.defaultValue;\n    \n                if (control.attr) {\n                    Object.entries(control.attr).forEach(([attr, value]) => {\n                        const realValue = value instanceof Function ? value(this.pattern) : value;\n                        inputEl.setAttribute(attr, realValue)\n                    });\n                }\n    \n                if (control.type === \"checkbox\") {\n                    inputEl.checked = inputValue;\n                    controlEl.appendChild(inputEl);\n                    controlEl.appendChild(label);\n                } else {\n                    controlEl.appendChild(label);\n                    controlEl.appendChild(inputEl);\n                    inputEl.value = inputValue;\n                    const inputValueEl = controlElements.value = document.createElement('span');\n                    inputValueEl.id = `config_${control.key}_value`;\n                    inputValueEl.innerText = inputValue;\n                    inputValueEl.className = \"control_input_value\";\n                    controlEl.appendChild(inputValueEl);\n                }\n                inputEl.id = controlId;\n            }\n    \n            this.controlElements[control.key].control = controlEl;\n            controlEl.id = `control_${control.key}`;\n            controlsFragment.appendChild(controlEl);\n        });\n    \n        containerEl.appendChild(controlsFragment);\n        requestAnimationFrame(() => this.updateControlsVisibility())\n    }\n    \n}\n\n\nfunction getInputValue(type, inputElement) {\n    switch(type) {\n        case 'range':\n            return parseFloat(inputElement.value);\n        case 'checkbox':\n            return inputElement.checked;\n        default:\n            return inputElement.value;\n    }\n}","const elements = {\n    sizeSelect: document.querySelector(\"#size_select\"),\n    sizeCustom: document.querySelector(\"#size_custom\"),\n    width: document.querySelector(\"#size_custom_width\"),\n    height: document.querySelector(\"#size_custom_height\"),\n};\n\nfunction cmToPixels(cm, dpi = 300) {\n    return Math.floor(cm / 2.54 * dpi);\n}\n\nconst SCREEN_SIZE = [\n    Math.floor(window.screen.width * window.devicePixelRatio),\n    Math.floor(window.screen.height * window.devicePixelRatio),\n];\n\nconst SIZES = [\n    { id: 'fit', name: 'Fit to screen' },\n    { id: 'A4', value: [20, 28].map(v => cmToPixels(v)) },\n    { id: 'A3', value: [28, 40].map(v => cmToPixels(v)) },\n    { id: 'screen', name: `Screen size (${SCREEN_SIZE.join('x')})`, value: SCREEN_SIZE},\n    { id: 'custom', name: 'Custom...' }\n];\n\nexport default class EditorSizeControls {\n    element = document.querySelector(\"#size_controls\");\n\n    constructor({ getCurrentSize }) {\n        const sizeOptionsFragment = document.createDocumentFragment();\n        SIZES.forEach(size => {\n            const sizeListItem = document.createElement('option');\n            sizeListItem.setAttribute('value', size.id);\n            sizeListItem.innerText = size.name ?? size.id;\n            sizeOptionsFragment.appendChild(sizeListItem);\n        });\n        elements.sizeSelect.appendChild(sizeOptionsFragment)\n        elements.sizeSelect.addEventListener(\"change\", e => {\n            const selectedSizeId = e.target.value;\n            const size = SIZES.find(({id}) => id === selectedSizeId);\n\n            if (size.id === \"custom\") {\n                elements.sizeCustom.removeAttribute('hidden');\n                const [width, height] = getCurrentSize();\n                elements.width.value = width;\n                elements.height.value = height;\n            } else {\n                elements.sizeCustom.setAttribute('hidden', 'hidden');\n                this._notifyOnChange(size.value);\n            }\n        });\n\n        elements.sizeCustom.addEventListener(\"focusin\", e => {\n            e.target.select();\n        });\n\n        elements.sizeCustom.addEventListener('input', () => {\n            this._notifyOnChange([\n                elements.width.value ? parseInt(elements.width.value) : null,\n                elements.height.value ? parseInt(elements.height.value) : null\n            ]);\n        });\n    }\n\n    _notifyOnChange([width, height] = []) {\n        this.element.dispatchEvent(new CustomEvent('sizechange', { detail: { width, height }}));\n    }\n}\n","import Player from \"./editor/Player.js\";\nimport patternTypes from \"./pattern_types.js\";\nimport EditorControls from \"./editor/EditorControls.js\";\nimport EditorSizeControls from \"./editor/EditorSizeControls.js\";\n\nconst elements = {\n    canvas: document.querySelector(\"canvas\"),\n    patternSelector: document.querySelector(\"#pattern_select\"),\n    patternLink: document.querySelector(\"#pattern_link\"),\n};\n\nconst patterns = patternTypes.map(Pattern => new Pattern(elements.canvas));\n\nlet currentPattern;\nconst player = new Player(document.querySelector(\"#player\"));\nconst sizeControls = new EditorSizeControls({\n    getCurrentSize: () => [\n        elements.canvas.clientWidth,\n        elements.canvas.clientHeight\n    ]\n});\n\nlet controls;\n\nmain();\n\nfunction main() {\n    initRouting();\n    initSize();\n    initControls();\n\n    if (history.state?.pattern) {\n        updateState(history.state);\n    } else {\n        const queryParams = new URLSearchParams(document.location.search);\n        const queryPattern = queryParams.get('pattern');\n\n        if (queryPattern) {\n            const config = queryParams.get('config');\n            updateState({ pattern: queryPattern, config })\n        } else {\n            selectPattern(patterns[0]);\n        }\n    }\n\n    window.addEventListener(\"resize\", () =>\n        currentPattern.draw()\n    );\n\n    elements.canvas.addEventListener('click', () => {\n        player.toggle();\n    });\n}\n\nfunction onInputsChange() {\n    player.update(currentPattern, { goToEnd: false });\n    const configQuery = JSON.stringify(currentPattern.config);\n    history.replaceState({\n        pattern: currentPattern.id,\n        config: configQuery\n    }, currentPattern.name, `?pattern=${currentPattern.id}&config=${encodeURIComponent(configQuery)}`);\n}\n\nfunction initControls() {\n    patterns.forEach(pattern => {\n        const option = document.createElement('option');\n        option.innerText = pattern.name;\n        option.value = pattern.id;\n        elements.patternSelector.appendChild(option);\n    });\n\n    elements.patternSelector.addEventListener('change', e => {\n        const patternId = e.target.value;\n        selectPattern(findPatternById(patternId));\n        history.pushState({ pattern: patternId }, patternId, \"?pattern=\" + patternId)\n    });\n}\n\nfunction initSize() {\n    sizeControls.element.addEventListener('sizechange', ({ detail: {width, height}}) => {\n        elements.canvas.removeAttribute('width');\n        elements.canvas.removeAttribute('height');\n\n        if (width && height) {\n            elements.canvas.style.width = `${width}px`;\n            elements.canvas.style.height = `${height}px`;\n        } else {\n            elements.canvas.removeAttribute('style');\n        }\n\n        currentPattern.draw();\n    });\n}\n\nfunction initRouting() {\n    window.addEventListener('popstate', ({state}) => {\n        updateState(state);\n    });\n}\n\nfunction updateState(state) {\n    const pattern = findPatternById(state.pattern);\n    elements.patternSelector.value = pattern.id;\n    selectPattern(pattern, {\n        draw: false,\n        config: state.config ? JSON.parse(state.config) : null\n    });\n\n    currentPattern.draw();\n}\n\nfunction findPatternById(patternId) {\n    const pattern = patterns.find(({id}) => id === patternId);\n    if (!pattern) {\n        throw new Error(`Pattern with id \"${patternId} not found!`);\n    }\n    return pattern;\n}\n\nfunction selectPattern(pattern, { config, draw = true} = {}) {\n    currentPattern = pattern;\n    if (config) {\n        currentPattern.config = config;\n    }\n    if (controls) {\n        controls.destroy();\n    }\n    controls = new EditorControls({pattern, config});\n    controls.addEventListener('input', () => currentPattern.draw());\n    controls.addEventListener('change', onInputsChange);\n\n    elements.patternLink.setAttribute(\"href\", pattern.link);\n    if (draw) {\n        currentPattern.draw();\n    }\n    player.update(currentPattern);\n    document.title = `${pattern.name} - String Art Studio`;\n}\n","export default class Player {\n    constructor(parentEl) {\n        this.elements = {\n            player: parentEl,\n            step: parentEl.querySelector('#step'),\n            stepInstructions: parentEl.querySelector('#step_instructions'),\n            playerPosition: parentEl.querySelector('#player_position'),\n            playBtn: parentEl.querySelector('#play_btn'),\n            pauseBtn: parentEl.querySelector('#pause_btn')\n        };\n        this.stepCount = 0;\n        this._isPlaying = false;\n        \n        this.elements.playerPosition.addEventListener('input', ({ target }) => {\n            this.goto(+target.value)\n        });\n\n        this.elements.playBtn.addEventListener('click', () => {\n            this.play();\n        });\n\n        this.elements.pauseBtn.addEventListener('click', () => {\n            this.pause();\n        });\n    }\n\n    updateStatus(isPlaying) {\n        if (this._isPlaying !== isPlaying) {\n            this.elements.player.classList.toggle('playing');\n            this._isPlaying = isPlaying;\n        }\n    }\n\n    update(stringArt) {\n        this.stringArt = stringArt;\n        this.stepCount = stringArt.getStepCount();\n        this.elements.playerPosition.setAttribute('max', this.stepCount);\n        this.goto(this.stepCount);\n    }\n\n    updatePosition(position) {\n        this.elements.step.innerText = `${position}/${this.stepCount}`;\n        this.elements.playerPosition.value = position;\n    }\n    goto(position) {\n        this.pause();\n        this.updatePosition(position);\n        this.stringArt.goto(position);\n    }\n\n    setInstructions(instructions) {\n        this.elements.stepInstructions.innerText = instructions;\n    }\n\n    play() {\n        this.updateStatus(true);\n        cancelAnimationFrame(this.renderRafId);\n\n        if (this.stringArt.position === this.stepCount) {\n            this.stringArt.goto(0);\n        }\n\n        const self = this;\n\n        step();\n\n        function step() {\n            if (!self.stringArt.drawNext().done) {\n                self.renderRafId = requestAnimationFrame(step);\n            } else {\n                self.updateStatus(false);\n            }\n            self.updatePosition(self.stringArt.position);\n        }\n    }\n\n    pause() {\n        cancelAnimationFrame(this.renderRafId);\n        this.updateStatus(false);\n    }\n\n    toggle() {\n        if (this._isPlaying) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n}\n"],"names":["$a8180031c78213da$var$PI2","Math","PI","canvas","config","this","context","getContext","setConfig","nails","nailRadius","darkMode","nailsColor","addNail","nail","push","fill","globalCompositeOperation","beginPath","forEach","point","x","y","moveTo","arc","fillStyle","$65e05ee91a8797e3$var$COLORS","$65e05ee91a8797e3$var$COMMON_CONFIG_CONTROLS","key","label","type","children","defaultValue","isDisabled","showNails","attr","min","max","step","show","showStrings","customBackgroundColor","$65e05ee91a8797e3$var$flattenConfig","configControls","reduce","$65e05ee91a8797e3$export$2e2bcd8739ae039","Error","ctx","dpr","window","devicePixelRatio","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","controls","concat","defaultConfig","_defaultConfig","_config","value","Object","assign","getSize","clientWidth","clientHeight","map","v","setUpDraw","removeAttribute","width","height","size","setAttribute","center","$a8180031c78213da$export$2e2bcd8739ae039","clearRect","lineWidth","stringWidth","afterDraw","drawNails","initDraw","backgroundColor","fillRect","draw","position","Infinity","stringsIterator","generateStrings","drawNext","done","goto","result","next","getStepCount","name","$17fe1039ca333e84$export$2e2bcd8739ae039","id","link","n","radiusIncrease","angleStep","nSpirals","currentRadius","angle","centerx","centery","i","s","rotation","sin","cos","points","generatePoints","index","strokeStyle","color","lastPoint","lineTo","stroke","number","$188437ce07b37c18$var$PI2","margin","radius","indexAngle","rotationAngle","getPoint","$f11ad0f2a18da5c9$var$SIDES","$f11ad0f2a18da5c9$var$SIDES_ORDER","$f11ad0f2a18da5c9$var$SIDES_ROTATION","left","bottom","right","top","$f11ad0f2a18da5c9$export$2e2bcd8739ae039","super","maxSize","nailSpacing","layerAngle","layerStart","theta","pivot","cosAngle","sinAngle","side","sideIndex","indexOf","nextSide","length","nextSideRotation","nLayer","floor","sideProps","layer","color1","color2","colors","layerSize","pow","drawSide","layers","drawLayer","count","$8b13425f1e264518$export$2e2bcd8739ae039","multicolor","_n","extraNails","multicolorRange","circle","$188437ce07b37c18$export$2e2bcd8739ae039","multiColorStep","layerShift","shift","steps","time","base","stepsToRender","toIndex","instructions","timeColor","getTimeColor","drawTimesTable","multicolorStart","multicolorByLightness","layerSpread","multiColorLightnessStep","repetition","innerLength","currentInnerLength","repetitionCount","drawSpiral","getLayerColor","lightness","sides","sideNails","sideAngle","starCenterStart","Array","_","circlePointsStart","sinSideAngle","cosSideAngle","circlePointsEnd","getStarPoint","centerX","centerY","reverseOrder","prevSide","innerColor","prevPoint","generateStarPoints","prevSideIndex","outterColor","prevCirclePoint","isPrevSide","nextPointIndex","nextPoint","drawCircle","drawStar","getSetUp","start","start2","lineSpacing","lineNailCount","firstCirclePoint","round","totalNailCount","indexLength","circleIndex","lastIndex","startIndex","prevPointIndex","generateCircleIndexes","drawInnerCircle","startingIndex","startingIndex2","$2fc16ffa17719734$var$elements","document","querySelector","$2fc16ffa17719734$var$EVENTS","Set","$2fc16ffa17719734$var$inputTimeout","pattern","eventHandlers","input","change","_wrappedOnInput","e","_onInput","addEventListener","controlElements","renderControls","destroy","removeEventListener","innerHTML","event","eventHandler","has","Function","add","_triggerEvent","eventData","requestAnimationFrame","clearTimeout","inputValue","inputElement","parseFloat","checked","$2fc16ffa17719734$var$getInputValue","target","controlKey","replace","freeze","inputValueEl","innerText","control","originalEvent","setTimeout","updateControlsVisibility","shouldShowControl","controlEl","shouldDisableControl","inputEl","updateInputs","entries","valueEl","containerEl","_configControls","controlsFragment","createDocumentFragment","controlId","createElement","groupTitleEl","appendChild","className","childrenContainer","realValue","$0597ff46967fdd49$var$elements","sizeSelect","sizeCustom","$0597ff46967fdd49$var$cmToPixels","cm","dpi","$0597ff46967fdd49$var$SCREEN_SIZE","screen","$0597ff46967fdd49$var$SIZES","join","$52852adbc3c0b381$var$elements","patternSelector","patternLink","$52852adbc3c0b381$var$patterns","Pattern","$52852adbc3c0b381$var$currentPattern","$52852adbc3c0b381$var$player","parentEl","elements","player","stepInstructions","playerPosition","playBtn","pauseBtn","stepCount","_isPlaying","play","pause","updateStatus","isPlaying","classList","toggle","update","stringArt","updatePosition","setInstructions","cancelAnimationFrame","renderRafId","self","$52852adbc3c0b381$var$sizeControls","element","getCurrentSize","sizeOptionsFragment","sizeListItem","selectedSizeId","find","_notifyOnChange","select","parseInt","dispatchEvent","CustomEvent","detail","$52852adbc3c0b381$var$controls","$52852adbc3c0b381$var$onInputsChange","goToEnd","configQuery","JSON","stringify","history","replaceState","encodeURIComponent","$52852adbc3c0b381$var$updateState","state","$52852adbc3c0b381$var$findPatternById","$52852adbc3c0b381$var$selectPattern","parse","patternId","$2fc16ffa17719734$export$2e2bcd8739ae039","title","$52852adbc3c0b381$var$initRouting","style","$52852adbc3c0b381$var$initSize","option","pushState","$52852adbc3c0b381$var$initControls","queryParams","URLSearchParams","location","search","queryPattern","get","$52852adbc3c0b381$var$main"],"version":3,"file":"index.9d10e092.js.map"}