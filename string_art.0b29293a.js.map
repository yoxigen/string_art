{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/scripts/editor/Player.js","src/scripts/pattern_types.js","src/scripts/string_art_types/Spiral.js","src/scripts/helpers/Color.js","src/scripts/StringArt.js","src/scripts/Nails.js","src/scripts/renderers/Renderer.js","src/scripts/helpers/Circle.js","src/scripts/helpers/easing.js","src/scripts/helpers/math_utils.js","src/scripts/string_art_types/Spirals.js","src/scripts/string_art_types/Wave.js","src/scripts/string_art_types/Mandala.js","src/scripts/string_art_types/Eye.js","src/scripts/string_art_types/Star.js","src/scripts/string_art_types/Assymetry.js","src/scripts/string_art_types/Freestyle.js","src/scripts/string_art_types/PolygonPattern.js","src/scripts/helpers/Polygon.js","src/scripts/string_art_types/Flower.js","src/scripts/string_art_types/MaurerRose.js","src/scripts/string_art_types/FlowerOfLife.js","src/scripts/string_art_types/Comet.js","src/scripts/editor/EditorControls.js","src/scripts/editor/EditorSizeControls.js","src/scripts/thumbnails/Thumbnails.js","src/scripts/renderers/CanvasRenderer.js","src/scripts/Serialize.js","src/scripts/share.js","src/scripts/pwa.js","src/scripts/renderers/SVGRenderer.js","src/scripts/download/SVGDownload.js","src/scripts/download/Download.js"],"sourcesContent":["class $6f48f16a2de852cf$export$2e2bcd8739ae039 {\n    constructor(parentEl){\n        this.elements = {\n            player: parentEl,\n            step: parentEl.querySelector('#step'),\n            //stepInstructions: parentEl.querySelector('#step_instructions'),\n            playerPosition: parentEl.querySelector('#player_position'),\n            playBtn: parentEl.querySelector('#play_btn'),\n            pauseBtn: parentEl.querySelector('#pause_btn'),\n            text: parentEl.querySelector('#player_text')\n        };\n        this.stepCount = 0;\n        this._isPlaying = false;\n        this.elements.playerPosition.addEventListener('input', ({ target: target })=>{\n            this.goto(+target.value);\n        });\n        this.elements.playBtn.addEventListener('click', ()=>{\n            this.play();\n        });\n        this.elements.pauseBtn.addEventListener('click', ()=>{\n            this.pause();\n        });\n    }\n    updateStatus(isPlaying) {\n        if (this._isPlaying !== isPlaying) {\n            this.elements.player.classList.toggle('playing');\n            this._isPlaying = isPlaying;\n        }\n    }\n    update(stringArt, { draw: draw = true } = {}) {\n        this.stringArt = stringArt;\n        this.stepCount = stringArt.getStepCount();\n        this.elements.playerPosition.setAttribute('max', this.stepCount);\n        this.elements.step.innerText = `${this.stepCount}/${this.stepCount}`;\n        this.elements.text.style.removeProperty('width');\n        this.elements.text.style.width = (this.elements.text.clientWidth || 70) + 'px';\n        this.goto(this.stepCount, {\n            updateStringArt: draw\n        });\n    }\n    updatePosition(position) {\n        this.elements.step.innerText = `${position}/${this.stepCount}`;\n        this.elements.playerPosition.value = position;\n    }\n    goto(position, { updateStringArt: updateStringArt = true } = {}) {\n        this.pause();\n        this.updatePosition(position);\n        if (updateStringArt) this.stringArt.goto(position);\n    }\n    setInstructions(instructions) {\n    // this.elements.stepInstructions.innerText = instructions;\n    }\n    play() {\n        this.updateStatus(true);\n        cancelAnimationFrame(this.renderRafId);\n        if (this.stringArt.position === this.stepCount) this.stringArt.goto(0);\n        const self = this;\n        step();\n        function step() {\n            if (!self.stringArt.drawNext().done) self.renderRafId = requestAnimationFrame(step);\n            else self.updateStatus(false);\n            self.updatePosition(self.stringArt.position);\n        }\n    }\n    pause() {\n        cancelAnimationFrame(this.renderRafId);\n        this.updateStatus(false);\n    }\n    toggle() {\n        if (this._isPlaying) this.pause();\n        else this.play();\n    }\n}\n\n\nconst $cbc076be24a1f1a0$var$COLOR_CONTROLS = [\n    {\n        key: 'isMultiColor',\n        label: 'Use multiple colors',\n        defaultValue: false,\n        type: 'checkbox'\n    },\n    {\n        key: 'colorCount',\n        label: 'Colors count',\n        defaultValue: 7,\n        type: 'range',\n        attr: {\n            min: 1,\n            max: 20,\n            step: 1\n        },\n        show: ({ isMultiColor: isMultiColor })=>isMultiColor\n    },\n    {\n        key: 'color',\n        label: 'String color',\n        defaultValue: '#ff4d00',\n        type: 'color',\n        show: ({ isMultiColor: isMultiColor })=>!isMultiColor\n    },\n    {\n        key: 'multicolorRange',\n        label: 'Multicolor range',\n        defaultValue: 360,\n        type: 'range',\n        attr: {\n            min: 1,\n            max: 360,\n            step: 1\n        },\n        show: ({ isMultiColor: isMultiColor })=>isMultiColor\n    },\n    {\n        key: 'multicolorStart',\n        label: 'Multicolor start',\n        defaultValue: 0,\n        type: 'range',\n        attr: {\n            min: 0,\n            max: 360,\n            step: 1\n        },\n        show: ({ isMultiColor: isMultiColor })=>isMultiColor\n    },\n    {\n        key: 'saturation',\n        label: 'Saturation',\n        defaultValue: 100,\n        type: 'range',\n        attr: {\n            min: 0,\n            max: 100,\n            step: 1\n        },\n        show: ({ isMultiColor: isMultiColor })=>isMultiColor\n    },\n    {\n        key: 'lightness',\n        label: 'Lightness',\n        type: 'group',\n        defaultValue: 'minimized',\n        show: ({ isMultiColor: isMultiColor })=>isMultiColor,\n        children: [\n            {\n                key: 'multicolorByLightness',\n                label: 'Multi lightness',\n                defaultValue: false,\n                type: 'checkbox',\n                show: ({ isMultiColor: isMultiColor })=>isMultiColor\n            },\n            {\n                key: 'minLightness',\n                label: 'Minimum lightness',\n                defaultValue: 0,\n                type: 'range',\n                attr: {\n                    min: 0,\n                    max: 100,\n                    step: 1\n                },\n                show: ({ multicolorByLightness: multicolorByLightness, isMultiColor: isMultiColor })=>multicolorByLightness && isMultiColor\n            },\n            {\n                key: 'maxLightness',\n                label: 'Maximum lightness',\n                defaultValue: 100,\n                type: 'range',\n                attr: {\n                    min: 0,\n                    max: 100,\n                    step: 1\n                },\n                show: ({ multicolorByLightness: multicolorByLightness, isMultiColor: isMultiColor })=>multicolorByLightness && isMultiColor\n            }\n        ]\n    },\n    {\n        key: 'colorOrderGroup',\n        type: 'group',\n        label: 'Order',\n        defaultValue: 'minimized',\n        show: ({ isMultiColor: isMultiColor })=>isMultiColor,\n        children: [\n            {\n                key: 'reverseColors',\n                label: 'Reverse colors order',\n                defaultValue: false,\n                type: 'checkbox',\n                show: ({ isMultiColor: isMultiColor })=>isMultiColor\n            },\n            {\n                key: 'repeatColors',\n                label: 'Repeat colors',\n                defaultValue: false,\n                type: 'checkbox',\n                show: ({ isMultiColor: isMultiColor })=>isMultiColor\n            },\n            {\n                key: 'mirrorColors',\n                label: 'Mirror Colors',\n                defaultValue: false,\n                type: 'checkbox',\n                show: ({ isMultiColor: isMultiColor, repeatColors: repeatColors })=>isMultiColor && repeatColors\n            }\n        ]\n    }\n];\nclass $cbc076be24a1f1a0$export$2e2bcd8739ae039 {\n    constructor(config){\n        this.config = config;\n        const { multicolorRange: multicolorRange, colorCount: colorCount, multicolorByLightness: multicolorByLightness, minLightness: minLightness = 0, maxLightness: maxLightness = 100, multicolorStart: multicolorStart, darkMode: darkMode, saturation: saturation, reverseColors: reverseColors, repeatColors: repeatColors, mirrorColors: mirrorColors, isMultiColor: isMultiColor } = config;\n        if (isMultiColor) {\n            this.multiColorStep = multicolorRange / colorCount;\n            this.multiColorLightnessStep = multicolorByLightness ? (maxLightness - minLightness) / (Math.max(colorCount, 2) - 1) : 1;\n            this.colors = new Array(colorCount).fill(null).map((_, colorIndex)=>{\n                const lightness = multicolorByLightness ? minLightness + this.multiColorLightnessStep * colorIndex : darkMode ? 50 : 40;\n                return `hsl(${multicolorStart + colorIndex * this.multiColorStep}, ${saturation}%, ${lightness}%)`;\n            });\n            if (repeatColors && mirrorColors) {\n                const [_firstColor, ...restColors] = this.colors;\n                restColors.pop();\n                this.colors = [\n                    ...this.colors,\n                    ...restColors.reverse()\n                ];\n            }\n            if (reverseColors) this.colors.reverse();\n        }\n    }\n    /**\n   * Returns the color to be used in the provided layer index. If no multiColor is used, will use the 'color' config property.\n   * @param {number} colorIndex\n   * @returns string\n   */ getColor(colorIndex) {\n        const { isMultiColor: isMultiColor, colorCount: colorCount, color: color, repeatColors: repeatColors, mirrorColors: mirrorColors } = this.config;\n        if (!isMultiColor) return color;\n        if (colorIndex >= colorCount) colorIndex = repeatColors ? colorIndex % this.colors.length : this.colors.length - 1;\n        return this.colors[colorIndex];\n    }\n    getColorMap({ stepCount: stepCount, colorCount: colorCount }) {\n        if (!colorCount) throw new Error(\"Can't get color map, no colorCount provided!\");\n        const stepsPerColor = Math.floor(stepCount / colorCount);\n        const colorMap = new Map();\n        for(let i = 0; i < colorCount; i++)colorMap.set(i * stepsPerColor, this.getColor(i));\n        return colorMap;\n    }\n    static getConfig({ include: include, exclude: exclude, defaults: defaults = {}, customControls: customControls }) {\n        const controls = getControls();\n        return {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                ...customControls ?? [],\n                ...controls\n            ]\n        };\n        function getControls(controlsConfig = $cbc076be24a1f1a0$var$COLOR_CONTROLS) {\n            return controlsConfig.filter(({ key: key })=>(!exclude || !exclude.includes(key)) && (!include || include.includes(key))).map((control)=>{\n                const finalControl = {\n                    ...control,\n                    defaultValue: defaults[control.key] ?? control.defaultValue\n                };\n                if (control.type === 'group') finalControl.children = getControls(control.children);\n                return Object.freeze(finalControl);\n            });\n        }\n    }\n}\n\n\nconst $52030056f564a303$var$NUMBER_MARGIN = 4;\nclass $52030056f564a303$export$2e2bcd8739ae039 {\n    constructor(renderer, config){\n        this.setConfig(config);\n        this.nails = [];\n        this.addedPoints = new Set();\n        this.renderer = renderer;\n    }\n    setConfig({ nailRadius: nailRadius, nailsColor: nailsColor, nailNumbersFontSize: nailNumbersFontSize }) {\n        this.nailRadius = nailRadius;\n        this.nailsColor = nailsColor;\n        this.nailNumbersFontSize = nailNumbersFontSize;\n        this.nails = [];\n        if (this.addedPoints) this.addedPoints.clear();\n    }\n    // Adds a nail to be rendered. nail: { point, number }\n    addNail(nail) {\n        const nailPoint = nail.point.map(Math.round).join('_');\n        if (!this.addedPoints.has(nailPoint)) {\n            this.nails.push(nail);\n            this.addedPoints.add(nailPoint);\n        }\n    }\n    fill({ drawNumbers: drawNumbers = true } = {}) {\n        this.renderer.renderNails(this.nails, {\n            color: this.nailsColor,\n            fontSize: this.nailNumbersFontSize,\n            radius: this.nailRadius,\n            renderNumbers: drawNumbers,\n            margin: $52030056f564a303$var$NUMBER_MARGIN\n        });\n        this.nails = [];\n        this.addedPoints.clear();\n    }\n}\n\n\nclass $09b9b17d86206023$export$2e2bcd8739ae039 {\n    constructor(parentElement){\n        this.parentElement = parentElement;\n    }\n    destroy() {\n        this.parentElement.removeElement(this.element);\n    }\n    get element() {\n        throw new Error('element getter not implemented!');\n    }\n    reset() {}\n    setColor(color) {\n        this.color = color;\n    }\n    setLineWidth(width) {}\n    setBackground(color) {}\n    renderLines(startPosition, ...positions) {\n        throw new Error('Renderer \"renderLines\" method not implemented!');\n    }\n    /**\n   * Renders the nails for the string art\n   * @param {[{ point: [x: number, y: number], number: string }]} nails\n   * @param {*} param1\n   */ renderNails(nails, { color: color, fontSize: fontSize, radius: radius, renderNumbers: renderNumbers, margin: margin }) {\n        throw new Error('Renderer \"renderNails\" method not implemented!');\n    }\n    getSize() {\n        const { width: width, height: height } = this.parentElement.getBoundingClientRect();\n        return [\n            width,\n            height\n        ];\n    }\n    setSize(size) {\n        this.size = size;\n        this.element.removeAttribute('width');\n        this.element.removeAttribute('height');\n        if (size) {\n            this.element.style.width = `${size.width}px`;\n            this.element.style.height = `${size.height}px`;\n        } else this.element.removeAttribute('style');\n    }\n    clear() {\n        throw new Error('Renderer \"clear\" method not implemented!');\n    }\n    toDataURL() {\n        throw new Error('Renderer \"toDataURL\" method not implemented!');\n    }\n}\n\n\nconst $94a914a4d84408bc$var$COLORS = {\n    dark: '#0e0e0e',\n    light: '#ffffff'\n};\nconst $94a914a4d84408bc$var$COMMON_CONFIG_CONTROLS = [\n    {\n        key: 'strings',\n        label: 'Strings',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'showStrings',\n                label: 'Show strings',\n                defaultValue: true,\n                type: 'checkbox',\n                isDisabled: ({ showNails: showNails })=>!showNails\n            },\n            {\n                key: 'stringWidth',\n                label: 'String width',\n                defaultValue: 1,\n                type: 'range',\n                attr: {\n                    min: 0.2,\n                    max: 4,\n                    step: 0.1\n                },\n                show: ({ showStrings: showStrings })=>showStrings\n            }\n        ]\n    },\n    {\n        key: 'nails',\n        label: 'Nails',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'showNails',\n                label: 'Show nails',\n                defaultValue: true,\n                type: 'checkbox',\n                isDisabled: ({ showStrings: showStrings })=>!showStrings\n            },\n            {\n                key: 'showNailNumbers',\n                label: 'Show nail numbers',\n                defaultValue: false,\n                type: 'checkbox',\n                show: ({ showNails: showNails })=>showNails\n            },\n            {\n                key: 'nailNumbersFontSize',\n                label: 'Nail numbers font size',\n                defaultValue: 10,\n                type: 'range',\n                attr: {\n                    min: 6,\n                    max: 24,\n                    step: 0.5\n                },\n                displayValue: ({ nailNumbersFontSize: nailNumbersFontSize })=>`${nailNumbersFontSize}px`,\n                show: ({ showNails: showNails, showNailNumbers: showNailNumbers })=>showNails && showNailNumbers\n            },\n            {\n                key: 'margin',\n                label: 'Margin',\n                defaultValue: 20,\n                type: 'number',\n                attr: {\n                    min: 0,\n                    max: 500,\n                    step: 1\n                },\n                displayValue: ({ margin: margin })=>`${margin}px`\n            },\n            {\n                key: 'nailRadius',\n                label: 'Nail size',\n                defaultValue: 1.5,\n                type: 'range',\n                attr: {\n                    min: 0.5,\n                    max: 5,\n                    step: 0.25\n                },\n                show: ({ showNails: showNails })=>showNails\n            },\n            {\n                key: 'nailsColor',\n                label: 'Nails color',\n                defaultValue: '#ffffff',\n                type: 'color',\n                show: ({ showNails: showNails })=>showNails\n            }\n        ]\n    },\n    {\n        key: 'background',\n        label: 'Background',\n        type: 'group',\n        defaultValue: 'minimized',\n        children: [\n            {\n                key: 'darkMode',\n                label: 'Dark mode',\n                defaultValue: true,\n                type: 'checkbox',\n                isDisabled: ({ enableBackground: enableBackground })=>!enableBackground\n            },\n            {\n                key: 'customBackgroundColor',\n                label: 'Custom background color',\n                defaultValue: false,\n                type: 'checkbox',\n                isDisabled: ({ enableBackground: enableBackground })=>!enableBackground\n            },\n            {\n                key: 'backgroundColor',\n                label: 'Background color',\n                defaultValue: $94a914a4d84408bc$var$COLORS.dark,\n                type: 'color',\n                show: ({ customBackgroundColor: customBackgroundColor })=>customBackgroundColor,\n                isDisabled: ({ enableBackground: enableBackground })=>!enableBackground\n            },\n            {\n                key: 'enableBackground',\n                label: 'Enable background',\n                defaultValue: true,\n                type: 'checkbox'\n            }\n        ]\n    }\n];\nclass $94a914a4d84408bc$var$StringArt {\n    constructor(renderer){\n        if (!renderer) throw new Error('Renderer not specified!');\n        if (!(renderer instanceof (0, $09b9b17d86206023$export$2e2bcd8739ae039))) throw new Error('Renderer is not an instance of Renderer!');\n        this.renderer = renderer;\n    }\n    get configControls() {\n        return (this.controls ?? []).concat($94a914a4d84408bc$var$COMMON_CONFIG_CONTROLS);\n    }\n    get controlsIndex() {\n        if (!this._controlsIndex) this._controlsIndex = $94a914a4d84408bc$var$getControlsIndex(this.controls);\n        return this._controlsIndex;\n    }\n    get defaultConfig() {\n        if (!this._defaultConfig) this._defaultConfig = Object.freeze(Object.assign($94a914a4d84408bc$var$flattenConfig(this.configControls), this.defaultValues));\n        return this._defaultConfig;\n    }\n    get config() {\n        return this._config ?? this.defaultConfig;\n    }\n    set config(value) {\n        this._config = Object.assign({}, this.defaultConfig, value);\n    }\n    setConfig(config) {\n        const currentConfig = this.config;\n        this.config = config;\n        if (this.onConfigChange) {\n            const changedControlKeys = Object.keys(currentConfig).filter((key)=>config[key] !== currentConfig[key]);\n            this.onConfigChange({\n                controls: changedControlKeys.map((key)=>({\n                        control: this.controlsIndex[key],\n                        value: config[key]\n                    }))\n            });\n        }\n    }\n    resetStructure() {}\n    onConfigChange({ controls: controls }) {\n        if (controls.some(({ control: control })=>control.isStructural)) {\n            this.resetStructure();\n            if (this.stepCount != null && controls.some(({ control: control })=>control.affectsStepCount !== false)) this.stepCount = null;\n        }\n    }\n    onResize() {\n        this.resetStructure();\n    }\n    setConfigValue(controlKey, value) {\n        this._config = Object.freeze({\n            ...this._config ?? this.defaultConfig,\n            [controlKey]: value\n        });\n        if (this.onConfigChange) this.onConfigChange({\n            controls: [\n                {\n                    control: this.controlsIndex[controlKey],\n                    value: value\n                }\n            ].filter(({ control: control })=>!!control)\n        });\n    }\n    getSize() {\n        return this.renderer.getSize();\n    }\n    setUpDraw() {\n        const previousSize = this.size;\n        this.renderer.reset();\n        const [width, height] = this.size = this.getSize();\n        Object.assign(this, this.size);\n        this.center = this.size.map((value)=>value / 2);\n        if (previousSize && (previousSize[0] !== width || previousSize[1] !== height)) {\n            if (this.onResize) this.onResize();\n        }\n        if (this.nails) this.nails.setConfig(this.config);\n        else this.nails = new (0, $52030056f564a303$export$2e2bcd8739ae039)(this.renderer, this.config);\n        this.renderer.setLineWidth(this.config.stringWidth);\n    }\n    afterDraw() {\n        const { showNails: showNails, showNailNumbers: showNailNumbers } = this.config;\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill({\n                drawNumbers: showNailNumbers\n            });\n        }\n    }\n    initDraw() {\n        this.setUpDraw(this.config);\n        const { showNails: showNails, showNailNumbers: showNailNumbers, darkMode: darkMode, backgroundColor: backgroundColor, customBackgroundColor: customBackgroundColor, enableBackground: enableBackground } = this.config;\n        if (enableBackground) this.renderer.setBackground(customBackgroundColor ? backgroundColor : darkMode ? $94a914a4d84408bc$var$COLORS.dark : $94a914a4d84408bc$var$COLORS.light);\n        if (showNails) {\n            this.drawNails();\n            this.nails.fill({\n                drawNumbers: showNailNumbers\n            });\n        }\n    }\n    /**\n   * Draws the string art\n   * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n   */ draw({ position: position = Infinity } = {}) {\n        this.initDraw();\n        const { showStrings: showStrings } = this.config;\n        if (showStrings) {\n            this.stringsIterator = this.generateStrings();\n            this.position = 0;\n            while(!this.drawNext().done && this.position < position);\n            this.afterDraw();\n        }\n    }\n    goto(position) {\n        if (position === this.position) return;\n        if (this.stringsIterator && position > this.position) {\n            while(!this.drawNext().done && this.position < position);\n        } else this.draw({\n            position: position\n        });\n    }\n    drawNext() {\n        const result = this.stringsIterator.next();\n        if (result.done) this.afterDraw();\n        else this.position++;\n        return result;\n    }\n    generateStrings() {\n        throw new Error('generateStrings method not defined!');\n    }\n    getStepCount() {\n        throw new Error(`'getStepCount' method not implemented for string art type \"${this.name}\"`);\n    }\n}\nfunction $94a914a4d84408bc$var$flattenConfig(configControls) {\n    return configControls.reduce((config, { key: key, defaultValue: defaultValue, children: children })=>children ? {\n            ...config,\n            ...$94a914a4d84408bc$var$flattenConfig(children)\n        } : {\n            ...config,\n            [key]: defaultValue\n        }, {});\n}\nfunction $94a914a4d84408bc$var$getControlsIndex(configControls) {\n    return configControls.reduce((controlsIndex, control)=>control.children ? {\n            ...controlsIndex,\n            ...$94a914a4d84408bc$var$getControlsIndex(control.children)\n        } : {\n            ...controlsIndex,\n            [control.key]: control\n        }, {});\n}\nvar $94a914a4d84408bc$export$2e2bcd8739ae039 = $94a914a4d84408bc$var$StringArt;\n\n\n\nconst $57964bac1e0437ab$var$easing = {\n    linear: (x)=>x,\n    inOutCirc (x) {\n        return x < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;\n    },\n    easeOutQuint (x) {\n        return 1 - Math.pow(1 - x, 5);\n    },\n    fastSlowFast (t) {\n        // Clamp t to [0,1] just to be safe\n        t = Math.max(0, Math.min(1, t));\n        // Custom easing formula: accelerates, slows in middle, then accelerates again\n        return 0.5 * (1 - Math.cos(Math.PI * t)) ** 1.5;\n    },\n    fastInOutSquare (x) {\n        return x <= 0.5 ? (1 - Math.pow(1 - x * 2, 2)) / 2 : 0.5 + Math.pow(x * 2 - 1, 2) / 2;\n    },\n    fastInOutCubic (x) {\n        return x <= 0.5 ? (1 - Math.pow(1 - x * 2, 3)) / 2 : 0.5 + Math.pow(x * 2 - 1, 3) / 2;\n    },\n    fastInOutQuint (x) {\n        return x <= 0.5 ? (1 - Math.pow(1 - x * 2, 5)) / 2 : 0.5 + Math.pow(x * 2 - 1, 5) / 2;\n    },\n    fastInOut (pow, x) {\n        return x <= 0.5 ? (1 - Math.pow(1 - x * 2, pow)) / 2 : 0.5 + Math.pow(x * 2 - 1, pow) / 2;\n    },\n    fastInOutFixed (pow, fastArea, x) {\n        if (x > fastArea && x < 1 - fastArea) {\n            const y1 = (1 - Math.pow(1 - fastArea * 2, pow)) / 2;\n            const y2 = 0.5 + Math.pow((1 - fastArea) * 2 - 1, pow) / 2;\n            return y1 + (x - fastArea) * (y2 - y1) / (1 - 2 * fastArea);\n        }\n        return x <= fastArea ? (1 - Math.pow(1 - x * 2, pow)) / 2 : 0.5 + Math.pow(x * 2 - 1, pow) / 2;\n    }\n};\n$57964bac1e0437ab$var$easing.fastInOut.requirePower = true;\n$57964bac1e0437ab$var$easing.fastInOutFixed.requirePower = true;\n$57964bac1e0437ab$var$easing.fastInOutFixed.requireFastArea = true;\nvar $57964bac1e0437ab$export$2e2bcd8739ae039 = $57964bac1e0437ab$var$easing;\n\n\n/**\n * Returns the greatest common divisor of two integers\n * https://en.wikipedia.org/wiki/Euclidean_algorithm\n * @param {number} int1\n * @param {number} int2\n * @returns number\n */ function $86f1de0f012f559c$export$f81847884871263e(int1, int2) {\n    if (!int2) return int1;\n    return $86f1de0f012f559c$export$f81847884871263e(int2, int1 % int2);\n}\nfunction $86f1de0f012f559c$export$18c295d7a6a8189d(size1, size2) {\n    const ratio = Math.min(size2[0] / size1[0], size2[1] / size1[1]);\n    return size1.map((v)=>v * ratio);\n}\nconst $86f1de0f012f559c$export$f4644083ce95e7e3 = Math.PI * 2;\n\n\nclass $59fce7b2f3ce133e$export$2e2bcd8739ae039 {\n    constructor(config){\n        this.setConfig(config);\n    }\n    getPoint(index = 0) {\n        const realIndex = this.getNailIndex(index);\n        if (this.points.has(index)) return this.points.get(index);\n        const angle = this.easingFunction(realIndex / this.config.n) * (0, $86f1de0f012f559c$export$f4644083ce95e7e3) + this.rotationAngle;\n        const point = [\n            this.center[0] + Math.sin(angle) * this.xyRadius[0],\n            this.center[1] + Math.cos(angle) * this.xyRadius[1]\n        ];\n        this.points.set(index, point);\n        return point;\n    }\n    getNailIndex(index = 0) {\n        let realIndex = this.isReverse ? this.config.n - 1 - index : index;\n        if (realIndex > this.config.n - 1) realIndex = realIndex % this.config.n;\n        return realIndex;\n    }\n    setConfig(config) {\n        const serializedConfig = this._serializeConfig(config);\n        if (serializedConfig !== this.serializedConfig) {\n            const { n: n, size: size, margin: margin = 0, rotation: rotation = 0, center: configCenter, radius: radius, reverse: reverse = false } = config;\n            const center = configCenter ?? size.map((v)=>v / 2);\n            const clampedRadius = radius ?? Math.min(...center) - margin;\n            let xyRadius = [\n                clampedRadius,\n                clampedRadius\n            ];\n            if (config.distortion) {\n                const distortedBox = config.distortion < 0 ? [\n                    clampedRadius * (1 - Math.abs(config.distortion)),\n                    clampedRadius\n                ] : [\n                    clampedRadius / (1 - config.distortion),\n                    clampedRadius\n                ];\n                xyRadius = (0, $86f1de0f012f559c$export$18c295d7a6a8189d)(distortedBox, center.map((v)=>v - margin));\n            }\n            const props = {\n                center: center,\n                radius: clampedRadius,\n                xyRadius: xyRadius,\n                indexAngle: (0, $86f1de0f012f559c$export$f4644083ce95e7e3) / n,\n                rotationAngle: -(0, $86f1de0f012f559c$export$f4644083ce95e7e3) * rotation,\n                isReverse: reverse\n            };\n            const easingFunction = config.displacementFunc ? (0, $57964bac1e0437ab$export$2e2bcd8739ae039)[config.displacementFunc] : (0, $57964bac1e0437ab$export$2e2bcd8739ae039).linear;\n            const easingParams = [];\n            if (easingFunction.requirePower) easingParams.push(config.displacementMag);\n            if (easingFunction.requireFastArea) easingParams.push(config.displacementFastArea);\n            const easingFunctionWithParams = easingParams.length ? easingFunction.bind(null, ...easingParams) : easingFunction;\n            this.easingFunction = easingFunctionWithParams;\n            this.config = config;\n            this.serializedConfig = serializedConfig;\n            Object.assign(this, props);\n            if (this.points) this.points.clear();\n            else this.points = new Map();\n        }\n    }\n    _serializeConfig({ n: n, size: size, margin: margin = 0, rotation: rotation = 0, center: center, radius: radius, reverse: reverse = false, distortion: distortion = 0, displacementFunc: displacementFunc, displacementMag: displacementMag, displacementFastArea: displacementFastArea }) {\n        return [\n            size?.join(','),\n            center?.join(','),\n            radius,\n            margin,\n            n,\n            rotation,\n            reverse,\n            distortion\n        ].concat(displacementFunc === 'linear' ? [] : [\n            displacementFunc,\n            displacementMag,\n            displacementFastArea\n        ]).join('_');\n    }\n    /**\n   * Given a Nails instance, uses it to draw the nails of this Circle\n   * @param {Nails} nails\n   * @param {{nailsNumberStart?: number, getNumber?: Function}} param1\n   */ drawNails(nails, { nailsNumberStart: nailsNumberStart = 0, getNumber: getNumber } = {}) {\n        for(let i = 0; i < this.config.n; i++)nails.addNail({\n            point: this.getPoint(i),\n            number: getNumber ? getNumber(i) : i + nailsNumberStart\n        });\n    }\n    *drawRing(renderer, { ringSize: ringSize, color: color }) {\n        const { n: n } = this.config;\n        const ringDistance = Math.floor(ringSize * n);\n        let prevPoint;\n        let prevPointIndex = 0;\n        let isPrevSide = false;\n        renderer.setColor(color);\n        for(let i = 0; i < n; i++){\n            if (!prevPoint) prevPoint = this.getPoint(0);\n            const startPoint = prevPoint;\n            const positions = [];\n            prevPointIndex = isPrevSide ? i : prevPointIndex + ringDistance;\n            prevPoint = this.getPoint(prevPointIndex);\n            positions.push(prevPoint);\n            if (i < n - 1) {\n                prevPointIndex++;\n                prevPoint = this.getPoint(prevPointIndex);\n                positions.push(prevPoint);\n            }\n            renderer.renderLines(startPoint, ...positions);\n            yield;\n            isPrevSide = !isPrevSide;\n        }\n    }\n    static rotationConfig = Object.freeze({\n        key: 'rotation',\n        label: 'Rotation',\n        defaultValue: 0,\n        type: 'range',\n        attr: {\n            min: 0,\n            max: 1 + 1 / 360,\n            step: 1 / 360\n        },\n        displayValue: (config, { key: key })=>`${Math.round(config[key] * 360)}\\xb0`,\n        isStructural: true,\n        affectsStepCount: false\n    });\n    static nailsConfig = Object.freeze({\n        key: 'n',\n        label: 'Number of nails',\n        defaultValue: 144,\n        type: 'range',\n        attr: {\n            min: 3,\n            max: 300,\n            step: 1\n        },\n        isStructural: true\n    });\n    static displacementConfig = Object.freeze({\n        key: 'displacement',\n        label: 'Displacement',\n        type: 'group',\n        children: [\n            {\n                key: 'displacementFunc',\n                label: 'Displacement function',\n                defaultValue: 'linear',\n                type: 'select',\n                options: Object.keys((0, $57964bac1e0437ab$export$2e2bcd8739ae039)),\n                isStructural: true,\n                affectsStepCount: false\n            },\n            {\n                key: 'displacementMag',\n                label: 'Displacement magnitude',\n                defaultValue: 3,\n                type: 'range',\n                attr: {\n                    min: 0,\n                    max: 10,\n                    step: 0.1\n                },\n                show: ({ displacementFunc: displacementFunc })=>(0, $57964bac1e0437ab$export$2e2bcd8739ae039)[displacementFunc].requirePower,\n                isStructural: true,\n                affectsStepCount: false\n            },\n            {\n                key: 'displacementFastArea',\n                label: 'Displacement fast area',\n                defaultValue: 0.4,\n                type: 'range',\n                attr: {\n                    min: 0,\n                    max: 0.5,\n                    step: 0.01\n                },\n                show: ({ displacementFunc: displacementFunc })=>(0, $57964bac1e0437ab$export$2e2bcd8739ae039)[displacementFunc].requireFastArea,\n                isStructural: true,\n                affectsStepCount: false\n            }\n        ]\n    });\n    static distortionConfig = Object.freeze({\n        key: 'distortion',\n        label: 'Distortion',\n        defaultValue: 0,\n        type: 'range',\n        attr: {\n            min: -0.99,\n            max: 0.99,\n            step: 0.01\n        },\n        isStructural: true,\n        affectsStepCount: false\n    });\n}\n\n\nconst $c3aacb68e8eafa9f$var$COLOR_CONFIG = (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039).getConfig({\n    defaults: {\n        isMultiColor: true,\n        colorCount: 7,\n        color: '#ffbb29',\n        multicolorRange: '21',\n        multicolorStart: 32,\n        multicolorByLightness: true,\n        minLightness: 36,\n        maxLightness: 98\n    },\n    exclude: [\n        'repeatColors',\n        'mirrorColors'\n    ]\n});\nclass $c3aacb68e8eafa9f$export$2e2bcd8739ae039 extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    id = 'spiral';\n    name = 'Spiral';\n    link = 'https://www.etsy.com/il-en/listing/840974781/boho-wall-decor-artwork-spiral-round';\n    controls = [\n        {\n            ...(0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).nailsConfig,\n            defaultValue: 200\n        },\n        {\n            key: 'repetition',\n            label: 'Repetition',\n            defaultValue: 5,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'innerLength',\n            label: 'Spiral thickness',\n            defaultValue: 0.5,\n            type: 'range',\n            attr: {\n                min: ({ config: { n: n } })=>1 / n,\n                max: 1,\n                step: ({ config: { n: n } })=>1 / n\n            },\n            displayValue: ({ n: n, innerLength: innerLength })=>Math.round(n * innerLength)\n        },\n        {\n            ...(0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n            defaultValue: 0.75\n        },\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).distortionConfig,\n        $c3aacb68e8eafa9f$var$COLOR_CONFIG\n    ];\n    setUpDraw() {\n        super.setUpDraw();\n        const { n: n, rotation: rotation, layers: layers, margin: margin, colorCount: colorCount, repetition: repetition, distortion: distortion } = this.config;\n        this.layersCount = layers ?? 1;\n        this.realRepetition = repetition * 2 - 1;\n        const circleConfig = {\n            size: this.size,\n            n: n,\n            margin: margin,\n            rotation: rotation,\n            distortion: distortion\n        };\n        if (this.circle) this.circle.setConfig(circleConfig);\n        else this.circle = new (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039)(circleConfig);\n        this.color = new (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039)({\n            ...this.config,\n            colorCount: layers ?? colorCount\n        });\n        if (colorCount) this.colorMap = this.color.getColorMap({\n            stepCount: this.getStepCount(),\n            colorCount: colorCount\n        });\n    }\n    *drawSpiral({ shift: shift = 0, color: color = '#ffffff' } = {}) {\n        const { innerLength: innerLength, n: n } = this.config;\n        let currentInnerLength = Math.round(innerLength * n);\n        let repetitionCount = 0;\n        this.renderer.setColor(color);\n        let prevPointIndex = shift;\n        let prevPoint = this.circle.getPoint(prevPointIndex);\n        let isPrevPoint = false;\n        for(let i = 0; currentInnerLength > 0; i++){\n            if (this.colorMap) {\n                const stepColor = this.colorMap.get(i);\n                if (stepColor) this.renderer.setColor(stepColor);\n            }\n            prevPointIndex = isPrevPoint ? prevPointIndex - currentInnerLength + 1 : prevPointIndex + currentInnerLength;\n            if (repetitionCount === this.realRepetition) {\n                currentInnerLength--;\n                repetitionCount = 0;\n                prevPointIndex++;\n            } else repetitionCount++;\n            const nextPoint = this.circle.getPoint(prevPointIndex);\n            this.renderer.renderLines(prevPoint, nextPoint);\n            prevPoint = nextPoint;\n            yield i;\n            isPrevPoint = !isPrevPoint;\n        }\n    }\n    *generateStrings() {\n        yield* this.drawSpiral({\n            color: this.color.getColor(0)\n        });\n    }\n    getStepCount() {\n        const { innerLength: innerLength, repetition: repetition, n: n, layers: layers = 1 } = this.config;\n        return Math.round(layers * n * (innerLength * 2) * repetition);\n    }\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n    static thumbnailConfig = {\n        n: 60\n    };\n}\n\n\n\n\n\n\nclass $252b3d5c8e3f8ea1$var$Spirals extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    name = 'Spirals';\n    id = 'spirals';\n    link = 'https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1';\n    controls = [\n        {\n            key: 'radiusIncrease',\n            label: 'Radius change',\n            defaultValue: 5.7,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 20,\n                step: 0.1\n            }\n        },\n        {\n            key: 'angleStep',\n            label: 'Angle step',\n            defaultValue: 0.45,\n            type: 'range',\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01\n            }\n        },\n        {\n            key: 'nSpirals',\n            label: 'Number of spirals',\n            defaultValue: 3,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            ...(0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n            defaultValue: 330 / 360\n        },\n        (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039).getConfig({\n            defaults: {\n                isMultiColor: true,\n                colorCount: 4,\n                color: '#00d5ff',\n                multicolorRange: 1,\n                multicolorStart: 190,\n                multicolorByLightness: true,\n                minLightness: 50,\n                maxLightness: 88,\n                reverseColors: true\n            }\n        })\n    ];\n    setUpDraw() {\n        super.setUpDraw();\n        const { nSpirals: nSpirals, rotation: rotation, margin: margin, radiusIncrease: radiusIncrease, angleStep: angleStep, colorCount: colorCount } = this.config;\n        this.spiralRotations = new Array(nSpirals).fill(null).map((_, i)=>i * (0, $86f1de0f012f559c$export$f4644083ce95e7e3) / nSpirals);\n        this.rotationAngle = -(0, $86f1de0f012f559c$export$f4644083ce95e7e3) * rotation;\n        const maxRadius = Math.min(...this.size) / 2 - margin;\n        this.nailsPerSpiral = Math.floor(maxRadius / radiusIncrease);\n        this.angleIncrease = angleStep / (maxRadius / 50);\n        this.color = new (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039)(this.config);\n        this.colorMap = this.color.getColorMap({\n            stepCount: this.getStepCount(),\n            colorCount: colorCount\n        });\n    }\n    *generatePoints() {\n        const { nSpirals: nSpirals } = this.config;\n        for(let i = 0; i < this.nailsPerSpiral; i++)for(let s = 0; s < nSpirals; s++){\n            const point = this.getPoint(s, i);\n            yield {\n                point: point,\n                nailNumber: `${s}_${i}`\n            };\n        }\n    }\n    getPoint(spiralIndex, index) {\n        const [centerx, centery] = this.center;\n        const { radiusIncrease: radiusIncrease } = this.config;\n        const angle = this.rotationAngle + this.angleIncrease * index + this.spiralRotations[spiralIndex];\n        const radius = index * radiusIncrease;\n        return [\n            centerx + radius * Math.sin(angle),\n            centery + radius * Math.cos(angle)\n        ];\n    }\n    *generateStrings() {\n        const points = this.generatePoints();\n        let index = 0;\n        this.renderer.setColor(this.color.getColor(0));\n        let lastPoint = this.center;\n        for (const { point: point } of points){\n            if (this.colorMap) {\n                const stepColor = this.colorMap.get(index);\n                if (stepColor) this.renderer.setColor(stepColor);\n            }\n            if (lastPoint) this.renderer.renderLines(lastPoint, point);\n            lastPoint = point;\n            yield index++;\n        }\n    }\n    getStepCount() {\n        const { nSpirals: nSpirals, radiusIncrease: radiusIncrease, margin: margin } = this.config;\n        const maxRadius = Math.min(...this.getSize()) / 2 - margin;\n        const n = Math.floor(maxRadius / radiusIncrease);\n        return n * nSpirals;\n    }\n    drawNails() {\n        const points = this.generatePoints();\n        for (const { point: point, nailNumber: nailNumber } of points)this.nails.addNail({\n            point: point,\n            number: nailNumber\n        });\n    }\n    static thumbnailConfig = {\n        radiusIncrease: 1.4,\n        angleStep: 0.11\n    };\n}\nvar $252b3d5c8e3f8ea1$export$2e2bcd8739ae039 = $252b3d5c8e3f8ea1$var$Spirals;\n\n\n\n\n\n\n\nclass $04618c3b6078db17$export$2e2bcd8739ae039 extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    name = 'Mandala';\n    id = 'mandala';\n    link = 'https://www.youtube.com/watch?v=qhbuKbxJsk8';\n    linkText = 'Learn';\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails',\n            defaultValue: 180,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 240,\n                step: 1\n            }\n        },\n        {\n            key: 'base',\n            label: 'Multiplication',\n            defaultValue: 2,\n            type: 'range',\n            attr: {\n                min: 2,\n                max: 99,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 7,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).distortionConfig,\n        (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039).getConfig({\n            defaults: {\n                isMultiColor: true,\n                multicolorRange: 180,\n                multicolorStart: 256,\n                color: '#ff4d00'\n            },\n            exclude: [\n                'colorCount'\n            ]\n        })\n    ];\n    get n() {\n        if (!this._n) {\n            const { n: n, layers: layers } = this.config;\n            const extraNails = n % layers;\n            this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n        }\n        return this._n;\n    }\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n        const { layers: layers, rotation: rotation, distortion: distortion, margin: margin, layerFill: layerFill, base: base, reverse: reverse } = this.config;\n        const circleConfig = {\n            size: this.size,\n            n: this.n,\n            margin: margin,\n            rotation: rotation,\n            distortion: distortion,\n            reverse: reverse\n        };\n        this.stringsPerLayer = layerFill ? Math.floor(this.n * layerFill) : this.n;\n        if (this.circle) this.circle.setConfig(circleConfig);\n        else this.circle = new (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039)(circleConfig);\n        this.color = new (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039)({\n            ...this.config,\n            colorCount: layers\n        });\n        this.layerShift = Math.floor(this.n / layers);\n        this.base = base;\n    }\n    *drawTimesTable({ shift: shift = 0, color: color = '#f00', time: time }) {\n        const n = this.n;\n        this.renderer.setColor(color);\n        let point = this.circle.getPoint(shift);\n        for(let i = 1; i <= this.stringsPerLayer; i++){\n            const startPoint = point;\n            point = this.circle.getPoint(i + shift);\n            const toIndex = i * this.base % n;\n            this.renderer.renderLines(startPoint, point, this.circle.getPoint(toIndex + shift));\n            yield {\n                instructions: `${i - 1} \\u{2192} ${i} \\u{2192} ${toIndex} \\u{2192} ${i}`,\n                index: time * n + i\n            };\n        }\n    }\n    *generateStrings() {\n        const { layers: layers } = this.config;\n        for(let time = 0; time < layers; time++){\n            const color = this.color.getColor(time);\n            yield* this.drawTimesTable({\n                time: time,\n                color: color,\n                shift: this.layerShift * time\n            });\n        }\n    }\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n    getStepCount() {\n        const { layers: layers, layerFill: layerFill } = this.config;\n        const stringsPerLayer = layerFill ? Math.floor(this.n * layerFill) : this.n;\n        return (layers ?? 1) * stringsPerLayer;\n    }\n    static thumbnailConfig = {\n        n: 70\n    };\n}\n\n\nclass $7ca16301d1006488$export$2e2bcd8739ae039 extends (0, $04618c3b6078db17$export$2e2bcd8739ae039) {\n    id = 'wave';\n    name = 'Wave';\n    link = 'https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1';\n    controls = [\n        {\n            ...(0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).nailsConfig,\n            defaultValue: 200\n        },\n        {\n            key: 'layerFill',\n            label: 'Layer fill',\n            defaultValue: 0.5,\n            type: 'range',\n            attr: {\n                min: ({ config: { n: n } })=>1 / n,\n                max: 1,\n                step: ({ config: { n: n } })=>1 / n\n            },\n            displayValue: ({ layerFill: layerFill })=>Math.floor(100 * layerFill) + '%'\n        },\n        {\n            ...(0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n            defaultValue: 176 / 360\n        },\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).distortionConfig,\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 11,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'layerSpread',\n            label: 'Layer spread',\n            defaultValue: 0.075,\n            type: 'range',\n            attr: {\n                min: 0,\n                max: 1,\n                step: ({ config: { n: n } })=>1 / n\n            },\n            displayValue: ({ layerSpread: layerSpread, n: n })=>Math.round(layerSpread * n)\n        },\n        {\n            key: 'reverse',\n            label: 'Reverse',\n            defaultValue: true,\n            type: 'checkbox'\n        },\n        (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039).getConfig({\n            defaults: {\n                isMultiColor: true,\n                multicolorRange: 216,\n                multicolorStart: 263,\n                color: '#ffffff',\n                multicolorByLightness: true,\n                minLightness: 10,\n                maxLightness: 90\n            },\n            exclude: [\n                'colorCount'\n            ]\n        })\n    ];\n    setUpDraw() {\n        super.setUpDraw();\n        const { n: n, layerSpread: layerSpread } = this.config;\n        this.layerShift = Math.round(n * layerSpread);\n        this.base = 2;\n    }\n    *generateStrings() {\n        const { layers: layers, reverse: reverse } = this.config;\n        for(let layer = 0; layer < layers; layer++)yield* this.drawTimesTable({\n            color: this.color.getColor(layer),\n            shift: this.layerShift * (reverse ? 1 : -1) * layer,\n            time: layer\n        });\n    }\n    static thumbnailConfig = {\n        n: 70\n    };\n}\n\n\n\nconst $fafc1a9c7b2bff91$var$SIDES = [\n    'left',\n    'bottom',\n    'right',\n    'top'\n];\nconst $fafc1a9c7b2bff91$var$SIDES_ORDER = [\n    'left',\n    'bottom',\n    'right',\n    'top'\n];\nconst $fafc1a9c7b2bff91$var$SIDES_ROTATION = {\n    left: 0,\n    bottom: Math.PI / 2,\n    right: Math.PI,\n    top: Math.PI * 1.5\n};\nclass $fafc1a9c7b2bff91$var$Eye extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    name = 'Eye';\n    id = 'eye';\n    link = 'https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv';\n    controls = [\n        {\n            key: 'n',\n            label: 'Number of nails per side',\n            defaultValue: 82,\n            type: 'range',\n            attr: {\n                min: 2,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 13,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'angle',\n            label: 'Layer angle',\n            defaultValue: 30,\n            displayValue: ({ angle: angle })=>`${angle}\\xb0`,\n            type: 'range',\n            attr: {\n                min: 0,\n                max: 45,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'color1',\n                    label: 'String #1 color',\n                    defaultValue: '#11e8bd',\n                    type: 'color'\n                },\n                {\n                    key: 'color2',\n                    label: 'String #2 color',\n                    defaultValue: '#6fff52',\n                    type: 'color'\n                },\n                {\n                    key: 'colorPerLayer',\n                    label: 'Color per layer',\n                    defaultValue: false,\n                    type: 'checkbox'\n                }\n            ]\n        }\n    ];\n    setUpDraw() {\n        super.setUpDraw();\n        const { n: n, angle: angle, layers: layers, margin: margin } = this.config;\n        this.maxSize = Math.min(...this.size) - 2 * margin;\n        this.nailSpacing = this.maxSize / (n - 1);\n        this.layerAngle = angle * Math.PI / 180;\n        this.layers = new Array(layers).fill(null).map((_, layerIndex)=>this._getLayerProps(layerIndex));\n    }\n    // Sides: top, right, bottom, left\n    getPoint({ index: index, angle: angle, layerStart: layerStart, rotation: rotation }) {\n        const theta = angle + rotation;\n        const point = {\n            x: layerStart.x,\n            y: layerStart.y + this.nailSpacing * index\n        };\n        const pivot = {\n            x: this.center[0],\n            y: this.center[1]\n        };\n        const cosAngle = Math.cos(theta);\n        const sinAngle = Math.sin(theta);\n        const position = [\n            cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x,\n            sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y\n        ];\n        return position;\n    }\n    *drawSide({ side: side, color: color = '#ffffff', angle: angle, size: size, layerStart: layerStart, layerStringCount: layerStringCount }) {\n        const sideIndex = $fafc1a9c7b2bff91$var$SIDES.indexOf(side);\n        const nextSide = $fafc1a9c7b2bff91$var$SIDES[sideIndex === $fafc1a9c7b2bff91$var$SIDES.length - 1 ? 0 : sideIndex + 1];\n        const rotation = $fafc1a9c7b2bff91$var$SIDES_ROTATION[side];\n        const nextSideRotation = $fafc1a9c7b2bff91$var$SIDES_ROTATION[nextSide];\n        const sideProps = {\n            layerStringCount: layerStringCount,\n            size: size,\n            layerStart: layerStart,\n            angle: angle\n        };\n        this.renderer.setColor(color);\n        for(let i = 0; i <= layerStringCount; i++){\n            this.renderer.renderLines(this.getPoint({\n                side: side,\n                index: i,\n                rotation: rotation,\n                ...sideProps\n            }), this.getPoint({\n                side: nextSide,\n                index: i,\n                rotation: nextSideRotation,\n                ...sideProps\n            }));\n            yield i;\n        }\n    }\n    _getLayerProps(layerIndex) {\n        const colors = this._getLayerColors(layerIndex);\n        const layerAngle = this.layerAngle * layerIndex;\n        const layerSize = this.maxSize / Math.pow(Math.cos(this.layerAngle) + Math.sin(this.layerAngle), layerIndex);\n        const layerStart = {\n            x: this.center[0] - layerSize / 2,\n            y: this.center[1] - layerSize / 2\n        };\n        const layerStringCount = Math.floor(layerSize / this.nailSpacing);\n        return {\n            colors: colors,\n            layerAngle: layerAngle,\n            layerSize: layerSize,\n            layerStart: layerStart,\n            layerStringCount: layerStringCount\n        };\n    }\n    _getLayerColors(layerIndex) {\n        const { color1: color1, color2: color2, colorPerLayer: colorPerLayer } = this.config;\n        if (colorPerLayer) {\n            const layerColor = layerIndex % 2 ? color1 : color2;\n            return [\n                layerColor,\n                layerColor,\n                layerColor,\n                layerColor\n            ];\n        } else return [\n            color2,\n            color1,\n            color2,\n            color1\n        ];\n    }\n    *drawLayer(layerIndex) {\n        const { colors: colors, layerAngle: layerAngle, layerSize: layerSize, layerStart: layerStart, layerStringCount: layerStringCount } = this.layers[layerIndex];\n        for(let i = 0; i < $fafc1a9c7b2bff91$var$SIDES.length; i++)yield* this.drawSide({\n            color: colors[i],\n            side: $fafc1a9c7b2bff91$var$SIDES_ORDER[i],\n            angle: layerAngle,\n            size: layerSize,\n            layerStart: layerStart,\n            layerStringCount: layerStringCount\n        });\n    }\n    *generateStrings() {\n        const { layers: layers } = this.config;\n        for(let layer = layers - 1; layer >= 0; layer--)yield* this.drawLayer(layer);\n    }\n    getStepCount() {\n        let count = 0;\n        const { layers: layers, angle: angle, n: n, margin: margin } = this.config;\n        const layerAngle = angle * Math.PI / 180;\n        const maxSize = Math.min(...this.renderer.getSize()) - 2 * margin;\n        const nailSpacing = maxSize / (n - 1);\n        for(let layer = 0; layer < layers; layer++){\n            const layerSize = maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n            count += 4 * (Math.floor(layerSize / nailSpacing) + 1);\n        }\n        return count;\n    }\n    drawNails() {\n        const { layers: layers } = this.config;\n        for(let layer = layers - 1; layer >= 0; layer--){\n            const { layerAngle: angle, layerSize: size, layerStart: layerStart, layerStringCount: layerStringCount } = this.layers[layer];\n            for(let s = 0; s < $fafc1a9c7b2bff91$var$SIDES.length; s++){\n                const sideOrder = $fafc1a9c7b2bff91$var$SIDES_ORDER[s];\n                const rotation = $fafc1a9c7b2bff91$var$SIDES_ROTATION[sideOrder];\n                for(let i = 0; i <= layerStringCount; i++){\n                    const sideProps = {\n                        layerStringCount: layerStringCount,\n                        size: size,\n                        layerStart: layerStart,\n                        angle: angle\n                    };\n                    this.nails.addNail({\n                        point: this.getPoint({\n                            sideOrder: sideOrder,\n                            index: i,\n                            rotation: rotation,\n                            ...sideProps\n                        }),\n                        number: `${layer}_${s}_${i}`\n                    });\n                }\n            }\n        }\n    }\n    static thumbnailConfig = {\n        n: 25,\n        layers: 7\n    };\n}\nvar $fafc1a9c7b2bff91$export$2e2bcd8739ae039 = $fafc1a9c7b2bff91$var$Eye;\n\n\n\n\n\nclass $61558fe3531b2134$export$2e2bcd8739ae039 extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    name = 'Star';\n    id = 'star';\n    link = 'https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj';\n    controls = [\n        {\n            key: 'sides',\n            label: 'Sides',\n            defaultValue: 3,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 20,\n                step: 1\n            }\n        },\n        {\n            key: 'sideNails',\n            label: 'Nails per side',\n            defaultValue: 40,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 200,\n                step: 1\n            }\n        },\n        {\n            key: 'ringSize',\n            label: 'Outer ring size',\n            defaultValue: 0.1,\n            type: 'range',\n            attr: {\n                min: 0,\n                max: 0.5,\n                step: ({ config: { sideNails: sideNails, sides: sides } })=>1 / (sideNails * sides)\n            },\n            displayValue: ({ sideNails: sideNails, sides: sides, ringSize: ringSize })=>Math.floor(ringSize * sideNails * sides)\n        },\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).distortionConfig,\n        {\n            key: 'colorGroup',\n            label: 'Color',\n            type: 'group',\n            children: [\n                {\n                    key: 'innerColor',\n                    label: 'Star color',\n                    defaultValue: '#2ec0ff',\n                    type: 'color'\n                },\n                {\n                    key: 'outterColor',\n                    label: 'Outter color',\n                    defaultValue: '#2a82c6',\n                    type: 'color'\n                },\n                {\n                    key: 'ringColor',\n                    label: 'Ring color',\n                    defaultValue: '#2ec0ff',\n                    type: 'color'\n                }\n            ]\n        }\n    ];\n    get n() {\n        if (!this._n) {\n            const { n: n, sides: sides } = this.config;\n            const extraNails = n % sides;\n            this._n = n - extraNails;\n        }\n        return this._n;\n    }\n    setUpDraw() {\n        this._n = null;\n        super.setUpDraw();\n        const { sides: sides, rotation: rotation, distortion: distortion, sideNails: sideNails, margin: margin = 0 } = this.config;\n        const circleConfig = {\n            size: this.size,\n            n: sideNails * sides,\n            margin: margin,\n            rotation: rotation,\n            distortion: distortion\n        };\n        if (this.circle) this.circle.setConfig(circleConfig);\n        else this.circle = new (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039)(circleConfig);\n        this.sideAngle = Math.PI * 2 / sides;\n        this.nailSpacing = this.circle.radius / sideNails;\n        this.starCenterStart = sideNails % 1 * this.nailSpacing;\n        this.sides = new Array(sides).fill(null).map((_, side)=>{\n            const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n            const circlePointsStart = side * sideNails;\n            return {\n                sinSideAngle: Math.sin(sideAngle),\n                cosSideAngle: Math.cos(sideAngle),\n                circlePointsStart: circlePointsStart,\n                circlePointsEnd: circlePointsStart + sideNails\n            };\n        });\n    }\n    getStarPoint({ side: side, sideIndex: sideIndex }) {\n        const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n        const { sinSideAngle: sinSideAngle, cosSideAngle: cosSideAngle } = this.sides[side];\n        const [centerX, centerY] = this.circle.center;\n        return [\n            centerX + sinSideAngle * radius,\n            centerY + cosSideAngle * radius\n        ];\n    }\n    getArcPoint({ side: side, sideIndex: sideIndex }) {\n        return this.circle.getPoint(side * this.config.sideNails + sideIndex);\n    }\n    *generateStarPoints({ reverseOrder: reverseOrder = false } = {}) {\n        const { sides: sides, sideNails: sideNails } = this.config;\n        for(let side = 0; side < sides; side++){\n            const prevSide = side === 0 ? sides - 1 : side - 1;\n            for(let i = 0; i < sideNails; i++){\n                const sideIndex = reverseOrder ? sideNails - i : i;\n                yield {\n                    side: side,\n                    prevSide: prevSide,\n                    sideIndex: sideIndex,\n                    point: this.getStarPoint({\n                        side: side,\n                        sideIndex: sideIndex\n                    })\n                };\n            }\n        }\n    }\n    *drawStar() {\n        const { innerColor: innerColor, sideNails: sideNails, sides: sides } = this.config;\n        this.renderer.setColor(innerColor);\n        let alternate = false;\n        const linesPerRound = sides % 2 ? sides * 2 : sides;\n        const rounds = sides % 2 ? Math.floor(sideNails / 2) : sideNails;\n        let prevPointIndex = 0;\n        let prevPoint = this.getStarPoint({\n            side: 0,\n            sideIndex: prevPointIndex\n        });\n        for(let round = 0; round <= rounds; round++){\n            let side = 0;\n            const linesPerThisRound = linesPerRound - (round === rounds ? sides : 0);\n            for(let i = 0; i < linesPerThisRound; i++){\n                side = side !== sides - 1 ? side + 1 : 0;\n                alternate = !alternate;\n                prevPointIndex = alternate ? sideNails - round : round;\n                const nextPoint = this.getStarPoint({\n                    side: side,\n                    sideIndex: prevPointIndex\n                });\n                this.renderer.renderLines(prevPoint, nextPoint);\n                prevPoint = nextPoint;\n                yield;\n            }\n            prevPointIndex = alternate ? prevPointIndex - 1 : prevPointIndex + 1;\n            const nextPoint = this.getStarPoint({\n                side: 0,\n                sideIndex: prevPointIndex\n            });\n            this.renderer.renderLines(prevPoint, nextPoint);\n            prevPoint = nextPoint;\n        }\n    }\n    *drawCircle() {\n        const { outterColor: outterColor, sides: sides, sideNails: sideNails } = this.config;\n        this.renderer.setColor(outterColor);\n        let prevPoint = this.getStarPoint({\n            side: 0,\n            sideIndex: 0\n        });\n        let alternate = false;\n        let isStar = false;\n        const rounds = sides % 2 ? Math.ceil(sideNails / 2) : sideNails;\n        let side = 0;\n        const linesPerRound = sides % 2 ? sides * 4 : sides * 2;\n        for(let round = 0; round <= rounds; round++){\n            const linesPerThisRound = linesPerRound - (round === rounds ? sides * 2 : 0);\n            for(let i = 0; i < linesPerThisRound; i++){\n                const pointPosition = {\n                    side: side,\n                    sideIndex: alternate ? sideNails - round : round\n                };\n                const nextPoint = isStar ? this.getStarPoint(pointPosition) : this.getArcPoint(pointPosition);\n                this.renderer.renderLines(prevPoint, nextPoint);\n                prevPoint = nextPoint;\n                yield;\n                isStar = !isStar;\n                if (isStar) {\n                    side = side !== sides - 1 ? side + 1 : 0;\n                    alternate = !alternate;\n                }\n            }\n            prevPoint = this.getStarPoint({\n                side: 0,\n                sideIndex: round + 1\n            });\n        }\n    }\n    *generateStrings() {\n        yield* this.drawCircle();\n        const { ringSize: ringSize, ringColor: ringColor } = this.config;\n        if (ringSize !== 0) yield* this.circle.drawRing(this.renderer, {\n            ringSize: ringSize,\n            color: ringColor\n        });\n        yield* this.drawStar();\n    }\n    drawNails() {\n        this.circle.drawNails(this.nails);\n        for (const { point: point, side: side, sideIndex: sideIndex } of this.generateStarPoints())this.nails.addNail({\n            point: point,\n            number: sideIndex ? `${side}_${sideIndex}` : 0\n        });\n        this.circle.drawNails(this.nails);\n    }\n    getStepCount() {\n        const { sides: sides, sideNails: sideNails, ringSize: ringSize } = this.config;\n        const ringCount = ringSize ? sideNails * sides : 0;\n        const starAndCircleCount = 3 * sides * (sideNails + (sides % 2 ? 1 : 0));\n        return starAndCircleCount + ringCount;\n    }\n    static thumbnailConfig = {\n        sideNails: 18\n    };\n}\n\n\n\n\nconst $15aedcdf2bbf23c9$var$LAYER_DEFAULTS = [\n    {\n        size: 0.25,\n        end: 1,\n        color: '#a94fb0'\n    },\n    {\n        size: 0.125,\n        end: 0.888,\n        color: '#ec6ad0'\n    },\n    {\n        size: 0,\n        end: 0.826,\n        color: '#f08ad5',\n        reverse: true\n    }\n];\nclass $15aedcdf2bbf23c9$export$2e2bcd8739ae039 extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    name = 'Assymetry';\n    id = 'assymetry';\n    link = 'https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for';\n    controls = [\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).nailsConfig,\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).distortionConfig,\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: $15aedcdf2bbf23c9$var$LAYER_DEFAULTS.map(({ size: size, end: end, color: color, reverse: reverse }, i)=>{\n                const layer = i + 1;\n                return {\n                    key: `layer${layer}`,\n                    label: `Layer ${layer}`,\n                    type: 'group',\n                    children: [\n                        {\n                            key: `show${layer}`,\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: `size${layer}`,\n                            label: 'Size',\n                            defaultValue: size,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 0.5,\n                                step: ({ config: { n: n } })=>1 / n\n                            },\n                            displayValue: (config, { key: key })=>Math.round(config.n * config[key]),\n                            show: (config)=>config[`show${layer}`]\n                        },\n                        {\n                            key: `end${layer}`,\n                            label: 'End Position',\n                            defaultValue: end,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: ({ config: { n: n } })=>1 / n\n                            },\n                            displayValue: (config, { key: key })=>Math.round(config.n * config[key]),\n                            show: (config)=>config[`show${layer}`]\n                        },\n                        {\n                            key: `color${layer}`,\n                            label: 'Color',\n                            defaultValue: color,\n                            type: 'color',\n                            show: (config)=>config[`show${layer}`]\n                        },\n                        {\n                            key: `reverse${layer}`,\n                            label: 'Reverse',\n                            defaultValue: reverse === true,\n                            type: 'checkbox',\n                            show: (config)=>config[`show${layer}`]\n                        }\n                    ]\n                };\n            })\n        }\n    ];\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n    getSetUp() {\n        const { rotation: rotation, n: n, margin: margin = 0, distortion: distortion } = this.config;\n        const size = this.getSize();\n        const circleConfig = {\n            size: size,\n            n: n,\n            margin: margin,\n            rotation: rotation - 0.25,\n            distortion: distortion\n        };\n        let circle;\n        if (this.circle) {\n            circle = this.circle;\n            this.circle.setConfig(circleConfig);\n        } else circle = new (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039)(circleConfig);\n        let lineSpacing = circle.indexAngle * circle.radius;\n        const lineNailCount = Math.floor(circle.radius / lineSpacing) - 1;\n        lineSpacing += (circle.radius - lineSpacing * lineNailCount) / lineNailCount;\n        const firstCirclePoint = circle.getPoint(0);\n        const totalNailCount = lineNailCount + n;\n        const totalIndexCount = totalNailCount + lineNailCount;\n        const layers = new Array(3).fill(null).map((_, i)=>getLayer.call(this, i + 1)).filter(({ enable: enable })=>enable);\n        return {\n            circle: circle,\n            lineSpacing: lineSpacing,\n            lineNailCount: lineNailCount,\n            firstCirclePoint: firstCirclePoint,\n            layers: layers,\n            totalNailCount: totalNailCount,\n            totalIndexCount: totalIndexCount\n        };\n        function getLayer(layerIndex) {\n            const size = Math.round(n * this.config['size' + layerIndex]) + lineNailCount;\n            return {\n                size: size,\n                endIndex: Math.round(this.config['end' + layerIndex] * (totalNailCount + lineNailCount)) - size,\n                color: this.config['color' + layerIndex],\n                enable: this.config['show' + layerIndex],\n                isReverse: this.config['reverse' + layerIndex]\n            };\n        }\n    }\n    /**\n   * Returns the position of a point on the line\n   * @param {index of the point in the circle, 0 is the center} index\n   */ getPoint(index) {\n        if (index < this.lineNailCount || index > this.totalNailCount) {\n            const linePosition = index < this.lineNailCount ? this.lineNailCount - index : index - this.totalNailCount;\n            const indexLength = linePosition * this.lineSpacing;\n            return [\n                this.firstCirclePoint[0] - indexLength * Math.sin(this.circle.rotationAngle),\n                this.firstCirclePoint[1] - indexLength * Math.cos(this.circle.rotationAngle)\n            ];\n        } else {\n            const circleIndex = index - this.lineNailCount;\n            return this.circle.getPoint(circleIndex);\n        }\n    }\n    *drawCircle({ endIndex: endIndex, color: color, isReverse: isReverse, size: size }) {\n        let prevPoint;\n        let prevPointIndex;\n        let isPrevSide = false;\n        this.renderer.setColor(color);\n        const self = this;\n        const advance = isReverse ? -1 : 1;\n        for(let index = 0; index <= endIndex; index++){\n            const startPoint = prevPoint ?? this.getPoint(getPointIndex(index));\n            const positions = [];\n            if (prevPoint) positions.push(this.getPoint(prevPointIndex + advance));\n            prevPointIndex = getPointIndex(isPrevSide ? index : index + size);\n            positions.push(prevPoint = this.getPoint(prevPointIndex));\n            this.renderer.renderLines(startPoint, ...positions);\n            yield;\n            isPrevSide = !isPrevSide;\n        }\n        function getPointIndex(index) {\n            return isReverse ? self.totalIndexCount - index : index;\n        }\n    }\n    *generateStrings() {\n        for (const layer of this.layers)yield* this.drawCircle(layer);\n    }\n    drawNails() {\n        this.circle.drawNails(this.nails, {\n            nailsNumberStart: this.lineNailCount\n        });\n        for(let i = 0; i < this.lineNailCount; i++)this.nails.addNail({\n            point: this.getPoint(i),\n            number: i\n        });\n    }\n    getStepCount() {\n        const { layers: layers } = this.getSetUp();\n        return layers.reduce((stepCount, layer)=>stepCount + layer.endIndex + 1, 0);\n    }\n    static thumbnailConfig = {\n        n: 50\n    };\n}\n\n\n\n\nclass $040f578548ad3f1c$export$2e2bcd8739ae039 extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    name = 'Freestyle';\n    id = 'freestyle';\n    link = 'https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for';\n    controls = [\n        {\n            key: 'n',\n            label: 'Circle nails',\n            defaultValue: 80,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'minNailDistance',\n            label: 'Min nail distance',\n            defaultValue: 20,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 300,\n                step: 1\n            }\n        },\n        {\n            key: 'color',\n            label: 'Color',\n            defaultValue: '#ec6ad0',\n            type: 'color'\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            type: 'group',\n            children: [\n                {\n                    key: 'layer1',\n                    label: 'Layer 1',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show1',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius1',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({ show1: show1 })=>show1\n                        },\n                        {\n                            key: 'x1',\n                            label: 'Position X',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({ show1: show1 })=>show1\n                        },\n                        {\n                            key: 'y1',\n                            label: 'Position Y',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({ show1: show1 })=>show1\n                        },\n                        {\n                            ...(0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n                            key: 'rotation1',\n                            show: ({ show1: show1 })=>show1\n                        },\n                        {\n                            key: 'reverse1',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({ show1: show1 })=>show1\n                        }\n                    ]\n                },\n                {\n                    key: 'layer2',\n                    label: 'Layer 2',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show2',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius2',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({ show2: show2 })=>show2\n                        },\n                        {\n                            key: 'x2',\n                            label: 'Position X',\n                            defaultValue: 0,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({ show2: show2 })=>show2\n                        },\n                        {\n                            key: 'y2',\n                            label: 'Position Y',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({ show2: show2 })=>show2\n                        },\n                        {\n                            ...(0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n                            key: 'rotation2',\n                            show: ({ show2: show2 })=>show2\n                        },\n                        {\n                            key: 'reverse2',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({ show2: show2 })=>show2\n                        }\n                    ]\n                },\n                {\n                    key: 'layer3',\n                    label: 'Layer 3',\n                    type: 'group',\n                    children: [\n                        {\n                            key: 'show3',\n                            label: 'Enable',\n                            defaultValue: true,\n                            type: 'checkbox'\n                        },\n                        {\n                            key: 'radius3',\n                            label: 'Radius',\n                            defaultValue: 0.5,\n                            type: 'range',\n                            attr: {\n                                min: 0.01,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({ show3: show3 })=>show3\n                        },\n                        {\n                            key: 'x3',\n                            label: 'Position X',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({ show3: show3 })=>show3\n                        },\n                        {\n                            key: 'y3',\n                            label: 'Position Y',\n                            defaultValue: 1,\n                            type: 'range',\n                            attr: {\n                                min: 0,\n                                max: 1,\n                                step: 0.01\n                            },\n                            show: ({ show3: show3 })=>show3\n                        },\n                        {\n                            ...(0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n                            key: 'rotation3',\n                            show: ({ show3: show3 })=>show3\n                        },\n                        {\n                            key: 'reverse3',\n                            label: 'Reverse',\n                            defaultValue: false,\n                            type: 'checkbox',\n                            show: ({ show3: show3 })=>show3\n                        }\n                    ]\n                }\n            ]\n        }\n    ];\n    setUpDraw() {\n        super.setUpDraw();\n        Object.assign(this, this.getSetUp());\n    }\n    getSetUp() {\n        const { n: n, margin: margin = 0, minNailDistance: minNailDistance } = this.config;\n        const size = this.getSize();\n        const maxRadius = Math.min(...size.map((v)=>v - 2 * margin)) / 2;\n        const layers = new Array(3).fill(null).map((_, i)=>getLayer.call(this, i + 1)).filter(({ enable: enable })=>enable);\n        const maxShapeNailsCount = Math.max(...layers.map(({ circle: circle })=>circle.config.n));\n        return {\n            layers: layers,\n            maxShapeNailsCount: maxShapeNailsCount\n        };\n        function getLayer(layerIndex) {\n            const prop = (prop)=>this.config[prop + layerIndex];\n            const props = {\n                enable: prop('show'),\n                isReverse: prop('reverse'),\n                position: [\n                    prop('x'),\n                    prop('y')\n                ],\n                radius: maxRadius * prop('radius'),\n                rotation: prop('rotation')\n            };\n            const circumsference = Math.PI * 2 * props.radius;\n            const circleNails = Math.min(n, Math.floor(circumsference / minNailDistance));\n            const circle = new (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039)({\n                radius: props.radius,\n                center: props.position.map((v, i)=>props.radius + margin + (size[i] - (props.radius + margin) * 2) * v),\n                n: circleNails,\n                rotation: props.rotation,\n                reverse: props.isReverse\n            });\n            return {\n                circle: circle,\n                ...props\n            };\n        }\n    }\n    getPoint(layer, index) {\n        const { circle: circle } = layer;\n        let circleIndex = Math.round(index * circle.config.n / this.maxShapeNailsCount);\n        return circle.getPoint(circleIndex);\n    }\n    *generateStrings() {\n        const { n: n, color: color } = this.config;\n        this.renderer.setColor(color);\n        let prevCirclePoint;\n        for(let i = 0; i < this.maxShapeNailsCount; i++)for(let layerIndex = 0; layerIndex < this.layers.length; layerIndex++){\n            const layer = this.layers[layerIndex];\n            const startPoint = prevCirclePoint ?? this.getPoint(layer, i);\n            const positions = [];\n            if (layerIndex === 0 && i) positions.push(this.getPoint(layer, i));\n            let nextLayerIndex = layerIndex + 1;\n            if (nextLayerIndex === this.layers.length) nextLayerIndex = 0;\n            prevCirclePoint = this.getPoint(this.layers[nextLayerIndex], i);\n            this.renderer.renderLines(startPoint, prevCirclePoint);\n            yield;\n        }\n    }\n    drawNails() {\n        const n = this.config;\n        this.layers.forEach(({ circle: circle }, layerIndex)=>circle.drawNails(this.nails, {\n                getNumber: (i)=>`${layerIndex + 1}_${i + 1}`\n            }));\n    }\n    getStepCount() {\n        const { layers: layers, maxShapeNailsCount: maxShapeNailsCount } = this.getSetUp();\n        return layers.length * maxShapeNailsCount - 1;\n    }\n    static thumbnailConfig = {\n        minNailDistance: 3\n    };\n}\n\n\n\n\n\nclass $c8513f4883e70704$export$2e2bcd8739ae039 {\n    constructor(config){\n        this.setConfig(config);\n    }\n    setConfig(config) {\n        const serializedConfig = this._serializeConfig(config);\n        if (serializedConfig !== this.serializedConfig) {\n            const { rotation: rotation = 0, sides: sideCount } = this.config = config;\n            const sideAngle = (0, $86f1de0f012f559c$export$f4644083ce95e7e3) / sideCount;\n            const sides = new Array(sideCount).fill(null).map((_, i)=>{\n                const angle = sideAngle * i + (0, $86f1de0f012f559c$export$f4644083ce95e7e3) * rotation;\n                const radiusAngle = -sideAngle * (i - 0.5) - (0, $86f1de0f012f559c$export$f4644083ce95e7e3) * rotation;\n                return {\n                    cos: Math.cos(angle),\n                    sin: Math.sin(angle),\n                    center: {\n                        cos: Math.cos(radiusAngle),\n                        sin: Math.sin(radiusAngle)\n                    }\n                };\n            });\n            Object.assign(this, {\n                sides: sides,\n                sideCount: sideCount,\n                sideAngle: sideAngle\n            });\n            if (this.points) this.points.clear();\n            else this.points = new Map();\n            Object.assign(this, this._getProps());\n            if (config.fitSize) {\n                Object.assign(this, this._getProps(this.getSizeAndCenter()));\n                this.points.clear();\n            }\n        }\n    }\n    getSizeAndCenter() {\n        const { size: configSize, margin: margin } = this.config;\n        const boundingRect = this.getBoundingRect();\n        const scale = Math.min((configSize[0] - 2 * margin) / boundingRect.width, (configSize[1] - 2 * margin) / boundingRect.height);\n        const size = configSize.map((v)=>v * scale);\n        const center = [\n            this.center[0] - scale * (boundingRect.left - configSize[0] + boundingRect.right) / 2,\n            this.center[1] - scale * (boundingRect.top - configSize[1] + boundingRect.bottom) / 2\n        ];\n        this.points.clear();\n        return {\n            size: size,\n            center: center\n        };\n    }\n    _getProps(overrideConfig) {\n        const { nailsSpacing: nailsSpacing, size: size, margin: margin = 0, center: configCenter } = Object.assign({}, this.config, overrideConfig);\n        const center = configCenter ?? this.config.size.map((v)=>v / 2);\n        const radius = Math.min(...size) / 2 - margin;\n        const sideSize = 2 * radius * Math.sin(this.sideAngle / 2);\n        const start = [\n            radius * Math.sin(this.sideAngle / 2),\n            radius * Math.cos(this.sideAngle / 2)\n        ];\n        const nailsDistance = sideSize * nailsSpacing;\n        const radiusNailsCount = Math.floor(radius / nailsDistance);\n        const radiusNailsDistance = radius / radiusNailsCount;\n        return {\n            nailsSpacing: nailsSpacing,\n            nailsPerSide: 1 / nailsSpacing,\n            center: center,\n            radius: radius,\n            sideSize: sideSize,\n            start: start,\n            nailsDistance: nailsDistance,\n            radiusNailsCount: radiusNailsCount,\n            radiusNailsDistance: radiusNailsDistance\n        };\n    }\n    _serializeConfig({ size: size, margin: margin = 0, rotation: rotation = 0, center: center, sides: sides }) {\n        return [\n            size?.join(','),\n            center?.join(','),\n            sides,\n            margin,\n            rotation\n        ].join('_');\n    }\n    getSidePoint({ side: side, index: index }) {\n        const pointsMapIndex = [\n            side,\n            index\n        ].join('_');\n        if (this.points.has(pointsMapIndex)) return this.points.get(pointsMapIndex);\n        const startX = this.start[0] - index * this.nailsDistance;\n        const { cos: cos, sin: sin } = this.sides[side];\n        const point = [\n            cos * startX - sin * this.start[1] + this.center[0],\n            sin * startX + cos * this.start[1] + this.center[1]\n        ];\n        this.points.set(pointsMapIndex, point);\n        return point;\n    }\n    getCenterPoint({ side: side, index: index }) {\n        const radius = index * this.radiusNailsDistance;\n        const { sin: sin, cos: cos } = this.sides[side].center;\n        return [\n            this.center[0] + sin * radius,\n            this.center[1] + cos * radius\n        ];\n    }\n    getBoundingRect() {\n        const points = this.sides.map((_, side)=>this.getSidePoint({\n                side: side,\n                index: 0\n            }));\n        const firstPoint = points[0];\n        const boundingRect = points.slice(1).reduce((boundingRect, [x, y])=>({\n                left: Math.min(boundingRect.left, x),\n                right: Math.max(boundingRect.right, x),\n                top: Math.min(boundingRect.top, y),\n                bottom: Math.max(boundingRect.bottom, y)\n            }), {\n            left: firstPoint[0],\n            right: firstPoint[0],\n            top: firstPoint[1],\n            bottom: firstPoint[1]\n        });\n        boundingRect.height = boundingRect.bottom - boundingRect.top;\n        boundingRect.width = boundingRect.right - boundingRect.left;\n        Object.freeze(boundingRect);\n        return boundingRect;\n    }\n    drawNails(nails, { drawCenter: drawCenter = false, drawSides: drawSides = true } = {}) {\n        for(let side = 0; side < this.sideCount; side++){\n            const sideIndexStart = side * this.nailsPerSide;\n            if (drawSides) for(let index = 0; index < this.nailsPerSide; index++)nails.addNail({\n                point: this.getSidePoint({\n                    side: side,\n                    index: index\n                }),\n                number: sideIndexStart + index\n            });\n            if (drawCenter) for(let index = 0; index < this.radiusNailsCount; index++)nails.addNail({\n                point: this.getCenterPoint({\n                    side: side,\n                    index: index\n                }),\n                number: `${side}_${index}`\n            });\n        }\n    }\n}\n\n\n\nconst $c26799ef2d0b57d4$var$COLOR_CONFIG = (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039).getConfig({\n    defaults: {\n        isMultiColor: true,\n        color: '#ff0000',\n        multicolorRange: 1,\n        multicolorStart: 0,\n        multicolorByLightness: true,\n        minLightness: 20,\n        maxLightness: 50\n    },\n    exclude: [\n        'colorCount'\n    ]\n});\nclass $c26799ef2d0b57d4$export$2e2bcd8739ae039 extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    name = 'Polygon';\n    id = 'polygon';\n    controls = [\n        {\n            key: 'sides',\n            label: 'Sides',\n            defaultValue: 5,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 10,\n                step: 1\n            }\n        },\n        {\n            key: 'n',\n            label: 'Nails per side',\n            defaultValue: 60,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 100,\n                step: 1\n            }\n        },\n        {\n            key: 'bezier',\n            label: 'Bezier',\n            defaultValue: 2,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 4,\n                step: 1\n            },\n            show: ({ sides: sides })=>sides > 4\n        },\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n        $c26799ef2d0b57d4$var$COLOR_CONFIG\n    ];\n    defaultValues = {\n        nailsColor: '#5c5c5c',\n        nailRadius: 1\n    };\n    setUpDraw() {\n        super.setUpDraw();\n        const { n: n, rotation: rotation, sides: sides, margin: margin, isMultiColor: isMultiColor } = this.config;\n        const size = this.getSize();\n        const polygonConfig = {\n            sides: sides,\n            rotation: rotation,\n            margin: margin,\n            size: size,\n            nailsSpacing: 1 / n,\n            fitSize: true\n        };\n        if (this.polygon) this.polygon.setConfig(polygonConfig);\n        else this.polygon = new (0, $c8513f4883e70704$export$2e2bcd8739ae039)(polygonConfig);\n        this.color = new (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039)({\n            ...this.config,\n            isMultiColor: isMultiColor,\n            colorCount: sides\n        });\n        if (isMultiColor) this.colorMap = this.color.getColorMap({\n            stepCount: this.getStepCount(),\n            colorCount: sides\n        });\n        else this.colorMap = null;\n    }\n    *generateStrings() {\n        const { sides: sides, bezier: bezier } = this.config;\n        const limitedBezier = Math.min(bezier, Math.ceil(sides / 2) - 1);\n        let step = 0;\n        this.renderer.setColor(this.color.getColor(0));\n        for(let side = 0; side < sides; side++){\n            const nextSide = (side + limitedBezier) % sides;\n            if (this.colorMap) this.renderer.setColor(this.colorMap.get(step));\n            for(let index = 0; index < this.polygon.nailsPerSide; index++){\n                this.renderer.renderLines(this.polygon.getSidePoint({\n                    side: side,\n                    index: index\n                }), this.polygon.getSidePoint({\n                    side: nextSide,\n                    index: index\n                }));\n                yield;\n                step++;\n            }\n        }\n    }\n    getStepCount() {\n        const { sides: sides, n: n } = this.config;\n        return sides * n;\n    }\n    drawNails() {\n        this.polygon.drawNails(this.nails);\n    }\n    static thumbnailConfig = {\n        n: 20\n    };\n}\n\n\n\n\n\n\nconst $ce139c195fafb59f$var$COLOR_CONFIG = (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039).getConfig({\n    defaults: {\n        isMultiColor: true,\n        color: '#29f1ff',\n        multicolorRange: 264,\n        multicolorStart: 53,\n        multicolorByLightness: false,\n        minLightness: 30,\n        maxLightness: 70\n    },\n    exclude: [\n        'colorCount'\n    ]\n});\nclass $ce139c195fafb59f$export$2e2bcd8739ae039 extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    name = 'Flower';\n    id = 'flower';\n    link = 'https://www.sqrt.ch/Buch/fadenmodell4_100.svg';\n    controls = [\n        {\n            key: 'sides',\n            label: 'Sides',\n            defaultValue: 4,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 10,\n                step: 1\n            }\n        },\n        {\n            key: 'n',\n            label: 'Nails per side',\n            defaultValue: 60,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 100,\n                step: 1\n            }\n        },\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 2,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 10,\n                step: 1\n            }\n        },\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n        $ce139c195fafb59f$var$COLOR_CONFIG\n    ];\n    defaultValues = {\n        nailsColor: '#29f1ff',\n        nailRadius: 1,\n        stringWidth: 0.5\n    };\n    setUpDraw() {\n        super.setUpDraw();\n        const { n: n, rotation: rotation, sides: sides, layers: layers, margin: margin, isMultiColor: isMultiColor } = this.config;\n        const size = this.getSize();\n        const layerAngleShift = 1 / (sides * layers);\n        this.polygons = new Array(layers).fill(null).map((_, i)=>{\n            const polygonConfig = {\n                sides: sides,\n                rotation: rotation + i * layerAngleShift,\n                margin: margin,\n                size: size,\n                nailsSpacing: 1 / n\n            };\n            return new (0, $c8513f4883e70704$export$2e2bcd8739ae039)(polygonConfig);\n        });\n        this.color = new (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039)({\n            ...this.config,\n            isMultiColor: isMultiColor,\n            colorCount: layers\n        });\n        if (isMultiColor) this.colorMap = this.color.getColorMap({\n            stepCount: this.getStepCount(),\n            colorCount: layers\n        });\n        else this.colorMap = null;\n    }\n    *generateStrings() {\n        const { sides: sides, layers: layers } = this.config;\n        let step = 0;\n        this.renderer.setColor(this.color.getColor(0));\n        for(let layer = 0; layer < layers; layer++){\n            const polygon = this.polygons[layer];\n            for(let side = 0; side < sides; side++){\n                const leftSide = side === sides - 1 ? 0 : side + 1;\n                for(let index = 0; index <= polygon.nailsPerSide; index++){\n                    if (this.colorMap?.has(step)) this.renderer.setColor(this.colorMap.get(step));\n                    const centerIndexes = this.getCenterIndexes({\n                        polygon: polygon,\n                        sideIndex: index\n                    });\n                    this.renderer.renderLines(polygon.getCenterPoint({\n                        side: side,\n                        index: centerIndexes[0]\n                    }), polygon.getSidePoint({\n                        side: side,\n                        index: index\n                    }), polygon.getCenterPoint({\n                        side: leftSide,\n                        index: centerIndexes[1]\n                    }));\n                    yield;\n                    step++;\n                }\n            }\n        }\n    }\n    getCenterIndexes({ polygon: polygon, sideIndex: sideIndex }) {\n        const extraNailCount = polygon.nailsPerSide - polygon.radiusNailsCount;\n        return [\n            sideIndex < extraNailCount ? -extraNailCount + sideIndex : sideIndex - extraNailCount,\n            polygon.radiusNailsCount - sideIndex\n        ];\n    }\n    getStepCount() {\n        const { sides: sides, n: n, layers: layers } = this.config;\n        return sides * (n + 1) * layers;\n    }\n    drawNails() {\n        this.polygons.forEach((polygon)=>polygon.drawNails(this.nails, {\n                drawCenter: true\n            }));\n    }\n    static thumbnailConfig = {\n        n: 20\n    };\n}\n\n\n\n\n\n\nconst $74a174dcd7bb4c4c$var$COLOR_CONFIG = (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039).getConfig({\n    defaults: {\n        isMultiColor: true,\n        color: '#ffffff',\n        multicolorRange: 133,\n        multicolorStart: 239,\n        multicolorByLightness: false,\n        minLightness: 30,\n        maxLightness: 70,\n        colorCount: 4\n    },\n    exclude: [\n        'repeatColors',\n        'mirrorColors'\n    ]\n});\nclass $74a174dcd7bb4c4c$export$2e2bcd8739ae039 extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    name = 'Maurer Rose';\n    id = 'maurer_rose';\n    link = 'https://blog.glitch.land/en/posts/maurer-rose/';\n    linkText = 'Learn';\n    controls = [\n        {\n            key: 'n',\n            label: 'N',\n            defaultValue: 4,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 12,\n                step: 1\n            },\n            isStructural: true\n        },\n        {\n            key: 'maxSteps',\n            label: 'Max steps',\n            defaultValue: 512,\n            type: 'range',\n            attr: {\n                min: 3,\n                max: 720,\n                step: 1\n            },\n            isStructural: true\n        },\n        {\n            key: 'angle',\n            label: 'Angle',\n            defaultValue: 341,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 720,\n                step: 1\n            },\n            displayValue: ({ angle: angle })=>`${angle}\\xb0`,\n            isStructural: true\n        },\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n        $74a174dcd7bb4c4c$var$COLOR_CONFIG\n    ];\n    resetStructure() {\n        super.resetStructure();\n        if (this.points) this.points.clear();\n        this.calc = null;\n    }\n    setUpDraw() {\n        super.setUpDraw();\n        const { isMultiColor: isMultiColor, colorCount: colorCount } = this.config;\n        if (!this.calc) this.calc = this.getCalc();\n        if (!this.points) this.points = new Map();\n        if (!this.stepCount) this.stepCount = this.getStepCount();\n        this.color = new (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039)({\n            ...this.config,\n            isMultiColor: isMultiColor,\n            colorCount: colorCount\n        });\n        if (isMultiColor) this.colorMap = this.color.getColorMap({\n            stepCount: this.stepCount,\n            colorCount: colorCount\n        });\n        else this.colorMap = null;\n    }\n    getCalc() {\n        const { n: n, angle: angle, rotation: rotation, maxSteps: maxSteps } = this.config;\n        const size = this.getSize();\n        return {\n            n: n,\n            angleRadians: (0, $86f1de0f012f559c$export$f4644083ce95e7e3) * angle / maxSteps,\n            radius: Math.min(...size) / 2,\n            currentSize: size,\n            rotationAngle: -Math.PI * 2 * rotation\n        };\n    }\n    getPoint(index) {\n        if (this.points.has(index)) return this.points.get(index);\n        const k = index * this.calc.angleRadians;\n        const r = this.calc.radius * Math.sin(this.calc.n * k);\n        const point = [\n            this.center[0] - r * Math.cos(k - this.calc.rotationAngle),\n            this.center[1] - r * Math.sin(k - this.calc.rotationAngle)\n        ];\n        this.points.set(index, point);\n        return point;\n    }\n    *generatePoints() {\n        const count = this.stepCount;\n        for(let i = 0; i < count + 1; i++)yield {\n            point: this.getPoint(i),\n            index: i\n        };\n    }\n    *generateStrings() {\n        const points = this.generatePoints();\n        let prevPoint;\n        this.renderer.setColor(this.color.getColor(0));\n        for (const { point: point, index: index } of points){\n            if (!prevPoint) {\n                prevPoint = point;\n                continue;\n            }\n            if (this.colorMap) {\n                const stepColor = this.colorMap.get(index);\n                if (stepColor) this.renderer.setColor(stepColor);\n            }\n            this.renderer.renderLines(prevPoint, point);\n            prevPoint = point;\n            yield;\n        }\n    }\n    getStepCount() {\n        if (this.stepCount) return this.stepCount;\n        const { maxSteps: maxSteps, angle: angle, n: n } = this.config;\n        const angleGcd = (0, $86f1de0f012f559c$export$f81847884871263e)(maxSteps, angle);\n        let steps = maxSteps / angleGcd;\n        if (!(steps % 2) && n % 2) steps /= 2;\n        return Math.round(steps);\n    }\n    drawNails() {\n        const points = this.generatePoints();\n        for (const { point: point, index: index } of points)this.nails.addNail({\n            point: point,\n            number: index\n        });\n    }\n    static thumbnailConfig = {\n        maxSteps: 160,\n        angle: 213\n    };\n}\n\n\n\n\n\n\n\nconst $efda32ed6e872237$var$COLOR_CONFIG = (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039).getConfig({\n    defaults: {\n        isMultiColor: true,\n        color: '#29f1ff',\n        multicolorRange: 43,\n        multicolorStart: 25,\n        multicolorByLightness: true,\n        minLightness: 40,\n        maxLightness: 95,\n        colorCount: 3,\n        repeatColors: true,\n        saturation: 83,\n        reverseColors: true\n    },\n    customControls: [\n        {\n            key: 'colorPerLevel',\n            label: 'Color per level',\n            defaultValue: true,\n            type: 'checkbox'\n        }\n    ]\n});\nconst $efda32ed6e872237$var$ANGLE = -(0, $86f1de0f012f559c$export$f4644083ce95e7e3) / 6; // The angle of a equilateral triangle;\nconst $efda32ed6e872237$var$SIDE_ANGLES = new Array(6).fill(null).map((_, i)=>Math.PI / 2 + $efda32ed6e872237$var$ANGLE * i);\nclass $efda32ed6e872237$export$2e2bcd8739ae039 extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    name = 'Flower of Life';\n    id = 'flower_of_life';\n    link = 'https://www.reddit.com/r/psychedelicartwork/comments/mk97gi/rainbow_flower_of_life_uv_reactive_string_art/';\n    controls = [\n        {\n            key: 'levels',\n            label: 'Levels',\n            defaultValue: 3,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 10,\n                step: 1\n            },\n            isStructural: true\n        },\n        {\n            key: 'density',\n            label: 'Density',\n            defaultValue: 10,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 50,\n                step: 1\n            },\n            isStructural: true\n        },\n        {\n            key: 'globalRotation',\n            label: 'Rotation',\n            defaultValue: 0,\n            type: 'range',\n            attr: {\n                min: 0,\n                max: 30,\n                step: 1\n            },\n            displayValue: (config, { key: key })=>`${config[key]}\\xb0`,\n            isStructural: true,\n            affectsStepCount: false\n        },\n        {\n            key: 'fillGroup',\n            label: 'Fill',\n            type: 'group',\n            children: [\n                {\n                    key: 'fill',\n                    label: 'Show fill',\n                    defaultValue: true,\n                    type: 'checkbox',\n                    isStructural: true\n                },\n                {\n                    key: 'fillColor',\n                    label: 'Fill color',\n                    defaultValue: '#292e29',\n                    type: 'color',\n                    show: ({ fill: fill })=>fill\n                }\n            ]\n        },\n        {\n            key: 'ringGroup',\n            label: 'Ring',\n            type: 'group',\n            children: [\n                {\n                    key: 'renderRing',\n                    label: 'Show outer ring',\n                    type: 'checkbox',\n                    defaultValue: true,\n                    isStructural: true\n                },\n                {\n                    key: 'ringNailCount',\n                    label: 'Ring nail count',\n                    defaultValue: 144,\n                    type: 'range',\n                    attr: {\n                        min: 3,\n                        max: 360,\n                        step: 1\n                    },\n                    show: ({ renderRing: renderRing })=>renderRing,\n                    isStructural: true\n                },\n                {\n                    key: 'ringSize',\n                    label: 'Outer ring size',\n                    defaultValue: 0.23,\n                    type: 'range',\n                    attr: {\n                        min: 0,\n                        max: 0.5,\n                        step: 0.01\n                    },\n                    show: ({ renderRing: renderRing })=>renderRing,\n                    displayValue: ({ ringSize: ringSize })=>`${Math.round(100 * ringSize)}%`,\n                    isStructural: true\n                },\n                {\n                    key: 'ringPadding',\n                    label: 'Ring padding',\n                    defaultValue: 0.06,\n                    type: 'range',\n                    attr: {\n                        min: 0,\n                        max: 0.5,\n                        step: 0.01\n                    },\n                    show: ({ renderRing: renderRing })=>renderRing,\n                    isStructural: true,\n                    displayValue: ({ ringPadding: ringPadding })=>`${Math.round(100 * ringPadding)}%`\n                },\n                {\n                    key: 'ringColor',\n                    label: 'Ring color',\n                    defaultValue: '#e8b564',\n                    type: 'color',\n                    show: ({ renderRing: renderRing })=>renderRing\n                }\n            ]\n        },\n        {\n            key: 'renderTriangles',\n            label: 'Show triangles',\n            defaultValue: true,\n            type: 'checkbox',\n            isStructural: true\n        },\n        {\n            key: 'renderCaps',\n            label: 'Show caps',\n            defaultValue: true,\n            type: 'checkbox',\n            show: ({ renderTriangles: renderTriangles })=>renderTriangles,\n            isStructural: true\n        },\n        $efda32ed6e872237$var$COLOR_CONFIG\n    ];\n    defaultValues = {\n        nailsColor: '#474747'\n    };\n    getCalc() {\n        const { levels: levels, density: density, margin: margin, globalRotation: globalRotation, renderCaps: renderCaps, fill: fill, renderTriangles: renderTriangles, renderRing: renderRing, ringNailCount: ringNailCount, ringSize: ringSize, ringPadding: ringPadding } = this.config;\n        const globalRotationRadians = globalRotation * Math.PI / 180 + Math.PI / 6;\n        const radius = renderRing ? Math.min(...(this.size ?? this.getSize()).map((v)=>v / 2 - margin)) : null;\n        const ringDistance = renderRing ? Math.floor(ringSize * ringNailCount / 2) : 0; // The number of nails to count for strings in the outer ring\n        const ringWidth = renderRing ? radius * (1 - Math.cos((0, $86f1de0f012f559c$export$f4644083ce95e7e3) * (ringDistance / ringNailCount) / 2)) : 0;\n        const polygon = new (0, $c8513f4883e70704$export$2e2bcd8739ae039)({\n            sides: 6,\n            size: this.getSize(),\n            margin: margin + ringWidth + (renderRing && ringSize ? ringPadding * radius : 0),\n            rotation: globalRotationRadians,\n            fitSize: false\n        });\n        const edgeSize = polygon.sideSize / levels;\n        const nailsLength = edgeSize / (2 * Math.cos(Math.PI / 6));\n        const countPerLevelSide = new Array(levels + (renderCaps ? 1 : 0)).fill(null).map((_, level)=>level * 2 + 1);\n        return {\n            edgeSize: edgeSize,\n            triangleHeight: edgeSize * Math.sqrt(3) / 2,\n            nailsLength: nailsLength,\n            triangleCenterDistance: edgeSize / 2,\n            nailDistance: nailsLength / density,\n            triangleCount: 6 * levels ** 2,\n            countPerLevelSide: countPerLevelSide,\n            globalRotationRadians: globalRotationRadians,\n            fill: fill,\n            renderTriangles: renderTriangles,\n            renderCaps: renderCaps,\n            ringNailCount: ringNailCount,\n            radius: radius\n        };\n    }\n    resetStructure() {\n        super.resetStructure();\n        this.points = null;\n        this.calc = null;\n    }\n    setUpDraw() {\n        super.setUpDraw();\n        const { isMultiColor: isMultiColor, levels: levels, colorPerLevel: colorPerLevel, colorCount: colorCount, renderRing: renderRing, ringSize: ringSize, ...config } = this.config;\n        if (!this.calc) this.calc = this.getCalc();\n        if (renderRing && ringSize) {\n            const circleConfig = {\n                size: this.size,\n                n: this.calc.ringNailCount,\n                margin: config.margin,\n                rotation: config.globalRotation\n            };\n            if (this.circle) this.circle.setConfig(circleConfig);\n            else this.circle = new (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039)(circleConfig);\n        } else this.circle = null;\n        if (!this.points) this.points = this.getPoints();\n        if (!this.stepCount) this.stepCount = this.getStepCount(this.calc);\n        const realColorCount = isMultiColor ? colorPerLevel ? levels : Math.min(colorCount, levels) : 1;\n        this.color = new (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039)({\n            ...config,\n            isMultiColor: isMultiColor,\n            colorCount: realColorCount\n        });\n        if (isMultiColor) this.colorMap = this.color.getColorMap({\n            stepCount: realColorCount,\n            colorCount: realColorCount\n        });\n        else this.colorMap = null;\n    }\n    getTrianglePoints({ center: center, rotation: rotation, isCapLevel: isCapLevel, triangleIndexInSide: triangleIndexInSide }) {\n        let missingSide;\n        if (isCapLevel) {\n            const triangleIndex = (triangleIndexInSide + 2) % 3;\n            missingSide = this._getNextIndexInTriangle(triangleIndex);\n        }\n        // For each side of the triangle, the first point is the center of the triangle:\n        const trianglePoints = new Array(3).fill(null).map((_, i)=>i === missingSide ? [] : [\n                center\n            ]);\n        for(let side = 0; side < 3; side++){\n            if (isCapLevel && side === missingSide) continue;\n            const sideAngle = rotation + side * ((0, $86f1de0f012f559c$export$f4644083ce95e7e3) / 3);\n            const triangleSidePoints = trianglePoints[side];\n            const cosSideAngle = Math.cos(sideAngle);\n            const sinSideAngle = Math.sin(sideAngle);\n            for(let n = 1; n <= this.config.density; n++){\n                const nNailDistance = n * this.calc.nailDistance;\n                triangleSidePoints.push([\n                    center[0] + nNailDistance * cosSideAngle,\n                    center[1] + nNailDistance * sinSideAngle\n                ]);\n            }\n        }\n        return trianglePoints;\n    }\n    getPoints() {\n        if (this.points) return this.points;\n        const { levels: levels, renderCaps: renderCaps } = this.config;\n        const largeDistance = this.calc.nailsLength;\n        const smallDistance = this.calc.triangleHeight - largeDistance;\n        const levelsPoints = [];\n        const levelsCount = renderCaps ? levels + 1 : levels;\n        for(let level = 0; level < levelsCount; level++){\n            const isCapLevel = renderCaps && level === levels;\n            const levelTrianglesPoints = [];\n            levelsPoints.push(levelTrianglesPoints);\n            const levelSideTriangleCount = this.calc.countPerLevelSide[level];\n            // Caching distances to avoid repeated calculations for each side:\n            const levelPositions = new Array(levelSideTriangleCount).fill(null).map((_, n)=>{\n                const isFlipped = n % 2 === 0;\n                const trianglePosition = [\n                    this.calc.triangleCenterDistance * (n - level),\n                    level * this.calc.triangleHeight + (isFlipped ? largeDistance : smallDistance)\n                ];\n                return {\n                    rotation: Math.atan(trianglePosition[0] / trianglePosition[1]),\n                    distanceFromCenter: Math.sqrt(trianglePosition[0] ** 2 + trianglePosition[1] ** 2)\n                };\n            });\n            for(let side = 0; side < 6; side++){\n                const sideRotation = $efda32ed6e872237$var$SIDE_ANGLES[side];\n                for(let n = 0; n < levelSideTriangleCount; n++){\n                    if (isCapLevel && n % 2 === 0) {\n                        // Cap triangles are only odd indexes\n                        levelTrianglesPoints.push(null);\n                        continue;\n                    }\n                    const { distanceFromCenter: distanceFromCenter, rotation: rotation } = levelPositions[n];\n                    const triangleCenterAngle = sideRotation - rotation - this.calc.globalRotationRadians;\n                    const rotatedTrianglePosition = [\n                        this.center[0] + distanceFromCenter * Math.cos(triangleCenterAngle),\n                        this.center[1] - distanceFromCenter * Math.sin(triangleCenterAngle)\n                    ];\n                    const trianglePoints = this.getTrianglePoints({\n                        center: rotatedTrianglePosition,\n                        rotation: sideRotation + side * (0, $86f1de0f012f559c$export$f4644083ce95e7e3) / 3 - n * $efda32ed6e872237$var$ANGLE + this.calc.globalRotationRadians,\n                        isCapLevel: isCapLevel,\n                        triangleIndexInSide: n\n                    });\n                    levelTrianglesPoints.push(trianglePoints);\n                }\n            }\n        }\n        return levelsPoints;\n    }\n    *generateTriangleStrings({ points: points, level: level, indexInSide: indexInSide }) {\n        this.renderer.setColor(this.color.getColor(level));\n        const { density: density, levels: levels } = this.config;\n        const isCapLevel = level === levels;\n        const initialSide = isCapLevel ? this._getNextIndexInTriangle(indexInSide % 3) : 0;\n        const lastSide = isCapLevel ? initialSide : 2;\n        const lastIndex = isCapLevel ? density : density - 1;\n        for(let side = initialSide; side <= lastSide; side++){\n            const nextSide = this._getNextIndexInTriangle(side);\n            let prevPoint = points[side][0];\n            for(let n = 0; n <= lastIndex; n++){\n                const isNextSide = n % 2 === 0;\n                const positions = [];\n                const nextSidePoint = isNextSide ? this.config.density - n : n;\n                const targetSide = isNextSide ? nextSide : side;\n                positions.push(points[targetSide][nextSidePoint]);\n                if (n < density) positions.push(points[targetSide][isNextSide ? nextSidePoint - 1 : nextSidePoint + 1]);\n                this.renderer.renderLines(prevPoint, ...positions);\n                prevPoint = positions[positions.length - 1];\n                yield;\n            }\n        }\n    }\n    *generateStringsBetweenTriangles({ triangle1: triangle1, triangle2: triangle2, level: level, triangleIndex: triangleIndex, triangleIndexInSide: triangleIndexInSide, isNextLevel: isNextLevel, nextLevelTriangleIndex: nextLevelTriangleIndex }) {\n        const { density: density, fillColor: fillColor } = this.config;\n        const levelSideCount = this.calc.countPerLevelSide[level];\n        const angleShift = triangleIndex % levelSideCount % 3;\n        this.renderer.setColor(fillColor);\n        const isLastTriangleInSide = triangleIndexInSide === levelSideCount - 1;\n        const firstSide = angleShift;\n        const sideIndex = isNextLevel ? [\n            this._getNextIndexInTriangle(angleShift),\n            this._getNextIndexInTriangle(angleShift, -1)\n        ] : [\n            firstSide,\n            this._getNextIndexInTriangle(firstSide, triangleIndexInSide % 2 ? 1 : -1)\n        ];\n        for(let s = 0; s < 2; s++){\n            const order = generateOrderInSide.call(this, s);\n            for (const { pointIndex: pointIndex, triangle1Points: triangle1Points, triangle2Points: triangle2Points } of order){\n                this.renderer.renderLines(triangle1Points[pointIndex], triangle2Points[pointIndex]);\n                yield;\n            }\n        }\n        function* generateOrderInSide(side) {\n            const t1Side = sideIndex[side];\n            const t2Side = getNextTriangleSide.call(this);\n            const triangle1Points = triangle1[t1Side];\n            const triangle2Points = triangle2[t2Side];\n            const last = side ? density : density - 1;\n            if (side === 0) for(let n = 0; n <= last; n++)yield {\n                pointIndex: density - n,\n                triangle1Points: triangle1Points,\n                triangle2Points: triangle2Points\n            };\n            else for(let n = last; n >= 1; n--)yield {\n                pointIndex: density - n,\n                triangle1Points: triangle1Points,\n                triangle2Points: triangle2Points\n            };\n            function getNextTriangleSide() {\n                if (isNextLevel) return this._getNextIndexInTriangle(t1Side);\n                else {\n                    if (side === 0 && isLastTriangleInSide) return 1;\n                    else {\n                        if (side === 1 && isLastTriangleInSide) return 0;\n                        else return this._getNextIndexInTriangle(t1Side, 1);\n                    }\n                }\n            }\n        }\n    }\n    _getNextIndexInTriangle(index, direction = 1) {\n        const result = index + direction;\n        if (result < 0) return 2;\n        if (result > 2) return 0;\n        return result;\n    }\n    *generateStrings() {\n        const { fill: fill, renderTriangles: renderTriangles, renderCaps: renderCaps, levels: levels, renderRing: renderRing, ringSize: ringSize, ringColor: ringColor } = this.config;\n        const triangleLevels = this.getPoints();\n        let levelIndex = -1;\n        for (const level of triangleLevels){\n            levelIndex++;\n            const isCapLevel = levelIndex === levels;\n            let triangleIndex = -1;\n            const lastIndexInLevel = level.length - 1;\n            for (const triangle of level){\n                triangleIndex++;\n                const levelSideCount = this.calc.countPerLevelSide[levelIndex];\n                const triangleIndexInSide = triangleIndex % levelSideCount;\n                if (fill && !isCapLevel) {\n                    if (triangleIndex === 0) yield* this.generateStringsBetweenTriangles({\n                        triangle1: level[lastIndexInLevel],\n                        triangle2: triangle,\n                        level: levelIndex,\n                        triangleIndex: lastIndexInLevel,\n                        triangleIndexInSide: lastIndexInLevel % levelSideCount\n                    });\n                    if (triangleIndex !== lastIndexInLevel) yield* this.generateStringsBetweenTriangles({\n                        triangle1: triangle,\n                        triangle2: level[triangleIndex + 1],\n                        level: levelIndex,\n                        triangleIndex: triangleIndex,\n                        triangleIndexInSide: triangleIndexInSide\n                    });\n                    if (triangleIndexInSide % 2 === 0 && (renderCaps || levelIndex < levels - 1)) {\n                        const side = Math.floor(triangleIndex / levelSideCount);\n                        const nextLevelSideCount = this.calc.countPerLevelSide[levelIndex + 1];\n                        const nextLevelTriangleIndex = side * nextLevelSideCount + triangleIndexInSide + 1;\n                        yield* this.generateStringsBetweenTriangles({\n                            triangle1: triangle,\n                            triangle2: triangleLevels[levelIndex + 1][nextLevelTriangleIndex],\n                            level: levelIndex,\n                            triangleIndex: triangleIndex,\n                            triangleIndexInSide: triangleIndexInSide,\n                            isNextLevel: true,\n                            nextLevelTriangleIndex: nextLevelTriangleIndex\n                        });\n                    }\n                }\n                const indexInSide = triangleIndex % this.calc.countPerLevelSide[levelIndex];\n                if (renderTriangles && (!isCapLevel || indexInSide % 2)) yield* this.generateTriangleStrings({\n                    points: triangle,\n                    level: levelIndex,\n                    indexInSide: indexInSide\n                });\n            }\n        }\n        if (renderRing && ringSize) yield* this.circle.drawRing(this.renderer, {\n            ringSize: ringSize / 2,\n            color: ringColor\n        });\n    }\n    getStepCount(calc) {\n        if (this.stepCount) return this.stepCount;\n        if (!calc) calc = this.getCalc();\n        const { levels: levels, density: density, fill: fill, renderTriangles: renderTriangles, renderCaps: renderCaps } = this.config;\n        const { triangleCount: triangleCount, ringNailCount: ringNailCount = 0 } = calc;\n        const fillStepsPerTriangle = fill ? density * 2 : 0;\n        const triangleSteps = renderTriangles ? density * 3 : 0;\n        const stepsPerTriangle = triangleSteps + fillStepsPerTriangle;\n        const levelsWithFillBetween = levels + (renderCaps ? 1 : 0);\n        const fillStepsBetweenLevels = fillStepsPerTriangle * (levelsWithFillBetween - 1) * 6 * levelsWithFillBetween / 2;\n        const stepsPerCap = density + 1;\n        const capSteps = renderTriangles && renderCaps ? 6 * levels * stepsPerCap : 0;\n        return triangleCount * stepsPerTriangle + capSteps + fillStepsBetweenLevels + ringNailCount;\n    }\n    drawNails() {\n        const triangleLevels = this.getPoints();\n        let index = 0;\n        for (const level of triangleLevels){\n            for (const triangle of level)if (triangle != null) {\n                // A cap level has nulls between caps\n                for (const triangleSide of triangle)for (const point of triangleSide)this.nails.addNail({\n                    point: point,\n                    number: index++\n                });\n            }\n        }\n        if (this.circle) this.circle.drawNails(this.nails);\n    }\n    static thumbnailConfig = {\n        levels: 3,\n        density: 3,\n        fill: false,\n        renderRing: true\n    };\n}\n\n\n\n\n\n\nconst $60052c64d8bf9084$var$COLOR_CONFIG = (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039).getConfig({\n    defaults: {\n        isMultiColor: true,\n        color: '#ff0000',\n        multicolorRange: 133,\n        multicolorStart: 239,\n        multicolorByLightness: false,\n        minLightness: 30,\n        maxLightness: 70,\n        colorCount: 4\n    },\n    customControls: [\n        {\n            key: 'colorPerLayer',\n            label: 'Color per layer',\n            defaultValue: true,\n            type: 'checkbox'\n        }\n    ]\n});\nconst $60052c64d8bf9084$var$spreadModes = {\n    evenly: {\n        f: (layerIndex, { ringSize: ringSize, layers: layers, n: n })=>{\n            const firstLayerDistance = Math.floor(n * ringSize);\n            return Math.floor((layers - layerIndex) * firstLayerDistance / layers);\n        },\n        name: 'Evenly'\n    },\n    distance: {\n        f: (layerIndex, { n: n, ringSize: ringSize, layerDistance: layerDistance })=>{\n            const firstLayerDistance = Math.floor(n * ringSize);\n            if (layerIndex > 0) return firstLayerDistance - layerIndex * layerDistance;\n            return firstLayerDistance;\n        },\n        name: 'Specific distance'\n    }\n};\nclass $60052c64d8bf9084$export$2e2bcd8739ae039 extends (0, $94a914a4d84408bc$export$2e2bcd8739ae039) {\n    name = 'Comet';\n    id = 'comet';\n    controls = [\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).nailsConfig,\n        {\n            key: 'layers',\n            label: 'Layers',\n            defaultValue: 5,\n            type: 'range',\n            attr: {\n                min: 1,\n                max: 20,\n                step: 1\n            },\n            isStructural: true\n        },\n        {\n            key: 'ringSize',\n            label: 'First layer size',\n            description: 'Nail count from the top center nail to the first connected nail in the first layer',\n            defaultValue: 0.3,\n            type: 'range',\n            attr: {\n                min: 0,\n                max: 1,\n                step: 0.01\n            },\n            displayValue: ({ ringSize: ringSize, n: n })=>Math.floor(n * ringSize),\n            isStructural: true\n        },\n        {\n            key: 'layerSpread',\n            label: 'Layer Spread',\n            type: 'select',\n            defaultValue: 'distance',\n            options: Object.entries($60052c64d8bf9084$var$spreadModes).map(([key, { name: name }])=>({\n                    value: key,\n                    label: name\n                })),\n            isStructural: true\n        },\n        {\n            key: 'layerDistance',\n            label: 'Layer Distance',\n            type: 'range',\n            attr: {\n                min: 1,\n                max: ({ config: { n: n, layers: layers } })=>Math.floor(n / 2 / layers),\n                step: 1\n            },\n            defaultValue: 1,\n            isStructural: true,\n            show: ({ layerSpread: layerSpread })=>layerSpread !== 'evenly'\n        },\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).rotationConfig,\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).distortionConfig,\n        (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039).displacementConfig,\n        $60052c64d8bf9084$var$COLOR_CONFIG\n    ];\n    defaultValues = {\n        n: 51,\n        layers: 11,\n        colorPerLayer: true,\n        multicolorRange: 203,\n        multicolorStart: 137,\n        ringSize: 0.47,\n        rotation: 0.25,\n        distortion: 0.38,\n        displacementFunc: 'fastInOut',\n        displacementMag: 1.8,\n        displacementFastArea: 0.43,\n        layerSpread: 'distance',\n        layerDistance: 1\n    };\n    resetStructure() {\n        if (this.points) this.points.clear();\n        if (this.layerRingDistances) this.layerRingDistances.clear();\n    }\n    setUpDraw() {\n        super.setUpDraw();\n        const circleConfig = {\n            size: this.size,\n            n: this.config.n,\n            margin: this.config.margin,\n            rotation: this.config.rotation,\n            distortion: this.config.distortion,\n            displacementFunc: this.config.displacementFunc,\n            displacementMag: this.config.displacementMag,\n            displacementFastArea: this.config.displacementFastArea\n        };\n        if (this.circle) this.circle.setConfig(circleConfig);\n        else this.circle = new (0, $59fce7b2f3ce133e$export$2e2bcd8739ae039)(circleConfig);\n        if (!this.stepCount) this.stepCount = this.getStepCount();\n        const { isMultiColor: isMultiColor, colorCount: colorCount, layers: layers, colorPerLayer: colorPerLayer } = this.config;\n        const realColorCount = isMultiColor ? colorPerLayer ? layers : Math.min(colorCount, layers) : 1;\n        this.color = new (0, $cbc076be24a1f1a0$export$2e2bcd8739ae039)({\n            ...this.config,\n            isMultiColor: isMultiColor,\n            colorCount: realColorCount\n        });\n    }\n    getCalc() {\n        const { n: n } = this.config;\n        const size = this.getSize();\n        return {\n            n: n,\n            angleRadians: (0, $86f1de0f012f559c$export$f4644083ce95e7e3) * angle / maxSteps,\n            radius: Math.min(...size) / 2,\n            currentSize: size,\n            rotationAngle: -Math.PI * 2 * rotation\n        };\n    }\n    getLayerRingDistance(layerIndex) {\n        const spread = $60052c64d8bf9084$var$spreadModes[this.config.layerSpread];\n        if (!spread) throw new Error(`Invalid spread mode, \"${this.config.layerSpread}\"!`);\n        return spread.f(layerIndex, this.config);\n    }\n    getLayerRingStepCount(layerIndex) {\n        const layerRingDistance = this.getLayerRingDistance(layerIndex);\n        return (this.config.n - layerRingDistance + 1) * 2 - 1;\n    }\n    *drawLayer(layerIndex = 0) {\n        const { n: n } = this.config;\n        const ringDistance = this.getLayerRingDistance(layerIndex);\n        const stepCount = n - ringDistance + 1;\n        let prevPoint = this.circle.getPoint(0);\n        let prevPointIndex = 0;\n        this.renderer.setColor(this.color.getColor(layerIndex));\n        for(let i = 0; i < n - ringDistance + 1; i++){\n            const pointIndex = i + ringDistance;\n            const point = this.circle.getPoint(pointIndex);\n            this.renderer.renderLines(prevPoint, point);\n            yield;\n            if (i !== stepCount - 1) {\n                prevPointIndex = i + 1;\n                prevPoint = this.circle.getPoint(prevPointIndex);\n                this.renderer.renderLines(point, prevPoint);\n                yield;\n            }\n        }\n    }\n    *generateStrings() {\n        for(let layer = 0; layer < this.config.layers; layer++)yield* this.drawLayer(layer);\n    }\n    getStepCount() {\n        if (this.stepCount) return this.stepCount;\n        const { layers: layers } = this.config;\n        return new Array(layers).fill(0).reduce((totalStepCount, _, layerIndex)=>totalStepCount + this.getLayerRingStepCount(layerIndex), 0);\n    }\n    drawNails() {\n        this.circle.drawNails(this.nails);\n    }\n    static thumbnailConfig = {\n        n: 24,\n        layers: 8\n    };\n}\n\n\nconst $b0c3fd37d50c98a1$var$patternTypes = [\n    (0, $61558fe3531b2134$export$2e2bcd8739ae039),\n    (0, $15aedcdf2bbf23c9$export$2e2bcd8739ae039),\n    (0, $04618c3b6078db17$export$2e2bcd8739ae039),\n    (0, $c3aacb68e8eafa9f$export$2e2bcd8739ae039),\n    (0, $252b3d5c8e3f8ea1$export$2e2bcd8739ae039),\n    (0, $7ca16301d1006488$export$2e2bcd8739ae039),\n    (0, $fafc1a9c7b2bff91$export$2e2bcd8739ae039),\n    (0, $040f578548ad3f1c$export$2e2bcd8739ae039),\n    (0, $c26799ef2d0b57d4$export$2e2bcd8739ae039),\n    (0, $ce139c195fafb59f$export$2e2bcd8739ae039),\n    (0, $74a174dcd7bb4c4c$export$2e2bcd8739ae039),\n    (0, $efda32ed6e872237$export$2e2bcd8739ae039),\n    (0, $60052c64d8bf9084$export$2e2bcd8739ae039)\n];\nvar $b0c3fd37d50c98a1$export$2e2bcd8739ae039 = $b0c3fd37d50c98a1$var$patternTypes;\n\n\nconst $0cae7696affaade1$var$elements = {\n    controls: document.querySelector('#controls'),\n    controlsPanel: document.querySelector('#controls_panel'),\n    sidebarForm: document.querySelector('#sidebar_form')\n};\nconst $0cae7696affaade1$var$EVENTS = new Set([\n    'input',\n    'change'\n]);\nconst $0cae7696affaade1$var$STATE_LOCAL_STORAGE_KEY = 'controls_state';\nconst $0cae7696affaade1$var$RANGE_SCROLL_LOCK_TIMEOUT = 120;\nlet $0cae7696affaade1$var$inputTimeout;\nclass $0cae7696affaade1$export$2e2bcd8739ae039 {\n    constructor({ pattern: pattern }){\n        this.pattern = pattern;\n        this.state = this._getState() ?? {\n            groups: {}\n        };\n        this.eventHandlers = {\n            input: new Set(),\n            change: new Set()\n        };\n        this._toggleFieldset = (e)=>{\n            if (e.target.nodeName === 'LEGEND') {\n                e.target.parentElement.classList.toggle('minimized');\n                const groupId = e.target.parentElement.dataset.group;\n                this.state = {\n                    ...this.state,\n                    groups: {\n                        ...this.state.groups,\n                        [groupId]: !e.target.parentElement.classList.contains('minimized')\n                    }\n                };\n                this._updateState(this.state);\n            }\n        };\n        this._toggleFieldSetOnEnter = (e)=>{\n            if (e.target.nodeName === 'LEGEND' && e.key === 'Enter') this._toggleFieldset(e);\n        };\n        this._wrappedOnInput = (e)=>this._onInput(e);\n        $0cae7696affaade1$var$elements.controls.addEventListener('input', this._wrappedOnInput);\n        this._wrappedOnTouchStart = (e)=>this._onTouchStart(e);\n        this._wrappedOnMouseDown = (e)=>this._onMouseDown(e);\n        $0cae7696affaade1$var$elements.controls.addEventListener('touchstart', this._wrappedOnTouchStart);\n        $0cae7696affaade1$var$elements.controls.addEventListener('mousedown', this._wrappedOnMouseDown);\n        $0cae7696affaade1$var$elements.sidebarForm.addEventListener('click', this._toggleFieldset);\n        $0cae7696affaade1$var$elements.sidebarForm.addEventListener('keydown', this._toggleFieldSetOnEnter);\n        this.controlElements = {};\n        this.renderControls();\n    }\n    destroy() {\n        $0cae7696affaade1$var$elements.controls.removeEventListener('input', this._wrappedOnInput);\n        $0cae7696affaade1$var$elements.sidebarForm.removeEventListener('click', this._toggleFieldset);\n        $0cae7696affaade1$var$elements.sidebarForm.removeEventListener('keydown', this._toggleFieldSetOnEnter);\n        $0cae7696affaade1$var$elements.controls.removeEventListener('touchstart', this._wrappedOnTouchStart);\n        $0cae7696affaade1$var$elements.controls.removeEventListener('mousedown', this._wrappedOnMouseDown);\n        $0cae7696affaade1$var$elements.controls.innerHTML = '';\n    }\n    addEventListener(event, eventHandler) {\n        if (!$0cae7696affaade1$var$EVENTS.has(event)) throw new Error(`Unsupported event for EditorControls, \"${event}\"!`);\n        if (!(eventHandler instanceof Function)) throw new Error('Invalid event handler.');\n        this.eventHandlers[event].add(eventHandler);\n    }\n    _triggerEvent(event, eventData) {\n        for (const eventHandler of this.eventHandlers[event])eventHandler(eventData);\n    }\n    _onMouseDown(e) {\n        // Clearing selection when starting to click in the controls, do avoid a buggy behavior,\n        // when if a control's display value was selected (can happen by mistake), the drag of range input doesn't work.\n        const selection = window.getSelection();\n        if (selection) selection.removeAllRanges();\n    }\n    /**\n   * Needed for range inputs, to avoid changing the value when the user drags to\n   * scroll and accidentally touches a range input when intending to scroll.\n   * @param {Event} e\n   */ _onTouchStart(e) {\n        if (e.target.getAttribute('type') === 'range') {\n            this._postponeRangeInput = true;\n            this.currentInputRange = e.target;\n            this.currentInputRangeValue = e.target.value;\n            this._rangeLockTimeout = setTimeout(()=>{\n                this._postponeRangeInput = false;\n            }, $0cae7696affaade1$var$RANGE_SCROLL_LOCK_TIMEOUT);\n            this._wrappedOnTouchEnd = (e)=>this._onTouchEnd(e);\n            document.body.addEventListener('touchend', this._wrappedOnTouchEnd);\n            this._wrappedOnRangeScroll = (e)=>this._onRangeScroll(e);\n            $0cae7696affaade1$var$elements.controlsPanel.addEventListener('scroll', this._wrappedOnRangeScroll);\n        }\n    }\n    _onTouchEnd() {\n        document.body.removeEventListener('touchend', this._wrappedOnTouchEnd);\n        $0cae7696affaade1$var$elements.controlsPanel.removeEventListener('scroll', this._wrappedOnRangeScroll);\n        if (this._lockRange) {\n            this._lockRange = false;\n            if (this.currentInputRange) this.currentInputRange.value = this.currentInputRangeValue;\n        }\n        this.currentInputRange = this.currentInputRangeValue = null;\n    }\n    _onRangeScroll() {\n        this._lockRange = true;\n    }\n    _onInput(e) {\n        clearTimeout($0cae7696affaade1$var$inputTimeout);\n        clearTimeout(this._postponeRangeInputTimeout);\n        if (this._postponeRangeInput && e.target.getAttribute('type') === 'range') {\n            e.preventDefault();\n            this._postponeRangeInputTimeout = setTimeout(()=>{\n                this._onInput(e);\n            }, $0cae7696affaade1$var$RANGE_SCROLL_LOCK_TIMEOUT);\n            return false;\n        }\n        if (this._lockRange) {\n            e.preventDefault();\n            return false;\n        }\n        this.updateInput({\n            inputElement: e.target,\n            originalEvent: e,\n            deferChange: true\n        });\n    }\n    updateInput({ inputElement: inputElement, originalEvent: originalEvent, deferChange: deferChange = true }) {\n        const inputValue = $0cae7696affaade1$var$getInputValue(inputElement.type, inputElement);\n        const controlKey = inputElement.id.replace(/^config_/, '');\n        this.pattern.setConfigValue(controlKey, inputValue);\n        const { config: config, displayValue: displayValue } = this.controlElements[controlKey];\n        if (displayValue) {\n            const formattedValue = config.displayValue ? config.displayValue(this.pattern.config, config) : inputElement.value;\n            displayValue.innerText = formattedValue;\n        }\n        const eventData = Object.freeze({\n            control: controlKey,\n            value: inputValue,\n            originalEvent: originalEvent,\n            pattern: this.pattern\n        });\n        this._triggerEvent('input', eventData);\n        const triggerChange = ()=>{\n            this._triggerEvent('change', eventData);\n            this.updateControlsVisibility();\n            this.updateControlsAttributes();\n        };\n        if (deferChange) $0cae7696affaade1$var$inputTimeout = setTimeout(triggerChange, 100);\n        else triggerChange();\n    }\n    _getState() {\n        const state = localStorage.getItem($0cae7696affaade1$var$STATE_LOCAL_STORAGE_KEY);\n        if (state) try {\n            return JSON.parse(state);\n        } catch (e) {\n            return null;\n        }\n        return null;\n    }\n    _updateState(newState) {\n        if (newState) localStorage.setItem($0cae7696affaade1$var$STATE_LOCAL_STORAGE_KEY, JSON.stringify(newState));\n        else localStorage.removeItem($0cae7696affaade1$var$STATE_LOCAL_STORAGE_KEY);\n    }\n    updateControlsAttributes(configControls = this.pattern.configControls) {\n        configControls.forEach((control)=>{\n            if (control.attr) {\n                const functionAttrs = Object.entries(control.attr).filter(([_, value])=>value instanceof Function);\n                if (functionAttrs.length) {\n                    const inputEl = this.controlElements[control.key].input;\n                    if (inputEl) functionAttrs.forEach(([name, value])=>{\n                        const newAttrValue = value(this.pattern);\n                        if (newAttrValue != inputEl.getAttribute(name)) {\n                            if (name === 'min' && inputEl.value < newAttrValue || name === 'max' && inputEl.value > newAttrValue) {\n                                inputEl.value = newAttrValue;\n                                this.updateInput({\n                                    inputElement: inputEl\n                                });\n                            }\n                            inputEl.setAttribute(name, newAttrValue);\n                        }\n                    });\n                }\n            }\n        });\n    }\n    updateControlsVisibility(configControls = this.pattern.configControls) {\n        configControls.forEach((control)=>{\n            if (control.show) {\n                const shouldShowControl = control.show(this.pattern.config, control);\n                const controlEl = this.controlElements[control.key].control;\n                if (controlEl) {\n                    if (shouldShowControl) controlEl.removeAttribute('hidden');\n                    else controlEl.setAttribute('hidden', 'hidden');\n                }\n            }\n            if (control.isDisabled) {\n                const shouldDisableControl = control.isDisabled(this.pattern.config);\n                const inputEl = this.controlElements[control.key].input;\n                if (inputEl) {\n                    if (shouldDisableControl) inputEl.setAttribute('disabled', 'disabled');\n                    else inputEl.removeAttribute('disabled');\n                }\n            }\n            if (control.children) this.updateControlsVisibility(control.children);\n        });\n    }\n    updateInputs(config) {\n        Object.entries(config).forEach(([key, value])=>{\n            const { input: input, value: valueEl } = this.controlElements[key];\n            if (input) {\n                if (input.type === 'checkbox') input.checked = value;\n                else input.value = value;\n                if (valueEl) valueEl.innerText = value;\n            }\n        });\n    }\n    renderControls(containerEl = $0cae7696affaade1$var$elements.controls, _configControls) {\n        const configControls = _configControls ?? this.pattern.configControls;\n        containerEl.innerHTML = '';\n        const controlsFragment = document.createDocumentFragment();\n        configControls.forEach((control)=>{\n            const controlId = `config_${control.key}`;\n            const controlElements = this.controlElements[control.key] = {\n                config: control\n            };\n            let controlEl;\n            if (control.type === 'group') {\n                controlEl = document.createElement('fieldset');\n                controlEl.setAttribute('data-group', control.key);\n                const groupTitleEl = document.createElement('legend');\n                groupTitleEl.setAttribute('tabindex', '0');\n                groupTitleEl.innerText = control.label;\n                controlEl.appendChild(groupTitleEl);\n                controlEl.className = 'control control_group';\n                if (control.defaultValue === 'minimized') {\n                    controlEl.classList.add('minimized');\n                    this.state.groups[control.key] = false;\n                }\n                const childrenContainer = document.createElement('div');\n                controlEl.appendChild(childrenContainer);\n                this.renderControls(childrenContainer, control.children);\n            } else {\n                controlEl = document.createElement('div');\n                controlEl.className = 'control';\n                const label = document.createElement('label');\n                label.innerHTML = control.label;\n                label.setAttribute('for', controlId);\n                const inputEl = controlElements.input = document.createElement(control.type === 'select' ? 'select' : 'input');\n                const inputValue = this.pattern.config[control.key] ?? control.defaultValue;\n                if (control.type === 'select') {\n                    const selectOptions = document.createDocumentFragment();\n                    control.options.forEach((_option)=>{\n                        const { value: value, label: label } = typeof _option === 'string' ? {\n                            value: _option,\n                            label: _option\n                        } : _option;\n                        const optionEl = document.createElement('option');\n                        optionEl.setAttribute('value', value);\n                        optionEl.innerText = label;\n                        selectOptions.appendChild(optionEl);\n                    });\n                    inputEl.appendChild(selectOptions);\n                    inputEl.value = inputValue;\n                    controlEl.appendChild(label);\n                    controlEl.appendChild(inputEl);\n                } else {\n                    inputEl.setAttribute('type', control.type);\n                    if (control.type === 'checkbox') {\n                        inputEl.checked = inputValue;\n                        controlEl.appendChild(inputEl);\n                        controlEl.appendChild(label);\n                    } else {\n                        controlEl.appendChild(label);\n                        controlEl.appendChild(inputEl);\n                        setTimeout(()=>{\n                            inputEl.value = inputValue;\n                        });\n                        const inputValueEl = controlElements.displayValue = document.createElement('span');\n                        inputValueEl.id = `config_${control.key}_value`;\n                        inputValueEl.innerText = control.displayValue ? control.displayValue(this.pattern.config, control) : inputValue;\n                        inputValueEl.className = 'control_input_value';\n                        controlEl.appendChild(inputValueEl);\n                    }\n                }\n                if (control.attr) Object.entries(control.attr).forEach(([attr, value])=>{\n                    const realValue = value instanceof Function ? value(this.pattern) : value;\n                    inputEl.setAttribute(attr, realValue);\n                });\n                inputEl.id = controlId;\n            }\n            this.controlElements[control.key].control = controlEl;\n            controlEl.id = `control_${control.key}`;\n            controlsFragment.appendChild(controlEl);\n        });\n        containerEl.appendChild(controlsFragment);\n        this.updateGroupsState();\n        requestAnimationFrame(()=>this.updateControlsVisibility());\n    }\n    updateGroupsState() {\n        const groups = $0cae7696affaade1$var$elements.sidebarForm.querySelectorAll('[data-group]');\n        groups.forEach((groupEl)=>{\n            const groupId = groupEl.dataset.group;\n            const groupState = this.state.groups[groupId];\n            if (typeof groupState === 'boolean') {\n                if (groupState) groupEl.classList.remove('minimized');\n                else groupEl.classList.add('minimized');\n            }\n        });\n    }\n}\nfunction $0cae7696affaade1$var$getInputValue(type, inputElement) {\n    switch(type){\n        case 'range':\n            return parseFloat(inputElement.value);\n        case 'checkbox':\n            return inputElement.checked;\n        case 'number':\n            return parseFloat(inputElement.value);\n        default:\n            return inputElement.value;\n    }\n}\n\n\nconst $c2fddc023f243ac1$var$sizeControls = document.querySelector('#size_controls');\nconst $c2fddc023f243ac1$var$elements = {\n    sizeSelect: $c2fddc023f243ac1$var$sizeControls.querySelector('#size_select'),\n    sizeCustom: $c2fddc023f243ac1$var$sizeControls.querySelector('#size_custom'),\n    width: $c2fddc023f243ac1$var$sizeControls.querySelector('#size_custom_width'),\n    height: $c2fddc023f243ac1$var$sizeControls.querySelector('#size_custom_height'),\n    orientationSelect: $c2fddc023f243ac1$var$sizeControls.querySelector('#size_orientation_select')\n};\nfunction $c2fddc023f243ac1$var$cmToPixels(cm, dpi = 300) {\n    return Math.floor(cm / 2.54 * dpi);\n}\nconst $c2fddc023f243ac1$var$SCREEN_SIZE = [\n    Math.floor(window.screen.width),\n    Math.floor(window.screen.height)\n];\nconst $c2fddc023f243ac1$var$SIZES = [\n    {\n        id: 'fit',\n        name: 'Fit to screen'\n    },\n    {\n        id: 'A4',\n        value: [\n            20,\n            28\n        ].map((v)=>$c2fddc023f243ac1$var$cmToPixels(v)),\n        orientationSelect: true\n    },\n    {\n        id: 'A3',\n        value: [\n            28,\n            40\n        ].map((v)=>$c2fddc023f243ac1$var$cmToPixels(v)),\n        orientationSelect: true\n    },\n    {\n        id: 'screen',\n        name: `Screen size (${$c2fddc023f243ac1$var$SCREEN_SIZE.join('x')})`,\n        value: $c2fddc023f243ac1$var$SCREEN_SIZE\n    },\n    {\n        id: 'custom',\n        name: 'Custom...'\n    }\n];\nclass $c2fddc023f243ac1$export$2e2bcd8739ae039 {\n    element = document.querySelector('#size_controls');\n    constructor({ getCurrentSize: getCurrentSize }){\n        const sizeOptionsFragment = document.createDocumentFragment();\n        $c2fddc023f243ac1$var$SIZES.forEach((size)=>{\n            const sizeListItem = document.createElement('option');\n            sizeListItem.setAttribute('value', size.id);\n            sizeListItem.innerText = size.name ?? size.id;\n            sizeOptionsFragment.appendChild(sizeListItem);\n        });\n        $c2fddc023f243ac1$var$elements.sizeSelect.appendChild(sizeOptionsFragment);\n        this.selectedSize = $c2fddc023f243ac1$var$SIZES[0];\n        $c2fddc023f243ac1$var$elements.sizeSelect.addEventListener('change', (e)=>{\n            const selectedSizeId = e.target.value;\n            const size = $c2fddc023f243ac1$var$SIZES.find(({ id: id })=>id === selectedSizeId);\n            this.selectedSize = size;\n            if (size.id === 'custom') {\n                $c2fddc023f243ac1$var$elements.sizeCustom.removeAttribute('hidden');\n                const [width, height] = getCurrentSize();\n                $c2fddc023f243ac1$var$elements.width.value = width;\n                $c2fddc023f243ac1$var$elements.height.value = height;\n            } else {\n                $c2fddc023f243ac1$var$elements.sizeCustom.setAttribute('hidden', 'hidden');\n                this._notifyOnChange(this.getValue());\n            }\n            if (size.orientationSelect) $c2fddc023f243ac1$var$elements.orientationSelect.removeAttribute('hidden');\n            else $c2fddc023f243ac1$var$elements.orientationSelect.setAttribute('hidden', 'hidden');\n        });\n        $c2fddc023f243ac1$var$elements.orientationSelect.addEventListener('change', (e)=>{\n            this._notifyOnChange(this.getValue());\n        });\n        $c2fddc023f243ac1$var$elements.sizeCustom.addEventListener('focusin', (e)=>{\n            e.target.select();\n        });\n        $c2fddc023f243ac1$var$elements.sizeCustom.addEventListener('input', ()=>{\n            this._notifyOnChange([\n                $c2fddc023f243ac1$var$elements.width.value ? parseInt($c2fddc023f243ac1$var$elements.width.value) : null,\n                $c2fddc023f243ac1$var$elements.height.value ? parseInt($c2fddc023f243ac1$var$elements.height.value) : null\n            ]);\n        });\n    }\n    _notifyOnChange([width, height] = []) {\n        this.element.dispatchEvent(new CustomEvent('sizechange', {\n            detail: {\n                width: width,\n                height: height\n            }\n        }));\n    }\n    getValue() {\n        if (this.selectedSize.id === 'custom') return [\n            parseInt($c2fddc023f243ac1$var$elements.width.value, 10),\n            parseInt($c2fddc023f243ac1$var$elements.height.value, 10)\n        ];\n        else {\n            let value = this.selectedSize.value;\n            if (this.selectedSize.orientationSelect && $c2fddc023f243ac1$var$elements.orientationSelect.value === 'horizontal') value = Array.from(value).reverse();\n            return value;\n        }\n    }\n}\n\n\n\n\n\nclass $0f7626289e2267b9$export$2e2bcd8739ae039 extends (0, $09b9b17d86206023$export$2e2bcd8739ae039) {\n    constructor(parentElement){\n        super(parentElement);\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        const dpr = window.devicePixelRatio || 1;\n        const bsr = this.ctx.webkitBackingStorePixelRatio || this.ctx.mozBackingStorePixelRatio || this.ctx.msBackingStorePixelRatio || this.ctx.oBackingStorePixelRatio || this.ctx.backingStorePixelRatio || 1;\n        this.pixelRatio = dpr / bsr;\n        this.ctx.globalCompositeOperation = 'source-over';\n        parentElement.appendChild(this.canvas);\n    }\n    get element() {\n        return this.canvas;\n    }\n    reset() {\n        this.ctx.clearRect(0, 0, ...this.getSize());\n        this.canvas.removeAttribute('width');\n        this.canvas.removeAttribute('height');\n        const [width, height] = this.getSize();\n        this.canvas.setAttribute('width', width);\n        this.canvas.setAttribute('height', height);\n    }\n    setColor(color) {\n        this.ctx.strokeStyle = color;\n    }\n    setLineWidth(width) {\n        this.ctx.lineWidth = width;\n    }\n    setBackground(color) {\n        this.ctx.globalCompositeOperation = 'destination-over';\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, ...this.getSize());\n        this.ctx.globalCompositeOperation = 'source-over';\n    }\n    getSize() {\n        return [\n            this.canvas.clientWidth * this.pixelRatio,\n            this.canvas.clientHeight * this.pixelRatio\n        ];\n    }\n    renderLines(startPosition, ...positions) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(...startPosition);\n        for (const position of positions)this.ctx.lineTo(...position);\n        this.ctx.stroke();\n    }\n    renderNails(nails, { color: color, fontSize: fontSize, radius: radius, renderNumbers: renderNumbers, margin: margin = 0 }) {\n        const centerX = this.canvas.width / 2;\n        this.ctx.globalCompositeOperation = 'source-over';\n        this.ctx.beginPath();\n        this.ctx.fillStyle = color;\n        this.ctx.textBaseline = 'middle';\n        this.ctx.font = `${fontSize}px sans-serif`;\n        const nailNumberOffset = radius + margin;\n        nails.forEach(({ point: [x, y], number: number })=>{\n            this.ctx.moveTo(x + radius, y);\n            this.ctx.arc(x, y, radius, 0, (0, $86f1de0f012f559c$export$f4644083ce95e7e3));\n            if (renderNumbers && number != null) {\n                const isRightAlign = x < centerX;\n                const numberPosition = [\n                    isRightAlign ? x - nailNumberOffset : x + nailNumberOffset,\n                    y\n                ];\n                this.ctx.textAlign = isRightAlign ? 'right' : 'left';\n                this.ctx.fillText(String(number), ...numberPosition);\n            }\n        });\n        this.ctx.fill();\n    }\n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    toDataURL() {\n        return this.canvas.toDataURL();\n    }\n}\n\n\nconst $1c740355923e6264$var$THUMBNAIL_WIDTH_PX = '100px';\nconst $1c740355923e6264$var$MINIMIZED_CLASS = 'minimized';\nclass $1c740355923e6264$export$45b50bca1da1e9b3 {\n    elements = {\n        root: document.querySelector('#pattern_select_panel'),\n        thumbnails: document.querySelector('#pattern_select_thumbnails'),\n        toggleBtn: document.querySelector('#pattern_select_btn'),\n        dropdown: document.querySelector('#pattern_select_dropdown')\n    };\n    constructor(){\n        this.elements.toggleBtn.addEventListener('click', ()=>this.toggle());\n    }\n    toggle() {\n        if (this.elements.root.classList.contains($1c740355923e6264$var$MINIMIZED_CLASS)) this.open();\n        else if (this.pattern) this.close();\n    }\n    open() {\n        if (this.elements.root.classList.contains($1c740355923e6264$var$MINIMIZED_CLASS)) {\n            this.elements.root.classList.remove($1c740355923e6264$var$MINIMIZED_CLASS);\n            if (!this.thumbnailsRendered) {\n                this.createThumbnails();\n                this.thumbnailsRendered = true;\n            }\n            this._onClickOutside = (e)=>{\n                if (!e.target.closest('#pattern_select_panel')) this.toggle();\n            };\n            document.body.addEventListener('mousedown', this._onClickOutside);\n        }\n    }\n    close() {\n        if (!this.elements.root.classList.contains($1c740355923e6264$var$MINIMIZED_CLASS)) {\n            this.elements.root.classList.add($1c740355923e6264$var$MINIMIZED_CLASS);\n            document.body.removeEventListener('mousedown', this._onClickOutside);\n            this._onClickOutside = null;\n        }\n    }\n    setCurrentPattern(pattern) {\n        this.pattern = pattern;\n        this.elements.toggleBtn.innerText = pattern?.name ?? 'Choose a pattern';\n    }\n    createThumbnails() {\n        const thumbnailsFragment = document.createDocumentFragment();\n        const patterns = [];\n        (0, $b0c3fd37d50c98a1$export$2e2bcd8739ae039).forEach((PatternType)=>{\n            const patternLink = document.createElement('a');\n            const renderer = new (0, $0f7626289e2267b9$export$2e2bcd8739ae039)(patternLink);\n            patternLink.style.width = patternLink.style.height = $1c740355923e6264$var$THUMBNAIL_WIDTH_PX;\n            const pattern = new PatternType(renderer);\n            pattern.config = Object.assign({\n                margin: 1,\n                enableBackground: false,\n                nailRadius: 0.5\n            }, PatternType.thumbnailConfig);\n            patterns.push(pattern);\n            const li = document.createElement('li');\n            thumbnailsFragment.appendChild(li);\n            patternLink.href = `?pattern=${pattern.id}`;\n            patternLink.setAttribute('data-pattern', pattern.id);\n            patternLink.title = pattern.name;\n            li.appendChild(patternLink);\n        });\n        this.elements.thumbnails.appendChild(thumbnailsFragment);\n        patterns.forEach((pattern)=>pattern.draw());\n        this.elements.thumbnails.addEventListener('click', (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            const link = e.target.closest('[data-pattern]');\n            if (!link) return false;\n            this.elements.root.dispatchEvent(new CustomEvent('change', {\n                detail: {\n                    pattern: link.dataset.pattern\n                }\n            }));\n            this.toggle();\n        });\n    }\n    addOnChangeListener(listener) {\n        this.elements.root.addEventListener('change', listener);\n    }\n    removeOnChangeListener(listener) {\n        this.elements.root.removeEventListener('change', listener);\n    }\n}\n\n\nconst $9a186c1e0d4394bc$var$MAX_FLOAT_DECIMALS = 6;\nfunction $9a186c1e0d4394bc$export$fa8157df3262779b(pattern) {\n    const { defaultConfig: defaultConfig, config: config } = pattern;\n    const nonDefaultConfigValues = Object.entries(config).map(([key, value])=>{\n        if (value === defaultConfig[key]) return null;\n        if (typeof value === 'boolean') return `!${value ? 1 : 0}`;\n        if (typeof value === 'number') return parseFloat(value.toFixed($9a186c1e0d4394bc$var$MAX_FLOAT_DECIMALS));\n        return value;\n    });\n    while(nonDefaultConfigValues[nonDefaultConfigValues.length - 1] === null)nonDefaultConfigValues.pop();\n    if (!nonDefaultConfigValues.length) return '';\n    const serializedConfigValues = nonDefaultConfigValues.join('_').replace(/\\_{2,}/g, (match)=>'~' + match.length + '_');\n    return serializedConfigValues;\n}\nconst $9a186c1e0d4394bc$var$numberRegExp = /^\\-?\\d+(\\.\\d+)?$/;\nconst $9a186c1e0d4394bc$var$booleanRegExp = /^(?:!)([01])$/;\nfunction $9a186c1e0d4394bc$export$39ef19ebad6081a3(pattern, serializedCofig) {\n    const serializedConfigValues = serializedCofig.replace(/(?:~)(\\d+)(?:_)/g, (_, commaCount)=>new Array(+commaCount).fill('_').join('')).split('_').map((v)=>{\n        if (v === '') return null;\n        if ($9a186c1e0d4394bc$var$numberRegExp.test(v)) return parseFloat(v);\n        const booleanMatch = v.match($9a186c1e0d4394bc$var$booleanRegExp);\n        if (booleanMatch) return booleanMatch[1] === '1';\n        return v;\n    });\n    const configKeys = Object.keys(pattern.defaultConfig);\n    return serializedConfigValues.reduce((config, serializedValue, i)=>{\n        if (serializedValue !== null) {\n            const key = configKeys[i];\n            return {\n                ...config,\n                [key]: serializedValue\n            };\n        }\n        return config;\n    }, {});\n}\n\n\nasync function $d67425a4ba2c0fcd$export$ed80d9de1d9df928(input) {\n    try {\n        navigator.share(await $d67425a4ba2c0fcd$var$getShareData(input));\n    } catch (error) {\n        alert('Error: ' + error.message);\n    }\n}\nasync function $d67425a4ba2c0fcd$export$4fa6f570da04f7cc(input) {\n    if (!navigator.share) return false;\n    const shareData = await $d67425a4ba2c0fcd$var$getShareData(input);\n    return navigator.canShare(shareData);\n}\nasync function $d67425a4ba2c0fcd$var$getShareData({ renderer: renderer, pattern: pattern }) {\n    const dataUrl = renderer.toDataURL();\n    const blob = await (await fetch(dataUrl)).blob();\n    const files = [\n        new File([\n            blob\n        ], pattern.name + '.jpg', {\n            type: blob.type,\n            lastModified: new Date().getTime()\n        })\n    ];\n    return {\n        url: window.location.href,\n        files: files,\n        title: document.title,\n        text: 'String Art Studio - ' + pattern.name\n    };\n}\n\n\nconst $25a47859143ff474$var$swFilename = 'service-worker.js';\nasync function $25a47859143ff474$export$d594efb518b3cec4() {\n    if (!navigator.serviceWorker || document.location.hostname === '127.0.0.1') return;\n    try {\n        const registration = await navigator.serviceWorker.register($25a47859143ff474$var$swFilename);\n        registration.onupdatefound = ()=>{\n            const installingWorker = registration.installing;\n            if (installingWorker == null) return;\n            installingWorker.onstatechange = ()=>{\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\n                    else console.log('Content is cached for offline use.');\n                }\n            };\n        };\n    } catch (error) {\n        console.error('Error during service worker registration:', error);\n    }\n}\n\n\n\n\n\nconst $aa321c2adadef428$var$SVG_NS = 'http://www.w3.org/2000/svg';\nclass $aa321c2adadef428$export$2e2bcd8739ae039 extends (0, $09b9b17d86206023$export$2e2bcd8739ae039) {\n    constructor(parentElement){\n        super(parentElement);\n        this.svg = document.createElementNS($aa321c2adadef428$var$SVG_NS, 'svg');\n        this.svg.style.setProperty('display', 'block');\n        this.backgroundGroup = document.createElementNS($aa321c2adadef428$var$SVG_NS, 'g');\n        this.backgroundGroup.setAttribute('data-id', 'background');\n        this.linesGroup = document.createElementNS($aa321c2adadef428$var$SVG_NS, 'g');\n        this.linesGroup.setAttribute('data-id', 'lines');\n        this.nailsGroup = document.createElementNS($aa321c2adadef428$var$SVG_NS, 'g');\n        this.nailsGroup.setAttribute('data-id', 'nails');\n        this.nailsCirclesGroup = document.createElementNS($aa321c2adadef428$var$SVG_NS, 'g');\n        this.nailsCirclesGroup.setAttribute('data-id', 'nailsCircles');\n        this.nailsTextGroup = document.createElementNS($aa321c2adadef428$var$SVG_NS, 'g');\n        this.nailsTextGroup.setAttribute('data-id', 'nailsText');\n        this.nailsGroup.appendChild(this.nailsCirclesGroup);\n        this.nailsGroup.appendChild(this.nailsTextGroup);\n        this.svg.appendChild(this.backgroundGroup);\n        this.svg.appendChild(this.linesGroup);\n        this.svg.appendChild(this.nailsGroup);\n        this.svg.setAttribute('xmlns', $aa321c2adadef428$var$SVG_NS);\n        parentElement.appendChild(this.svg);\n    }\n    get element() {\n        return this.svg;\n    }\n    reset() {\n        this.linesGroup.innerHTML = '';\n        this.nailsCirclesGroup.innerHTML = '';\n        this.nailsTextGroup.innerHTML = '';\n        const [width, height] = this.getSize().map(Math.trunc);\n        this.svg.setAttributeNS($aa321c2adadef428$var$SVG_NS, 'viewBox', `0 0 ${width} ${height}`);\n        this.svg.setAttributeNS($aa321c2adadef428$var$SVG_NS, 'width', width);\n        this.svg.setAttributeNS($aa321c2adadef428$var$SVG_NS, 'height', height);\n        this.svg.style.width = width + 'px';\n        this.svg.style.height = height + 'px';\n        this.currentColor = null;\n        this.lineWidth = null;\n    }\n    setColor(color) {\n        if (color !== this.currentColor) {\n            this.currentLineGroup = document.createElementNS($aa321c2adadef428$var$SVG_NS, 'g');\n            this.currentLineGroup.setAttribute('stroke', color);\n            this.currentLineGroup.setAttribute('stroke-width', this.lineWidth);\n            this.linesGroup.appendChild(this.currentLineGroup);\n            this.currentColor = color;\n        }\n    }\n    setLineWidth(width) {\n        this.lineWidth = width ?? '1';\n        this.linesGroup.setAttributeNS($aa321c2adadef428$var$SVG_NS, 'stroke-width', width ?? '1');\n        this.linesGroup.childNodes.forEach((group)=>group.setAttributeNS($aa321c2adadef428$var$SVG_NS, 'stroke-width', width ?? '1'));\n    }\n    setBackground(color) {\n        if (color) {\n            if (!this.background) {\n                this.background = document.createElementNS($aa321c2adadef428$var$SVG_NS, 'rect');\n                this.background.setAttribute('width', '100%');\n                this.background.setAttribute('height', '100%');\n                this.backgroundGroup.appendChild(this.background);\n            }\n            this.background.setAttribute('fill', color);\n        } else {\n            this.background = null;\n            this.backgroundGroup.innerHTML = '';\n        }\n    }\n    setSize(size) {\n        super.setSize(size);\n        const [width, height] = size.map(Math.trunc);\n        this.svg.setAttributeNS($aa321c2adadef428$var$SVG_NS, 'viewBox', `0 0 ${width} ${height}`);\n        this.svg.setAttributeNS($aa321c2adadef428$var$SVG_NS, 'width', width);\n        this.svg.setAttributeNS($aa321c2adadef428$var$SVG_NS, 'height', height);\n    }\n    renderLines(startPosition, ...positions) {\n        let previousPoint = startPosition;\n        const fragment = document.createDocumentFragment();\n        for (const position of positions){\n            const line = document.createElementNS($aa321c2adadef428$var$SVG_NS, 'line');\n            line.setAttribute('x1', Math.trunc(previousPoint[0]));\n            line.setAttribute('y1', Math.trunc(previousPoint[1]));\n            line.setAttribute('x2', Math.trunc(position[0]));\n            line.setAttribute('y2', Math.trunc(position[1]));\n            previousPoint = position;\n            fragment.appendChild(line);\n        }\n        this.currentLineGroup.appendChild(fragment);\n    }\n    renderNails(nails, { color: color, fontSize: fontSize, radius: radius, renderNumbers: renderNumbers, margin: margin = 0 }) {\n        const centerX = this.getSize()[0] / 2;\n        this.nailsCirclesGroup.innerHTML = this.nailsTextGroup.innerHTML = '';\n        const circlesFragment = document.createDocumentFragment();\n        const textFragment = document.createDocumentFragment();\n        this.nailsGroup.setAttribute('fill', color);\n        const nailNumberOffset = radius + margin;\n        this.nailsTextGroup.style.fontSize = fontSize;\n        nails.forEach(({ point: [x, y], number: number })=>{\n            const circle = document.createElementNS($aa321c2adadef428$var$SVG_NS, 'circle');\n            circle.setAttribute('cx', x);\n            circle.setAttribute('cy', y);\n            circle.setAttribute('r', radius);\n            circlesFragment.appendChild(circle);\n            if (renderNumbers && number != null) {\n                const isRightAlign = x < centerX;\n                const numberPosition = [\n                    isRightAlign ? x - nailNumberOffset : x + nailNumberOffset,\n                    y\n                ];\n                const textEl = document.createElementNS($aa321c2adadef428$var$SVG_NS, 'text');\n                textEl.innerHTML = String(number);\n                textEl.setAttribute('x', numberPosition[0]);\n                textEl.setAttribute('y', numberPosition[1]);\n                if (isRightAlign) textEl.setAttribute('text-anchor', 'end');\n                textFragment.appendChild(textEl);\n            }\n        });\n        this.nailsCirclesGroup.appendChild(circlesFragment);\n        this.nailsTextGroup.appendChild(textFragment);\n    }\n    clear() {\n        this.linesGroup.innerHTML = '';\n        this.nailsGroup.innerHTML = '';\n    }\n    toDataURL() {\n        return '';\n    }\n}\n\n\n\nfunction $1238fc7c4a906093$export$bb3b75778e3e272(dataUrl, fileName) {\n    const downloadLink = document.createElement('a');\n    downloadLink.href = dataUrl;\n    downloadLink.download = fileName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n}\n\n\nfunction $b2d8001ba115dbab$export$a0b41a3b036d92d2(pattern, size) {\n    const parentEl = document.createElement('article');\n    parentEl.style.width = size[0] + 'px';\n    parentEl.style.height = size[1] + 'px';\n    document.body.appendChild(parentEl);\n    const svgRenderer = new (0, $aa321c2adadef428$export$2e2bcd8739ae039)(parentEl);\n    const PatternConstructor = pattern.constructor;\n    const svgPattern = new PatternConstructor(svgRenderer);\n    svgPattern.setConfig(pattern.config);\n    svgPattern.draw();\n    var svgData = svgPattern.renderer.svg.outerHTML;\n    var svgBlob = new Blob([\n        svgData\n    ], {\n        type: 'image/svg+xml;charset=utf-8'\n    });\n    var svgUrl = URL.createObjectURL(svgBlob);\n    (0, $1238fc7c4a906093$export$bb3b75778e3e272)(svgUrl, pattern.name + '.svg');\n    document.body.removeChild(parentEl);\n}\n\n\n\nwindow.addEventListener('error', function(event) {\n    alert('Error: ' + event.message);\n});\nconst $f5e5effd96d66274$var$elements = {\n    canvas: document.querySelector('#canvas_panel'),\n    patternLink: document.querySelector('#pattern_link'),\n    downloadBtn: document.querySelector('#download_btn'),\n    downloadSVGBtn: document.querySelector('#download_svg_btn'),\n    downloadNailsBtn: document.querySelector('#download_nails_btn'),\n    resetBtn: document.querySelector('#reset_btn'),\n    shareBtn: document.querySelector('#share_btn'),\n    playerBtn: document.querySelector('#player_btn'),\n    buttons: document.querySelector('#buttons'),\n    instructionsLink: document.querySelector('#pattern_select_dropdown_instructions')\n};\nlet $f5e5effd96d66274$var$canvasRenderer;\nlet $f5e5effd96d66274$var$patterns;\nlet $f5e5effd96d66274$var$currentPattern;\nconst $f5e5effd96d66274$var$player = new (0, $6f48f16a2de852cf$export$2e2bcd8739ae039)(document.querySelector('#player'));\nconst $f5e5effd96d66274$var$sizeControls = new (0, $c2fddc023f243ac1$export$2e2bcd8739ae039)({\n    getCurrentSize: ()=>[\n            $f5e5effd96d66274$var$elements.canvas.clientWidth,\n            $f5e5effd96d66274$var$elements.canvas.clientHeight\n        ]\n});\nconst $f5e5effd96d66274$var$thumbnails = new (0, $1c740355923e6264$export$45b50bca1da1e9b3)();\nlet $f5e5effd96d66274$var$controls;\nwindow.addEventListener('load', $f5e5effd96d66274$var$main);\nasync function $f5e5effd96d66274$var$main() {\n    $f5e5effd96d66274$var$initRouting();\n    await (0, $25a47859143ff474$export$d594efb518b3cec4)();\n    document.body.querySelectorAll('.pattern_only').forEach($f5e5effd96d66274$var$hide);\n    $f5e5effd96d66274$var$unHide(document.querySelector('main'));\n    const queryParams = new URLSearchParams(document.location.search);\n    $f5e5effd96d66274$var$canvasRenderer = queryParams.get('renderer') === 'svg' ? new (0, $aa321c2adadef428$export$2e2bcd8739ae039)($f5e5effd96d66274$var$elements.canvas) : new (0, $0f7626289e2267b9$export$2e2bcd8739ae039)($f5e5effd96d66274$var$elements.canvas);\n    $f5e5effd96d66274$var$patterns = (0, $b0c3fd37d50c98a1$export$2e2bcd8739ae039).map((Pattern)=>new Pattern($f5e5effd96d66274$var$canvasRenderer));\n    if (history.state?.pattern) $f5e5effd96d66274$var$updateState(history.state);\n    else {\n        const queryPattern = queryParams.get('pattern');\n        if (queryPattern) {\n            const config = queryParams.get('config');\n            $f5e5effd96d66274$var$updateState({\n                pattern: queryPattern,\n                config: config\n            });\n        } else $f5e5effd96d66274$var$thumbnails.toggle();\n    }\n    $f5e5effd96d66274$var$elements.downloadBtn.addEventListener('click', $f5e5effd96d66274$var$downloadCanvas);\n    $f5e5effd96d66274$var$elements.downloadSVGBtn.addEventListener('click', $f5e5effd96d66274$var$downloadSVG);\n    $f5e5effd96d66274$var$elements.downloadNailsBtn.addEventListener('click', $f5e5effd96d66274$var$downloadNailsImage);\n    $f5e5effd96d66274$var$elements.resetBtn.addEventListener('click', $f5e5effd96d66274$var$reset);\n    $f5e5effd96d66274$var$elements.shareBtn.addEventListener('click', async ()=>await (0, $d67425a4ba2c0fcd$export$ed80d9de1d9df928)({\n            renderer: $f5e5effd96d66274$var$canvasRenderer,\n            pattern: $f5e5effd96d66274$var$currentPattern\n        }));\n    $f5e5effd96d66274$var$elements.playerBtn.addEventListener('click', ()=>{\n        document.querySelectorAll('#buttons [data-toggle-for]').forEach((btn)=>{\n            if (btn.classList.contains('active')) btn.click();\n        });\n    });\n    $f5e5effd96d66274$var$elements.instructionsLink.addEventListener('click', (e)=>{\n        e.preventDefault();\n        history.pushState({\n            pattern: null\n        }, 'String Art Studio', './');\n        $f5e5effd96d66274$var$unselectPattern();\n    });\n    $f5e5effd96d66274$var$thumbnails.addOnChangeListener(({ detail: detail })=>{\n        const pattern = $f5e5effd96d66274$var$findPatternById(detail.pattern);\n        $f5e5effd96d66274$var$setCurrentPattern(pattern);\n    });\n    document.body.addEventListener('click', (e)=>{\n        const toggleBtn = e.target.closest('[data-toggle-for]');\n        if (toggleBtn) {\n            const dialogId = toggleBtn.dataset.toggleFor;\n            toggleBtn.classList.toggle('active');\n            const toggledElement = document.querySelector('#' + dialogId);\n            toggledElement.classList.toggle('open');\n            document.body.classList.toggle('dialog_' + dialogId);\n            $f5e5effd96d66274$var$currentPattern && $f5e5effd96d66274$var$currentPattern.draw({\n                position: $f5e5effd96d66274$var$currentPattern.position\n            });\n        }\n    });\n}\nasync function $f5e5effd96d66274$var$initPattern() {\n    if (!$f5e5effd96d66274$var$currentPattern) throw new Error(\"Can't init pattern - no current pattern available!\");\n    $f5e5effd96d66274$var$initSize();\n    window.addEventListener('resize', ()=>$f5e5effd96d66274$var$currentPattern && $f5e5effd96d66274$var$currentPattern.draw());\n    $f5e5effd96d66274$var$elements.downloadBtn.addEventListener('click', $f5e5effd96d66274$var$downloadCanvas);\n    $f5e5effd96d66274$var$elements.downloadNailsBtn.addEventListener('click', $f5e5effd96d66274$var$downloadNailsImage);\n    $f5e5effd96d66274$var$elements.resetBtn.addEventListener('click', $f5e5effd96d66274$var$reset);\n    const showShare = await (0, $d67425a4ba2c0fcd$export$4fa6f570da04f7cc)({\n        renderer: $f5e5effd96d66274$var$canvasRenderer,\n        pattern: $f5e5effd96d66274$var$currentPattern\n    });\n    if (showShare) $f5e5effd96d66274$var$unHide($f5e5effd96d66274$var$elements.shareBtn);\n}\nfunction $f5e5effd96d66274$var$downloadCanvas() {\n    (0, $1238fc7c4a906093$export$bb3b75778e3e272)($f5e5effd96d66274$var$canvasRenderer.toDataURL(), $f5e5effd96d66274$var$currentPattern.name + '.png');\n}\nfunction $f5e5effd96d66274$var$downloadSVG() {\n    (0, $b2d8001ba115dbab$export$a0b41a3b036d92d2)($f5e5effd96d66274$var$currentPattern, $f5e5effd96d66274$var$canvasRenderer.getSize());\n}\nfunction $f5e5effd96d66274$var$downloadNailsImage() {\n    const currentConfig = $f5e5effd96d66274$var$currentPattern.config;\n    $f5e5effd96d66274$var$currentPattern.config = {\n        darkMode: false,\n        showNails: true,\n        showNailNumbers: true,\n        showStrings: false,\n        nailsColor: '#000000'\n    };\n    $f5e5effd96d66274$var$currentPattern.draw();\n    $f5e5effd96d66274$var$downloadCanvas();\n    // Reset to the config before the download:\n    $f5e5effd96d66274$var$currentPattern.config = currentConfig;\n    $f5e5effd96d66274$var$currentPattern.draw();\n}\nfunction $f5e5effd96d66274$var$reset() {\n    if (confirm('Are you sure you wish to reset options to defaults?')) $f5e5effd96d66274$var$setCurrentPattern($f5e5effd96d66274$var$currentPattern, {\n        config: {}\n    });\n}\nfunction $f5e5effd96d66274$var$onInputsChange({ withConfig: withConfig = true } = {}) {\n    $f5e5effd96d66274$var$player.update($f5e5effd96d66274$var$currentPattern);\n    const configQuery = withConfig ? (0, $9a186c1e0d4394bc$export$fa8157df3262779b)($f5e5effd96d66274$var$currentPattern) : null;\n    history.replaceState({\n        pattern: $f5e5effd96d66274$var$currentPattern.id,\n        config: configQuery\n    }, $f5e5effd96d66274$var$currentPattern.name, `?pattern=${$f5e5effd96d66274$var$currentPattern.id}${withConfig && configQuery ? `&config=${encodeURIComponent(configQuery)}` : ''}`);\n}\nfunction $f5e5effd96d66274$var$setCurrentPattern(pattern, setPatternOptions) {\n    $f5e5effd96d66274$var$selectPattern(pattern, setPatternOptions);\n    history.pushState({\n        pattern: pattern.id\n    }, pattern.name, '?pattern=' + pattern.id);\n}\nfunction $f5e5effd96d66274$var$initSize() {\n    $f5e5effd96d66274$var$sizeControls.element.addEventListener('sizechange', ({ detail: detail })=>{\n        $f5e5effd96d66274$var$setSize(detail);\n    });\n}\nfunction $f5e5effd96d66274$var$setSize(size) {\n    if (size.width && size.height) {\n        $f5e5effd96d66274$var$canvasRenderer.setSize(size);\n        if (!$f5e5effd96d66274$var$elements.canvas.classList.contains('overflow')) $f5e5effd96d66274$var$elements.canvas.classList.add('overflow');\n    } else {\n        $f5e5effd96d66274$var$elements.canvas.classList.remove('overflow');\n        $f5e5effd96d66274$var$canvasRenderer.setSize(null);\n    }\n    $f5e5effd96d66274$var$currentPattern.draw();\n}\nfunction $f5e5effd96d66274$var$initRouting() {\n    window.addEventListener('popstate', ({ state: state })=>{\n        $f5e5effd96d66274$var$updateState(state);\n    });\n}\nfunction $f5e5effd96d66274$var$updateState(state) {\n    if (state?.pattern) {\n        const pattern = $f5e5effd96d66274$var$findPatternById(state.pattern);\n        $f5e5effd96d66274$var$selectPattern(pattern, {\n            draw: false,\n            config: state.config ? (0, $9a186c1e0d4394bc$export$39ef19ebad6081a3)(pattern, state.config) : {}\n        });\n        $f5e5effd96d66274$var$thumbnails.close();\n        $f5e5effd96d66274$var$currentPattern.draw();\n    } else {\n        $f5e5effd96d66274$var$unselectPattern();\n        $f5e5effd96d66274$var$thumbnails.open();\n    }\n}\nfunction $f5e5effd96d66274$var$findPatternById(patternId) {\n    const pattern = $f5e5effd96d66274$var$patterns.find(({ id: id })=>id === patternId);\n    if (!pattern) throw new Error(`Pattern with id \"${patternId}\" not found!`);\n    return pattern;\n}\nfunction $f5e5effd96d66274$var$selectPattern(pattern, { config: config, draw: draw = true } = {}) {\n    const isFirstTime = !$f5e5effd96d66274$var$currentPattern;\n    $f5e5effd96d66274$var$currentPattern = pattern;\n    if (config) $f5e5effd96d66274$var$currentPattern.setConfig(config);\n    if ($f5e5effd96d66274$var$controls) $f5e5effd96d66274$var$controls.destroy();\n    $f5e5effd96d66274$var$controls = new (0, $0cae7696affaade1$export$2e2bcd8739ae039)({\n        pattern: pattern,\n        config: config\n    });\n    $f5e5effd96d66274$var$controls.addEventListener('input', ()=>$f5e5effd96d66274$var$currentPattern.draw());\n    $f5e5effd96d66274$var$controls.addEventListener('change', $f5e5effd96d66274$var$onInputsChange);\n    if (pattern.link) {\n        $f5e5effd96d66274$var$elements.patternLink.setAttribute('href', pattern.link);\n        $f5e5effd96d66274$var$elements.patternLink.innerText = pattern.linkText ?? 'Example';\n        $f5e5effd96d66274$var$unHide($f5e5effd96d66274$var$elements.patternLink);\n    } else $f5e5effd96d66274$var$hide($f5e5effd96d66274$var$elements.patternLink);\n    if (draw) requestAnimationFrame(()=>{\n        $f5e5effd96d66274$var$currentPattern.draw();\n    });\n    $f5e5effd96d66274$var$player.update($f5e5effd96d66274$var$currentPattern, {\n        draw: false\n    });\n    $f5e5effd96d66274$var$thumbnails.setCurrentPattern(pattern);\n    document.title = `${pattern.name} - String Art Studio`;\n    document.body.setAttribute('data-pattern', pattern.id);\n    if (isFirstTime) {\n        $f5e5effd96d66274$var$initPattern();\n        document.body.querySelectorAll('.pattern_only').forEach($f5e5effd96d66274$var$unHide);\n    }\n}\nfunction $f5e5effd96d66274$var$unHide(element) {\n    element.removeAttribute('hidden');\n}\nfunction $f5e5effd96d66274$var$hide(element) {\n    element.setAttribute('hidden', 'hidden');\n}\nfunction $f5e5effd96d66274$var$unselectPattern() {\n    $f5e5effd96d66274$var$currentPattern = null;\n    $f5e5effd96d66274$var$canvasRenderer.clear();\n    $f5e5effd96d66274$var$hide($f5e5effd96d66274$var$elements.patternLink);\n    $f5e5effd96d66274$var$thumbnails.setCurrentPattern(null);\n    $f5e5effd96d66274$var$controls && $f5e5effd96d66274$var$controls.destroy();\n    document.body.querySelectorAll('.pattern_only').forEach($f5e5effd96d66274$var$hide);\n    document.body.removeAttribute('data-pattern');\n}\n\n\n//# sourceMappingURL=string_art.0b29293a.js.map\n","import Player from './editor/Player.js';\nimport patternTypes from './pattern_types.js';\nimport EditorControls from './editor/EditorControls.js';\nimport EditorSizeControls from './editor/EditorSizeControls.js';\nimport { Thumbnails } from './thumbnails/Thumbnails.js';\nimport { deserializeConfig, serializeConfig } from './Serialize.js';\nimport { isShareSupported, share } from './share.js';\nimport { initServiceWorker } from './pwa.js';\nimport CanvasRenderer from './renderers/CanvasRenderer.js';\nimport SVGRenderer from './renderers/SVGRenderer.js';\nimport { downloadPatternAsSVG } from './download/SVGDownload.js';\nimport { downloadFile } from './download/Download.js';\n\nwindow.addEventListener('error', function (event) {\n  alert('Error: ' + event.message);\n});\n\nconst elements = {\n  canvas: document.querySelector('#canvas_panel'),\n  patternLink: document.querySelector('#pattern_link'),\n  downloadBtn: document.querySelector('#download_btn'),\n  downloadSVGBtn: document.querySelector('#download_svg_btn'),\n  downloadNailsBtn: document.querySelector('#download_nails_btn'),\n  resetBtn: document.querySelector('#reset_btn'),\n  shareBtn: document.querySelector('#share_btn'),\n  playerBtn: document.querySelector('#player_btn'),\n  buttons: document.querySelector('#buttons'),\n  instructionsLink: document.querySelector(\n    '#pattern_select_dropdown_instructions'\n  ),\n};\n\nlet canvasRenderer;\nlet patterns;\n\nlet currentPattern;\nconst player = new Player(document.querySelector('#player'));\nconst sizeControls = new EditorSizeControls({\n  getCurrentSize: () => [\n    elements.canvas.clientWidth,\n    elements.canvas.clientHeight,\n  ],\n});\n\nconst thumbnails = new Thumbnails();\n\nlet controls;\n\nwindow.addEventListener('load', main);\n\nasync function main() {\n  initRouting();\n\n  await initServiceWorker();\n\n  document.body.querySelectorAll('.pattern_only').forEach(hide);\n  unHide(document.querySelector('main'));\n\n  const queryParams = new URLSearchParams(document.location.search);\n  canvasRenderer =\n    queryParams.get('renderer') === 'svg'\n      ? new SVGRenderer(elements.canvas)\n      : new CanvasRenderer(elements.canvas);\n\n  patterns = patternTypes.map(Pattern => new Pattern(canvasRenderer));\n\n  if (history.state?.pattern) {\n    updateState(history.state);\n  } else {\n    const queryPattern = queryParams.get('pattern');\n\n    if (queryPattern) {\n      const config = queryParams.get('config');\n      updateState({ pattern: queryPattern, config });\n    } else {\n      thumbnails.toggle();\n    }\n  }\n\n  elements.downloadBtn.addEventListener('click', downloadCanvas);\n  elements.downloadSVGBtn.addEventListener('click', downloadSVG);\n  elements.downloadNailsBtn.addEventListener('click', downloadNailsImage);\n  elements.resetBtn.addEventListener('click', reset);\n  elements.shareBtn.addEventListener(\n    'click',\n    async () =>\n      await share({\n        renderer: canvasRenderer,\n        pattern: currentPattern,\n      })\n  );\n  elements.playerBtn.addEventListener('click', () => {\n    document.querySelectorAll('#buttons [data-toggle-for]').forEach(btn => {\n      if (btn.classList.contains('active')) {\n        btn.click();\n      }\n    });\n  });\n\n  elements.instructionsLink.addEventListener('click', e => {\n    e.preventDefault();\n    history.pushState({ pattern: null }, 'String Art Studio', './');\n    unselectPattern();\n  });\n\n  thumbnails.addOnChangeListener(({ detail }) => {\n    const pattern = findPatternById(detail.pattern);\n    setCurrentPattern(pattern);\n  });\n\n  document.body.addEventListener('click', e => {\n    const toggleBtn = e.target.closest('[data-toggle-for]');\n    if (toggleBtn) {\n      const dialogId = toggleBtn.dataset.toggleFor;\n\n      toggleBtn.classList.toggle('active');\n      const toggledElement = document.querySelector('#' + dialogId);\n      toggledElement.classList.toggle('open');\n      document.body.classList.toggle('dialog_' + dialogId);\n      currentPattern &&\n        currentPattern.draw({ position: currentPattern.position });\n    }\n  });\n}\n\nasync function initPattern() {\n  if (!currentPattern) {\n    throw new Error(\"Can't init pattern - no current pattern available!\");\n  }\n\n  initSize();\n\n  window.addEventListener(\n    'resize',\n    () => currentPattern && currentPattern.draw()\n  );\n\n  elements.downloadBtn.addEventListener('click', downloadCanvas);\n  elements.downloadNailsBtn.addEventListener('click', downloadNailsImage);\n  elements.resetBtn.addEventListener('click', reset);\n  const showShare = await isShareSupported({\n    renderer: canvasRenderer,\n    pattern: currentPattern,\n  });\n  if (showShare) {\n    unHide(elements.shareBtn);\n  }\n}\n\nfunction downloadCanvas() {\n  downloadFile(canvasRenderer.toDataURL(), currentPattern.name + '.png');\n}\n\nfunction downloadSVG() {\n  downloadPatternAsSVG(currentPattern, canvasRenderer.getSize());\n}\n\nfunction downloadNailsImage() {\n  const currentConfig = currentPattern.config;\n  currentPattern.config = {\n    darkMode: false,\n    showNails: true,\n    showNailNumbers: true,\n    showStrings: false,\n    nailsColor: '#000000',\n  };\n  currentPattern.draw();\n  downloadCanvas();\n\n  // Reset to the config before the download:\n  currentPattern.config = currentConfig;\n  currentPattern.draw();\n}\n\nfunction reset() {\n  if (confirm('Are you sure you wish to reset options to defaults?')) {\n    setCurrentPattern(currentPattern, { config: {} });\n  }\n}\n\nfunction onInputsChange({ withConfig = true } = {}) {\n  player.update(currentPattern);\n  const configQuery = withConfig ? serializeConfig(currentPattern) : null;\n  history.replaceState(\n    {\n      pattern: currentPattern.id,\n      config: configQuery,\n    },\n    currentPattern.name,\n    `?pattern=${currentPattern.id}${\n      withConfig && configQuery\n        ? `&config=${encodeURIComponent(configQuery)}`\n        : ''\n    }`\n  );\n}\n\nfunction setCurrentPattern(pattern, setPatternOptions) {\n  selectPattern(pattern, setPatternOptions);\n  history.pushState(\n    { pattern: pattern.id },\n    pattern.name,\n    '?pattern=' + pattern.id\n  );\n}\n\nfunction initSize() {\n  sizeControls.element.addEventListener('sizechange', ({ detail }) => {\n    setSize(detail);\n  });\n}\n\nfunction setSize(size) {\n  if (size.width && size.height) {\n    canvasRenderer.setSize(size);\n    if (!elements.canvas.classList.contains('overflow')) {\n      elements.canvas.classList.add('overflow');\n    }\n  } else {\n    elements.canvas.classList.remove('overflow');\n    canvasRenderer.setSize(null);\n  }\n\n  currentPattern.draw();\n}\n\nfunction initRouting() {\n  window.addEventListener('popstate', ({ state }) => {\n    updateState(state);\n  });\n}\n\nfunction updateState(state) {\n  if (state?.pattern) {\n    const pattern = findPatternById(state.pattern);\n    selectPattern(pattern, {\n      draw: false,\n      config: state.config ? deserializeConfig(pattern, state.config) : {},\n    });\n\n    thumbnails.close();\n    currentPattern.draw();\n  } else {\n    unselectPattern();\n    thumbnails.open();\n  }\n}\n\nfunction findPatternById(patternId) {\n  const pattern = patterns.find(({ id }) => id === patternId);\n  if (!pattern) {\n    throw new Error(`Pattern with id \"${patternId}\" not found!`);\n  }\n  return pattern;\n}\n\nfunction selectPattern(pattern, { config, draw = true } = {}) {\n  const isFirstTime = !currentPattern;\n\n  currentPattern = pattern;\n  if (config) {\n    currentPattern.setConfig(config);\n  }\n  if (controls) {\n    controls.destroy();\n  }\n  controls = new EditorControls({ pattern, config });\n  controls.addEventListener('input', () => currentPattern.draw());\n  controls.addEventListener('change', onInputsChange);\n\n  if (pattern.link) {\n    elements.patternLink.setAttribute('href', pattern.link);\n    elements.patternLink.innerText = pattern.linkText ?? 'Example';\n    unHide(elements.patternLink);\n  } else {\n    hide(elements.patternLink);\n  }\n\n  if (draw) {\n    requestAnimationFrame(() => {\n      currentPattern.draw();\n    });\n  }\n\n  player.update(currentPattern, { draw: false });\n  thumbnails.setCurrentPattern(pattern);\n  document.title = `${pattern.name} - String Art Studio`;\n  document.body.setAttribute('data-pattern', pattern.id);\n\n  if (isFirstTime) {\n    initPattern();\n    document.body.querySelectorAll('.pattern_only').forEach(unHide);\n  }\n}\n\nfunction unHide(element) {\n  element.removeAttribute('hidden');\n}\n\nfunction hide(element) {\n  element.setAttribute('hidden', 'hidden');\n}\n\nfunction unselectPattern() {\n  currentPattern = null;\n  canvasRenderer.clear();\n  hide(elements.patternLink);\n  thumbnails.setCurrentPattern(null);\n  controls && controls.destroy();\n  document.body.querySelectorAll('.pattern_only').forEach(hide);\n  document.body.removeAttribute('data-pattern');\n}\n","export default class Player {\n  constructor(parentEl) {\n    this.elements = {\n      player: parentEl,\n      step: parentEl.querySelector('#step'),\n      //stepInstructions: parentEl.querySelector('#step_instructions'),\n      playerPosition: parentEl.querySelector('#player_position'),\n      playBtn: parentEl.querySelector('#play_btn'),\n      pauseBtn: parentEl.querySelector('#pause_btn'),\n      text: parentEl.querySelector('#player_text'),\n    };\n    this.stepCount = 0;\n    this._isPlaying = false;\n\n    this.elements.playerPosition.addEventListener('input', ({ target }) => {\n      this.goto(+target.value);\n    });\n\n    this.elements.playBtn.addEventListener('click', () => {\n      this.play();\n    });\n\n    this.elements.pauseBtn.addEventListener('click', () => {\n      this.pause();\n    });\n  }\n\n  updateStatus(isPlaying) {\n    if (this._isPlaying !== isPlaying) {\n      this.elements.player.classList.toggle('playing');\n      this._isPlaying = isPlaying;\n    }\n  }\n\n  update(stringArt, { draw = true } = {}) {\n    this.stringArt = stringArt;\n    this.stepCount = stringArt.getStepCount();\n    this.elements.playerPosition.setAttribute('max', this.stepCount);\n    this.elements.step.innerText = `${this.stepCount}/${this.stepCount}`;\n    this.elements.text.style.removeProperty('width');\n    this.elements.text.style.width =\n      (this.elements.text.clientWidth || 70) + 'px';\n    this.goto(this.stepCount, { updateStringArt: draw });\n  }\n\n  updatePosition(position) {\n    this.elements.step.innerText = `${position}/${this.stepCount}`;\n    this.elements.playerPosition.value = position;\n  }\n\n  goto(position, { updateStringArt = true } = {}) {\n    this.pause();\n    this.updatePosition(position);\n    if (updateStringArt) {\n      this.stringArt.goto(position);\n    }\n  }\n\n  setInstructions(instructions) {\n    // this.elements.stepInstructions.innerText = instructions;\n  }\n\n  play() {\n    this.updateStatus(true);\n    cancelAnimationFrame(this.renderRafId);\n\n    if (this.stringArt.position === this.stepCount) {\n      this.stringArt.goto(0);\n    }\n\n    const self = this;\n\n    step();\n\n    function step() {\n      if (!self.stringArt.drawNext().done) {\n        self.renderRafId = requestAnimationFrame(step);\n      } else {\n        self.updateStatus(false);\n      }\n      self.updatePosition(self.stringArt.position);\n    }\n  }\n\n  pause() {\n    cancelAnimationFrame(this.renderRafId);\n    this.updateStatus(false);\n  }\n\n  toggle() {\n    if (this._isPlaying) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n}\n","import Spiral from './string_art_types/Spiral.js';\nimport Spirals from './string_art_types/Spirals.js';\nimport Wave from './string_art_types/Wave.js';\nimport Eye from './string_art_types/Eye.js';\nimport Mandala from './string_art_types/Mandala.js';\nimport Star from './string_art_types/Star.js';\nimport Assymetry from './string_art_types/Assymetry.js';\nimport Freestyle from './string_art_types/Freestyle.js';\nimport PolygonPattern from './string_art_types/PolygonPattern.js';\nimport Flower from './string_art_types/Flower.js';\nimport MaurerRose from './string_art_types/MaurerRose.js';\nimport FlowerOfLife from './string_art_types/FlowerOfLife.js';\nimport Comet from './string_art_types/Comet.js';\n\nconst patternTypes = [\n  Star,\n  Assymetry,\n  Mandala,\n  Spiral,\n  Spirals,\n  Wave,\n  Eye,\n  Freestyle,\n  PolygonPattern,\n  Flower,\n  MaurerRose,\n  FlowerOfLife,\n  Comet,\n];\n\nexport default patternTypes;\n","import Color from '../helpers/Color.js';\nimport StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    colorCount: 7,\n    color: '#ffbb29',\n    multicolorRange: '21',\n    multicolorStart: 32,\n    multicolorByLightness: true,\n    minLightness: 36,\n    maxLightness: 98,\n  },\n  exclude: ['repeatColors', 'mirrorColors'],\n});\n\nexport default class Spiral extends StringArt {\n  id = 'spiral';\n  name = 'Spiral';\n  link =\n    'https://www.etsy.com/il-en/listing/840974781/boho-wall-decor-artwork-spiral-round';\n  controls = [\n    {\n      ...Circle.nailsConfig,\n      defaultValue: 200,\n    },\n    {\n      key: 'repetition',\n      label: 'Repetition',\n      defaultValue: 5,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      key: 'innerLength',\n      label: 'Spiral thickness',\n      defaultValue: 0.5,\n      type: 'range',\n      attr: {\n        min: ({ config: { n } }) => 1 / n,\n        max: 1,\n        step: ({ config: { n } }) => 1 / n,\n      },\n      displayValue: ({ n, innerLength }) => Math.round(n * innerLength),\n    },\n    {\n      ...Circle.rotationConfig,\n      defaultValue: 0.75,\n    },\n    Circle.distortionConfig,\n    COLOR_CONFIG,\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, rotation, layers, margin, colorCount, repetition, distortion } =\n      this.config;\n    this.layersCount = layers ?? 1;\n    this.realRepetition = repetition * 2 - 1;\n\n    const circleConfig = {\n      size: this.size,\n      n,\n      margin,\n      rotation,\n      distortion,\n    };\n\n    if (this.circle) {\n      this.circle.setConfig(circleConfig);\n    } else {\n      this.circle = new Circle(circleConfig);\n    }\n\n    this.color = new Color({\n      ...this.config,\n      colorCount: layers ?? colorCount,\n    });\n\n    if (colorCount) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.getStepCount(),\n        colorCount,\n      });\n    }\n  }\n\n  *drawSpiral({ shift = 0, color = '#ffffff' } = {}) {\n    const { innerLength, n } = this.config;\n\n    let currentInnerLength = Math.round(innerLength * n);\n    let repetitionCount = 0;\n    this.renderer.setColor(color);\n    let prevPointIndex = shift;\n    let prevPoint = this.circle.getPoint(prevPointIndex);\n    let isPrevPoint = false;\n\n    for (let i = 0; currentInnerLength > 0; i++) {\n      if (this.colorMap) {\n        const stepColor = this.colorMap.get(i);\n        if (stepColor) {\n          this.renderer.setColor(stepColor);\n        }\n      }\n\n      prevPointIndex = isPrevPoint\n        ? prevPointIndex - currentInnerLength + 1\n        : prevPointIndex + currentInnerLength;\n\n      if (repetitionCount === this.realRepetition) {\n        currentInnerLength--;\n        repetitionCount = 0;\n        prevPointIndex++;\n      } else {\n        repetitionCount++;\n      }\n\n      const nextPoint = this.circle.getPoint(prevPointIndex);\n\n      this.renderer.renderLines(prevPoint, nextPoint);\n      prevPoint = nextPoint;\n\n      yield i;\n      isPrevPoint = !isPrevPoint;\n    }\n  }\n\n  *generateStrings() {\n    yield* this.drawSpiral({\n      color: this.color.getColor(0),\n    });\n  }\n\n  getStepCount() {\n    const { innerLength, repetition, n, layers = 1 } = this.config;\n    return Math.round(layers * n * (innerLength * 2) * repetition);\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails);\n  }\n\n  static thumbnailConfig = {\n    n: 60,\n  };\n}\n","const COLOR_CONTROLS = [\n  {\n    key: 'isMultiColor',\n    label: 'Use multiple colors',\n    defaultValue: false,\n    type: 'checkbox',\n  },\n  {\n    key: 'colorCount',\n    label: 'Colors count',\n    defaultValue: 7,\n    type: 'range',\n    attr: {\n      min: 1,\n      max: 20,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'color',\n    label: 'String color',\n    defaultValue: '#ff4d00',\n    type: 'color',\n    show: ({ isMultiColor }) => !isMultiColor,\n  },\n  {\n    key: 'multicolorRange',\n    label: 'Multicolor range',\n    defaultValue: 360,\n    type: 'range',\n    attr: {\n      min: 1,\n      max: 360,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'multicolorStart',\n    label: 'Multicolor start',\n    defaultValue: 0,\n    type: 'range',\n    attr: {\n      min: 0,\n      max: 360,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'saturation',\n    label: 'Saturation',\n    defaultValue: 100,\n    type: 'range',\n    attr: {\n      min: 0,\n      max: 100,\n      step: 1,\n    },\n    show: ({ isMultiColor }) => isMultiColor,\n  },\n  {\n    key: 'lightness',\n    label: 'Lightness',\n    type: 'group',\n    defaultValue: 'minimized',\n    show: ({ isMultiColor }) => isMultiColor,\n    children: [\n      {\n        key: 'multicolorByLightness',\n        label: 'Multi lightness',\n        defaultValue: false,\n        type: 'checkbox',\n        show: ({ isMultiColor }) => isMultiColor,\n      },\n      {\n        key: 'minLightness',\n        label: 'Minimum lightness',\n        defaultValue: 0,\n        type: 'range',\n        attr: {\n          min: 0,\n          max: 100,\n          step: 1,\n        },\n        show: ({ multicolorByLightness, isMultiColor }) =>\n          multicolorByLightness && isMultiColor,\n      },\n      {\n        key: 'maxLightness',\n        label: 'Maximum lightness',\n        defaultValue: 100,\n        type: 'range',\n        attr: {\n          min: 0,\n          max: 100,\n          step: 1,\n        },\n        show: ({ multicolorByLightness, isMultiColor }) =>\n          multicolorByLightness && isMultiColor,\n      },\n    ],\n  },\n  {\n    key: 'colorOrderGroup',\n    type: 'group',\n    label: 'Order',\n    defaultValue: 'minimized',\n    show: ({ isMultiColor }) => isMultiColor,\n    children: [\n      {\n        key: 'reverseColors',\n        label: 'Reverse colors order',\n        defaultValue: false,\n        type: 'checkbox',\n        show: ({ isMultiColor }) => isMultiColor,\n      },\n      {\n        key: 'repeatColors',\n        label: 'Repeat colors',\n        defaultValue: false,\n        type: 'checkbox',\n        show: ({ isMultiColor }) => isMultiColor,\n      },\n      {\n        key: 'mirrorColors',\n        label: 'Mirror Colors',\n        defaultValue: false,\n        type: 'checkbox',\n        show: ({ isMultiColor, repeatColors }) => isMultiColor && repeatColors,\n      },\n    ],\n  },\n];\n\nexport default class Color {\n  constructor(config) {\n    this.config = config;\n    const {\n      multicolorRange,\n      colorCount,\n      multicolorByLightness,\n      minLightness = 0,\n      maxLightness = 100,\n      multicolorStart,\n      darkMode,\n      saturation,\n      reverseColors,\n      repeatColors,\n      mirrorColors,\n      isMultiColor,\n    } = config;\n\n    if (isMultiColor) {\n      this.multiColorStep = multicolorRange / colorCount;\n      this.multiColorLightnessStep = multicolorByLightness\n        ? (maxLightness - minLightness) / (Math.max(colorCount, 2) - 1)\n        : 1;\n\n      this.colors = new Array(colorCount).fill(null).map((_, colorIndex) => {\n        const lightness = multicolorByLightness\n          ? minLightness + this.multiColorLightnessStep * colorIndex\n          : darkMode\n          ? 50\n          : 40;\n        return `hsl(${\n          multicolorStart + colorIndex * this.multiColorStep\n        }, ${saturation}%, ${lightness}%)`;\n      });\n\n      if (repeatColors && mirrorColors) {\n        const [_firstColor, ...restColors] = this.colors;\n        restColors.pop();\n        this.colors = [...this.colors, ...restColors.reverse()];\n      }\n\n      if (reverseColors) {\n        this.colors.reverse();\n      }\n    }\n  }\n\n  /**\n   * Returns the color to be used in the provided layer index. If no multiColor is used, will use the 'color' config property.\n   * @param {number} colorIndex\n   * @returns string\n   */\n  getColor(colorIndex) {\n    const { isMultiColor, colorCount, color, repeatColors, mirrorColors } =\n      this.config;\n\n    if (!isMultiColor) {\n      return color;\n    }\n\n    if (colorIndex >= colorCount) {\n      colorIndex = repeatColors\n        ? colorIndex % this.colors.length\n        : this.colors.length - 1;\n    }\n\n    return this.colors[colorIndex];\n  }\n\n  getColorMap({ stepCount, colorCount }) {\n    if (!colorCount) {\n      throw new Error(\"Can't get color map, no colorCount provided!\");\n    }\n    const stepsPerColor = Math.floor(stepCount / colorCount);\n    const colorMap = new Map();\n    for (let i = 0; i < colorCount; i++) {\n      colorMap.set(i * stepsPerColor, this.getColor(i));\n    }\n    return colorMap;\n  }\n\n  static getConfig({ include, exclude, defaults = {}, customControls }) {\n    const controls = getControls();\n\n    return {\n      key: 'colorGroup',\n      label: 'Color',\n      type: 'group',\n      children: [...(customControls ?? []), ...controls],\n    };\n\n    function getControls(controlsConfig = COLOR_CONTROLS) {\n      return controlsConfig\n        .filter(\n          ({ key }) =>\n            (!exclude || !exclude.includes(key)) &&\n            (!include || include.includes(key))\n        )\n        .map(control => {\n          const finalControl = {\n            ...control,\n            defaultValue: defaults[control.key] ?? control.defaultValue,\n          };\n\n          if (control.type === 'group') {\n            finalControl.children = getControls(control.children);\n          }\n          return Object.freeze(finalControl);\n        });\n    }\n  }\n}\n","import Nails from './Nails.js';\nimport Renderer from './renderers/Renderer.js';\n\nconst COLORS = {\n  dark: '#0e0e0e',\n  light: '#ffffff',\n};\n\nconst COMMON_CONFIG_CONTROLS = [\n  {\n    key: 'strings',\n    label: 'Strings',\n    type: 'group',\n    defaultValue: 'minimized',\n    children: [\n      {\n        key: 'showStrings',\n        label: 'Show strings',\n        defaultValue: true,\n        type: 'checkbox',\n        isDisabled: ({ showNails }) => !showNails,\n      },\n      {\n        key: 'stringWidth',\n        label: 'String width',\n        defaultValue: 1,\n        type: 'range',\n        attr: { min: 0.2, max: 4, step: 0.1 },\n        show: ({ showStrings }) => showStrings,\n      },\n    ],\n  },\n  {\n    key: 'nails',\n    label: 'Nails',\n    type: 'group',\n    defaultValue: 'minimized',\n    children: [\n      {\n        key: 'showNails',\n        label: 'Show nails',\n        defaultValue: true,\n        type: 'checkbox',\n        isDisabled: ({ showStrings }) => !showStrings,\n      },\n      {\n        key: 'showNailNumbers',\n        label: 'Show nail numbers',\n        defaultValue: false,\n        type: 'checkbox',\n        show: ({ showNails }) => showNails,\n      },\n      {\n        key: 'nailNumbersFontSize',\n        label: 'Nail numbers font size',\n        defaultValue: 10,\n        type: 'range',\n        attr: { min: 6, max: 24, step: 0.5 },\n        displayValue: ({ nailNumbersFontSize }) => `${nailNumbersFontSize}px`,\n        show: ({ showNails, showNailNumbers }) => showNails && showNailNumbers,\n      },\n      {\n        key: 'margin',\n        label: 'Margin',\n        defaultValue: 20,\n        type: 'number',\n        attr: { min: 0, max: 500, step: 1 },\n        displayValue: ({ margin }) => `${margin}px`,\n      },\n      {\n        key: 'nailRadius',\n        label: 'Nail size',\n        defaultValue: 1.5,\n        type: 'range',\n        attr: { min: 0.5, max: 5, step: 0.25 },\n        show: ({ showNails }) => showNails,\n      },\n      {\n        key: 'nailsColor',\n        label: 'Nails color',\n        defaultValue: '#ffffff',\n        type: 'color',\n        show: ({ showNails }) => showNails,\n      },\n    ],\n  },\n  {\n    key: 'background',\n    label: 'Background',\n    type: 'group',\n    defaultValue: 'minimized',\n    children: [\n      {\n        key: 'darkMode',\n        label: 'Dark mode',\n        defaultValue: true,\n        type: 'checkbox',\n        isDisabled: ({ enableBackground }) => !enableBackground,\n      },\n      {\n        key: 'customBackgroundColor',\n        label: 'Custom background color',\n        defaultValue: false,\n        type: 'checkbox',\n        isDisabled: ({ enableBackground }) => !enableBackground,\n      },\n      {\n        key: 'backgroundColor',\n        label: 'Background color',\n        defaultValue: COLORS.dark,\n        type: 'color',\n        show: ({ customBackgroundColor }) => customBackgroundColor,\n        isDisabled: ({ enableBackground }) => !enableBackground,\n      },\n      {\n        key: 'enableBackground',\n        label: 'Enable background',\n        defaultValue: true,\n        type: 'checkbox',\n      },\n    ],\n  },\n];\n\nclass StringArt {\n  constructor(renderer) {\n    if (!renderer) {\n      throw new Error('Renderer not specified!');\n    }\n\n    if (!(renderer instanceof Renderer)) {\n      throw new Error('Renderer is not an instance of Renderer!');\n    }\n\n    this.renderer = renderer;\n  }\n\n  get configControls() {\n    return (this.controls ?? []).concat(COMMON_CONFIG_CONTROLS);\n  }\n\n  get controlsIndex() {\n    if (!this._controlsIndex) {\n      this._controlsIndex = getControlsIndex(this.controls);\n    }\n\n    return this._controlsIndex;\n  }\n\n  get defaultConfig() {\n    if (!this._defaultConfig) {\n      this._defaultConfig = Object.freeze(\n        Object.assign(flattenConfig(this.configControls), this.defaultValues)\n      );\n    }\n\n    return this._defaultConfig;\n  }\n\n  get config() {\n    return this._config ?? this.defaultConfig;\n  }\n\n  set config(value) {\n    this._config = Object.assign({}, this.defaultConfig, value);\n  }\n\n  setConfig(config) {\n    const currentConfig = this.config;\n    this.config = config;\n    if (this.onConfigChange) {\n      const changedControlKeys = Object.keys(currentConfig).filter(\n        key => config[key] !== currentConfig[key]\n      );\n\n      this.onConfigChange({\n        controls: changedControlKeys.map(key => ({\n          control: this.controlsIndex[key],\n          value: config[key],\n        })),\n      });\n    }\n  }\n\n  resetStructure() {}\n\n  onConfigChange({ controls }) {\n    if (controls.some(({ control }) => control.isStructural)) {\n      this.resetStructure();\n      if (\n        this.stepCount != null &&\n        controls.some(({ control }) => control.affectsStepCount !== false)\n      ) {\n        this.stepCount = null;\n      }\n    }\n  }\n\n  onResize() {\n    this.resetStructure();\n  }\n\n  setConfigValue(controlKey, value) {\n    this._config = Object.freeze({\n      ...(this._config ?? this.defaultConfig),\n      [controlKey]: value,\n    });\n\n    if (this.onConfigChange) {\n      this.onConfigChange({\n        controls: [{ control: this.controlsIndex[controlKey], value }].filter(\n          ({ control }) => !!control\n        ),\n      });\n    }\n  }\n\n  getSize() {\n    return this.renderer.getSize();\n  }\n\n  setUpDraw() {\n    const previousSize = this.size;\n    this.renderer.reset();\n    const [width, height] = (this.size = this.getSize());\n    Object.assign(this, this.size);\n    this.center = this.size.map(value => value / 2);\n\n    if (\n      previousSize &&\n      (previousSize[0] !== width || previousSize[1] !== height)\n    ) {\n      if (this.onResize) {\n        this.onResize();\n      }\n    }\n\n    if (this.nails) {\n      this.nails.setConfig(this.config);\n    } else {\n      this.nails = new Nails(this.renderer, this.config);\n    }\n\n    this.renderer.setLineWidth(this.config.stringWidth);\n  }\n\n  afterDraw() {\n    const { showNails, showNailNumbers } = this.config;\n    if (showNails) {\n      this.drawNails();\n      this.nails.fill({ drawNumbers: showNailNumbers });\n    }\n  }\n\n  initDraw() {\n    this.setUpDraw(this.config);\n    const {\n      showNails,\n      showNailNumbers,\n      darkMode,\n      backgroundColor,\n      customBackgroundColor,\n      enableBackground,\n    } = this.config;\n\n    if (enableBackground) {\n      this.renderer.setBackground(\n        customBackgroundColor\n          ? backgroundColor\n          : darkMode\n          ? COLORS.dark\n          : COLORS.light\n      );\n    }\n\n    if (showNails) {\n      this.drawNails();\n      this.nails.fill({ drawNumbers: showNailNumbers });\n    }\n  }\n\n  /**\n   * Draws the string art\n   * @param { step: number } renderConfig configuration for rendering. Accepts the step to render (leave undefined or null to render all)\n   */\n  draw({ position = Infinity } = {}) {\n    this.initDraw();\n    const { showStrings } = this.config;\n\n    if (showStrings) {\n      this.stringsIterator = this.generateStrings();\n      this.position = 0;\n\n      while (!this.drawNext().done && this.position < position);\n      this.afterDraw();\n    }\n  }\n\n  goto(position) {\n    if (position === this.position) {\n      return;\n    }\n\n    if (this.stringsIterator && position > this.position) {\n      while (!this.drawNext().done && this.position < position);\n    } else {\n      this.draw({ position });\n    }\n  }\n\n  drawNext() {\n    const result = this.stringsIterator.next();\n\n    if (result.done) {\n      this.afterDraw();\n    } else {\n      this.position++;\n    }\n\n    return result;\n  }\n\n  generateStrings() {\n    throw new Error('generateStrings method not defined!');\n  }\n\n  getStepCount() {\n    throw new Error(\n      `'getStepCount' method not implemented for string art type \"${this.name}\"`\n    );\n  }\n}\n\nfunction flattenConfig(configControls) {\n  return configControls.reduce(\n    (config, { key, defaultValue, children }) =>\n      children\n        ? {\n            ...config,\n            ...flattenConfig(children),\n          }\n        : {\n            ...config,\n            [key]: defaultValue,\n          },\n    {}\n  );\n}\n\nfunction getControlsIndex(configControls) {\n  return configControls.reduce(\n    (controlsIndex, control) =>\n      control.children\n        ? {\n            ...controlsIndex,\n            ...getControlsIndex(control.children),\n          }\n        : {\n            ...controlsIndex,\n            [control.key]: control,\n          },\n    {}\n  );\n}\n\nexport default StringArt;\n","const NUMBER_MARGIN = 4;\n\nexport default class Nails {\n  constructor(renderer, config) {\n    this.setConfig(config);\n    this.nails = [];\n    this.addedPoints = new Set();\n    this.renderer = renderer;\n  }\n\n  setConfig({ nailRadius, nailsColor, nailNumbersFontSize }) {\n    this.nailRadius = nailRadius;\n    this.nailsColor = nailsColor;\n    this.nailNumbersFontSize = nailNumbersFontSize;\n    this.nails = [];\n    if (this.addedPoints) {\n      this.addedPoints.clear();\n    }\n  }\n\n  // Adds a nail to be rendered. nail: { point, number }\n  addNail(nail) {\n    const nailPoint = nail.point.map(Math.round).join('_');\n    if (!this.addedPoints.has(nailPoint)) {\n      this.nails.push(nail);\n      this.addedPoints.add(nailPoint);\n    }\n  }\n\n  fill({ drawNumbers = true } = {}) {\n    this.renderer.renderNails(this.nails, {\n      color: this.nailsColor,\n      fontSize: this.nailNumbersFontSize,\n      radius: this.nailRadius,\n      renderNumbers: drawNumbers,\n      margin: NUMBER_MARGIN,\n    });\n\n    this.nails = [];\n    this.addedPoints.clear();\n  }\n}\n","export default class Renderer {\n  constructor(parentElement) {\n    this.parentElement = parentElement;\n  }\n\n  destroy() {\n    this.parentElement.removeElement(this.element);\n  }\n\n  get element() {\n    throw new Error('element getter not implemented!');\n  }\n\n  reset() {}\n\n  setColor(color) {\n    this.color = color;\n  }\n\n  setLineWidth(width) {}\n\n  setBackground(color) {}\n\n  renderLines(startPosition, ...positions) {\n    throw new Error('Renderer \"renderLines\" method not implemented!');\n  }\n\n  /**\n   * Renders the nails for the string art\n   * @param {[{ point: [x: number, y: number], number: string }]} nails\n   * @param {*} param1\n   */\n  renderNails(nails, { color, fontSize, radius, renderNumbers, margin }) {\n    throw new Error('Renderer \"renderNails\" method not implemented!');\n  }\n\n  getSize() {\n    const { width, height } = this.parentElement.getBoundingClientRect();\n    return [width, height];\n  }\n\n  setSize(size) {\n    this.size = size;\n\n    this.element.removeAttribute('width');\n    this.element.removeAttribute('height');\n\n    if (size) {\n      this.element.style.width = `${size.width}px`;\n      this.element.style.height = `${size.height}px`;\n    } else {\n      this.element.removeAttribute('style');\n    }\n  }\n\n  clear() {\n    throw new Error('Renderer \"clear\" method not implemented!');\n  }\n\n  toDataURL() {\n    throw new Error('Renderer \"toDataURL\" method not implemented!');\n  }\n}\n","import Nails from '../Nails.js';\nimport easing from './easing.js';\nimport { fitInside, PI2 } from './math_utils.js';\n\nexport default class Circle {\n  constructor(config) {\n    this.setConfig(config);\n  }\n\n  getPoint(index = 0) {\n    const realIndex = this.getNailIndex(index);\n\n    if (this.points.has(index)) {\n      return this.points.get(index);\n    }\n\n    const angle =\n      this.easingFunction(realIndex / this.config.n) * PI2 + this.rotationAngle;\n\n    const point = [\n      this.center[0] + Math.sin(angle) * this.xyRadius[0],\n      this.center[1] + Math.cos(angle) * this.xyRadius[1],\n    ];\n\n    this.points.set(index, point);\n    return point;\n  }\n\n  getNailIndex(index = 0) {\n    let realIndex = this.isReverse ? this.config.n - 1 - index : index;\n    if (realIndex > this.config.n - 1) {\n      realIndex = realIndex % this.config.n;\n    }\n    return realIndex;\n  }\n\n  setConfig(config) {\n    const serializedConfig = this._serializeConfig(config);\n    if (serializedConfig !== this.serializedConfig) {\n      const {\n        n,\n        size,\n        margin = 0,\n        rotation = 0,\n        center: configCenter,\n        radius,\n        reverse = false,\n      } = config;\n      const center = configCenter ?? size.map(v => v / 2);\n      const clampedRadius = radius ?? Math.min(...center) - margin;\n      let xyRadius = [clampedRadius, clampedRadius];\n\n      if (config.distortion) {\n        const distortedBox =\n          config.distortion < 0\n            ? [clampedRadius * (1 - Math.abs(config.distortion)), clampedRadius]\n            : [clampedRadius / (1 - config.distortion), clampedRadius];\n\n        xyRadius = fitInside(\n          distortedBox,\n          center.map(v => v - margin)\n        );\n      }\n\n      const props = {\n        center,\n        radius: clampedRadius,\n        xyRadius,\n        indexAngle: PI2 / n,\n        rotationAngle: -PI2 * rotation,\n        isReverse: reverse,\n      };\n\n      const easingFunction = config.displacementFunc\n        ? easing[config.displacementFunc]\n        : easing.linear;\n      const easingParams = [];\n      if (easingFunction.requirePower) {\n        easingParams.push(config.displacementMag);\n      }\n      if (easingFunction.requireFastArea) {\n        easingParams.push(config.displacementFastArea);\n      }\n      const easingFunctionWithParams = easingParams.length\n        ? easingFunction.bind(null, ...easingParams)\n        : easingFunction;\n\n      this.easingFunction = easingFunctionWithParams;\n      this.config = config;\n      this.serializedConfig = serializedConfig;\n      Object.assign(this, props);\n      if (this.points) {\n        this.points.clear();\n      } else {\n        this.points = new Map();\n      }\n    }\n  }\n\n  _serializeConfig({\n    n,\n    size,\n    margin = 0,\n    rotation = 0,\n    center,\n    radius,\n    reverse = false,\n    distortion = 0,\n    displacementFunc,\n    displacementMag,\n    displacementFastArea,\n  }) {\n    return [\n      size?.join(','),\n      center?.join(','),\n      radius,\n      margin,\n      n,\n      rotation,\n      reverse,\n      distortion,\n    ]\n      .concat(\n        displacementFunc === 'linear'\n          ? []\n          : [displacementFunc, displacementMag, displacementFastArea]\n      )\n      .join('_');\n  }\n\n  /**\n   * Given a Nails instance, uses it to draw the nails of this Circle\n   * @param {Nails} nails\n   * @param {{nailsNumberStart?: number, getNumber?: Function}} param1\n   */\n  drawNails(nails, { nailsNumberStart = 0, getNumber } = {}) {\n    for (let i = 0; i < this.config.n; i++) {\n      nails.addNail({\n        point: this.getPoint(i),\n        number: getNumber ? getNumber(i) : i + nailsNumberStart,\n      });\n    }\n  }\n\n  *drawRing(renderer, { ringSize, color }) {\n    const { n } = this.config;\n    const ringDistance = Math.floor(ringSize * n);\n\n    let prevPoint;\n    let prevPointIndex = 0;\n    let isPrevSide = false;\n    renderer.setColor(color);\n\n    for (let i = 0; i < n; i++) {\n      if (!prevPoint) {\n        prevPoint = this.getPoint(0);\n      }\n\n      const startPoint = prevPoint;\n      const positions = [];\n      prevPointIndex = isPrevSide ? i : prevPointIndex + ringDistance;\n      prevPoint = this.getPoint(prevPointIndex);\n      positions.push(prevPoint);\n\n      if (i < n - 1) {\n        prevPointIndex++;\n        prevPoint = this.getPoint(prevPointIndex);\n        positions.push(prevPoint);\n      }\n\n      renderer.renderLines(startPoint, ...positions);\n      yield;\n\n      isPrevSide = !isPrevSide;\n    }\n  }\n\n  static rotationConfig = Object.freeze({\n    key: 'rotation',\n    label: 'Rotation',\n    defaultValue: 0,\n    type: 'range',\n    attr: {\n      min: 0,\n      max: 1 + 1 / 360,\n      step: 1 / 360,\n    },\n    displayValue: (config, { key }) => `${Math.round(config[key] * 360)}°`,\n    isStructural: true,\n    affectsStepCount: false,\n  });\n\n  static nailsConfig = Object.freeze({\n    key: 'n',\n    label: 'Number of nails',\n    defaultValue: 144,\n    type: 'range',\n    attr: {\n      min: 3,\n      max: 300,\n      step: 1,\n    },\n    isStructural: true,\n  });\n\n  static displacementConfig = Object.freeze({\n    key: 'displacement',\n    label: 'Displacement',\n    type: 'group',\n    children: [\n      {\n        key: 'displacementFunc',\n        label: 'Displacement function',\n        defaultValue: 'linear',\n        type: 'select',\n        options: Object.keys(easing),\n        isStructural: true,\n        affectsStepCount: false,\n      },\n      {\n        key: 'displacementMag',\n        label: 'Displacement magnitude',\n        defaultValue: 3,\n        type: 'range',\n        attr: {\n          min: 0,\n          max: 10,\n          step: 0.1,\n        },\n        show: ({ displacementFunc }) => easing[displacementFunc].requirePower,\n        isStructural: true,\n        affectsStepCount: false,\n      },\n      {\n        key: 'displacementFastArea',\n        label: 'Displacement fast area',\n        defaultValue: 0.4,\n        type: 'range',\n        attr: {\n          min: 0,\n          max: 0.5,\n          step: 0.01,\n        },\n        show: ({ displacementFunc }) =>\n          easing[displacementFunc].requireFastArea,\n        isStructural: true,\n        affectsStepCount: false,\n      },\n    ],\n  });\n\n  static distortionConfig = Object.freeze({\n    key: 'distortion',\n    label: 'Distortion',\n    defaultValue: 0,\n    type: 'range',\n    attr: {\n      min: -0.99,\n      max: 0.99,\n      step: 0.01,\n    },\n    isStructural: true,\n    affectsStepCount: false,\n  });\n}\n","const easing = {\n  linear: x => x,\n  inOutCirc(x) {\n    return x < 0.5\n      ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2\n      : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;\n  },\n  easeOutQuint(x) {\n    return 1 - Math.pow(1 - x, 5);\n  },\n  fastSlowFast(t) {\n    // Clamp t to [0,1] just to be safe\n    t = Math.max(0, Math.min(1, t));\n    // Custom easing formula: accelerates, slows in middle, then accelerates again\n    return 0.5 * (1 - Math.cos(Math.PI * t)) ** 1.5;\n  },\n  fastInOutSquare(x) {\n    return x <= 0.5\n      ? (1 - Math.pow(1 - x * 2, 2)) / 2\n      : 0.5 + Math.pow(x * 2 - 1, 2) / 2;\n  },\n  fastInOutCubic(x) {\n    return x <= 0.5\n      ? (1 - Math.pow(1 - x * 2, 3)) / 2\n      : 0.5 + Math.pow(x * 2 - 1, 3) / 2;\n  },\n  fastInOutQuint(x) {\n    return x <= 0.5\n      ? (1 - Math.pow(1 - x * 2, 5)) / 2\n      : 0.5 + Math.pow(x * 2 - 1, 5) / 2;\n  },\n  fastInOut(pow, x) {\n    return x <= 0.5\n      ? (1 - Math.pow(1 - x * 2, pow)) / 2\n      : 0.5 + Math.pow(x * 2 - 1, pow) / 2;\n  },\n  fastInOutFixed(pow, fastArea, x) {\n    if (x > fastArea && x < 1 - fastArea) {\n      const y1 = (1 - Math.pow(1 - fastArea * 2, pow)) / 2;\n      const y2 = 0.5 + Math.pow((1 - fastArea) * 2 - 1, pow) / 2;\n\n      return y1 + ((x - fastArea) * (y2 - y1)) / (1 - 2 * fastArea);\n    }\n    return x <= fastArea\n      ? (1 - Math.pow(1 - x * 2, pow)) / 2\n      : 0.5 + Math.pow(x * 2 - 1, pow) / 2;\n  },\n};\n\neasing.fastInOut.requirePower = true;\neasing.fastInOutFixed.requirePower = true;\neasing.fastInOutFixed.requireFastArea = true;\n\nexport default easing;\n","/**\n * Returns the greatest common divisor of two integers\n * https://en.wikipedia.org/wiki/Euclidean_algorithm\n * @param {number} int1\n * @param {number} int2\n * @returns number\n */\nexport function gcd(int1, int2) {\n  if (!int2) return int1;\n\n  return gcd(int2, int1 % int2);\n}\n\n/**\n * Fits the first size inside size2\n * @param {[number, number]} size1\n * @param {[number, number]} size2\n */\nexport function fitInside(size1, size2) {\n  const ratio = Math.min(size2[0] / size1[0], size2[1] / size1[1]);\n  return size1.map(v => v * ratio);\n}\n\nexport const PI2 = Math.PI * 2;\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Color from '../helpers/Color.js';\nimport { PI2 } from '../helpers/math_utils.js';\n\nclass Spirals extends StringArt {\n  name = 'Spirals';\n  id = 'spirals';\n  link =\n    'https://www.etsy.com/il-en/listing/974865185/3d-string-art-spiral-mandala-wall?ref=shop_home_active_10&frs=1';\n  controls = [\n    {\n      key: 'radiusIncrease',\n      label: 'Radius change',\n      defaultValue: 5.7,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 0.1 },\n    },\n    {\n      key: 'angleStep',\n      label: 'Angle step',\n      defaultValue: 0.45,\n      type: 'range',\n      attr: { min: 0, max: 1, step: 0.01 },\n    },\n    {\n      key: 'nSpirals',\n      label: 'Number of spirals',\n      defaultValue: 3,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      ...Circle.rotationConfig,\n      defaultValue: 330 / 360,\n    },\n    Color.getConfig({\n      defaults: {\n        isMultiColor: true,\n        colorCount: 4,\n        color: '#00d5ff',\n        multicolorRange: 1,\n        multicolorStart: 190,\n        multicolorByLightness: true,\n        minLightness: 50,\n        maxLightness: 88,\n        reverseColors: true,\n      },\n    }),\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n\n    const {\n      nSpirals,\n      rotation,\n      margin,\n      radiusIncrease,\n      angleStep,\n      colorCount,\n    } = this.config;\n\n    this.spiralRotations = new Array(nSpirals)\n      .fill(null)\n      .map((_, i) => (i * PI2) / nSpirals);\n    this.rotationAngle = -PI2 * rotation;\n    const maxRadius = Math.min(...this.size) / 2 - margin;\n    this.nailsPerSpiral = Math.floor(maxRadius / radiusIncrease);\n    this.angleIncrease = angleStep / (maxRadius / 50);\n    this.color = new Color(this.config);\n    this.colorMap = this.color.getColorMap({\n      stepCount: this.getStepCount(),\n      colorCount,\n    });\n  }\n\n  *generatePoints() {\n    const { nSpirals } = this.config;\n\n    for (let i = 0; i < this.nailsPerSpiral; i++) {\n      for (let s = 0; s < nSpirals; s++) {\n        const point = this.getPoint(s, i);\n        yield { point, nailNumber: `${s}_${i}` };\n      }\n    }\n  }\n\n  getPoint(spiralIndex, index) {\n    const [centerx, centery] = this.center;\n    const { radiusIncrease } = this.config;\n\n    const angle =\n      this.rotationAngle +\n      this.angleIncrease * index +\n      this.spiralRotations[spiralIndex];\n    const radius = index * radiusIncrease;\n\n    return [\n      centerx + radius * Math.sin(angle),\n      centery + radius * Math.cos(angle),\n    ];\n  }\n\n  *generateStrings() {\n    const points = this.generatePoints();\n    let index = 0;\n    this.renderer.setColor(this.color.getColor(0));\n    let lastPoint = this.center;\n\n    for (const { point } of points) {\n      if (this.colorMap) {\n        const stepColor = this.colorMap.get(index);\n        if (stepColor) {\n          this.renderer.setColor(stepColor);\n        }\n      }\n\n      if (lastPoint) {\n        this.renderer.renderLines(lastPoint, point);\n      }\n      lastPoint = point;\n      yield index++;\n    }\n  }\n\n  getStepCount() {\n    const { nSpirals, radiusIncrease, margin } = this.config;\n    const maxRadius = Math.min(...this.getSize()) / 2 - margin;\n    const n = Math.floor(maxRadius / radiusIncrease);\n    return n * nSpirals;\n  }\n\n  drawNails() {\n    const points = this.generatePoints();\n    for (const { point, nailNumber } of points) {\n      this.nails.addNail({ point, number: nailNumber });\n    }\n  }\n\n  static thumbnailConfig = {\n    radiusIncrease: 1.4,\n    angleStep: 0.11,\n  };\n}\n\nexport default Spirals;\n","import Color from '../helpers/Color.js';\nimport Circle from '../helpers/Circle.js';\nimport Mandala from './Mandala.js';\n\nexport default class Wave extends Mandala {\n  id = 'wave';\n  name = 'Wave';\n  link =\n    'https://www.etsy.com/il-en/listing/943140543/personalized-gift-string-art-mandala?ref=sim_rv-5&pro=1';\n  controls = [\n    {\n      ...Circle.nailsConfig,\n      defaultValue: 200,\n    },\n    {\n      key: 'layerFill',\n      label: 'Layer fill',\n      defaultValue: 0.5,\n      type: 'range',\n      attr: {\n        min: ({ config: { n } }) => 1 / n,\n        max: 1,\n        step: ({ config: { n } }) => 1 / n,\n      },\n      displayValue: ({ layerFill }) => Math.floor(100 * layerFill) + '%',\n    },\n    {\n      ...Circle.rotationConfig,\n      defaultValue: 176 / 360,\n    },\n    Circle.distortionConfig,\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 11,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      key: 'layerSpread',\n      label: 'Layer spread',\n      defaultValue: 15 / 200,\n      type: 'range',\n      attr: {\n        min: 0,\n        max: 1,\n        step: ({ config: { n } }) => 1 / n,\n      },\n      displayValue: ({ layerSpread, n }) => Math.round(layerSpread * n),\n    },\n    {\n      key: 'reverse',\n      label: 'Reverse',\n      defaultValue: true,\n      type: 'checkbox',\n    },\n    Color.getConfig({\n      defaults: {\n        isMultiColor: true,\n        multicolorRange: 216,\n        multicolorStart: 263,\n        color: '#ffffff',\n        multicolorByLightness: true,\n        minLightness: 10,\n        maxLightness: 90,\n      },\n      exclude: ['colorCount'],\n    }),\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, layerSpread } = this.config;\n    this.layerShift = Math.round(n * layerSpread);\n    this.base = 2;\n  }\n\n  *generateStrings() {\n    const { layers, reverse } = this.config;\n\n    for (let layer = 0; layer < layers; layer++) {\n      yield* this.drawTimesTable({\n        color: this.color.getColor(layer),\n        shift: this.layerShift * (reverse ? 1 : -1) * layer,\n        time: layer,\n      });\n    }\n  }\n\n  static thumbnailConfig = {\n    n: 70,\n  };\n}\n","import Color from '../helpers/Color.js';\nimport StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nexport default class Mandala extends StringArt {\n  name = 'Mandala';\n  id = 'mandala';\n  link = 'https://www.youtube.com/watch?v=qhbuKbxJsk8';\n  linkText = 'Learn';\n  controls = [\n    {\n      key: 'n',\n      label: 'Number of nails',\n      defaultValue: 180,\n      type: 'range',\n      attr: { min: 3, max: 240, step: 1 },\n    },\n    {\n      key: 'base',\n      label: 'Multiplication',\n      defaultValue: 2,\n      type: 'range',\n      attr: { min: 2, max: 99, step: 1 },\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 7,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    Circle.rotationConfig,\n    Circle.distortionConfig,\n    Color.getConfig({\n      defaults: {\n        isMultiColor: true,\n        multicolorRange: 180,\n        multicolorStart: 256,\n        color: '#ff4d00',\n      },\n      exclude: ['colorCount'],\n    }),\n  ];\n\n  get n() {\n    if (!this._n) {\n      const { n, layers } = this.config;\n      const extraNails = n % layers;\n      this._n = n - extraNails; // The number of nails should be a multiple of the layers, so the strings are exactly on the nails.\n    }\n\n    return this._n;\n  }\n\n  setUpDraw() {\n    this._n = null;\n    super.setUpDraw();\n\n    const { layers, rotation, distortion, margin, layerFill, base, reverse } =\n      this.config;\n    const circleConfig = {\n      size: this.size,\n      n: this.n,\n      margin,\n      rotation,\n      distortion,\n      reverse,\n    };\n    this.stringsPerLayer = layerFill ? Math.floor(this.n * layerFill) : this.n;\n\n    if (this.circle) {\n      this.circle.setConfig(circleConfig);\n    } else {\n      this.circle = new Circle(circleConfig);\n    }\n\n    this.color = new Color({\n      ...this.config,\n      colorCount: layers,\n    });\n\n    this.layerShift = Math.floor(this.n / layers);\n    this.base = base;\n  }\n\n  *drawTimesTable({ shift = 0, color = '#f00', time }) {\n    const n = this.n;\n    this.renderer.setColor(color);\n\n    let point = this.circle.getPoint(shift);\n\n    for (let i = 1; i <= this.stringsPerLayer; i++) {\n      const startPoint = point;\n      point = this.circle.getPoint(i + shift);\n      const toIndex = (i * this.base) % n;\n      this.renderer.renderLines(\n        startPoint,\n        point,\n        this.circle.getPoint(toIndex + shift)\n      );\n\n      yield {\n        instructions: `${i - 1} → ${i} → ${toIndex} → ${i}`,\n        index: time * n + i,\n      };\n    }\n  }\n\n  *generateStrings() {\n    const { layers } = this.config;\n\n    for (let time = 0; time < layers; time++) {\n      const color = this.color.getColor(time);\n      yield* this.drawTimesTable({\n        time,\n        color,\n        shift: this.layerShift * time,\n      });\n    }\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails);\n  }\n\n  getStepCount() {\n    const { layers, layerFill } = this.config;\n    const stringsPerLayer = layerFill ? Math.floor(this.n * layerFill) : this.n;\n    return (layers ?? 1) * stringsPerLayer;\n  }\n\n  static thumbnailConfig = {\n    n: 70,\n  };\n}\n","import StringArt from '../StringArt.js';\n\nconst SIDES = ['left', 'bottom', 'right', 'top'];\nconst SIDES_ORDER = ['left', 'bottom', 'right', 'top'];\n\nconst SIDES_ROTATION = {\n  left: 0,\n  bottom: Math.PI / 2,\n  right: Math.PI,\n  top: Math.PI * 1.5,\n};\n\nclass Eye extends StringArt {\n  name = 'Eye';\n  id = 'eye';\n  link =\n    'https://www.etsy.com/listing/489853161/rose-of-space-string-art-sacred-geometry?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=string+art&ref=sr_gallery_1&epik=dj0yJnU9WXNpM1BDTnNkLVBtcWdCa3AxN1J5QUZRY1FlbkJ5Z18mcD0wJm49ZXdJb2JXZmVpNVVwN1NKQ3lXMy10ZyZ0PUFBQUFBR0ZuUzZv';\n  controls = [\n    {\n      key: 'n',\n      label: 'Number of nails per side',\n      defaultValue: 82,\n      type: 'range',\n      attr: { min: 2, max: 200, step: 1 },\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 13,\n      type: 'range',\n      attr: { min: 1, max: 20, step: 1 },\n    },\n    {\n      key: 'angle',\n      label: 'Layer angle',\n      defaultValue: 30,\n      displayValue: ({ angle }) => `${angle}°`,\n      type: 'range',\n      attr: { min: 0, max: 45, step: 1 },\n    },\n    {\n      key: 'color',\n      label: 'Color',\n      type: 'group',\n      children: [\n        {\n          key: 'color1',\n          label: 'String #1 color',\n          defaultValue: '#11e8bd',\n          type: 'color',\n        },\n        {\n          key: 'color2',\n          label: 'String #2 color',\n          defaultValue: '#6fff52',\n          type: 'color',\n        },\n        {\n          key: 'colorPerLayer',\n          label: 'Color per layer',\n          defaultValue: false,\n          type: 'checkbox',\n        },\n      ],\n    },\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n\n    const { n, angle, layers, margin } = this.config;\n\n    this.maxSize = Math.min(...this.size) - 2 * margin;\n    this.nailSpacing = this.maxSize / (n - 1);\n    this.layerAngle = (angle * Math.PI) / 180;\n\n    this.layers = new Array(layers)\n      .fill(null)\n      .map((_, layerIndex) => this._getLayerProps(layerIndex));\n  }\n\n  // Sides: top, right, bottom, left\n  getPoint({ index, angle, layerStart, rotation }) {\n    const theta = angle + rotation;\n\n    const point = {\n      x: layerStart.x,\n      y: layerStart.y + this.nailSpacing * index,\n    };\n\n    const pivot = { x: this.center[0], y: this.center[1] };\n\n    const cosAngle = Math.cos(theta);\n    const sinAngle = Math.sin(theta);\n\n    const position = [\n      cosAngle * (point.x - pivot.x) - sinAngle * (point.y - pivot.y) + pivot.x,\n      sinAngle * (point.x - pivot.x) + cosAngle * (point.y - pivot.y) + pivot.y,\n    ];\n    return position;\n  }\n\n  *drawSide({\n    side,\n    color = '#ffffff',\n    angle,\n    size,\n    layerStart,\n    layerStringCount,\n  }) {\n    const sideIndex = SIDES.indexOf(side);\n    const nextSide = SIDES[sideIndex === SIDES.length - 1 ? 0 : sideIndex + 1];\n    const rotation = SIDES_ROTATION[side];\n    const nextSideRotation = SIDES_ROTATION[nextSide];\n\n    const sideProps = { layerStringCount, size, layerStart, angle };\n    this.renderer.setColor(color);\n\n    for (let i = 0; i <= layerStringCount; i++) {\n      this.renderer.renderLines(\n        this.getPoint({ side, index: i, rotation, ...sideProps }),\n        this.getPoint({\n          side: nextSide,\n          index: i,\n          rotation: nextSideRotation,\n          ...sideProps,\n        })\n      );\n\n      yield i;\n    }\n  }\n\n  _getLayerProps(layerIndex) {\n    const colors = this._getLayerColors(layerIndex);\n    const layerAngle = this.layerAngle * layerIndex;\n    const layerSize =\n      this.maxSize /\n      Math.pow(\n        Math.cos(this.layerAngle) + Math.sin(this.layerAngle),\n        layerIndex\n      );\n    const layerStart = {\n      x: this.center[0] - layerSize / 2,\n      y: this.center[1] - layerSize / 2,\n    };\n    const layerStringCount = Math.floor(layerSize / this.nailSpacing);\n\n    return {\n      colors,\n      layerAngle,\n      layerSize,\n      layerStart,\n      layerStringCount,\n    };\n  }\n\n  _getLayerColors(layerIndex) {\n    const { color1, color2, colorPerLayer } = this.config;\n    if (colorPerLayer) {\n      const layerColor = layerIndex % 2 ? color1 : color2;\n      return [layerColor, layerColor, layerColor, layerColor];\n    } else {\n      return [color2, color1, color2, color1];\n    }\n  }\n\n  *drawLayer(layerIndex) {\n    const { colors, layerAngle, layerSize, layerStart, layerStringCount } =\n      this.layers[layerIndex];\n\n    for (let i = 0; i < SIDES.length; i++) {\n      yield* this.drawSide({\n        color: colors[i],\n        side: SIDES_ORDER[i],\n        angle: layerAngle,\n        size: layerSize,\n        layerStart,\n        layerStringCount,\n      });\n    }\n  }\n\n  *generateStrings() {\n    const { layers } = this.config;\n    for (let layer = layers - 1; layer >= 0; layer--) {\n      yield* this.drawLayer(layer);\n    }\n  }\n\n  getStepCount() {\n    let count = 0;\n    const { layers, angle, n, margin } = this.config;\n    const layerAngle = (angle * Math.PI) / 180;\n    const maxSize = Math.min(...this.renderer.getSize()) - 2 * margin;\n    const nailSpacing = maxSize / (n - 1);\n\n    for (let layer = 0; layer < layers; layer++) {\n      const layerSize =\n        maxSize / Math.pow(Math.cos(layerAngle) + Math.sin(layerAngle), layer);\n      count += 4 * (Math.floor(layerSize / nailSpacing) + 1);\n    }\n\n    return count;\n  }\n\n  drawNails() {\n    const { layers } = this.config;\n    for (let layer = layers - 1; layer >= 0; layer--) {\n      const {\n        layerAngle: angle,\n        layerSize: size,\n        layerStart,\n        layerStringCount,\n      } = this.layers[layer];\n\n      for (let s = 0; s < SIDES.length; s++) {\n        const sideOrder = SIDES_ORDER[s];\n        const rotation = SIDES_ROTATION[sideOrder];\n\n        for (let i = 0; i <= layerStringCount; i++) {\n          const sideProps = { layerStringCount, size, layerStart, angle };\n          this.nails.addNail({\n            point: this.getPoint({\n              sideOrder,\n              index: i,\n              rotation,\n              ...sideProps,\n            }),\n            number: `${layer}_${s}_${i}`,\n          });\n        }\n      }\n    }\n  }\n\n  static thumbnailConfig = {\n    n: 25,\n    layers: 7,\n  };\n}\n\nexport default Eye;\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nexport default class Star extends StringArt {\n  name = 'Star';\n  id = 'star';\n  link =\n    'https://www.etsy.com/listing/557818258/string-art-meditation-geometric-yoga?epik=dj0yJnU9Mm1hYmZKdks1eTc3bVY2TkVhS2p2Qlg0N2dyVWJxaTEmcD0wJm49MGlWSXE1SVJ2Vm0xZ0xtaGhITDBWQSZ0PUFBQUFBR0Zwd2lj';\n  controls = [\n    {\n      key: 'sides',\n      label: 'Sides',\n      defaultValue: 3,\n      type: 'range',\n      attr: { min: 3, max: 20, step: 1 },\n    },\n    {\n      key: 'sideNails',\n      label: 'Nails per side',\n      defaultValue: 40,\n      type: 'range',\n      attr: { min: 1, max: 200, step: 1 },\n    },\n    {\n      key: 'ringSize',\n      label: 'Outer ring size',\n      defaultValue: 0.1,\n      type: 'range',\n      attr: {\n        min: 0,\n        max: 0.5,\n        step: ({ config: { sideNails, sides } }) => 1 / (sideNails * sides),\n      },\n      displayValue: ({ sideNails, sides, ringSize }) =>\n        Math.floor(ringSize * sideNails * sides),\n    },\n    Circle.rotationConfig,\n    Circle.distortionConfig,\n    {\n      key: 'colorGroup',\n      label: 'Color',\n      type: 'group',\n      children: [\n        {\n          key: 'innerColor',\n          label: 'Star color',\n          defaultValue: '#2ec0ff',\n          type: 'color',\n        },\n        {\n          key: 'outterColor',\n          label: 'Outter color',\n          defaultValue: '#2a82c6',\n          type: 'color',\n        },\n        {\n          key: 'ringColor',\n          label: 'Ring color',\n          defaultValue: '#2ec0ff',\n          type: 'color',\n        },\n      ],\n    },\n  ];\n\n  get n() {\n    if (!this._n) {\n      const { n, sides } = this.config;\n      const extraNails = n % sides;\n      this._n = n - extraNails;\n    }\n\n    return this._n;\n  }\n\n  setUpDraw() {\n    this._n = null;\n    super.setUpDraw();\n\n    const { sides, rotation, distortion, sideNails, margin = 0 } = this.config;\n    const circleConfig = {\n      size: this.size,\n      n: sideNails * sides,\n      margin,\n      rotation,\n      distortion,\n    };\n\n    if (this.circle) {\n      this.circle.setConfig(circleConfig);\n    } else {\n      this.circle = new Circle(circleConfig);\n    }\n\n    this.sideAngle = (Math.PI * 2) / sides;\n    this.nailSpacing = this.circle.radius / sideNails;\n    this.starCenterStart = (sideNails % 1) * this.nailSpacing;\n\n    this.sides = new Array(sides).fill(null).map((_, side) => {\n      const sideAngle = side * this.sideAngle + this.circle.rotationAngle;\n      const circlePointsStart = side * sideNails;\n\n      return {\n        sinSideAngle: Math.sin(sideAngle),\n        cosSideAngle: Math.cos(sideAngle),\n        circlePointsStart,\n        circlePointsEnd: circlePointsStart + sideNails,\n      };\n    });\n  }\n\n  getStarPoint({ side, sideIndex }) {\n    const radius = this.starCenterStart + sideIndex * this.nailSpacing;\n    const { sinSideAngle, cosSideAngle } = this.sides[side];\n    const [centerX, centerY] = this.circle.center;\n\n    return [centerX + sinSideAngle * radius, centerY + cosSideAngle * radius];\n  }\n\n  getArcPoint({ side, sideIndex }) {\n    return this.circle.getPoint(side * this.config.sideNails + sideIndex);\n  }\n\n  *generateStarPoints({ reverseOrder = false } = {}) {\n    const { sides, sideNails } = this.config;\n\n    for (let side = 0; side < sides; side++) {\n      const prevSide = side === 0 ? sides - 1 : side - 1;\n      for (let i = 0; i < sideNails; i++) {\n        const sideIndex = reverseOrder ? sideNails - i : i;\n        yield {\n          side,\n          prevSide,\n          sideIndex,\n          point: this.getStarPoint({ side, sideIndex }),\n        };\n      }\n    }\n  }\n\n  *drawStar() {\n    const { innerColor, sideNails, sides } = this.config;\n\n    this.renderer.setColor(innerColor);\n    let alternate = false;\n    const linesPerRound = sides % 2 ? sides * 2 : sides;\n    const rounds = sides % 2 ? Math.floor(sideNails / 2) : sideNails;\n\n    let prevPointIndex = 0;\n    let prevPoint = this.getStarPoint({ side: 0, sideIndex: prevPointIndex });\n\n    for (let round = 0; round <= rounds; round++) {\n      let side = 0;\n\n      const linesPerThisRound = linesPerRound - (round === rounds ? sides : 0);\n\n      for (let i = 0; i < linesPerThisRound; i++) {\n        side = side !== sides - 1 ? side + 1 : 0;\n        alternate = !alternate;\n        prevPointIndex = alternate ? sideNails - round : round;\n        const nextPoint = this.getStarPoint({\n          side,\n          sideIndex: prevPointIndex,\n        });\n        this.renderer.renderLines(prevPoint, nextPoint);\n        prevPoint = nextPoint;\n        yield;\n      }\n\n      prevPointIndex = alternate ? prevPointIndex - 1 : prevPointIndex + 1;\n      const nextPoint = this.getStarPoint({\n        side: 0,\n        sideIndex: prevPointIndex,\n      });\n      this.renderer.renderLines(prevPoint, nextPoint);\n      prevPoint = nextPoint;\n    }\n  }\n\n  *drawCircle() {\n    const { outterColor, sides, sideNails } = this.config;\n    this.renderer.setColor(outterColor);\n\n    let prevPoint = this.getStarPoint({ side: 0, sideIndex: 0 });\n    let alternate = false;\n    let isStar = false;\n\n    const rounds = sides % 2 ? Math.ceil(sideNails / 2) : sideNails;\n    let side = 0;\n    const linesPerRound = sides % 2 ? sides * 4 : sides * 2;\n\n    for (let round = 0; round <= rounds; round++) {\n      const linesPerThisRound =\n        linesPerRound - (round === rounds ? sides * 2 : 0);\n\n      for (let i = 0; i < linesPerThisRound; i++) {\n        const pointPosition = {\n          side,\n          sideIndex: alternate ? sideNails - round : round,\n        };\n\n        const nextPoint = isStar\n          ? this.getStarPoint(pointPosition)\n          : this.getArcPoint(pointPosition);\n\n        this.renderer.renderLines(prevPoint, nextPoint);\n        prevPoint = nextPoint;\n\n        yield;\n        isStar = !isStar;\n\n        if (isStar) {\n          side = side !== sides - 1 ? side + 1 : 0;\n          alternate = !alternate;\n        }\n      }\n      prevPoint = this.getStarPoint({ side: 0, sideIndex: round + 1 });\n    }\n  }\n\n  *generateStrings() {\n    yield* this.drawCircle();\n\n    const { ringSize, ringColor } = this.config;\n\n    if (ringSize !== 0) {\n      yield* this.circle.drawRing(this.renderer, {\n        ringSize,\n        color: ringColor,\n      });\n    }\n    yield* this.drawStar();\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails);\n\n    for (const { point, side, sideIndex } of this.generateStarPoints()) {\n      this.nails.addNail({\n        point,\n        number: sideIndex ? `${side}_${sideIndex}` : 0,\n      });\n    }\n\n    this.circle.drawNails(this.nails);\n  }\n\n  getStepCount() {\n    const { sides, sideNails, ringSize } = this.config;\n    const ringCount = ringSize ? sideNails * sides : 0;\n    const starAndCircleCount = 3 * sides * (sideNails + (sides % 2 ? 1 : 0));\n\n    return starAndCircleCount + ringCount;\n  }\n\n  static thumbnailConfig = {\n    sideNails: 18,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nconst LAYER_DEFAULTS = [\n  { size: 0.25, end: 1, color: '#a94fb0' },\n  { size: 0.125, end: 0.888, color: '#ec6ad0' },\n  { size: 0, end: 0.826, color: '#f08ad5', reverse: true },\n];\n\nexport default class Assymetry extends StringArt {\n  name = 'Assymetry';\n  id = 'assymetry';\n  link =\n    'https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for';\n  controls = [\n    Circle.nailsConfig,\n    Circle.rotationConfig,\n    Circle.distortionConfig,\n    {\n      key: 'layers',\n      label: 'Layers',\n      type: 'group',\n      children: LAYER_DEFAULTS.map(({ size, end, color, reverse }, i) => {\n        const layer = i + 1;\n        return {\n          key: `layer${layer}`,\n          label: `Layer ${layer}`,\n          type: 'group',\n          children: [\n            {\n              key: `show${layer}`,\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: `size${layer}`,\n              label: 'Size',\n              defaultValue: size,\n              type: 'range',\n              attr: {\n                min: 0,\n                max: 0.5,\n                step: ({ config: { n } }) => 1 / n,\n              },\n              displayValue: (config, { key }) =>\n                Math.round(config.n * config[key]),\n              show: config => config[`show${layer}`],\n            },\n            {\n              key: `end${layer}`,\n              label: 'End Position',\n              defaultValue: end,\n              type: 'range',\n              attr: {\n                min: 0,\n                max: 1,\n                step: ({ config: { n } }) => 1 / n,\n              },\n              displayValue: (config, { key }) =>\n                Math.round(config.n * config[key]),\n              show: config => config[`show${layer}`],\n            },\n            {\n              key: `color${layer}`,\n              label: 'Color',\n              defaultValue: color,\n              type: 'color',\n              show: config => config[`show${layer}`],\n            },\n            {\n              key: `reverse${layer}`,\n              label: 'Reverse',\n              defaultValue: reverse === true,\n              type: 'checkbox',\n              show: config => config[`show${layer}`],\n            },\n          ],\n        };\n      }),\n    },\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    Object.assign(this, this.getSetUp());\n  }\n\n  getSetUp() {\n    const { rotation, n, margin = 0, distortion } = this.config;\n    const size = this.getSize();\n\n    const circleConfig = {\n      size,\n      n,\n      margin,\n      rotation: rotation - 0.25,\n      distortion,\n    };\n\n    let circle;\n    if (this.circle) {\n      circle = this.circle;\n      this.circle.setConfig(circleConfig);\n    } else {\n      circle = new Circle(circleConfig);\n    }\n\n    let lineSpacing = circle.indexAngle * circle.radius;\n    const lineNailCount = Math.floor(circle.radius / lineSpacing) - 1;\n    lineSpacing +=\n      (circle.radius - lineSpacing * lineNailCount) / lineNailCount;\n    const firstCirclePoint = circle.getPoint(0);\n    const totalNailCount = lineNailCount + n;\n    const totalIndexCount = totalNailCount + lineNailCount;\n    const layers = new Array(3)\n      .fill(null)\n      .map((_, i) => getLayer.call(this, i + 1))\n      .filter(({ enable }) => enable);\n\n    return {\n      circle,\n      lineSpacing,\n      lineNailCount,\n      firstCirclePoint,\n      layers,\n      totalNailCount,\n      totalIndexCount,\n    };\n\n    function getLayer(layerIndex) {\n      const size =\n        Math.round(n * this.config['size' + layerIndex]) + lineNailCount;\n      return {\n        size,\n        endIndex:\n          Math.round(\n            this.config['end' + layerIndex] * (totalNailCount + lineNailCount)\n          ) - size,\n        color: this.config['color' + layerIndex],\n        enable: this.config['show' + layerIndex],\n        isReverse: this.config['reverse' + layerIndex],\n      };\n    }\n  }\n\n  /**\n   * Returns the position of a point on the line\n   * @param {index of the point in the circle, 0 is the center} index\n   */\n  getPoint(index) {\n    if (index < this.lineNailCount || index > this.totalNailCount) {\n      const linePosition =\n        index < this.lineNailCount\n          ? this.lineNailCount - index\n          : index - this.totalNailCount;\n\n      const indexLength = linePosition * this.lineSpacing;\n      return [\n        this.firstCirclePoint[0] -\n          indexLength * Math.sin(this.circle.rotationAngle),\n        this.firstCirclePoint[1] -\n          indexLength * Math.cos(this.circle.rotationAngle),\n      ];\n    } else {\n      const circleIndex = index - this.lineNailCount;\n      return this.circle.getPoint(circleIndex);\n    }\n  }\n\n  *drawCircle({ endIndex, color, isReverse, size }) {\n    let prevPoint;\n    let prevPointIndex;\n    let isPrevSide = false;\n    this.renderer.setColor(color);\n    const self = this;\n    const advance = isReverse ? -1 : 1;\n\n    for (let index = 0; index <= endIndex; index++) {\n      const startPoint = prevPoint ?? this.getPoint(getPointIndex(index));\n      const positions = [];\n      if (prevPoint) {\n        positions.push(this.getPoint(prevPointIndex + advance));\n      }\n      prevPointIndex = getPointIndex(isPrevSide ? index : index + size);\n      positions.push((prevPoint = this.getPoint(prevPointIndex)));\n\n      this.renderer.renderLines(startPoint, ...positions);\n\n      yield;\n\n      isPrevSide = !isPrevSide;\n    }\n\n    function getPointIndex(index) {\n      return isReverse ? self.totalIndexCount - index : index;\n    }\n  }\n\n  *generateStrings() {\n    for (const layer of this.layers) {\n      yield* this.drawCircle(layer);\n    }\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails, { nailsNumberStart: this.lineNailCount });\n\n    for (let i = 0; i < this.lineNailCount; i++) {\n      this.nails.addNail({ point: this.getPoint(i), number: i });\n    }\n  }\n\n  getStepCount() {\n    const { layers } = this.getSetUp();\n    return layers.reduce(\n      (stepCount, layer) => stepCount + layer.endIndex + 1,\n      0\n    );\n  }\n\n  static thumbnailConfig = {\n    n: 50,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\n\nexport default class Freestyle extends StringArt {\n  name = 'Freestyle';\n  id = 'freestyle';\n  link =\n    'https://www.etsy.com/il-en/listing/1018950430/calming-wall-art-in-light-blue-for';\n  controls = [\n    {\n      key: 'n',\n      label: 'Circle nails',\n      defaultValue: 80,\n      type: 'range',\n      attr: { min: 1, max: 300, step: 1 },\n    },\n    {\n      key: 'minNailDistance',\n      label: 'Min nail distance',\n      defaultValue: 20,\n      type: 'range',\n      attr: { min: 1, max: 300, step: 1 },\n    },\n    {\n      key: 'color',\n      label: 'Color',\n      defaultValue: '#ec6ad0',\n      type: 'color',\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      type: 'group',\n      children: [\n        {\n          key: 'layer1',\n          label: 'Layer 1',\n          type: 'group',\n          children: [\n            {\n              key: 'show1',\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: 'radius1',\n              label: 'Radius',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0.01, max: 1, step: 0.01 },\n              show: ({ show1 }) => show1,\n            },\n            {\n              key: 'x1',\n              label: 'Position X',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show1 }) => show1,\n            },\n            {\n              key: 'y1',\n              label: 'Position Y',\n              defaultValue: 0,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show1 }) => show1,\n            },\n            {\n              ...Circle.rotationConfig,\n              key: 'rotation1',\n              show: ({ show1 }) => show1,\n            },\n            {\n              key: 'reverse1',\n              label: 'Reverse',\n              defaultValue: false,\n              type: 'checkbox',\n              show: ({ show1 }) => show1,\n            },\n          ],\n        },\n        {\n          key: 'layer2',\n          label: 'Layer 2',\n          type: 'group',\n          children: [\n            {\n              key: 'show2',\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: 'radius2',\n              label: 'Radius',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0.01, max: 1, step: 0.01 },\n              show: ({ show2 }) => show2,\n            },\n            {\n              key: 'x2',\n              label: 'Position X',\n              defaultValue: 0,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show2 }) => show2,\n            },\n            {\n              key: 'y2',\n              label: 'Position Y',\n              defaultValue: 1,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show2 }) => show2,\n            },\n            {\n              ...Circle.rotationConfig,\n              key: 'rotation2',\n              show: ({ show2 }) => show2,\n            },\n            {\n              key: 'reverse2',\n              label: 'Reverse',\n              defaultValue: false,\n              type: 'checkbox',\n              show: ({ show2 }) => show2,\n            },\n          ],\n        },\n        {\n          key: 'layer3',\n          label: 'Layer 3',\n          type: 'group',\n          children: [\n            {\n              key: 'show3',\n              label: 'Enable',\n              defaultValue: true,\n              type: 'checkbox',\n            },\n            {\n              key: 'radius3',\n              label: 'Radius',\n              defaultValue: 0.5,\n              type: 'range',\n              attr: { min: 0.01, max: 1, step: 0.01 },\n              show: ({ show3 }) => show3,\n            },\n            {\n              key: 'x3',\n              label: 'Position X',\n              defaultValue: 1,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show3 }) => show3,\n            },\n            {\n              key: 'y3',\n              label: 'Position Y',\n              defaultValue: 1,\n              type: 'range',\n              attr: { min: 0, max: 1, step: 0.01 },\n              show: ({ show3 }) => show3,\n            },\n            {\n              ...Circle.rotationConfig,\n              key: 'rotation3',\n              show: ({ show3 }) => show3,\n            },\n            {\n              key: 'reverse3',\n              label: 'Reverse',\n              defaultValue: false,\n              type: 'checkbox',\n              show: ({ show3 }) => show3,\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  setUpDraw() {\n    super.setUpDraw();\n    Object.assign(this, this.getSetUp());\n  }\n\n  getSetUp() {\n    const { n, margin = 0, minNailDistance } = this.config;\n    const size = this.getSize();\n\n    const maxRadius = Math.min(...size.map(v => v - 2 * margin)) / 2;\n    const layers = new Array(3)\n      .fill(null)\n      .map((_, i) => getLayer.call(this, i + 1))\n      .filter(({ enable }) => enable);\n\n    const maxShapeNailsCount = Math.max(\n      ...layers.map(({ circle }) => circle.config.n)\n    );\n\n    return {\n      layers,\n      maxShapeNailsCount,\n    };\n\n    function getLayer(layerIndex) {\n      const prop = prop => this.config[prop + layerIndex];\n\n      const props = {\n        enable: prop('show'),\n        isReverse: prop('reverse'),\n        position: [prop('x'), prop('y')],\n        radius: maxRadius * prop('radius'),\n        rotation: prop('rotation'),\n      };\n\n      const circumsference = Math.PI * 2 * props.radius;\n      const circleNails = Math.min(\n        n,\n        Math.floor(circumsference / minNailDistance)\n      );\n\n      const circle = new Circle({\n        radius: props.radius,\n        center: props.position.map(\n          (v, i) =>\n            props.radius + margin + (size[i] - (props.radius + margin) * 2) * v\n        ),\n        n: circleNails,\n        rotation: props.rotation,\n        reverse: props.isReverse,\n      });\n\n      return {\n        circle,\n        ...props,\n      };\n    }\n  }\n\n  getPoint(layer, index) {\n    const { circle } = layer;\n    let circleIndex = Math.round(\n      (index * circle.config.n) / this.maxShapeNailsCount\n    );\n    return circle.getPoint(circleIndex);\n  }\n\n  *generateStrings() {\n    const { n, color } = this.config;\n\n    this.renderer.setColor(color);\n    let prevCirclePoint;\n\n    for (let i = 0; i < this.maxShapeNailsCount; i++) {\n      for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {\n        const layer = this.layers[layerIndex];\n        const startPoint = prevCirclePoint ?? this.getPoint(layer, i);\n\n        const positions = [];\n        if (layerIndex === 0 && i) {\n          positions.push(this.getPoint(layer, i));\n        }\n\n        let nextLayerIndex = layerIndex + 1;\n        if (nextLayerIndex === this.layers.length) {\n          nextLayerIndex = 0;\n        }\n\n        prevCirclePoint = this.getPoint(this.layers[nextLayerIndex], i);\n\n        this.renderer.renderLines(startPoint, prevCirclePoint);\n        yield;\n      }\n    }\n  }\n\n  drawNails() {\n    const n = this.config;\n    this.layers.forEach(({ circle }, layerIndex) =>\n      circle.drawNails(this.nails, {\n        getNumber: i => `${layerIndex + 1}_${i + 1}`,\n      })\n    );\n  }\n\n  getStepCount() {\n    const { layers, maxShapeNailsCount } = this.getSetUp();\n    return layers.length * maxShapeNailsCount - 1;\n  }\n\n  static thumbnailConfig = {\n    minNailDistance: 3,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Polygon from '../helpers/Polygon.js';\nimport Color from '../helpers/Color.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#ff0000',\n    multicolorRange: 1,\n    multicolorStart: 0,\n    multicolorByLightness: true,\n    minLightness: 20,\n    maxLightness: 50,\n  },\n  exclude: ['colorCount'],\n});\n\nexport default class PolygonPattern extends StringArt {\n  name = 'Polygon';\n  id = 'polygon';\n  controls = [\n    {\n      key: 'sides',\n      label: 'Sides',\n      defaultValue: 5,\n      type: 'range',\n      attr: {\n        min: 3,\n        max: 10,\n        step: 1,\n      },\n    },\n    {\n      key: 'n',\n      label: 'Nails per side',\n      defaultValue: 60,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 100,\n        step: 1,\n      },\n    },\n    {\n      key: 'bezier',\n      label: 'Bezier',\n      defaultValue: 2,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 4,\n        step: 1,\n      },\n      show: ({ sides }) => sides > 4,\n    },\n    Circle.rotationConfig,\n    COLOR_CONFIG,\n  ];\n\n  defaultValues = {\n    nailsColor: '#5c5c5c',\n    nailRadius: 1,\n  };\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, rotation, sides, margin, isMultiColor } = this.config;\n    const size = this.getSize();\n\n    const polygonConfig = {\n      sides,\n      rotation,\n      margin,\n      size,\n      nailsSpacing: 1 / n,\n      fitSize: true,\n    };\n\n    if (this.polygon) {\n      this.polygon.setConfig(polygonConfig);\n    } else {\n      this.polygon = new Polygon(polygonConfig);\n    }\n\n    this.color = new Color({\n      ...this.config,\n      isMultiColor,\n      colorCount: sides,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.getStepCount(),\n        colorCount: sides,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  *generateStrings() {\n    const { sides, bezier } = this.config;\n    const limitedBezier = Math.min(bezier, Math.ceil(sides / 2) - 1);\n\n    let step = 0;\n    this.renderer.setColor(this.color.getColor(0));\n\n    for (let side = 0; side < sides; side++) {\n      const nextSide = (side + limitedBezier) % sides;\n\n      if (this.colorMap) {\n        this.renderer.setColor(this.colorMap.get(step));\n      }\n      for (let index = 0; index < this.polygon.nailsPerSide; index++) {\n        this.renderer.renderLines(\n          this.polygon.getSidePoint({ side, index }),\n          this.polygon.getSidePoint({ side: nextSide, index })\n        );\n\n        yield;\n        step++;\n      }\n    }\n  }\n\n  getStepCount() {\n    const { sides, n } = this.config;\n    return sides * n;\n  }\n\n  drawNails() {\n    this.polygon.drawNails(this.nails);\n  }\n\n  static thumbnailConfig = {\n    n: 20,\n  };\n}\n","import { PI2 } from './math_utils.js';\n\nexport default class Polygon {\n  constructor(config) {\n    this.setConfig(config);\n  }\n\n  setConfig(config) {\n    const serializedConfig = this._serializeConfig(config);\n    if (serializedConfig !== this.serializedConfig) {\n      const { rotation = 0, sides: sideCount } = (this.config = config);\n\n      const sideAngle = PI2 / sideCount;\n\n      const sides = new Array(sideCount).fill(null).map((_, i) => {\n        const angle = sideAngle * i + PI2 * rotation;\n        const radiusAngle = -sideAngle * (i - 0.5) - PI2 * rotation;\n\n        return {\n          cos: Math.cos(angle),\n          sin: Math.sin(angle),\n          center: {\n            cos: Math.cos(radiusAngle),\n            sin: Math.sin(radiusAngle),\n          },\n        };\n      });\n\n      Object.assign(this, {\n        sides,\n        sideCount,\n        sideAngle,\n      });\n\n      if (this.points) {\n        this.points.clear();\n      } else {\n        this.points = new Map();\n      }\n\n      Object.assign(this, this._getProps());\n\n      if (config.fitSize) {\n        Object.assign(this, this._getProps(this.getSizeAndCenter()));\n        this.points.clear();\n      }\n    }\n  }\n\n  getSizeAndCenter() {\n    const { size: configSize, margin } = this.config;\n\n    const boundingRect = this.getBoundingRect();\n    const scale = Math.min(\n      (configSize[0] - 2 * margin) / boundingRect.width,\n      (configSize[1] - 2 * margin) / boundingRect.height\n    );\n\n    const size = configSize.map(v => v * scale);\n    const center = [\n      this.center[0] -\n        (scale * (boundingRect.left - configSize[0] + boundingRect.right)) / 2,\n      this.center[1] -\n        (scale * (boundingRect.top - configSize[1] + boundingRect.bottom)) / 2,\n    ];\n\n    this.points.clear();\n    return { size, center };\n  }\n\n  _getProps(overrideConfig) {\n    const {\n      nailsSpacing,\n      size,\n      margin = 0,\n      center: configCenter,\n    } = Object.assign({}, this.config, overrideConfig);\n\n    const center = configCenter ?? this.config.size.map(v => v / 2);\n\n    const radius = Math.min(...size) / 2 - margin;\n    const sideSize = 2 * radius * Math.sin(this.sideAngle / 2);\n    const start = [\n      radius * Math.sin(this.sideAngle / 2),\n      radius * Math.cos(this.sideAngle / 2),\n    ];\n    const nailsDistance = sideSize * nailsSpacing;\n    const radiusNailsCount = Math.floor(radius / nailsDistance);\n    const radiusNailsDistance = radius / radiusNailsCount;\n\n    return {\n      nailsSpacing,\n      nailsPerSide: 1 / nailsSpacing,\n      center,\n      radius,\n      sideSize,\n      start,\n      nailsDistance,\n      radiusNailsCount,\n      radiusNailsDistance,\n    };\n  }\n\n  _serializeConfig({ size, margin = 0, rotation = 0, center, sides }) {\n    return [size?.join(','), center?.join(','), sides, margin, rotation].join(\n      '_'\n    );\n  }\n\n  getSidePoint({ side, index }) {\n    const pointsMapIndex = [side, index].join('_');\n\n    if (this.points.has(pointsMapIndex)) {\n      return this.points.get(pointsMapIndex);\n    }\n\n    const startX = this.start[0] - index * this.nailsDistance;\n    const { cos, sin } = this.sides[side];\n\n    const point = [\n      cos * startX - sin * this.start[1] + this.center[0],\n      sin * startX + cos * this.start[1] + this.center[1],\n    ];\n\n    this.points.set(pointsMapIndex, point);\n    return point;\n  }\n\n  getCenterPoint({ side, index }) {\n    const radius = index * this.radiusNailsDistance;\n    const { sin, cos } = this.sides[side].center;\n\n    return [this.center[0] + sin * radius, this.center[1] + cos * radius];\n  }\n\n  getBoundingRect() {\n    const points = this.sides.map((_, side) =>\n      this.getSidePoint({ side, index: 0 })\n    );\n    const firstPoint = points[0];\n\n    const boundingRect = points.slice(1).reduce(\n      (boundingRect, [x, y]) => ({\n        left: Math.min(boundingRect.left, x),\n        right: Math.max(boundingRect.right, x),\n        top: Math.min(boundingRect.top, y),\n        bottom: Math.max(boundingRect.bottom, y),\n      }),\n      {\n        left: firstPoint[0],\n        right: firstPoint[0],\n        top: firstPoint[1],\n        bottom: firstPoint[1],\n      }\n    );\n\n    boundingRect.height = boundingRect.bottom - boundingRect.top;\n    boundingRect.width = boundingRect.right - boundingRect.left;\n    Object.freeze(boundingRect);\n    return boundingRect;\n  }\n\n  drawNails(nails, { drawCenter = false, drawSides = true } = {}) {\n    for (let side = 0; side < this.sideCount; side++) {\n      const sideIndexStart = side * this.nailsPerSide;\n\n      if (drawSides) {\n        for (let index = 0; index < this.nailsPerSide; index++) {\n          nails.addNail({\n            point: this.getSidePoint({ side, index }),\n            number: sideIndexStart + index,\n          });\n        }\n      }\n\n      if (drawCenter) {\n        for (let index = 0; index < this.radiusNailsCount; index++) {\n          nails.addNail({\n            point: this.getCenterPoint({ side, index }),\n            number: `${side}_${index}`,\n          });\n        }\n      }\n    }\n  }\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Polygon from '../helpers/Polygon.js';\nimport Color from '../helpers/Color.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#29f1ff',\n    multicolorRange: 264,\n    multicolorStart: 53,\n    multicolorByLightness: false,\n    minLightness: 30,\n    maxLightness: 70,\n  },\n  exclude: ['colorCount'],\n});\n\nexport default class Flower extends StringArt {\n  name = 'Flower';\n  id = 'flower';\n  link = 'https://www.sqrt.ch/Buch/fadenmodell4_100.svg';\n  controls = [\n    {\n      key: 'sides',\n      label: 'Sides',\n      defaultValue: 4,\n      type: 'range',\n      attr: {\n        min: 3,\n        max: 10,\n        step: 1,\n      },\n    },\n    {\n      key: 'n',\n      label: 'Nails per side',\n      defaultValue: 60,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 100,\n        step: 1,\n      },\n    },\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 2,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 10,\n        step: 1,\n      },\n    },\n    Circle.rotationConfig,\n    COLOR_CONFIG,\n  ];\n\n  defaultValues = {\n    nailsColor: '#29f1ff',\n    nailRadius: 1,\n    stringWidth: 0.5,\n  };\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { n, rotation, sides, layers, margin, isMultiColor } = this.config;\n    const size = this.getSize();\n\n    const layerAngleShift = 1 / (sides * layers);\n\n    this.polygons = new Array(layers).fill(null).map((_, i) => {\n      const polygonConfig = {\n        sides,\n        rotation: rotation + i * layerAngleShift,\n        margin,\n        size,\n        nailsSpacing: 1 / n,\n      };\n\n      return new Polygon(polygonConfig);\n    });\n\n    this.color = new Color({\n      ...this.config,\n      isMultiColor,\n      colorCount: layers,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.getStepCount(),\n        colorCount: layers,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  *generateStrings() {\n    const { sides, layers } = this.config;\n\n    let step = 0;\n    this.renderer.setColor(this.color.getColor(0));\n\n    for (let layer = 0; layer < layers; layer++) {\n      const polygon = this.polygons[layer];\n\n      for (let side = 0; side < sides; side++) {\n        const leftSide = side === sides - 1 ? 0 : side + 1;\n\n        for (let index = 0; index <= polygon.nailsPerSide; index++) {\n          if (this.colorMap?.has(step)) {\n            this.renderer.setColor(this.colorMap.get(step));\n          }\n\n          const centerIndexes = this.getCenterIndexes({\n            polygon,\n            sideIndex: index,\n          });\n\n          this.renderer.renderLines(\n            polygon.getCenterPoint({\n              side: side,\n              index: centerIndexes[0],\n            }),\n            polygon.getSidePoint({ side, index }),\n            polygon.getCenterPoint({\n              side: leftSide,\n              index: centerIndexes[1],\n            })\n          );\n\n          yield;\n          step++;\n        }\n      }\n    }\n  }\n\n  getCenterIndexes({ polygon, sideIndex }) {\n    const extraNailCount = polygon.nailsPerSide - polygon.radiusNailsCount;\n\n    return [\n      sideIndex < extraNailCount\n        ? -extraNailCount + sideIndex\n        : sideIndex - extraNailCount,\n      polygon.radiusNailsCount - sideIndex,\n    ];\n  }\n\n  getStepCount() {\n    const { sides, n, layers } = this.config;\n    return sides * (n + 1) * layers;\n  }\n\n  drawNails() {\n    this.polygons.forEach(polygon =>\n      polygon.drawNails(this.nails, { drawCenter: true })\n    );\n  }\n\n  static thumbnailConfig = {\n    n: 20,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Color from '../helpers/Color.js';\nimport { gcd, PI2 } from '../helpers/math_utils.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#ffffff',\n    multicolorRange: 133,\n    multicolorStart: 239,\n    multicolorByLightness: false,\n    minLightness: 30,\n    maxLightness: 70,\n    colorCount: 4,\n  },\n  exclude: ['repeatColors', 'mirrorColors'],\n});\n\nexport default class MaurerRose extends StringArt {\n  name = 'Maurer Rose';\n  id = 'maurer_rose';\n  link = 'https://blog.glitch.land/en/posts/maurer-rose/';\n  linkText = 'Learn';\n  controls = [\n    {\n      key: 'n',\n      label: 'N',\n      defaultValue: 4,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 12,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'maxSteps',\n      label: 'Max steps',\n      defaultValue: 512,\n      type: 'range',\n      attr: {\n        min: 3,\n        max: 720,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'angle',\n      label: 'Angle',\n      defaultValue: 341,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 720,\n        step: 1,\n      },\n      displayValue: ({ angle }) => `${angle}°`,\n      isStructural: true,\n    },\n    Circle.rotationConfig,\n    COLOR_CONFIG,\n  ];\n\n  resetStructure() {\n    super.resetStructure();\n\n    if (this.points) {\n      this.points.clear();\n    }\n    this.calc = null;\n  }\n\n  setUpDraw() {\n    super.setUpDraw();\n    const { isMultiColor, colorCount } = this.config;\n\n    if (!this.calc) {\n      this.calc = this.getCalc();\n    }\n\n    if (!this.points) {\n      this.points = new Map();\n    }\n\n    if (!this.stepCount) {\n      this.stepCount = this.getStepCount();\n    }\n\n    this.color = new Color({\n      ...this.config,\n      isMultiColor,\n      colorCount,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: this.stepCount,\n        colorCount,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  getCalc() {\n    const { n, angle, rotation, maxSteps } = this.config;\n    const size = this.getSize();\n\n    return {\n      n,\n      angleRadians: (PI2 * angle) / maxSteps,\n      radius: Math.min(...size) / 2,\n      currentSize: size,\n      rotationAngle: -Math.PI * 2 * rotation,\n    };\n  }\n\n  getPoint(index) {\n    if (this.points.has(index)) {\n      return this.points.get(index);\n    }\n\n    const k = index * this.calc.angleRadians;\n    const r = this.calc.radius * Math.sin(this.calc.n * k);\n\n    const point = [\n      this.center[0] - r * Math.cos(k - this.calc.rotationAngle),\n      this.center[1] - r * Math.sin(k - this.calc.rotationAngle),\n    ];\n    this.points.set(index, point);\n    return point;\n  }\n\n  *generatePoints() {\n    const count = this.stepCount;\n\n    for (let i = 0; i < count + 1; i++) {\n      yield { point: this.getPoint(i), index: i };\n    }\n  }\n\n  *generateStrings() {\n    const points = this.generatePoints();\n\n    let prevPoint;\n    this.renderer.setColor(this.color.getColor(0));\n\n    for (const { point, index } of points) {\n      if (!prevPoint) {\n        prevPoint = point;\n        continue;\n      }\n\n      if (this.colorMap) {\n        const stepColor = this.colorMap.get(index);\n        if (stepColor) {\n          this.renderer.setColor(stepColor);\n        }\n      }\n\n      this.renderer.renderLines(prevPoint, point);\n      prevPoint = point;\n\n      yield;\n    }\n  }\n\n  getStepCount() {\n    if (this.stepCount) {\n      return this.stepCount;\n    }\n\n    const { maxSteps, angle, n } = this.config;\n    const angleGcd = gcd(maxSteps, angle);\n\n    let steps = maxSteps / angleGcd;\n    if (!(steps % 2) && n % 2) {\n      steps /= 2;\n    }\n    return Math.round(steps);\n  }\n\n  drawNails() {\n    const points = this.generatePoints();\n    for (const { point, index } of points) {\n      this.nails.addNail({ point, number: index });\n    }\n  }\n\n  static thumbnailConfig = {\n    maxSteps: 160,\n    angle: 213,\n  };\n}\n","import { PI2 } from '../helpers/math_utils.js';\nimport StringArt from '../StringArt.js';\nimport Color from '../helpers/Color.js';\nimport Polygon from '../helpers/Polygon.js';\nimport Circle from '../helpers/Circle.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#29f1ff',\n    multicolorRange: 43,\n    multicolorStart: 25,\n    multicolorByLightness: true,\n    minLightness: 40,\n    maxLightness: 95,\n    colorCount: 3,\n    repeatColors: true,\n    saturation: 83,\n    reverseColors: true,\n  },\n  customControls: [\n    {\n      key: 'colorPerLevel',\n      label: 'Color per level',\n      defaultValue: true,\n      type: 'checkbox',\n    },\n  ],\n});\n\nconst ANGLE = -PI2 / 6; // The angle of a equilateral triangle;\nconst SIDE_ANGLES = new Array(6)\n  .fill(null)\n  .map((_, i) => Math.PI / 2 + ANGLE * i);\n\nexport default class FlowerOfLife extends StringArt {\n  name = 'Flower of Life';\n  id = 'flower_of_life';\n  link =\n    'https://www.reddit.com/r/psychedelicartwork/comments/mk97gi/rainbow_flower_of_life_uv_reactive_string_art/';\n  controls = [\n    {\n      key: 'levels',\n      label: 'Levels',\n      defaultValue: 3,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 10,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'density',\n      label: 'Density',\n      defaultValue: 10,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 50,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'globalRotation',\n      label: 'Rotation',\n      defaultValue: 0,\n      type: 'range',\n      attr: {\n        min: 0,\n        max: 30,\n        step: 1,\n      },\n      displayValue: (config, { key }) => `${config[key]}°`,\n      isStructural: true,\n      affectsStepCount: false,\n    },\n    {\n      key: 'fillGroup',\n      label: 'Fill',\n      type: 'group',\n      children: [\n        {\n          key: 'fill',\n          label: 'Show fill',\n          defaultValue: true,\n          type: 'checkbox',\n          isStructural: true,\n        },\n        {\n          key: 'fillColor',\n          label: 'Fill color',\n          defaultValue: '#292e29',\n          type: 'color',\n          show: ({ fill }) => fill,\n        },\n      ],\n    },\n    {\n      key: 'ringGroup',\n      label: 'Ring',\n      type: 'group',\n      children: [\n        {\n          key: 'renderRing',\n          label: 'Show outer ring',\n          type: 'checkbox',\n          defaultValue: true,\n          isStructural: true,\n        },\n        {\n          key: 'ringNailCount',\n          label: 'Ring nail count',\n          defaultValue: 144,\n          type: 'range',\n          attr: {\n            min: 3,\n            max: 360,\n            step: 1,\n          },\n          show: ({ renderRing }) => renderRing,\n          isStructural: true,\n        },\n        {\n          key: 'ringSize',\n          label: 'Outer ring size',\n          defaultValue: 0.23,\n          type: 'range',\n          attr: {\n            min: 0,\n            max: 0.5,\n            step: 0.01,\n          },\n          show: ({ renderRing }) => renderRing,\n          displayValue: ({ ringSize }) => `${Math.round(100 * ringSize)}%`,\n          isStructural: true,\n        },\n        {\n          key: 'ringPadding',\n          label: 'Ring padding',\n          defaultValue: 0.06,\n          type: 'range',\n          attr: {\n            min: 0,\n            max: 0.5,\n            step: 0.01,\n          },\n          show: ({ renderRing }) => renderRing,\n          isStructural: true,\n          displayValue: ({ ringPadding }) =>\n            `${Math.round(100 * ringPadding)}%`,\n        },\n        {\n          key: 'ringColor',\n          label: 'Ring color',\n          defaultValue: '#e8b564',\n          type: 'color',\n          show: ({ renderRing }) => renderRing,\n        },\n      ],\n    },\n    {\n      key: 'renderTriangles',\n      label: 'Show triangles',\n      defaultValue: true,\n      type: 'checkbox',\n      isStructural: true,\n    },\n    {\n      key: 'renderCaps',\n      label: 'Show caps',\n      defaultValue: true,\n      type: 'checkbox',\n      show: ({ renderTriangles }) => renderTriangles,\n      isStructural: true,\n    },\n\n    COLOR_CONFIG,\n  ];\n\n  defaultValues = {\n    nailsColor: '#474747',\n  };\n\n  getCalc() {\n    const {\n      levels,\n      density,\n      margin,\n      globalRotation,\n      renderCaps,\n      fill,\n      renderTriangles,\n      renderRing,\n      ringNailCount,\n      ringSize,\n      ringPadding,\n    } = this.config;\n    const globalRotationRadians =\n      (globalRotation * Math.PI) / 180 + Math.PI / 6;\n\n    const radius = renderRing\n      ? Math.min(...(this.size ?? this.getSize()).map(v => v / 2 - margin))\n      : null;\n    const ringDistance = renderRing\n      ? Math.floor((ringSize * ringNailCount) / 2)\n      : 0; // The number of nails to count for strings in the outer ring\n    const ringWidth = renderRing\n      ? radius * (1 - Math.cos((PI2 * (ringDistance / ringNailCount)) / 2))\n      : 0;\n\n    const polygon = new Polygon({\n      sides: 6,\n      size: this.getSize(),\n      margin:\n        margin +\n        ringWidth +\n        (renderRing && ringSize ? ringPadding * radius : 0),\n      rotation: globalRotationRadians,\n      fitSize: false,\n    });\n\n    const edgeSize = polygon.sideSize / levels;\n    const nailsLength = edgeSize / (2 * Math.cos(Math.PI / 6));\n\n    const countPerLevelSide = new Array(levels + (renderCaps ? 1 : 0))\n      .fill(null)\n      .map((_, level) => level * 2 + 1);\n\n    return {\n      edgeSize,\n      triangleHeight: (edgeSize * Math.sqrt(3)) / 2,\n      nailsLength,\n      triangleCenterDistance: edgeSize / 2,\n      nailDistance: nailsLength / density,\n      triangleCount: 6 * levels ** 2,\n      countPerLevelSide,\n      globalRotationRadians,\n      fill,\n      renderTriangles,\n      renderCaps,\n      ringNailCount,\n      radius,\n    };\n  }\n\n  resetStructure() {\n    super.resetStructure();\n\n    this.points = null;\n    this.calc = null;\n  }\n\n  setUpDraw() {\n    super.setUpDraw();\n\n    const {\n      isMultiColor,\n      levels,\n      colorPerLevel,\n      colorCount,\n      renderRing,\n      ringSize,\n      ...config\n    } = this.config;\n\n    if (!this.calc) {\n      this.calc = this.getCalc();\n    }\n\n    if (renderRing && ringSize) {\n      const circleConfig = {\n        size: this.size,\n        n: this.calc.ringNailCount,\n        margin: config.margin,\n        rotation: config.globalRotation,\n      };\n\n      if (this.circle) {\n        this.circle.setConfig(circleConfig);\n      } else {\n        this.circle = new Circle(circleConfig);\n      }\n    } else {\n      this.circle = null;\n    }\n\n    if (!this.points) {\n      this.points = this.getPoints();\n    }\n\n    if (!this.stepCount) {\n      this.stepCount = this.getStepCount(this.calc);\n    }\n\n    const realColorCount = isMultiColor\n      ? colorPerLevel\n        ? levels\n        : Math.min(colorCount, levels)\n      : 1;\n\n    this.color = new Color({\n      ...config,\n      isMultiColor,\n      colorCount: realColorCount,\n    });\n\n    if (isMultiColor) {\n      this.colorMap = this.color.getColorMap({\n        stepCount: realColorCount,\n        colorCount: realColorCount,\n      });\n    } else {\n      this.colorMap = null;\n    }\n  }\n\n  getTrianglePoints({ center, rotation, isCapLevel, triangleIndexInSide }) {\n    let missingSide;\n    if (isCapLevel) {\n      const triangleIndex = (triangleIndexInSide + 2) % 3;\n      missingSide = this._getNextIndexInTriangle(triangleIndex);\n    }\n\n    // For each side of the triangle, the first point is the center of the triangle:\n    const trianglePoints = new Array(3)\n      .fill(null)\n      .map((_, i) => (i === missingSide ? [] : [center]));\n\n    for (let side = 0; side < 3; side++) {\n      if (isCapLevel && side === missingSide) {\n        continue;\n      }\n      const sideAngle = rotation + side * (PI2 / 3);\n      const triangleSidePoints = trianglePoints[side];\n\n      const cosSideAngle = Math.cos(sideAngle);\n      const sinSideAngle = Math.sin(sideAngle);\n\n      for (let n = 1; n <= this.config.density; n++) {\n        const nNailDistance = n * this.calc.nailDistance;\n\n        triangleSidePoints.push([\n          center[0] + nNailDistance * cosSideAngle,\n          center[1] + nNailDistance * sinSideAngle,\n        ]);\n      }\n    }\n\n    return trianglePoints;\n  }\n\n  getPoints() {\n    if (this.points) {\n      return this.points;\n    }\n\n    const { levels, renderCaps } = this.config;\n\n    const largeDistance = this.calc.nailsLength;\n    const smallDistance = this.calc.triangleHeight - largeDistance;\n    const levelsPoints = [];\n\n    const levelsCount = renderCaps ? levels + 1 : levels;\n\n    for (let level = 0; level < levelsCount; level++) {\n      const isCapLevel = renderCaps && level === levels;\n\n      const levelTrianglesPoints = [];\n      levelsPoints.push(levelTrianglesPoints);\n\n      const levelSideTriangleCount = this.calc.countPerLevelSide[level];\n\n      // Caching distances to avoid repeated calculations for each side:\n      const levelPositions = new Array(levelSideTriangleCount)\n        .fill(null)\n        .map((_, n) => {\n          const isFlipped = n % 2 === 0;\n          const trianglePosition = [\n            this.calc.triangleCenterDistance * (n - level),\n            level * this.calc.triangleHeight +\n              (isFlipped ? largeDistance : smallDistance),\n          ];\n\n          return {\n            rotation: Math.atan(trianglePosition[0] / trianglePosition[1]),\n            distanceFromCenter: Math.sqrt(\n              trianglePosition[0] ** 2 + trianglePosition[1] ** 2\n            ),\n          };\n        });\n\n      for (let side = 0; side < 6; side++) {\n        const sideRotation = SIDE_ANGLES[side];\n\n        for (let n = 0; n < levelSideTriangleCount; n++) {\n          if (isCapLevel && n % 2 === 0) {\n            // Cap triangles are only odd indexes\n            levelTrianglesPoints.push(null);\n            continue;\n          }\n\n          const { distanceFromCenter, rotation } = levelPositions[n];\n\n          const triangleCenterAngle =\n            sideRotation - rotation - this.calc.globalRotationRadians;\n\n          const rotatedTrianglePosition = [\n            this.center[0] + distanceFromCenter * Math.cos(triangleCenterAngle),\n            this.center[1] - distanceFromCenter * Math.sin(triangleCenterAngle),\n          ];\n\n          const trianglePoints = this.getTrianglePoints({\n            center: rotatedTrianglePosition,\n            rotation:\n              sideRotation +\n              (side * PI2) / 3 -\n              n * ANGLE +\n              this.calc.globalRotationRadians,\n            isCapLevel,\n            triangleIndexInSide: n,\n          });\n\n          levelTrianglesPoints.push(trianglePoints);\n        }\n      }\n    }\n\n    return levelsPoints;\n  }\n\n  *generateTriangleStrings({ points, level, indexInSide }) {\n    this.renderer.setColor(this.color.getColor(level));\n    const { density, levels } = this.config;\n    const isCapLevel = level === levels;\n\n    const initialSide = isCapLevel\n      ? this._getNextIndexInTriangle(indexInSide % 3)\n      : 0;\n    const lastSide = isCapLevel ? initialSide : 2;\n    const lastIndex = isCapLevel ? density : density - 1;\n\n    for (let side = initialSide; side <= lastSide; side++) {\n      const nextSide = this._getNextIndexInTriangle(side);\n      let prevPoint = points[side][0];\n\n      for (let n = 0; n <= lastIndex; n++) {\n        const isNextSide = n % 2 === 0;\n\n        const positions = [];\n        const nextSidePoint = isNextSide ? this.config.density - n : n;\n        const targetSide = isNextSide ? nextSide : side;\n        positions.push(points[targetSide][nextSidePoint]);\n\n        if (n < density) {\n          positions.push(\n            points[targetSide][\n              isNextSide ? nextSidePoint - 1 : nextSidePoint + 1\n            ]\n          );\n        }\n\n        this.renderer.renderLines(prevPoint, ...positions);\n        prevPoint = positions[positions.length - 1];\n\n        yield;\n      }\n    }\n  }\n\n  *generateStringsBetweenTriangles({\n    triangle1,\n    triangle2,\n    level,\n    triangleIndex,\n    triangleIndexInSide,\n    isNextLevel,\n    nextLevelTriangleIndex,\n  }) {\n    const { density, fillColor } = this.config;\n    const levelSideCount = this.calc.countPerLevelSide[level];\n    const angleShift = (triangleIndex % levelSideCount) % 3;\n\n    this.renderer.setColor(fillColor);\n\n    const isLastTriangleInSide = triangleIndexInSide === levelSideCount - 1;\n    const firstSide = angleShift;\n\n    const sideIndex = isNextLevel\n      ? [\n          this._getNextIndexInTriangle(angleShift),\n          this._getNextIndexInTriangle(angleShift, -1),\n        ]\n      : [\n          firstSide,\n          this._getNextIndexInTriangle(\n            firstSide,\n            triangleIndexInSide % 2 ? 1 : -1\n          ),\n        ];\n\n    for (let s = 0; s < 2; s++) {\n      const order = generateOrderInSide.call(this, s);\n\n      for (const { pointIndex, triangle1Points, triangle2Points } of order) {\n        this.renderer.renderLines(\n          triangle1Points[pointIndex],\n          triangle2Points[pointIndex]\n        );\n\n        yield;\n      }\n    }\n\n    function* generateOrderInSide(side) {\n      const t1Side = sideIndex[side];\n      const t2Side = getNextTriangleSide.call(this);\n\n      const triangle1Points = triangle1[t1Side];\n      const triangle2Points = triangle2[t2Side];\n\n      const last = side ? density : density - 1;\n\n      if (side === 0) {\n        for (let n = 0; n <= last; n++) {\n          yield { pointIndex: density - n, triangle1Points, triangle2Points };\n        }\n      } else {\n        for (let n = last; n >= 1; n--) {\n          yield { pointIndex: density - n, triangle1Points, triangle2Points };\n        }\n      }\n\n      function getNextTriangleSide() {\n        if (isNextLevel) {\n          return this._getNextIndexInTriangle(t1Side);\n        } else {\n          if (side === 0 && isLastTriangleInSide) {\n            return 1;\n          } else {\n            if (side === 1 && isLastTriangleInSide) {\n              return 0;\n            } else {\n              return this._getNextIndexInTriangle(t1Side, 1);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  _getNextIndexInTriangle(index, direction = 1) {\n    const result = index + direction;\n    if (result < 0) {\n      return 2;\n    }\n    if (result > 2) {\n      return 0;\n    }\n    return result;\n  }\n\n  *generateStrings() {\n    const {\n      fill,\n      renderTriangles,\n      renderCaps,\n      levels,\n      renderRing,\n      ringSize,\n      ringColor,\n    } = this.config;\n\n    const triangleLevels = this.getPoints();\n\n    let levelIndex = -1;\n\n    for (const level of triangleLevels) {\n      levelIndex++;\n      const isCapLevel = levelIndex === levels;\n\n      let triangleIndex = -1;\n      const lastIndexInLevel = level.length - 1;\n\n      for (const triangle of level) {\n        triangleIndex++;\n        const levelSideCount = this.calc.countPerLevelSide[levelIndex];\n        const triangleIndexInSide = triangleIndex % levelSideCount;\n\n        if (fill && !isCapLevel) {\n          if (triangleIndex === 0) {\n            yield* this.generateStringsBetweenTriangles({\n              triangle1: level[lastIndexInLevel],\n              triangle2: triangle,\n              level: levelIndex,\n              triangleIndex: lastIndexInLevel,\n              triangleIndexInSide: lastIndexInLevel % levelSideCount,\n            });\n          }\n          if (triangleIndex !== lastIndexInLevel) {\n            yield* this.generateStringsBetweenTriangles({\n              triangle1: triangle,\n              triangle2: level[triangleIndex + 1],\n              level: levelIndex,\n              triangleIndex,\n              triangleIndexInSide,\n            });\n          }\n\n          if (\n            triangleIndexInSide % 2 === 0 &&\n            (renderCaps || levelIndex < levels - 1)\n          ) {\n            const side = Math.floor(triangleIndex / levelSideCount);\n            const nextLevelSideCount =\n              this.calc.countPerLevelSide[levelIndex + 1];\n            const nextLevelTriangleIndex =\n              side * nextLevelSideCount + triangleIndexInSide + 1;\n\n            yield* this.generateStringsBetweenTriangles({\n              triangle1: triangle,\n              triangle2: triangleLevels[levelIndex + 1][nextLevelTriangleIndex],\n              level: levelIndex,\n              triangleIndex,\n              triangleIndexInSide,\n              isNextLevel: true,\n              nextLevelTriangleIndex,\n            });\n          }\n        }\n\n        const indexInSide =\n          triangleIndex % this.calc.countPerLevelSide[levelIndex];\n\n        if (renderTriangles && (!isCapLevel || indexInSide % 2)) {\n          yield* this.generateTriangleStrings({\n            points: triangle,\n            level: levelIndex,\n            indexInSide,\n          });\n        }\n      }\n    }\n\n    if (renderRing && ringSize) {\n      yield* this.circle.drawRing(this.renderer, {\n        ringSize: ringSize / 2,\n        color: ringColor,\n      });\n    }\n  }\n\n  getStepCount(calc) {\n    if (this.stepCount) {\n      return this.stepCount;\n    }\n\n    if (!calc) {\n      calc = this.getCalc();\n    }\n\n    const { levels, density, fill, renderTriangles, renderCaps } = this.config;\n    const { triangleCount, ringNailCount = 0 } = calc;\n\n    const fillStepsPerTriangle = fill ? density * 2 : 0;\n    const triangleSteps = renderTriangles ? density * 3 : 0;\n\n    const stepsPerTriangle = triangleSteps + fillStepsPerTriangle;\n\n    const levelsWithFillBetween = levels + (renderCaps ? 1 : 0);\n    const fillStepsBetweenLevels =\n      (fillStepsPerTriangle *\n        (levelsWithFillBetween - 1) *\n        6 *\n        levelsWithFillBetween) /\n      2;\n    const stepsPerCap = density + 1;\n    const capSteps =\n      renderTriangles && renderCaps ? 6 * levels * stepsPerCap : 0;\n\n    return (\n      triangleCount * stepsPerTriangle +\n      capSteps +\n      fillStepsBetweenLevels +\n      ringNailCount\n    );\n  }\n\n  drawNails() {\n    const triangleLevels = this.getPoints();\n    let index = 0;\n    for (const level of triangleLevels) {\n      for (const triangle of level) {\n        if (triangle != null) {\n          // A cap level has nulls between caps\n          for (const triangleSide of triangle) {\n            for (const point of triangleSide) {\n              this.nails.addNail({ point, number: index++ });\n            }\n          }\n        }\n      }\n    }\n\n    if (this.circle) {\n      this.circle.drawNails(this.nails);\n    }\n  }\n\n  static thumbnailConfig = {\n    levels: 3,\n    density: 3,\n    fill: false,\n    renderRing: true,\n  };\n}\n","import StringArt from '../StringArt.js';\nimport Circle from '../helpers/Circle.js';\nimport Color from '../helpers/Color.js';\nimport { PI2 } from '../helpers/math_utils.js';\n\nconst COLOR_CONFIG = Color.getConfig({\n  defaults: {\n    isMultiColor: true,\n    color: '#ff0000',\n    multicolorRange: 133,\n    multicolorStart: 239,\n    multicolorByLightness: false,\n    minLightness: 30,\n    maxLightness: 70,\n    colorCount: 4,\n  },\n  customControls: [\n    {\n      key: 'colorPerLayer',\n      label: 'Color per layer',\n      defaultValue: true,\n      type: 'checkbox',\n    },\n  ],\n});\n\nconst spreadModes = {\n  evenly: {\n    f: (layerIndex, { ringSize, layers, n }) => {\n      const firstLayerDistance = Math.floor(n * ringSize);\n      return Math.floor(((layers - layerIndex) * firstLayerDistance) / layers);\n    },\n    name: 'Evenly',\n  },\n  distance: {\n    f: (layerIndex, { n, ringSize, layerDistance }) => {\n      const firstLayerDistance = Math.floor(n * ringSize);\n\n      if (layerIndex > 0) {\n        return firstLayerDistance - layerIndex * layerDistance;\n      }\n\n      return firstLayerDistance;\n    },\n    name: 'Specific distance',\n  },\n};\n\nexport default class Comet extends StringArt {\n  name = 'Comet';\n  id = 'comet';\n  controls = [\n    Circle.nailsConfig,\n    {\n      key: 'layers',\n      label: 'Layers',\n      defaultValue: 5,\n      type: 'range',\n      attr: {\n        min: 1,\n        max: 20,\n        step: 1,\n      },\n      isStructural: true,\n    },\n    {\n      key: 'ringSize',\n      label: 'First layer size',\n      description:\n        'Nail count from the top center nail to the first connected nail in the first layer',\n      defaultValue: 0.3,\n      type: 'range',\n      attr: {\n        min: 0,\n        max: 1,\n        step: 0.01,\n      },\n      displayValue: ({ ringSize, n }) => Math.floor(n * ringSize),\n      isStructural: true,\n    },\n    {\n      key: 'layerSpread',\n      label: 'Layer Spread',\n      type: 'select',\n      defaultValue: 'distance',\n      options: Object.entries(spreadModes).map(([key, { name }]) => ({\n        value: key,\n        label: name,\n      })),\n      isStructural: true,\n    },\n    {\n      key: 'layerDistance',\n      label: 'Layer Distance',\n      type: 'range',\n      attr: {\n        min: 1,\n        max: ({ config: { n, layers } }) => Math.floor(n / 2 / layers),\n        step: 1,\n      },\n      defaultValue: 1,\n      isStructural: true,\n      show: ({ layerSpread }) => layerSpread !== 'evenly',\n    },\n    Circle.rotationConfig,\n    Circle.distortionConfig,\n    Circle.displacementConfig,\n    COLOR_CONFIG,\n  ];\n\n  defaultValues = {\n    n: 51,\n    layers: 11,\n    colorPerLayer: true,\n    multicolorRange: 203,\n    multicolorStart: 137,\n    ringSize: 0.47,\n    rotation: 90 / 360,\n    distortion: 0.38,\n    displacementFunc: 'fastInOut',\n    displacementMag: 1.8,\n    displacementFastArea: 0.43,\n    layerSpread: 'distance',\n    layerDistance: 1,\n  };\n\n  resetStructure() {\n    if (this.points) {\n      this.points.clear();\n    }\n\n    if (this.layerRingDistances) {\n      this.layerRingDistances.clear();\n    }\n  }\n\n  setUpDraw() {\n    super.setUpDraw();\n    const circleConfig = {\n      size: this.size,\n      n: this.config.n,\n      margin: this.config.margin,\n      rotation: this.config.rotation,\n      distortion: this.config.distortion,\n      displacementFunc: this.config.displacementFunc,\n      displacementMag: this.config.displacementMag,\n      displacementFastArea: this.config.displacementFastArea,\n    };\n\n    if (this.circle) {\n      this.circle.setConfig(circleConfig);\n    } else {\n      this.circle = new Circle(circleConfig);\n    }\n\n    if (!this.stepCount) {\n      this.stepCount = this.getStepCount();\n    }\n\n    const { isMultiColor, colorCount, layers, colorPerLayer } = this.config;\n    const realColorCount = isMultiColor\n      ? colorPerLayer\n        ? layers\n        : Math.min(colorCount, layers)\n      : 1;\n\n    this.color = new Color({\n      ...this.config,\n      isMultiColor,\n      colorCount: realColorCount,\n    });\n  }\n\n  getCalc() {\n    const { n } = this.config;\n    const size = this.getSize();\n\n    return {\n      n,\n      angleRadians: (PI2 * angle) / maxSteps,\n      radius: Math.min(...size) / 2,\n      currentSize: size,\n      rotationAngle: -Math.PI * 2 * rotation,\n    };\n  }\n\n  getLayerRingDistance(layerIndex) {\n    const spread = spreadModes[this.config.layerSpread];\n    if (!spread) {\n      throw new Error(`Invalid spread mode, \"${this.config.layerSpread}\"!`);\n    }\n\n    return spread.f(layerIndex, this.config);\n  }\n\n  getLayerRingStepCount(layerIndex) {\n    const layerRingDistance = this.getLayerRingDistance(layerIndex);\n    return (this.config.n - layerRingDistance + 1) * 2 - 1;\n  }\n\n  *drawLayer(layerIndex = 0) {\n    const { n } = this.config;\n    const ringDistance = this.getLayerRingDistance(layerIndex);\n    const stepCount = n - ringDistance + 1;\n\n    let prevPoint = this.circle.getPoint(0);\n    let prevPointIndex = 0;\n    this.renderer.setColor(this.color.getColor(layerIndex));\n\n    for (let i = 0; i < n - ringDistance + 1; i++) {\n      const pointIndex = i + ringDistance;\n      const point = this.circle.getPoint(pointIndex);\n\n      this.renderer.renderLines(prevPoint, point);\n      yield;\n\n      if (i !== stepCount - 1) {\n        prevPointIndex = i + 1;\n        prevPoint = this.circle.getPoint(prevPointIndex);\n\n        this.renderer.renderLines(point, prevPoint);\n\n        yield;\n      }\n    }\n  }\n\n  *generateStrings() {\n    for (let layer = 0; layer < this.config.layers; layer++) {\n      yield* this.drawLayer(layer);\n    }\n  }\n\n  getStepCount() {\n    if (this.stepCount) {\n      return this.stepCount;\n    }\n\n    const { layers } = this.config;\n    return new Array(layers)\n      .fill(0)\n      .reduce(\n        (totalStepCount, _, layerIndex) =>\n          totalStepCount + this.getLayerRingStepCount(layerIndex),\n        0\n      );\n  }\n\n  drawNails() {\n    this.circle.drawNails(this.nails);\n  }\n\n  static thumbnailConfig = {\n    n: 24,\n    layers: 8,\n  };\n}\n","const elements = {\n  controls: document.querySelector('#controls'),\n  controlsPanel: document.querySelector('#controls_panel'),\n  sidebarForm: document.querySelector('#sidebar_form'),\n};\n\nconst EVENTS = new Set(['input', 'change']);\nconst STATE_LOCAL_STORAGE_KEY = 'controls_state';\nconst RANGE_SCROLL_LOCK_TIMEOUT = 120;\n\nlet inputTimeout;\n\nexport default class EditorControls {\n  constructor({ pattern }) {\n    this.pattern = pattern;\n    this.state = this._getState() ?? { groups: {} };\n\n    this.eventHandlers = {\n      input: new Set(),\n      change: new Set(),\n    };\n\n    this._toggleFieldset = e => {\n      if (e.target.nodeName === 'LEGEND') {\n        e.target.parentElement.classList.toggle('minimized');\n        const groupId = e.target.parentElement.dataset.group;\n        this.state = {\n          ...this.state,\n          groups: {\n            ...this.state.groups,\n            [groupId]: !e.target.parentElement.classList.contains('minimized'),\n          },\n        };\n        this._updateState(this.state);\n      }\n    };\n\n    this._toggleFieldSetOnEnter = e => {\n      if (e.target.nodeName === 'LEGEND' && e.key === 'Enter') {\n        this._toggleFieldset(e);\n      }\n    };\n\n    this._wrappedOnInput = e => this._onInput(e);\n    elements.controls.addEventListener('input', this._wrappedOnInput);\n    this._wrappedOnTouchStart = e => this._onTouchStart(e);\n    this._wrappedOnMouseDown = e => this._onMouseDown(e);\n    elements.controls.addEventListener('touchstart', this._wrappedOnTouchStart);\n    elements.controls.addEventListener('mousedown', this._wrappedOnMouseDown);\n    elements.sidebarForm.addEventListener('click', this._toggleFieldset);\n    elements.sidebarForm.addEventListener(\n      'keydown',\n      this._toggleFieldSetOnEnter\n    );\n    this.controlElements = {};\n    this.renderControls();\n  }\n\n  destroy() {\n    elements.controls.removeEventListener('input', this._wrappedOnInput);\n    elements.sidebarForm.removeEventListener('click', this._toggleFieldset);\n    elements.sidebarForm.removeEventListener(\n      'keydown',\n      this._toggleFieldSetOnEnter\n    );\n    elements.controls.removeEventListener(\n      'touchstart',\n      this._wrappedOnTouchStart\n    );\n    elements.controls.removeEventListener(\n      'mousedown',\n      this._wrappedOnMouseDown\n    );\n    elements.controls.innerHTML = '';\n  }\n\n  addEventListener(event, eventHandler) {\n    if (!EVENTS.has(event)) {\n      throw new Error(`Unsupported event for EditorControls, \"${event}\"!`);\n    }\n\n    if (!(eventHandler instanceof Function)) {\n      throw new Error('Invalid event handler.');\n    }\n\n    this.eventHandlers[event].add(eventHandler);\n  }\n\n  _triggerEvent(event, eventData) {\n    for (const eventHandler of this.eventHandlers[event]) {\n      eventHandler(eventData);\n    }\n  }\n\n  _onMouseDown(e) {\n    // Clearing selection when starting to click in the controls, do avoid a buggy behavior,\n    // when if a control's display value was selected (can happen by mistake), the drag of range input doesn't work.\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n    }\n  }\n\n  /**\n   * Needed for range inputs, to avoid changing the value when the user drags to\n   * scroll and accidentally touches a range input when intending to scroll.\n   * @param {Event} e\n   */\n  _onTouchStart(e) {\n    if (e.target.getAttribute('type') === 'range') {\n      this._postponeRangeInput = true;\n      this.currentInputRange = e.target;\n      this.currentInputRangeValue = e.target.value;\n      this._rangeLockTimeout = setTimeout(() => {\n        this._postponeRangeInput = false;\n      }, RANGE_SCROLL_LOCK_TIMEOUT);\n      this._wrappedOnTouchEnd = e => this._onTouchEnd(e);\n      document.body.addEventListener('touchend', this._wrappedOnTouchEnd);\n      this._wrappedOnRangeScroll = e => this._onRangeScroll(e);\n      elements.controlsPanel.addEventListener(\n        'scroll',\n        this._wrappedOnRangeScroll\n      );\n    }\n  }\n\n  _onTouchEnd() {\n    document.body.removeEventListener('touchend', this._wrappedOnTouchEnd);\n    elements.controlsPanel.removeEventListener(\n      'scroll',\n      this._wrappedOnRangeScroll\n    );\n\n    if (this._lockRange) {\n      this._lockRange = false;\n      if (this.currentInputRange) {\n        this.currentInputRange.value = this.currentInputRangeValue;\n      }\n    }\n\n    this.currentInputRange = this.currentInputRangeValue = null;\n  }\n\n  _onRangeScroll() {\n    this._lockRange = true;\n  }\n\n  _onInput(e) {\n    clearTimeout(inputTimeout);\n    clearTimeout(this._postponeRangeInputTimeout);\n\n    if (this._postponeRangeInput && e.target.getAttribute('type') === 'range') {\n      e.preventDefault();\n      this._postponeRangeInputTimeout = setTimeout(() => {\n        this._onInput(e);\n      }, RANGE_SCROLL_LOCK_TIMEOUT);\n      return false;\n    }\n    if (this._lockRange) {\n      e.preventDefault();\n      return false;\n    }\n\n    this.updateInput({\n      inputElement: e.target,\n      originalEvent: e,\n      deferChange: true,\n    });\n  }\n\n  updateInput({ inputElement, originalEvent, deferChange = true }) {\n    const inputValue = getInputValue(inputElement.type, inputElement);\n    const controlKey = inputElement.id.replace(/^config_/, '');\n\n    this.pattern.setConfigValue(controlKey, inputValue);\n\n    const { config, displayValue } = this.controlElements[controlKey];\n    if (displayValue) {\n      const formattedValue = config.displayValue\n        ? config.displayValue(this.pattern.config, config)\n        : inputElement.value;\n      displayValue.innerText = formattedValue;\n    }\n\n    const eventData = Object.freeze({\n      control: controlKey,\n      value: inputValue,\n      originalEvent,\n      pattern: this.pattern,\n    });\n\n    this._triggerEvent('input', eventData);\n\n    const triggerChange = () => {\n      this._triggerEvent('change', eventData);\n      this.updateControlsVisibility();\n      this.updateControlsAttributes();\n    };\n\n    if (deferChange) {\n      inputTimeout = setTimeout(triggerChange, 100);\n    } else {\n      triggerChange();\n    }\n  }\n\n  _getState() {\n    const state = localStorage.getItem(STATE_LOCAL_STORAGE_KEY);\n    if (state) {\n      try {\n        return JSON.parse(state);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n  _updateState(newState) {\n    if (newState) {\n      localStorage.setItem(STATE_LOCAL_STORAGE_KEY, JSON.stringify(newState));\n    } else {\n      localStorage.removeItem(STATE_LOCAL_STORAGE_KEY);\n    }\n  }\n\n  updateControlsAttributes(configControls = this.pattern.configControls) {\n    configControls.forEach(control => {\n      if (control.attr) {\n        const functionAttrs = Object.entries(control.attr).filter(\n          ([_, value]) => value instanceof Function\n        );\n        if (functionAttrs.length) {\n          const inputEl = this.controlElements[control.key].input;\n          if (inputEl) {\n            functionAttrs.forEach(([name, value]) => {\n              const newAttrValue = value(this.pattern);\n              if (newAttrValue != inputEl.getAttribute(name)) {\n                if (\n                  (name === 'min' && inputEl.value < newAttrValue) ||\n                  (name === 'max' && inputEl.value > newAttrValue)\n                ) {\n                  inputEl.value = newAttrValue;\n                  this.updateInput({ inputElement: inputEl });\n                }\n                inputEl.setAttribute(name, newAttrValue);\n              }\n            });\n          }\n        }\n      }\n    });\n  }\n\n  updateControlsVisibility(configControls = this.pattern.configControls) {\n    configControls.forEach(control => {\n      if (control.show) {\n        const shouldShowControl = control.show(this.pattern.config, control);\n        const controlEl = this.controlElements[control.key].control;\n        if (controlEl) {\n          if (shouldShowControl) {\n            controlEl.removeAttribute('hidden');\n          } else {\n            controlEl.setAttribute('hidden', 'hidden');\n          }\n        }\n      }\n\n      if (control.isDisabled) {\n        const shouldDisableControl = control.isDisabled(this.pattern.config);\n        const inputEl = this.controlElements[control.key].input;\n        if (inputEl) {\n          if (shouldDisableControl) {\n            inputEl.setAttribute('disabled', 'disabled');\n          } else {\n            inputEl.removeAttribute('disabled');\n          }\n        }\n      }\n\n      if (control.children) {\n        this.updateControlsVisibility(control.children);\n      }\n    });\n  }\n\n  updateInputs(config) {\n    Object.entries(config).forEach(([key, value]) => {\n      const { input, value: valueEl } = this.controlElements[key];\n      if (input) {\n        if (input.type === 'checkbox') {\n          input.checked = value;\n        } else {\n          input.value = value;\n        }\n        if (valueEl) {\n          valueEl.innerText = value;\n        }\n      }\n    });\n  }\n\n  renderControls(containerEl = elements.controls, _configControls) {\n    const configControls = _configControls ?? this.pattern.configControls;\n    containerEl.innerHTML = '';\n    const controlsFragment = document.createDocumentFragment();\n\n    configControls.forEach(control => {\n      const controlId = `config_${control.key}`;\n      const controlElements = (this.controlElements[control.key] = {\n        config: control,\n      });\n\n      let controlEl;\n\n      if (control.type === 'group') {\n        controlEl = document.createElement('fieldset');\n        controlEl.setAttribute('data-group', control.key);\n        const groupTitleEl = document.createElement('legend');\n        groupTitleEl.setAttribute('tabindex', '0');\n        groupTitleEl.innerText = control.label;\n        controlEl.appendChild(groupTitleEl);\n        controlEl.className = 'control control_group';\n        if (control.defaultValue === 'minimized') {\n          controlEl.classList.add('minimized');\n          this.state.groups[control.key] = false;\n        }\n        const childrenContainer = document.createElement('div');\n        controlEl.appendChild(childrenContainer);\n        this.renderControls(childrenContainer, control.children);\n      } else {\n        controlEl = document.createElement('div');\n        controlEl.className = 'control';\n\n        const label = document.createElement('label');\n        label.innerHTML = control.label;\n        label.setAttribute('for', controlId);\n\n        const inputEl = (controlElements.input = document.createElement(\n          control.type === 'select' ? 'select' : 'input'\n        ));\n\n        const inputValue =\n          this.pattern.config[control.key] ?? control.defaultValue;\n\n        if (control.type === 'select') {\n          const selectOptions = document.createDocumentFragment();\n          control.options.forEach(_option => {\n            const { value, label } =\n              typeof _option === 'string'\n                ? { value: _option, label: _option }\n                : _option;\n            const optionEl = document.createElement('option');\n            optionEl.setAttribute('value', value);\n            optionEl.innerText = label;\n            selectOptions.appendChild(optionEl);\n          });\n          inputEl.appendChild(selectOptions);\n          inputEl.value = inputValue;\n          controlEl.appendChild(label);\n          controlEl.appendChild(inputEl);\n        } else {\n          inputEl.setAttribute('type', control.type);\n\n          if (control.type === 'checkbox') {\n            inputEl.checked = inputValue;\n            controlEl.appendChild(inputEl);\n            controlEl.appendChild(label);\n          } else {\n            controlEl.appendChild(label);\n            controlEl.appendChild(inputEl);\n            setTimeout(() => {\n              inputEl.value = inputValue;\n            });\n            const inputValueEl = (controlElements.displayValue =\n              document.createElement('span'));\n            inputValueEl.id = `config_${control.key}_value`;\n            inputValueEl.innerText = control.displayValue\n              ? control.displayValue(this.pattern.config, control)\n              : inputValue;\n            inputValueEl.className = 'control_input_value';\n            controlEl.appendChild(inputValueEl);\n          }\n        }\n\n        if (control.attr) {\n          Object.entries(control.attr).forEach(([attr, value]) => {\n            const realValue =\n              value instanceof Function ? value(this.pattern) : value;\n            inputEl.setAttribute(attr, realValue);\n          });\n        }\n\n        inputEl.id = controlId;\n      }\n\n      this.controlElements[control.key].control = controlEl;\n      controlEl.id = `control_${control.key}`;\n      controlsFragment.appendChild(controlEl);\n    });\n\n    containerEl.appendChild(controlsFragment);\n    this.updateGroupsState();\n    requestAnimationFrame(() => this.updateControlsVisibility());\n  }\n\n  updateGroupsState() {\n    const groups = elements.sidebarForm.querySelectorAll('[data-group]');\n    groups.forEach(groupEl => {\n      const groupId = groupEl.dataset.group;\n      const groupState = this.state.groups[groupId];\n      if (typeof groupState === 'boolean') {\n        if (groupState) {\n          groupEl.classList.remove('minimized');\n        } else {\n          groupEl.classList.add('minimized');\n        }\n      }\n    });\n  }\n}\n\nfunction getInputValue(type, inputElement) {\n  switch (type) {\n    case 'range':\n      return parseFloat(inputElement.value);\n    case 'checkbox':\n      return inputElement.checked;\n    case 'number':\n      return parseFloat(inputElement.value);\n    default:\n      return inputElement.value;\n  }\n}\n","const sizeControls = document.querySelector('#size_controls');\n\nconst elements = {\n  sizeSelect: sizeControls.querySelector('#size_select'),\n  sizeCustom: sizeControls.querySelector('#size_custom'),\n  width: sizeControls.querySelector('#size_custom_width'),\n  height: sizeControls.querySelector('#size_custom_height'),\n  orientationSelect: sizeControls.querySelector('#size_orientation_select'),\n};\n\nfunction cmToPixels(cm, dpi = 300) {\n  return Math.floor((cm / 2.54) * dpi);\n}\n\nconst SCREEN_SIZE = [\n  Math.floor(window.screen.width),\n  Math.floor(window.screen.height),\n];\n\nconst SIZES = [\n  { id: 'fit', name: 'Fit to screen' },\n  {\n    id: 'A4',\n    value: [20, 28].map(v => cmToPixels(v)),\n    orientationSelect: true,\n  },\n  {\n    id: 'A3',\n    value: [28, 40].map(v => cmToPixels(v)),\n    orientationSelect: true,\n  },\n  {\n    id: 'screen',\n    name: `Screen size (${SCREEN_SIZE.join('x')})`,\n    value: SCREEN_SIZE,\n  },\n  { id: 'custom', name: 'Custom...' },\n];\n\nexport default class EditorSizeControls {\n  element = document.querySelector('#size_controls');\n\n  constructor({ getCurrentSize }) {\n    const sizeOptionsFragment = document.createDocumentFragment();\n    SIZES.forEach(size => {\n      const sizeListItem = document.createElement('option');\n      sizeListItem.setAttribute('value', size.id);\n      sizeListItem.innerText = size.name ?? size.id;\n      sizeOptionsFragment.appendChild(sizeListItem);\n    });\n    elements.sizeSelect.appendChild(sizeOptionsFragment);\n    this.selectedSize = SIZES[0];\n\n    elements.sizeSelect.addEventListener('change', e => {\n      const selectedSizeId = e.target.value;\n      const size = SIZES.find(({ id }) => id === selectedSizeId);\n      this.selectedSize = size;\n\n      if (size.id === 'custom') {\n        elements.sizeCustom.removeAttribute('hidden');\n        const [width, height] = getCurrentSize();\n        elements.width.value = width;\n        elements.height.value = height;\n      } else {\n        elements.sizeCustom.setAttribute('hidden', 'hidden');\n        this._notifyOnChange(this.getValue());\n      }\n\n      if (size.orientationSelect) {\n        elements.orientationSelect.removeAttribute('hidden');\n      } else {\n        elements.orientationSelect.setAttribute('hidden', 'hidden');\n      }\n    });\n\n    elements.orientationSelect.addEventListener('change', e => {\n      this._notifyOnChange(this.getValue());\n    });\n\n    elements.sizeCustom.addEventListener('focusin', e => {\n      e.target.select();\n    });\n\n    elements.sizeCustom.addEventListener('input', () => {\n      this._notifyOnChange([\n        elements.width.value ? parseInt(elements.width.value) : null,\n        elements.height.value ? parseInt(elements.height.value) : null,\n      ]);\n    });\n  }\n\n  _notifyOnChange([width, height] = []) {\n    this.element.dispatchEvent(\n      new CustomEvent('sizechange', { detail: { width, height } })\n    );\n  }\n\n  getValue() {\n    if (this.selectedSize.id === 'custom') {\n      return [\n        parseInt(elements.width.value, 10),\n        parseInt(elements.height.value, 10),\n      ];\n    } else {\n      let value = this.selectedSize.value;\n      if (\n        this.selectedSize.orientationSelect &&\n        elements.orientationSelect.value === 'horizontal'\n      ) {\n        value = Array.from(value).reverse();\n      }\n      return value;\n    }\n  }\n}\n","import patternTypes from '../pattern_types.js';\nimport CanvasRenderer from '../renderers/CanvasRenderer.js';\n\nconst THUMBNAIL_WIDTH_PX = '100px';\nconst MINIMIZED_CLASS = 'minimized';\n\nexport class Thumbnails {\n  elements = {\n    root: document.querySelector('#pattern_select_panel'),\n    thumbnails: document.querySelector('#pattern_select_thumbnails'),\n    toggleBtn: document.querySelector('#pattern_select_btn'),\n    dropdown: document.querySelector('#pattern_select_dropdown'),\n  };\n\n  constructor() {\n    this.elements.toggleBtn.addEventListener('click', () => this.toggle());\n  }\n\n  toggle() {\n    if (this.elements.root.classList.contains(MINIMIZED_CLASS)) {\n      this.open();\n    } else if (this.pattern) {\n      this.close();\n    }\n  }\n\n  open() {\n    if (this.elements.root.classList.contains(MINIMIZED_CLASS)) {\n      this.elements.root.classList.remove(MINIMIZED_CLASS);\n      if (!this.thumbnailsRendered) {\n        this.createThumbnails();\n        this.thumbnailsRendered = true;\n      }\n\n      this._onClickOutside = e => {\n        if (!e.target.closest('#pattern_select_panel')) {\n          this.toggle();\n        }\n      };\n\n      document.body.addEventListener('mousedown', this._onClickOutside);\n    }\n  }\n\n  close() {\n    if (!this.elements.root.classList.contains(MINIMIZED_CLASS)) {\n      this.elements.root.classList.add(MINIMIZED_CLASS);\n      document.body.removeEventListener('mousedown', this._onClickOutside);\n      this._onClickOutside = null;\n    }\n  }\n\n  setCurrentPattern(pattern) {\n    this.pattern = pattern;\n    this.elements.toggleBtn.innerText = pattern?.name ?? 'Choose a pattern';\n  }\n\n  createThumbnails() {\n    const thumbnailsFragment = document.createDocumentFragment();\n    const patterns = [];\n\n    patternTypes.forEach(PatternType => {\n      const patternLink = document.createElement('a');\n      const renderer = new CanvasRenderer(patternLink);\n\n      patternLink.style.width = patternLink.style.height = THUMBNAIL_WIDTH_PX;\n\n      const pattern = new PatternType(renderer);\n      pattern.config = Object.assign(\n        {\n          margin: 1,\n          enableBackground: false,\n          nailRadius: 0.5,\n        },\n        PatternType.thumbnailConfig\n      );\n\n      patterns.push(pattern);\n\n      const li = document.createElement('li');\n      thumbnailsFragment.appendChild(li);\n\n      patternLink.href = `?pattern=${pattern.id}`;\n      patternLink.setAttribute('data-pattern', pattern.id);\n      patternLink.title = pattern.name;\n      li.appendChild(patternLink);\n    });\n\n    this.elements.thumbnails.appendChild(thumbnailsFragment);\n    patterns.forEach(pattern => pattern.draw());\n\n    this.elements.thumbnails.addEventListener('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      const link = e.target.closest('[data-pattern]');\n\n      if (!link) {\n        return false;\n      }\n\n      this.elements.root.dispatchEvent(\n        new CustomEvent('change', {\n          detail: { pattern: link.dataset.pattern },\n        })\n      );\n      this.toggle();\n    });\n  }\n\n  addOnChangeListener(listener) {\n    this.elements.root.addEventListener('change', listener);\n  }\n\n  removeOnChangeListener(listener) {\n    this.elements.root.removeEventListener('change', listener);\n  }\n}\n","import Renderer from './Renderer.js';\nimport { PI2 } from '../helpers/math_utils.js';\n\nexport default class CanvasRenderer extends Renderer {\n  constructor(parentElement) {\n    super(parentElement);\n\n    this.canvas = document.createElement('canvas');\n    this.ctx = this.canvas.getContext('2d');\n\n    const dpr = window.devicePixelRatio || 1;\n    const bsr =\n      this.ctx.webkitBackingStorePixelRatio ||\n      this.ctx.mozBackingStorePixelRatio ||\n      this.ctx.msBackingStorePixelRatio ||\n      this.ctx.oBackingStorePixelRatio ||\n      this.ctx.backingStorePixelRatio ||\n      1;\n    this.pixelRatio = dpr / bsr;\n    this.ctx.globalCompositeOperation = 'source-over';\n\n    parentElement.appendChild(this.canvas);\n  }\n\n  get element() {\n    return this.canvas;\n  }\n\n  reset() {\n    this.ctx.clearRect(0, 0, ...this.getSize());\n    this.canvas.removeAttribute('width');\n    this.canvas.removeAttribute('height');\n\n    const [width, height] = this.getSize();\n    this.canvas.setAttribute('width', width);\n    this.canvas.setAttribute('height', height);\n  }\n\n  setColor(color) {\n    this.ctx.strokeStyle = color;\n  }\n\n  setLineWidth(width) {\n    this.ctx.lineWidth = width;\n  }\n\n  setBackground(color) {\n    this.ctx.globalCompositeOperation = 'destination-over';\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(0, 0, ...this.getSize());\n    this.ctx.globalCompositeOperation = 'source-over';\n  }\n\n  getSize() {\n    return [\n      this.canvas.clientWidth * this.pixelRatio,\n      this.canvas.clientHeight * this.pixelRatio,\n    ];\n  }\n\n  renderLines(startPosition, ...positions) {\n    this.ctx.beginPath();\n    this.ctx.moveTo(...startPosition);\n\n    for (const position of positions) {\n      this.ctx.lineTo(...position);\n    }\n\n    this.ctx.stroke();\n  }\n\n  renderNails(nails, { color, fontSize, radius, renderNumbers, margin = 0 }) {\n    const centerX = this.canvas.width / 2;\n\n    this.ctx.globalCompositeOperation = 'source-over';\n    this.ctx.beginPath();\n    this.ctx.fillStyle = color;\n    this.ctx.textBaseline = 'middle';\n    this.ctx.font = `${fontSize}px sans-serif`;\n    const nailNumberOffset = radius + margin;\n\n    nails.forEach(({ point: [x, y], number }) => {\n      this.ctx.moveTo(x + radius, y);\n      this.ctx.arc(x, y, radius, 0, PI2);\n      if (renderNumbers && number != null) {\n        const isRightAlign = x < centerX;\n\n        const numberPosition = [\n          isRightAlign ? x - nailNumberOffset : x + nailNumberOffset,\n          y,\n        ];\n\n        this.ctx.textAlign = isRightAlign ? 'right' : 'left';\n        this.ctx.fillText(String(number), ...numberPosition);\n      }\n    });\n\n    this.ctx.fill();\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  toDataURL() {\n    return this.canvas.toDataURL();\n  }\n}\n","const MAX_FLOAT_DECIMALS = 6;\n\nexport function serializeConfig(pattern) {\n  const { defaultConfig, config } = pattern;\n\n  const nonDefaultConfigValues = Object.entries(config).map(([key, value]) => {\n    if (value === defaultConfig[key]) {\n      return null;\n    }\n\n    if (typeof value === 'boolean') {\n      return `!${value ? 1 : 0}`;\n    }\n\n    if (typeof value === 'number') {\n      return parseFloat(value.toFixed(MAX_FLOAT_DECIMALS));\n    }\n\n    return value;\n  });\n\n  while (nonDefaultConfigValues[nonDefaultConfigValues.length - 1] === null) {\n    nonDefaultConfigValues.pop();\n  }\n\n  if (!nonDefaultConfigValues.length) {\n    return '';\n  }\n\n  const serializedConfigValues = nonDefaultConfigValues\n    .join('_')\n    .replace(/\\_{2,}/g, match => '~' + match.length + '_');\n  return serializedConfigValues;\n}\n\nconst numberRegExp = /^\\-?\\d+(\\.\\d+)?$/;\nconst booleanRegExp = /^(?:!)([01])$/;\n\nexport function deserializeConfig(pattern, serializedCofig) {\n  const serializedConfigValues = serializedCofig\n    .replace(/(?:~)(\\d+)(?:_)/g, (_, commaCount) =>\n      new Array(+commaCount).fill('_').join('')\n    )\n    .split('_')\n    .map(v => {\n      if (v === '') {\n        return null;\n      }\n\n      if (numberRegExp.test(v)) {\n        return parseFloat(v);\n      }\n\n      const booleanMatch = v.match(booleanRegExp);\n      if (booleanMatch) {\n        return booleanMatch[1] === '1';\n      }\n\n      return v;\n    });\n\n  const configKeys = Object.keys(pattern.defaultConfig);\n\n  return serializedConfigValues.reduce((config, serializedValue, i) => {\n    if (serializedValue !== null) {\n      const key = configKeys[i];\n      return { ...config, [key]: serializedValue };\n    }\n\n    return config;\n  }, {});\n}\n","export async function share(input) {\n  try {\n    navigator.share(await getShareData(input));\n  } catch (error) {\n    alert('Error: ' + error.message);\n  }\n}\n\nexport async function isShareSupported(input) {\n  if (!navigator.share) {\n    return false;\n  }\n\n  const shareData = await getShareData(input);\n  return navigator.canShare(shareData);\n}\n\nasync function getShareData({ renderer, pattern }) {\n  const dataUrl = renderer.toDataURL();\n  const blob = await (await fetch(dataUrl)).blob();\n  const files = [\n    new File([blob], pattern.name + '.jpg', {\n      type: blob.type,\n      lastModified: new Date().getTime(),\n    }),\n  ];\n  return {\n    url: window.location.href,\n    files,\n    title: document.title,\n    text: 'String Art Studio - ' + pattern.name,\n  };\n}\n","const swFilename = 'service-worker.js';\n\nexport async function initServiceWorker() {\n  if (!navigator.serviceWorker || document.location.hostname === '127.0.0.1') {\n    return;\n  }\n\n  try {\n    const registration = await navigator.serviceWorker.register(swFilename);\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log(\n              'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n            );\n          } else {\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  } catch (error) {\n    console.error('Error during service worker registration:', error);\n  }\n}\n","import Renderer from './Renderer.js';\nimport { PI2 } from '../helpers/math_utils.js';\n\nconst SVG_NS = 'http://www.w3.org/2000/svg';\n\nexport default class SVGRenderer extends Renderer {\n  constructor(parentElement) {\n    super(parentElement);\n\n    this.svg = document.createElementNS(SVG_NS, 'svg');\n    this.svg.style.setProperty('display', 'block');\n    this.backgroundGroup = document.createElementNS(SVG_NS, 'g');\n    this.backgroundGroup.setAttribute('data-id', 'background');\n    this.linesGroup = document.createElementNS(SVG_NS, 'g');\n    this.linesGroup.setAttribute('data-id', 'lines');\n    this.nailsGroup = document.createElementNS(SVG_NS, 'g');\n    this.nailsGroup.setAttribute('data-id', 'nails');\n\n    this.nailsCirclesGroup = document.createElementNS(SVG_NS, 'g');\n    this.nailsCirclesGroup.setAttribute('data-id', 'nailsCircles');\n\n    this.nailsTextGroup = document.createElementNS(SVG_NS, 'g');\n    this.nailsTextGroup.setAttribute('data-id', 'nailsText');\n\n    this.nailsGroup.appendChild(this.nailsCirclesGroup);\n    this.nailsGroup.appendChild(this.nailsTextGroup);\n\n    this.svg.appendChild(this.backgroundGroup);\n    this.svg.appendChild(this.linesGroup);\n    this.svg.appendChild(this.nailsGroup);\n\n    this.svg.setAttribute('xmlns', SVG_NS);\n\n    parentElement.appendChild(this.svg);\n  }\n\n  get element() {\n    return this.svg;\n  }\n\n  reset() {\n    this.linesGroup.innerHTML = '';\n    this.nailsCirclesGroup.innerHTML = '';\n    this.nailsTextGroup.innerHTML = '';\n\n    const [width, height] = this.getSize().map(Math.trunc);\n    this.svg.setAttributeNS(SVG_NS, 'viewBox', `0 0 ${width} ${height}`);\n    this.svg.setAttributeNS(SVG_NS, 'width', width);\n    this.svg.setAttributeNS(SVG_NS, 'height', height);\n    this.svg.style.width = width + 'px';\n    this.svg.style.height = height + 'px';\n    this.currentColor = null;\n    this.lineWidth = null;\n  }\n\n  setColor(color) {\n    if (color !== this.currentColor) {\n      this.currentLineGroup = document.createElementNS(SVG_NS, 'g');\n      this.currentLineGroup.setAttribute('stroke', color);\n      this.currentLineGroup.setAttribute('stroke-width', this.lineWidth);\n      this.linesGroup.appendChild(this.currentLineGroup);\n      this.currentColor = color;\n    }\n  }\n\n  setLineWidth(width) {\n    this.lineWidth = width ?? '1';\n    this.linesGroup.setAttributeNS(SVG_NS, 'stroke-width', width ?? '1');\n    this.linesGroup.childNodes.forEach(group =>\n      group.setAttributeNS(SVG_NS, 'stroke-width', width ?? '1')\n    );\n  }\n\n  setBackground(color) {\n    if (color) {\n      if (!this.background) {\n        this.background = document.createElementNS(SVG_NS, 'rect');\n        this.background.setAttribute('width', '100%');\n        this.background.setAttribute('height', '100%');\n        this.backgroundGroup.appendChild(this.background);\n      }\n\n      this.background.setAttribute('fill', color);\n    } else {\n      this.background = null;\n      this.backgroundGroup.innerHTML = '';\n    }\n  }\n\n  setSize(size) {\n    super.setSize(size);\n    const [width, height] = size.map(Math.trunc);\n\n    this.svg.setAttributeNS(SVG_NS, 'viewBox', `0 0 ${width} ${height}`);\n    this.svg.setAttributeNS(SVG_NS, 'width', width);\n    this.svg.setAttributeNS(SVG_NS, 'height', height);\n  }\n  renderLines(startPosition, ...positions) {\n    let previousPoint = startPosition;\n    const fragment = document.createDocumentFragment();\n\n    for (const position of positions) {\n      const line = document.createElementNS(SVG_NS, 'line');\n      line.setAttribute('x1', Math.trunc(previousPoint[0]));\n      line.setAttribute('y1', Math.trunc(previousPoint[1]));\n      line.setAttribute('x2', Math.trunc(position[0]));\n      line.setAttribute('y2', Math.trunc(position[1]));\n      previousPoint = position;\n\n      fragment.appendChild(line);\n    }\n\n    this.currentLineGroup.appendChild(fragment);\n  }\n\n  renderNails(nails, { color, fontSize, radius, renderNumbers, margin = 0 }) {\n    const centerX = this.getSize()[0] / 2;\n    this.nailsCirclesGroup.innerHTML = this.nailsTextGroup.innerHTML = '';\n    const circlesFragment = document.createDocumentFragment();\n    const textFragment = document.createDocumentFragment();\n    this.nailsGroup.setAttribute('fill', color);\n    const nailNumberOffset = radius + margin;\n\n    this.nailsTextGroup.style.fontSize = fontSize;\n    nails.forEach(({ point: [x, y], number }) => {\n      const circle = document.createElementNS(SVG_NS, 'circle');\n      circle.setAttribute('cx', x);\n      circle.setAttribute('cy', y);\n      circle.setAttribute('r', radius);\n      circlesFragment.appendChild(circle);\n\n      if (renderNumbers && number != null) {\n        const isRightAlign = x < centerX;\n\n        const numberPosition = [\n          isRightAlign ? x - nailNumberOffset : x + nailNumberOffset,\n          y,\n        ];\n\n        const textEl = document.createElementNS(SVG_NS, 'text');\n        textEl.innerHTML = String(number);\n        textEl.setAttribute('x', numberPosition[0]);\n        textEl.setAttribute('y', numberPosition[1]);\n        if (isRightAlign) {\n          textEl.setAttribute('text-anchor', 'end');\n        }\n        textFragment.appendChild(textEl);\n      }\n    });\n\n    this.nailsCirclesGroup.appendChild(circlesFragment);\n    this.nailsTextGroup.appendChild(textFragment);\n  }\n\n  clear() {\n    this.linesGroup.innerHTML = '';\n    this.nailsGroup.innerHTML = '';\n  }\n\n  toDataURL() {\n    return '';\n  }\n}\n","import SVGRenderer from '../renderers/SVGRenderer.js';\nimport { downloadFile } from './Download.js';\n\nexport function downloadPatternAsSVG(pattern, size) {\n  const parentEl = document.createElement('article');\n  parentEl.style.width = size[0] + 'px';\n  parentEl.style.height = size[1] + 'px';\n  document.body.appendChild(parentEl);\n  const svgRenderer = new SVGRenderer(parentEl);\n\n  const PatternConstructor = pattern.constructor;\n  const svgPattern = new PatternConstructor(svgRenderer);\n\n  svgPattern.setConfig(pattern.config);\n  svgPattern.draw();\n\n  var svgData = svgPattern.renderer.svg.outerHTML;\n  var svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n  var svgUrl = URL.createObjectURL(svgBlob);\n\n  downloadFile(svgUrl, pattern.name + '.svg');\n  document.body.removeChild(parentEl);\n}\n","export function downloadFile(dataUrl, fileName) {\n  const downloadLink = document.createElement('a');\n  downloadLink.href = dataUrl;\n  downloadLink.download = fileName;\n  document.body.appendChild(downloadLink);\n  downloadLink.click();\n  document.body.removeChild(downloadLink);\n}\n"],"names":["$0cae7696affaade1$var$inputTimeout","$f5e5effd96d66274$var$canvasRenderer","$f5e5effd96d66274$var$patterns","$f5e5effd96d66274$var$currentPattern","$f5e5effd96d66274$var$controls","$cbc076be24a1f1a0$var$COLOR_CONTROLS","key","label","defaultValue","type","attr","min","max","step","show","isMultiColor","children","multicolorByLightness","repeatColors","$cbc076be24a1f1a0$export$2e2bcd8739ae039","config","multicolorRange","colorCount","minLightness","maxLightness","multicolorStart","darkMode","saturation","reverseColors","mirrorColors","multiColorStep","multiColorLightnessStep","Math","colors","Array","fill","map","_","colorIndex","lightness","_firstColor","restColors","pop","reverse","getColor","color","length","getColorMap","stepCount","Error","stepsPerColor","floor","colorMap","Map","i","set","getConfig","include","exclude","defaults","customControls","getControls","controlsConfig","filter","includes","control","finalControl","Object","freeze","$52030056f564a303$export$2e2bcd8739ae039","renderer","setConfig","nails","addedPoints","Set","nailRadius","nailsColor","nailNumbersFontSize","clear","addNail","nail","nailPoint","point","round","join","has","push","add","drawNumbers","renderNails","fontSize","radius","renderNumbers","margin","$09b9b17d86206023$export$2e2bcd8739ae039","parentElement","destroy","removeElement","element","reset","setColor","setLineWidth","width","setBackground","renderLines","startPosition","getSize","height","getBoundingClientRect","setSize","size","removeAttribute","style","toDataURL","$94a914a4d84408bc$var$COMMON_CONFIG_CONTROLS","isDisabled","showNails","showStrings","displayValue","showNailNumbers","enableBackground","customBackgroundColor","$94a914a4d84408bc$export$2e2bcd8739ae039","configControls","controls","concat","controlsIndex","_controlsIndex","$94a914a4d84408bc$var$getControlsIndex","reduce","defaultConfig","_defaultConfig","assign","$94a914a4d84408bc$var$flattenConfig","defaultValues","_config","value","currentConfig","onConfigChange","changedControlKeys","keys","resetStructure","some","isStructural","affectsStepCount","onResize","setConfigValue","controlKey","setUpDraw","previousSize","center","stringWidth","afterDraw","drawNails","initDraw","backgroundColor","draw","position","Infinity","stringsIterator","generateStrings","drawNext","done","goto","result","next","getStepCount","name","$57964bac1e0437ab$var$easing","linear","x","inOutCirc","sqrt","pow","easeOutQuint","fastSlowFast","t","cos","PI","fastInOutSquare","fastInOutCubic","fastInOutQuint","fastInOut","fastInOutFixed","fastArea","y1","y2","requirePower","requireFastArea","$86f1de0f012f559c$export$f4644083ce95e7e3","$59fce7b2f3ce133e$export$2e2bcd8739ae039","getPoint","index","realIndex","getNailIndex","points","get","angle","easingFunction","n","rotationAngle","sin","xyRadius","isReverse","serializedConfig","_serializeConfig","rotation","configCenter","v","clampedRadius","distortion","size1","size2","ratio","abs","props","indexAngle","displacementFunc","easingParams","displacementMag","displacementFastArea","easingFunctionWithParams","bind","nailsNumberStart","getNumber","number","drawRing","ringSize","prevPoint","ringDistance","prevPointIndex","isPrevSide","startPoint","positions","rotationConfig","nailsConfig","displacementConfig","options","distortionConfig","$c3aacb68e8eafa9f$var$COLOR_CONFIG","$c3aacb68e8eafa9f$export$2e2bcd8739ae039","id","link","innerLength","layers","repetition","layersCount","realRepetition","circleConfig","circle","drawSpiral","shift","currentInnerLength","repetitionCount","isPrevPoint","stepColor","nextPoint","thumbnailConfig","$252b3d5c8e3f8ea1$var$Spirals","nSpirals","radiusIncrease","angleStep","spiralRotations","maxRadius","nailsPerSpiral","angleIncrease","generatePoints","s","nailNumber","spiralIndex","centerx","centery","lastPoint","$04618c3b6078db17$export$2e2bcd8739ae039","linkText","_n","layerFill","base","stringsPerLayer","layerShift","drawTimesTable","time","toIndex","instructions","$7ca16301d1006488$export$2e2bcd8739ae039","layerSpread","layer","$fafc1a9c7b2bff91$var$SIDES","$fafc1a9c7b2bff91$var$SIDES_ORDER","$fafc1a9c7b2bff91$var$SIDES_ROTATION","left","bottom","right","top","$fafc1a9c7b2bff91$export$2e2bcd8739ae039","maxSize","nailSpacing","layerAngle","layerIndex","_getLayerProps","layerStart","theta","y","pivot","cosAngle","sinAngle","drawSide","side","layerStringCount","sideIndex","indexOf","nextSide","nextSideRotation","sideProps","_getLayerColors","layerSize","color1","color2","colorPerLayer","layerColor","drawLayer","count","sideOrder","$61558fe3531b2134$export$2e2bcd8739ae039","sideNails","sides","sideAngle","starCenterStart","circlePointsStart","sinSideAngle","cosSideAngle","circlePointsEnd","getStarPoint","centerX","centerY","getArcPoint","generateStarPoints","reverseOrder","prevSide","drawStar","innerColor","alternate","linesPerRound","rounds","linesPerThisRound","drawCircle","outterColor","isStar","ceil","pointPosition","ringColor","starAndCircleCount","$15aedcdf2bbf23c9$var$LAYER_DEFAULTS","end","$15aedcdf2bbf23c9$export$2e2bcd8739ae039","getSetUp","lineSpacing","lineNailCount","firstCirclePoint","totalNailCount","getLayer","call","enable","totalIndexCount","endIndex","indexLength","linePosition","circleIndex","self","advance","getPointIndex","$040f578548ad3f1c$export$2e2bcd8739ae039","show1","show2","show3","minNailDistance","maxShapeNailsCount","prop","circleNails","circumsference","prevCirclePoint","nextLayerIndex","forEach","$c8513f4883e70704$export$2e2bcd8739ae039","sideCount","radiusAngle","_getProps","fitSize","getSizeAndCenter","configSize","boundingRect","getBoundingRect","scale","overrideConfig","nailsSpacing","sideSize","start","nailsDistance","radiusNailsCount","nailsPerSide","radiusNailsDistance","getSidePoint","pointsMapIndex","startX","getCenterPoint","firstPoint","slice","drawCenter","drawSides","sideIndexStart","$c26799ef2d0b57d4$var$COLOR_CONFIG","$c26799ef2d0b57d4$export$2e2bcd8739ae039","polygonConfig","polygon","bezier","limitedBezier","$ce139c195fafb59f$var$COLOR_CONFIG","$ce139c195fafb59f$export$2e2bcd8739ae039","layerAngleShift","polygons","leftSide","centerIndexes","getCenterIndexes","extraNailCount","$74a174dcd7bb4c4c$var$COLOR_CONFIG","$74a174dcd7bb4c4c$export$2e2bcd8739ae039","calc","getCalc","maxSteps","angleRadians","currentSize","k","r","angleGcd","$86f1de0f012f559c$export$f81847884871263e","int1","int2","steps","$efda32ed6e872237$var$COLOR_CONFIG","$efda32ed6e872237$var$ANGLE","$efda32ed6e872237$var$SIDE_ANGLES","$60052c64d8bf9084$var$COLOR_CONFIG","$60052c64d8bf9084$var$spreadModes","evenly","f","distance","layerDistance","firstLayerDistance","$60052c64d8bf9084$export$2e2bcd8739ae039","description","entries","layerRingDistances","realColorCount","getLayerRingDistance","spread","getLayerRingStepCount","layerRingDistance","pointIndex","totalStepCount","$b0c3fd37d50c98a1$var$patternTypes","renderRing","ringPadding","renderTriangles","levels","density","globalRotation","renderCaps","ringNailCount","globalRotationRadians","ringWidth","edgeSize","nailsLength","countPerLevelSide","level","triangleHeight","triangleCenterDistance","nailDistance","triangleCount","colorPerLevel","getPoints","getTrianglePoints","isCapLevel","triangleIndexInSide","missingSide","_getNextIndexInTriangle","trianglePoints","triangleSidePoints","nNailDistance","largeDistance","smallDistance","levelsPoints","levelsCount","levelTrianglesPoints","levelSideTriangleCount","levelPositions","isFlipped","trianglePosition","atan","distanceFromCenter","sideRotation","triangleCenterAngle","rotatedTrianglePosition","generateTriangleStrings","indexInSide","initialSide","lastSide","lastIndex","isNextSide","nextSidePoint","targetSide","generateStringsBetweenTriangles","triangle1","triangle2","triangleIndex","isNextLevel","nextLevelTriangleIndex","fillColor","levelSideCount","angleShift","isLastTriangleInSide","triangle1Points","triangle2Points","generateOrderInSide","t1Side","t2Side","getNextTriangleSide","last","direction","triangleLevels","levelIndex","lastIndexInLevel","triangle","fillStepsPerTriangle","levelsWithFillBetween","triangleSteps","triangleSide","$0cae7696affaade1$var$elements","document","querySelector","controlsPanel","sidebarForm","$0cae7696affaade1$var$EVENTS","$0cae7696affaade1$var$STATE_LOCAL_STORAGE_KEY","$0cae7696affaade1$export$2e2bcd8739ae039","pattern","state","_getState","groups","eventHandlers","input","change","_toggleFieldset","e","target","nodeName","classList","toggle","groupId","dataset","group","contains","_updateState","_toggleFieldSetOnEnter","_wrappedOnInput","_onInput","addEventListener","_wrappedOnTouchStart","_onTouchStart","_wrappedOnMouseDown","_onMouseDown","controlElements","renderControls","removeEventListener","innerHTML","event","eventHandler","Function","_triggerEvent","eventData","selection","window","getSelection","removeAllRanges","getAttribute","_postponeRangeInput","currentInputRange","currentInputRangeValue","_rangeLockTimeout","setTimeout","_wrappedOnTouchEnd","_onTouchEnd","body","_wrappedOnRangeScroll","_onRangeScroll","_lockRange","clearTimeout","_postponeRangeInputTimeout","preventDefault","updateInput","inputElement","originalEvent","deferChange","inputValue","$0cae7696affaade1$var$getInputValue","parseFloat","checked","replace","innerText","triggerChange","updateControlsVisibility","updateControlsAttributes","localStorage","getItem","JSON","parse","newState","setItem","stringify","removeItem","functionAttrs","inputEl","newAttrValue","setAttribute","shouldShowControl","controlEl","shouldDisableControl","updateInputs","valueEl","containerEl","_configControls","controlsFragment","createDocumentFragment","controlId","createElement","groupTitleEl","appendChild","className","childrenContainer","selectOptions","_option","optionEl","inputValueEl","realValue","updateGroupsState","requestAnimationFrame","querySelectorAll","groupEl","groupState","remove","$c2fddc023f243ac1$var$sizeControls","$c2fddc023f243ac1$var$elements","sizeSelect","sizeCustom","orientationSelect","$c2fddc023f243ac1$var$cmToPixels","cm","dpi","$c2fddc023f243ac1$var$SCREEN_SIZE","screen","$c2fddc023f243ac1$var$SIZES","$c2fddc023f243ac1$export$2e2bcd8739ae039","getCurrentSize","sizeOptionsFragment","sizeListItem","selectedSize","selectedSizeId","find","_notifyOnChange","getValue","select","parseInt","dispatchEvent","CustomEvent","detail","from","$0f7626289e2267b9$export$2e2bcd8739ae039","canvas","ctx","getContext","dpr","devicePixelRatio","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","globalCompositeOperation","clearRect","strokeStyle","lineWidth","fillStyle","fillRect","clientWidth","clientHeight","beginPath","moveTo","lineTo","stroke","textBaseline","font","nailNumberOffset","arc","isRightAlign","numberPosition","textAlign","fillText","String","$1c740355923e6264$var$MINIMIZED_CLASS","$1c740355923e6264$export$45b50bca1da1e9b3","elements","root","thumbnails","toggleBtn","dropdown","open","close","thumbnailsRendered","createThumbnails","_onClickOutside","closest","setCurrentPattern","thumbnailsFragment","patterns","PatternType","patternLink","li","href","title","stopPropagation","addOnChangeListener","listener","removeOnChangeListener","$9a186c1e0d4394bc$var$numberRegExp","$9a186c1e0d4394bc$var$booleanRegExp","$d67425a4ba2c0fcd$export$ed80d9de1d9df928","navigator","share","$d67425a4ba2c0fcd$var$getShareData","error","alert","message","$d67425a4ba2c0fcd$export$4fa6f570da04f7cc","shareData","canShare","dataUrl","blob","fetch","files","File","lastModified","Date","getTime","url","location","text","$25a47859143ff474$export$d594efb518b3cec4","serviceWorker","hostname","registration","register","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","$aa321c2adadef428$var$SVG_NS","$aa321c2adadef428$export$2e2bcd8739ae039","svg","createElementNS","setProperty","backgroundGroup","linesGroup","nailsGroup","nailsCirclesGroup","nailsTextGroup","trunc","setAttributeNS","currentColor","currentLineGroup","childNodes","background","previousPoint","fragment","line","circlesFragment","textFragment","textEl","$1238fc7c4a906093$export$bb3b75778e3e272","fileName","downloadLink","download","click","removeChild","$f5e5effd96d66274$var$elements","downloadBtn","downloadSVGBtn","downloadNailsBtn","resetBtn","shareBtn","playerBtn","buttons","instructionsLink","$f5e5effd96d66274$var$player","parentEl","player","playerPosition","playBtn","pauseBtn","_isPlaying","play","pause","updateStatus","isPlaying","update","stringArt","removeProperty","updateStringArt","updatePosition","setInstructions","cancelAnimationFrame","renderRafId","$f5e5effd96d66274$var$sizeControls","$f5e5effd96d66274$var$thumbnails","$f5e5effd96d66274$var$main","$f5e5effd96d66274$var$updateState","$f5e5effd96d66274$var$hide","$f5e5effd96d66274$var$unHide","queryParams","URLSearchParams","search","Pattern","history","queryPattern","$f5e5effd96d66274$var$downloadCanvas","$f5e5effd96d66274$var$downloadSVG","$f5e5effd96d66274$var$downloadNailsImage","$f5e5effd96d66274$var$reset","btn","pushState","$f5e5effd96d66274$var$unselectPattern","$f5e5effd96d66274$var$setCurrentPattern","$f5e5effd96d66274$var$findPatternById","dialogId","toggleFor","toggledElement","$f5e5effd96d66274$var$initPattern","showShare","svgRenderer","svgPattern","svgBlob","Blob","outerHTML","URL","createObjectURL","confirm","$f5e5effd96d66274$var$onInputsChange","withConfig","configQuery","nonDefaultConfigValues","toFixed","match","replaceState","encodeURIComponent","setPatternOptions","$f5e5effd96d66274$var$selectPattern","serializedCofig","serializedConfigValues","commaCount","split","test","booleanMatch","configKeys","serializedValue","patternId","isFirstTime"],"version":3,"file":"string_art.0b29293a.js.map"}